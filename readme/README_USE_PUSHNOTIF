 ********************** USING THE PUSHNOTIF PLUGIN **********************
           @Author:    Amer C (amer.chamseddine@epfl.ch)
 ========================================================================


 =============================== ANDROID ================================

To use the pushnotif plugin:

You should handle 2 extra actions in your controller; you do so by adding them to the intent-filter in the service tag

	<intent-filter>
		<action android:name="org.pocketcampus.plugin.pushnotif.REGISTRATION_FINISHED" />
		<action android:name="org.pocketcampus.plugin.pushnotif.PUSHNOTIF_MESSAGE" />
		<category android:name="org.pocketcampus" />
		<data  android:scheme="pocketcampus" android:host="<your_plugin_name>.plugin.pocketcampus.org" />
	</intent-filter>


Then you should add the following permission in the manifest tag

	<uses-permission android:name="org.pocketcampus.permissions.USE_PC_PUSHNOTIF" />


Then in your onStartCommand function you should handle

	if("org.pocketcampus.plugin.pushnotif.REGISTRATION_FINISHED".equals(aIntent.getAction())) {
		Bundle extras = aIntent.getExtras();
		if(extras != null && extras.getInt("succeeded") != 0) {
		} else if(extras != null && extras.getInt("failed") != 0) {
		} else if(extras != null && extras.getInt("networkerror") != 0) {
		} else {
		}
	}
	if("org.pocketcampus.plugin.pushnotif.PUSHNOTIF_MESSAGE".equals(aIntent.getAction())) {
		Bundle extras = aIntent.getExtras(); // this will be the dict that was sent by the server
	}


Then to make sure the phone is registered, use

	Intent authIntent = new Intent("org.pocketcampus.plugin.pushnotif.REGISTER_FOR_PUSH",
			Uri.parse("pocketcampus://pushnotif.plugin.pocketcampus.org/reg_for_push"));
	authIntent.putExtra("callbackurl", "pocketcampus://<your_plugin_name>.plugin.pocketcampus.org/reg_finished");
	startService(authIntent);



 =============================== *NEW* ANDROID ================================

In addition,


	<receiver android:name="org.pocketcampus.plugin.moodle.android.MoodleController$PushNotifListener" >
		<intent-filter>
			<action android:name="org.pocketcampus.plugin.pushnotif.REGISTRATION_FINISHED" />
		</intent-filter>
	</receiver>
		   



In the code, 

	public static class PushNotifListener extends PushNotificationListener {
		@Override
		public void onReceive(Context context, Intent intent) {
			super.onReceive(context, intent);
			Log.v("DEBUG", "MoodleController$PushNotifListener push notif reg finished");
			Intent intenteye = new Intent("org.pocketcampus.plugin.pushnotif.REGISTRATION_FINISHED", 
					Uri.parse("pocketcampus://moodle.plugin.pocketcampus.org/pushnotif_reg_finished"));
			if(intent.getIntExtra("succeeded", 0) != 0)
				intenteye.putExtra("succeeded", 1);
			if(intent.getIntExtra("failed", 0) != 0)
				intenteye.putExtra("failed", 1);
			if(intent.getIntExtra("networkerror", 0) != 0)
				intenteye.putExtra("networkerror", 1);
			context.startService(intenteye);
		}
	}


Then in your onStartCommand function you should handle

	if("org.pocketcampus.plugin.pushnotif.REGISTRATION_FINISHED".equals(aIntent.getAction())) {
		Bundle extras = aIntent.getExtras();
		if(extras != null && extras.getInt("succeeded") != 0) {
			// need to re create thrift client so that pushnotif token is attached in the http headers
		} else if(extras != null && extras.getInt("failed") != 0) {
		} else if(extras != null && extras.getInt("networkerror") != 0) {
		} else {
		}
	}
	if("org.pocketcampus.plugin.pushnotif.PUSHNOTIF_MESSAGE".equals(aIntent.getAction())) {
		Bundle extras = aIntent.getExtras(); // this will be the dict that was sent by the server
	}




Then to make sure the phone is registered, use

	Intent authIntent = new Intent("org.pocketcampus.plugin.pushnotif.REGISTER_FOR_PUSH",
			Uri.parse("pocketcampus://pushnotif.plugin.pocketcampus.org/reg_for_push"));
	startService(authIntent);




 =============================== SERVER ================================

On the server, after successful login, call

	PocketCampusServer.pushNotifMap(firstArg, pluginName, userId);

	where firstArg is the first argument in the thrift request, pluginName is the name of the plugin, and userId is the ID of the user who has just logged in


On the server, when you want to send a message, use

	PocketCampusServer.pushNotifSend(pluginName, userIdList, msgMap);

	where pluginName is the name of the plugin, userIdList is the list od IDs of users to send the msg to, and msgMap is the dict to be pushed (cannot contain key pluginName)

And finally on the server implement the following function if you want to know which devices failed

	public void appendToFailedDevicesList(List<String> failed) {
	}





========================== IOS =======================
 
The first time you start your plugin, you need to make sure the notifications have been enabled. Theoretically it is required once only during the lifetime of the device, but this should be done periodically to keep the registration token up-to-date (even though it should not change). The Apple documentation encourages repeated registration.


To register, use the PushNotifController class.

self.pushController = [PushNotifController sharedInstanceToRetain];
    
[self.pushController registerDeviceForPushNotificationsWithPluginLowerIdentifier:@"<your_plugin_name_in_lowercase>" reason:@"<notifications_are_used_for_this_and_that_bla_bla" success:^{
        
        //from this point, all requests to your thrift backend will include the device token
        
    } failure:^(PushNotifDeviceRegistrationError error) {

        //you might want to try again later
        //Note: this is normal in the simulator

}];

Then, when pushNotifSend is called server side on the PushNotif plugin, it will send a push notification to mapped devices.

To handle a notification in the app, use the following code. You might want to do it in your main controller + (void)initObservers method. This way, your plugin can be opened directly when a notification is pushed (see comments)

[[PushNotifController sharedInstance] addPushNotificationObserver:self forPluginLowerIdentifier:@"<your_plugin_name_in_lowercase>" newNotificationBlock:^(NSString *notifMessage, NSDictionary *notifFullDictionary) {
        
       	//do wathever you want
	//for example, request that your plugin goes foreground:
	//[[MainController publicController] requestPluginToForeground:@"<your_plugin_name_in_lowercase>"];
	//refresh your data
    
}];

VERY IMPORTANT: each class that called the addPushNotificationObserver:self method must call the removeObserver method before being deallocated:

[[PushNotifController sharedInstance] removeObserver:self forPluginLowerIdentifier:@"<your_plugin_name_in_lowercase>"];

Otherwise, the app will crash the next time a notification arrives with this class not being present in memory anymore.

Finally, you need to copy the file etc/pocketcampus-pushnotif-dev.p12 in /etc on your server
