/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.directory.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class DirectoryPersonRole implements org.apache.thrift.TBase<DirectoryPersonRole, DirectoryPersonRole._Fields>, java.io.Serializable, Cloneable, Comparable<DirectoryPersonRole> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DirectoryPersonRole");

  private static final org.apache.thrift.protocol.TField EXTENDED_LOCALIZED_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("extendedLocalizedUnit", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOCALIZED_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("localizedTitle", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DirectoryPersonRoleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DirectoryPersonRoleTupleSchemeFactory());
  }

  private String extendedLocalizedUnit; // required
  private String localizedTitle; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXTENDED_LOCALIZED_UNIT((short)1, "extendedLocalizedUnit"),
    LOCALIZED_TITLE((short)2, "localizedTitle");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXTENDED_LOCALIZED_UNIT
          return EXTENDED_LOCALIZED_UNIT;
        case 2: // LOCALIZED_TITLE
          return LOCALIZED_TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXTENDED_LOCALIZED_UNIT, new org.apache.thrift.meta_data.FieldMetaData("extendedLocalizedUnit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALIZED_TITLE, new org.apache.thrift.meta_data.FieldMetaData("localizedTitle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DirectoryPersonRole.class, metaDataMap);
  }

  public DirectoryPersonRole() {
  }

  public DirectoryPersonRole(
    String extendedLocalizedUnit,
    String localizedTitle)
  {
    this();
    this.extendedLocalizedUnit = extendedLocalizedUnit;
    this.localizedTitle = localizedTitle;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DirectoryPersonRole(DirectoryPersonRole other) {
    if (other.isSetExtendedLocalizedUnit()) {
      this.extendedLocalizedUnit = other.extendedLocalizedUnit;
    }
    if (other.isSetLocalizedTitle()) {
      this.localizedTitle = other.localizedTitle;
    }
  }

  public DirectoryPersonRole deepCopy() {
    return new DirectoryPersonRole(this);
  }

  @Override
  public void clear() {
    this.extendedLocalizedUnit = null;
    this.localizedTitle = null;
  }

  public String getExtendedLocalizedUnit() {
    return this.extendedLocalizedUnit;
  }

  public DirectoryPersonRole setExtendedLocalizedUnit(String extendedLocalizedUnit) {
    this.extendedLocalizedUnit = extendedLocalizedUnit;
    return this;
  }

  public void unsetExtendedLocalizedUnit() {
    this.extendedLocalizedUnit = null;
  }

  /** Returns true if field extendedLocalizedUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendedLocalizedUnit() {
    return this.extendedLocalizedUnit != null;
  }

  public void setExtendedLocalizedUnitIsSet(boolean value) {
    if (!value) {
      this.extendedLocalizedUnit = null;
    }
  }

  public String getLocalizedTitle() {
    return this.localizedTitle;
  }

  public DirectoryPersonRole setLocalizedTitle(String localizedTitle) {
    this.localizedTitle = localizedTitle;
    return this;
  }

  public void unsetLocalizedTitle() {
    this.localizedTitle = null;
  }

  /** Returns true if field localizedTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalizedTitle() {
    return this.localizedTitle != null;
  }

  public void setLocalizedTitleIsSet(boolean value) {
    if (!value) {
      this.localizedTitle = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXTENDED_LOCALIZED_UNIT:
      if (value == null) {
        unsetExtendedLocalizedUnit();
      } else {
        setExtendedLocalizedUnit((String)value);
      }
      break;

    case LOCALIZED_TITLE:
      if (value == null) {
        unsetLocalizedTitle();
      } else {
        setLocalizedTitle((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXTENDED_LOCALIZED_UNIT:
      return getExtendedLocalizedUnit();

    case LOCALIZED_TITLE:
      return getLocalizedTitle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXTENDED_LOCALIZED_UNIT:
      return isSetExtendedLocalizedUnit();
    case LOCALIZED_TITLE:
      return isSetLocalizedTitle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DirectoryPersonRole)
      return this.equals((DirectoryPersonRole)that);
    return false;
  }

  public boolean equals(DirectoryPersonRole that) {
    if (that == null)
      return false;

    boolean this_present_extendedLocalizedUnit = true && this.isSetExtendedLocalizedUnit();
    boolean that_present_extendedLocalizedUnit = true && that.isSetExtendedLocalizedUnit();
    if (this_present_extendedLocalizedUnit || that_present_extendedLocalizedUnit) {
      if (!(this_present_extendedLocalizedUnit && that_present_extendedLocalizedUnit))
        return false;
      if (!this.extendedLocalizedUnit.equals(that.extendedLocalizedUnit))
        return false;
    }

    boolean this_present_localizedTitle = true && this.isSetLocalizedTitle();
    boolean that_present_localizedTitle = true && that.isSetLocalizedTitle();
    if (this_present_localizedTitle || that_present_localizedTitle) {
      if (!(this_present_localizedTitle && that_present_localizedTitle))
        return false;
      if (!this.localizedTitle.equals(that.localizedTitle))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_extendedLocalizedUnit = true && (isSetExtendedLocalizedUnit());
    list.add(present_extendedLocalizedUnit);
    if (present_extendedLocalizedUnit)
      list.add(extendedLocalizedUnit);

    boolean present_localizedTitle = true && (isSetLocalizedTitle());
    list.add(present_localizedTitle);
    if (present_localizedTitle)
      list.add(localizedTitle);

    return list.hashCode();
  }

  @Override
  public int compareTo(DirectoryPersonRole other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExtendedLocalizedUnit()).compareTo(other.isSetExtendedLocalizedUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendedLocalizedUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendedLocalizedUnit, other.extendedLocalizedUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalizedTitle()).compareTo(other.isSetLocalizedTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalizedTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localizedTitle, other.localizedTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DirectoryPersonRole(");
    boolean first = true;

    sb.append("extendedLocalizedUnit:");
    if (this.extendedLocalizedUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.extendedLocalizedUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localizedTitle:");
    if (this.localizedTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.localizedTitle);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (extendedLocalizedUnit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'extendedLocalizedUnit' was not present! Struct: " + toString());
    }
    if (localizedTitle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'localizedTitle' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DirectoryPersonRoleStandardSchemeFactory implements SchemeFactory {
    public DirectoryPersonRoleStandardScheme getScheme() {
      return new DirectoryPersonRoleStandardScheme();
    }
  }

  private static class DirectoryPersonRoleStandardScheme extends StandardScheme<DirectoryPersonRole> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DirectoryPersonRole struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXTENDED_LOCALIZED_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extendedLocalizedUnit = iprot.readString();
              struct.setExtendedLocalizedUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCALIZED_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localizedTitle = iprot.readString();
              struct.setLocalizedTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DirectoryPersonRole struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.extendedLocalizedUnit != null) {
        oprot.writeFieldBegin(EXTENDED_LOCALIZED_UNIT_FIELD_DESC);
        oprot.writeString(struct.extendedLocalizedUnit);
        oprot.writeFieldEnd();
      }
      if (struct.localizedTitle != null) {
        oprot.writeFieldBegin(LOCALIZED_TITLE_FIELD_DESC);
        oprot.writeString(struct.localizedTitle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DirectoryPersonRoleTupleSchemeFactory implements SchemeFactory {
    public DirectoryPersonRoleTupleScheme getScheme() {
      return new DirectoryPersonRoleTupleScheme();
    }
  }

  private static class DirectoryPersonRoleTupleScheme extends TupleScheme<DirectoryPersonRole> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DirectoryPersonRole struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.extendedLocalizedUnit);
      oprot.writeString(struct.localizedTitle);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DirectoryPersonRole struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.extendedLocalizedUnit = iprot.readString();
      struct.setExtendedLocalizedUnitIsSet(true);
      struct.localizedTitle = iprot.readString();
      struct.setLocalizedTitleIsSet(true);
    }
  }

}

