/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.directory.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Person implements org.apache.thrift.TBase<Person, Person._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Person");

  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SCIPER_FIELD_DESC = new org.apache.thrift.protocol.TField("sciper", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WEB_FIELD_DESC = new org.apache.thrift.protocol.TField("web", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRIVATE_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("privatePhoneNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OFFICE_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("officePhoneNumber", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OFFICE_FIELD_DESC = new org.apache.thrift.protocol.TField("office", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GASPAR_FIELD_DESC = new org.apache.thrift.protocol.TField("gaspar", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ORGANISATIONAL_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("OrganisationalUnit", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pictureUrl", org.apache.thrift.protocol.TType.STRING, (short)11);

  public String firstName; // required
  public String lastName; // required
  public String sciper; // required
  public String email; // required
  public String web; // required
  public String privatePhoneNumber; // required
  public String officePhoneNumber; // required
  public String office; // required
  public String gaspar; // required
  public List<String> OrganisationalUnit; // required
  public String pictureUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_NAME((short)1, "firstName"),
    LAST_NAME((short)2, "lastName"),
    SCIPER((short)3, "sciper"),
    EMAIL((short)4, "email"),
    WEB((short)5, "web"),
    PRIVATE_PHONE_NUMBER((short)6, "privatePhoneNumber"),
    OFFICE_PHONE_NUMBER((short)7, "officePhoneNumber"),
    OFFICE((short)8, "office"),
    GASPAR((short)9, "gaspar"),
    ORGANISATIONAL_UNIT((short)10, "OrganisationalUnit"),
    PICTURE_URL((short)11, "pictureUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_NAME
          return FIRST_NAME;
        case 2: // LAST_NAME
          return LAST_NAME;
        case 3: // SCIPER
          return SCIPER;
        case 4: // EMAIL
          return EMAIL;
        case 5: // WEB
          return WEB;
        case 6: // PRIVATE_PHONE_NUMBER
          return PRIVATE_PHONE_NUMBER;
        case 7: // OFFICE_PHONE_NUMBER
          return OFFICE_PHONE_NUMBER;
        case 8: // OFFICE
          return OFFICE;
        case 9: // GASPAR
          return GASPAR;
        case 10: // ORGANISATIONAL_UNIT
          return ORGANISATIONAL_UNIT;
        case 11: // PICTURE_URL
          return PICTURE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCIPER, new org.apache.thrift.meta_data.FieldMetaData("sciper", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEB, new org.apache.thrift.meta_data.FieldMetaData("web", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVATE_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("privatePhoneNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICE_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("officePhoneNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICE, new org.apache.thrift.meta_data.FieldMetaData("office", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GASPAR, new org.apache.thrift.meta_data.FieldMetaData("gaspar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANISATIONAL_UNIT, new org.apache.thrift.meta_data.FieldMetaData("OrganisationalUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PICTURE_URL, new org.apache.thrift.meta_data.FieldMetaData("pictureUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Person.class, metaDataMap);
  }

  public Person() {
  }

  public Person(
    String firstName,
    String lastName,
    String sciper)
  {
    this();
    this.firstName = firstName;
    this.lastName = lastName;
    this.sciper = sciper;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Person(Person other) {
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    if (other.isSetSciper()) {
      this.sciper = other.sciper;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetWeb()) {
      this.web = other.web;
    }
    if (other.isSetPrivatePhoneNumber()) {
      this.privatePhoneNumber = other.privatePhoneNumber;
    }
    if (other.isSetOfficePhoneNumber()) {
      this.officePhoneNumber = other.officePhoneNumber;
    }
    if (other.isSetOffice()) {
      this.office = other.office;
    }
    if (other.isSetGaspar()) {
      this.gaspar = other.gaspar;
    }
    if (other.isSetOrganisationalUnit()) {
      List<String> __this__OrganisationalUnit = new ArrayList<String>();
      for (String other_element : other.OrganisationalUnit) {
        __this__OrganisationalUnit.add(other_element);
      }
      this.OrganisationalUnit = __this__OrganisationalUnit;
    }
    if (other.isSetPictureUrl()) {
      this.pictureUrl = other.pictureUrl;
    }
  }

  public Person deepCopy() {
    return new Person(this);
  }

  @Override
  public void clear() {
    this.firstName = null;
    this.lastName = null;
    this.sciper = null;
    this.email = null;
    this.web = null;
    this.privatePhoneNumber = null;
    this.officePhoneNumber = null;
    this.office = null;
    this.gaspar = null;
    this.OrganisationalUnit = null;
    this.pictureUrl = null;
  }

  public String getFirstName() {
    return this.firstName;
  }

  public Person setFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getLastName() {
    return this.lastName;
  }

  public Person setLastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public String getSciper() {
    return this.sciper;
  }

  public Person setSciper(String sciper) {
    this.sciper = sciper;
    return this;
  }

  public void unsetSciper() {
    this.sciper = null;
  }

  /** Returns true if field sciper is set (has been assigned a value) and false otherwise */
  public boolean isSetSciper() {
    return this.sciper != null;
  }

  public void setSciperIsSet(boolean value) {
    if (!value) {
      this.sciper = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public Person setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getWeb() {
    return this.web;
  }

  public Person setWeb(String web) {
    this.web = web;
    return this;
  }

  public void unsetWeb() {
    this.web = null;
  }

  /** Returns true if field web is set (has been assigned a value) and false otherwise */
  public boolean isSetWeb() {
    return this.web != null;
  }

  public void setWebIsSet(boolean value) {
    if (!value) {
      this.web = null;
    }
  }

  public String getPrivatePhoneNumber() {
    return this.privatePhoneNumber;
  }

  public Person setPrivatePhoneNumber(String privatePhoneNumber) {
    this.privatePhoneNumber = privatePhoneNumber;
    return this;
  }

  public void unsetPrivatePhoneNumber() {
    this.privatePhoneNumber = null;
  }

  /** Returns true if field privatePhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivatePhoneNumber() {
    return this.privatePhoneNumber != null;
  }

  public void setPrivatePhoneNumberIsSet(boolean value) {
    if (!value) {
      this.privatePhoneNumber = null;
    }
  }

  public String getOfficePhoneNumber() {
    return this.officePhoneNumber;
  }

  public Person setOfficePhoneNumber(String officePhoneNumber) {
    this.officePhoneNumber = officePhoneNumber;
    return this;
  }

  public void unsetOfficePhoneNumber() {
    this.officePhoneNumber = null;
  }

  /** Returns true if field officePhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficePhoneNumber() {
    return this.officePhoneNumber != null;
  }

  public void setOfficePhoneNumberIsSet(boolean value) {
    if (!value) {
      this.officePhoneNumber = null;
    }
  }

  public String getOffice() {
    return this.office;
  }

  public Person setOffice(String office) {
    this.office = office;
    return this;
  }

  public void unsetOffice() {
    this.office = null;
  }

  /** Returns true if field office is set (has been assigned a value) and false otherwise */
  public boolean isSetOffice() {
    return this.office != null;
  }

  public void setOfficeIsSet(boolean value) {
    if (!value) {
      this.office = null;
    }
  }

  public String getGaspar() {
    return this.gaspar;
  }

  public Person setGaspar(String gaspar) {
    this.gaspar = gaspar;
    return this;
  }

  public void unsetGaspar() {
    this.gaspar = null;
  }

  /** Returns true if field gaspar is set (has been assigned a value) and false otherwise */
  public boolean isSetGaspar() {
    return this.gaspar != null;
  }

  public void setGasparIsSet(boolean value) {
    if (!value) {
      this.gaspar = null;
    }
  }

  public int getOrganisationalUnitSize() {
    return (this.OrganisationalUnit == null) ? 0 : this.OrganisationalUnit.size();
  }

  public java.util.Iterator<String> getOrganisationalUnitIterator() {
    return (this.OrganisationalUnit == null) ? null : this.OrganisationalUnit.iterator();
  }

  public void addToOrganisationalUnit(String elem) {
    if (this.OrganisationalUnit == null) {
      this.OrganisationalUnit = new ArrayList<String>();
    }
    this.OrganisationalUnit.add(elem);
  }

  public List<String> getOrganisationalUnit() {
    return this.OrganisationalUnit;
  }

  public Person setOrganisationalUnit(List<String> OrganisationalUnit) {
    this.OrganisationalUnit = OrganisationalUnit;
    return this;
  }

  public void unsetOrganisationalUnit() {
    this.OrganisationalUnit = null;
  }

  /** Returns true if field OrganisationalUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganisationalUnit() {
    return this.OrganisationalUnit != null;
  }

  public void setOrganisationalUnitIsSet(boolean value) {
    if (!value) {
      this.OrganisationalUnit = null;
    }
  }

  public String getPictureUrl() {
    return this.pictureUrl;
  }

  public Person setPictureUrl(String pictureUrl) {
    this.pictureUrl = pictureUrl;
    return this;
  }

  public void unsetPictureUrl() {
    this.pictureUrl = null;
  }

  /** Returns true if field pictureUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPictureUrl() {
    return this.pictureUrl != null;
  }

  public void setPictureUrlIsSet(boolean value) {
    if (!value) {
      this.pictureUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((String)value);
      }
      break;

    case SCIPER:
      if (value == null) {
        unsetSciper();
      } else {
        setSciper((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case WEB:
      if (value == null) {
        unsetWeb();
      } else {
        setWeb((String)value);
      }
      break;

    case PRIVATE_PHONE_NUMBER:
      if (value == null) {
        unsetPrivatePhoneNumber();
      } else {
        setPrivatePhoneNumber((String)value);
      }
      break;

    case OFFICE_PHONE_NUMBER:
      if (value == null) {
        unsetOfficePhoneNumber();
      } else {
        setOfficePhoneNumber((String)value);
      }
      break;

    case OFFICE:
      if (value == null) {
        unsetOffice();
      } else {
        setOffice((String)value);
      }
      break;

    case GASPAR:
      if (value == null) {
        unsetGaspar();
      } else {
        setGaspar((String)value);
      }
      break;

    case ORGANISATIONAL_UNIT:
      if (value == null) {
        unsetOrganisationalUnit();
      } else {
        setOrganisationalUnit((List<String>)value);
      }
      break;

    case PICTURE_URL:
      if (value == null) {
        unsetPictureUrl();
      } else {
        setPictureUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_NAME:
      return getFirstName();

    case LAST_NAME:
      return getLastName();

    case SCIPER:
      return getSciper();

    case EMAIL:
      return getEmail();

    case WEB:
      return getWeb();

    case PRIVATE_PHONE_NUMBER:
      return getPrivatePhoneNumber();

    case OFFICE_PHONE_NUMBER:
      return getOfficePhoneNumber();

    case OFFICE:
      return getOffice();

    case GASPAR:
      return getGaspar();

    case ORGANISATIONAL_UNIT:
      return getOrganisationalUnit();

    case PICTURE_URL:
      return getPictureUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_NAME:
      return isSetFirstName();
    case LAST_NAME:
      return isSetLastName();
    case SCIPER:
      return isSetSciper();
    case EMAIL:
      return isSetEmail();
    case WEB:
      return isSetWeb();
    case PRIVATE_PHONE_NUMBER:
      return isSetPrivatePhoneNumber();
    case OFFICE_PHONE_NUMBER:
      return isSetOfficePhoneNumber();
    case OFFICE:
      return isSetOffice();
    case GASPAR:
      return isSetGaspar();
    case ORGANISATIONAL_UNIT:
      return isSetOrganisationalUnit();
    case PICTURE_URL:
      return isSetPictureUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Person)
      return this.equals((Person)that);
    return false;
  }

  public boolean equals(Person that) {
    if (that == null)
      return false;


    boolean this_present_sciper = true && this.isSetSciper();
    boolean that_present_sciper = true && that.isSetSciper();
    if (this_present_sciper || that_present_sciper) {
      if (!(this_present_sciper && that_present_sciper))
        return false;
      if (!this.sciper.equals(that.sciper))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_firstName = true && (isSetFirstName());
    builder.append(present_firstName);
    if (present_firstName)
      builder.append(firstName);

    boolean present_lastName = true && (isSetLastName());
    builder.append(present_lastName);
    if (present_lastName)
      builder.append(lastName);

    boolean present_sciper = true && (isSetSciper());
    builder.append(present_sciper);
    if (present_sciper)
      builder.append(sciper);

    boolean present_email = true && (isSetEmail());
    builder.append(present_email);
    if (present_email)
      builder.append(email);

    boolean present_web = true && (isSetWeb());
    builder.append(present_web);
    if (present_web)
      builder.append(web);

    boolean present_privatePhoneNumber = true && (isSetPrivatePhoneNumber());
    builder.append(present_privatePhoneNumber);
    if (present_privatePhoneNumber)
      builder.append(privatePhoneNumber);

    boolean present_officePhoneNumber = true && (isSetOfficePhoneNumber());
    builder.append(present_officePhoneNumber);
    if (present_officePhoneNumber)
      builder.append(officePhoneNumber);

    boolean present_office = true && (isSetOffice());
    builder.append(present_office);
    if (present_office)
      builder.append(office);

    boolean present_gaspar = true && (isSetGaspar());
    builder.append(present_gaspar);
    if (present_gaspar)
      builder.append(gaspar);

    boolean present_OrganisationalUnit = true && (isSetOrganisationalUnit());
    builder.append(present_OrganisationalUnit);
    if (present_OrganisationalUnit)
      builder.append(OrganisationalUnit);

    boolean present_pictureUrl = true && (isSetPictureUrl());
    builder.append(present_pictureUrl);
    if (present_pictureUrl)
      builder.append(pictureUrl);

    return builder.toHashCode();
  }

  public int compareTo(Person other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Person typedOther = (Person)other;

    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(typedOther.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, typedOther.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastName()).compareTo(typedOther.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, typedOther.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSciper()).compareTo(typedOther.isSetSciper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSciper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sciper, typedOther.sciper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeb()).compareTo(typedOther.isSetWeb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.web, typedOther.web);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivatePhoneNumber()).compareTo(typedOther.isSetPrivatePhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivatePhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privatePhoneNumber, typedOther.privatePhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficePhoneNumber()).compareTo(typedOther.isSetOfficePhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficePhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officePhoneNumber, typedOther.officePhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffice()).compareTo(typedOther.isSetOffice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.office, typedOther.office);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGaspar()).compareTo(typedOther.isSetGaspar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGaspar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gaspar, typedOther.gaspar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganisationalUnit()).compareTo(typedOther.isSetOrganisationalUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganisationalUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OrganisationalUnit, typedOther.OrganisationalUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPictureUrl()).compareTo(typedOther.isSetPictureUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPictureUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pictureUrl, typedOther.pictureUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // FIRST_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.firstName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LAST_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.lastName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SCIPER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.sciper = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // EMAIL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.email = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // WEB
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.web = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PRIVATE_PHONE_NUMBER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.privatePhoneNumber = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // OFFICE_PHONE_NUMBER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.officePhoneNumber = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // OFFICE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.office = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // GASPAR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.gaspar = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // ORGANISATIONAL_UNIT
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.OrganisationalUnit = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2; // required
                _elem2 = iprot.readString();
                this.OrganisationalUnit.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // PICTURE_URL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.pictureUrl = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.firstName != null) {
      oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
      oprot.writeString(this.firstName);
      oprot.writeFieldEnd();
    }
    if (this.lastName != null) {
      oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
      oprot.writeString(this.lastName);
      oprot.writeFieldEnd();
    }
    if (this.sciper != null) {
      oprot.writeFieldBegin(SCIPER_FIELD_DESC);
      oprot.writeString(this.sciper);
      oprot.writeFieldEnd();
    }
    if (this.email != null) {
      if (isSetEmail()) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
    }
    if (this.web != null) {
      if (isSetWeb()) {
        oprot.writeFieldBegin(WEB_FIELD_DESC);
        oprot.writeString(this.web);
        oprot.writeFieldEnd();
      }
    }
    if (this.privatePhoneNumber != null) {
      if (isSetPrivatePhoneNumber()) {
        oprot.writeFieldBegin(PRIVATE_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(this.privatePhoneNumber);
        oprot.writeFieldEnd();
      }
    }
    if (this.officePhoneNumber != null) {
      if (isSetOfficePhoneNumber()) {
        oprot.writeFieldBegin(OFFICE_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(this.officePhoneNumber);
        oprot.writeFieldEnd();
      }
    }
    if (this.office != null) {
      if (isSetOffice()) {
        oprot.writeFieldBegin(OFFICE_FIELD_DESC);
        oprot.writeString(this.office);
        oprot.writeFieldEnd();
      }
    }
    if (this.gaspar != null) {
      if (isSetGaspar()) {
        oprot.writeFieldBegin(GASPAR_FIELD_DESC);
        oprot.writeString(this.gaspar);
        oprot.writeFieldEnd();
      }
    }
    if (this.OrganisationalUnit != null) {
      if (isSetOrganisationalUnit()) {
        oprot.writeFieldBegin(ORGANISATIONAL_UNIT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.OrganisationalUnit.size()));
          for (String _iter3 : this.OrganisationalUnit)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.pictureUrl != null) {
      if (isSetPictureUrl()) {
        oprot.writeFieldBegin(PICTURE_URL_FIELD_DESC);
        oprot.writeString(this.pictureUrl);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Person(");
    boolean first = true;

    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastName:");
    if (this.lastName == null) {
      sb.append("null");
    } else {
      sb.append(this.lastName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sciper:");
    if (this.sciper == null) {
      sb.append("null");
    } else {
      sb.append(this.sciper);
    }
    first = false;
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetWeb()) {
      if (!first) sb.append(", ");
      sb.append("web:");
      if (this.web == null) {
        sb.append("null");
      } else {
        sb.append(this.web);
      }
      first = false;
    }
    if (isSetPrivatePhoneNumber()) {
      if (!first) sb.append(", ");
      sb.append("privatePhoneNumber:");
      if (this.privatePhoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.privatePhoneNumber);
      }
      first = false;
    }
    if (isSetOfficePhoneNumber()) {
      if (!first) sb.append(", ");
      sb.append("officePhoneNumber:");
      if (this.officePhoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.officePhoneNumber);
      }
      first = false;
    }
    if (isSetOffice()) {
      if (!first) sb.append(", ");
      sb.append("office:");
      if (this.office == null) {
        sb.append("null");
      } else {
        sb.append(this.office);
      }
      first = false;
    }
    if (isSetGaspar()) {
      if (!first) sb.append(", ");
      sb.append("gaspar:");
      if (this.gaspar == null) {
        sb.append("null");
      } else {
        sb.append(this.gaspar);
      }
      first = false;
    }
    if (isSetOrganisationalUnit()) {
      if (!first) sb.append(", ");
      sb.append("OrganisationalUnit:");
      if (this.OrganisationalUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.OrganisationalUnit);
      }
      first = false;
    }
    if (isSetPictureUrl()) {
      if (!first) sb.append(", ");
      sb.append("pictureUrl:");
      if (this.pictureUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.pictureUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (firstName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'firstName' was not present! Struct: " + toString());
    }
    if (lastName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastName' was not present! Struct: " + toString());
    }
    if (sciper == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sciper' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

