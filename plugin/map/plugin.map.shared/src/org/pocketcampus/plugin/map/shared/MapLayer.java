/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.map.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MapLayer implements org.apache.thrift.TBase<MapLayer, MapLayer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MapLayer");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FOR_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("nameForQuery", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FOR_QUERY_ALL_FLOORS_FIELD_DESC = new org.apache.thrift.protocol.TField("nameForQueryAllFloors", org.apache.thrift.protocol.TType.STRING, (short)3);

  private String name; // required
  private String nameForQuery; // required
  private String nameForQueryAllFloors; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    NAME_FOR_QUERY((short)2, "nameForQuery"),
    NAME_FOR_QUERY_ALL_FLOORS((short)3, "nameForQueryAllFloors");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // NAME_FOR_QUERY
          return NAME_FOR_QUERY;
        case 3: // NAME_FOR_QUERY_ALL_FLOORS
          return NAME_FOR_QUERY_ALL_FLOORS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_FOR_QUERY, new org.apache.thrift.meta_data.FieldMetaData("nameForQuery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_FOR_QUERY_ALL_FLOORS, new org.apache.thrift.meta_data.FieldMetaData("nameForQueryAllFloors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MapLayer.class, metaDataMap);
  }

  public MapLayer() {
  }

  public MapLayer(
    String name)
  {
    this();
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MapLayer(MapLayer other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetNameForQuery()) {
      this.nameForQuery = other.nameForQuery;
    }
    if (other.isSetNameForQueryAllFloors()) {
      this.nameForQueryAllFloors = other.nameForQueryAllFloors;
    }
  }

  public MapLayer deepCopy() {
    return new MapLayer(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.nameForQuery = null;
    this.nameForQueryAllFloors = null;
  }

  public String getName() {
    return this.name;
  }

  public MapLayer setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getNameForQuery() {
    return this.nameForQuery;
  }

  public MapLayer setNameForQuery(String nameForQuery) {
    this.nameForQuery = nameForQuery;
    return this;
  }

  public void unsetNameForQuery() {
    this.nameForQuery = null;
  }

  /** Returns true if field nameForQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetNameForQuery() {
    return this.nameForQuery != null;
  }

  public void setNameForQueryIsSet(boolean value) {
    if (!value) {
      this.nameForQuery = null;
    }
  }

  public String getNameForQueryAllFloors() {
    return this.nameForQueryAllFloors;
  }

  public MapLayer setNameForQueryAllFloors(String nameForQueryAllFloors) {
    this.nameForQueryAllFloors = nameForQueryAllFloors;
    return this;
  }

  public void unsetNameForQueryAllFloors() {
    this.nameForQueryAllFloors = null;
  }

  /** Returns true if field nameForQueryAllFloors is set (has been assigned a value) and false otherwise */
  public boolean isSetNameForQueryAllFloors() {
    return this.nameForQueryAllFloors != null;
  }

  public void setNameForQueryAllFloorsIsSet(boolean value) {
    if (!value) {
      this.nameForQueryAllFloors = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NAME_FOR_QUERY:
      if (value == null) {
        unsetNameForQuery();
      } else {
        setNameForQuery((String)value);
      }
      break;

    case NAME_FOR_QUERY_ALL_FLOORS:
      if (value == null) {
        unsetNameForQueryAllFloors();
      } else {
        setNameForQueryAllFloors((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case NAME_FOR_QUERY:
      return getNameForQuery();

    case NAME_FOR_QUERY_ALL_FLOORS:
      return getNameForQueryAllFloors();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case NAME_FOR_QUERY:
      return isSetNameForQuery();
    case NAME_FOR_QUERY_ALL_FLOORS:
      return isSetNameForQueryAllFloors();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MapLayer)
      return this.equals((MapLayer)that);
    return false;
  }

  public boolean equals(MapLayer that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_nameForQuery = true && this.isSetNameForQuery();
    boolean that_present_nameForQuery = true && that.isSetNameForQuery();
    if (this_present_nameForQuery || that_present_nameForQuery) {
      if (!(this_present_nameForQuery && that_present_nameForQuery))
        return false;
      if (!this.nameForQuery.equals(that.nameForQuery))
        return false;
    }

    boolean this_present_nameForQueryAllFloors = true && this.isSetNameForQueryAllFloors();
    boolean that_present_nameForQueryAllFloors = true && that.isSetNameForQueryAllFloors();
    if (this_present_nameForQueryAllFloors || that_present_nameForQueryAllFloors) {
      if (!(this_present_nameForQueryAllFloors && that_present_nameForQueryAllFloors))
        return false;
      if (!this.nameForQueryAllFloors.equals(that.nameForQueryAllFloors))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_nameForQuery = true && (isSetNameForQuery());
    builder.append(present_nameForQuery);
    if (present_nameForQuery)
      builder.append(nameForQuery);

    boolean present_nameForQueryAllFloors = true && (isSetNameForQueryAllFloors());
    builder.append(present_nameForQueryAllFloors);
    if (present_nameForQueryAllFloors)
      builder.append(nameForQueryAllFloors);

    return builder.toHashCode();
  }

  public int compareTo(MapLayer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MapLayer typedOther = (MapLayer)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameForQuery()).compareTo(typedOther.isSetNameForQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameForQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameForQuery, typedOther.nameForQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameForQueryAllFloors()).compareTo(typedOther.isSetNameForQueryAllFloors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameForQueryAllFloors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameForQueryAllFloors, typedOther.nameForQueryAllFloors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME_FOR_QUERY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.nameForQuery = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NAME_FOR_QUERY_ALL_FLOORS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.nameForQueryAllFloors = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.nameForQuery != null) {
      if (isSetNameForQuery()) {
        oprot.writeFieldBegin(NAME_FOR_QUERY_FIELD_DESC);
        oprot.writeString(this.nameForQuery);
        oprot.writeFieldEnd();
      }
    }
    if (this.nameForQueryAllFloors != null) {
      if (isSetNameForQueryAllFloors()) {
        oprot.writeFieldBegin(NAME_FOR_QUERY_ALL_FLOORS_FIELD_DESC);
        oprot.writeString(this.nameForQueryAllFloors);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MapLayer(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetNameForQuery()) {
      if (!first) sb.append(", ");
      sb.append("nameForQuery:");
      if (this.nameForQuery == null) {
        sb.append("null");
      } else {
        sb.append(this.nameForQuery);
      }
      first = false;
    }
    if (isSetNameForQueryAllFloors()) {
      if (!first) sb.append(", ");
      sb.append("nameForQueryAllFloors:");
      if (this.nameForQueryAllFloors == null) {
        sb.append("null");
      } else {
        sb.append(this.nameForQueryAllFloors);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

