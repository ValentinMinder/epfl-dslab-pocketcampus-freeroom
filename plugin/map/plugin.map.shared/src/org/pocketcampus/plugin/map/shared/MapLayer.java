/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.map.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class MapLayer implements org.apache.thrift.TBase<MapLayer, MapLayer._Fields>, java.io.Serializable, Cloneable, Comparable<MapLayer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MapLayer");

  private static final org.apache.thrift.protocol.TField LAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("layerId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FOR_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("nameForQuery", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FOR_QUERY_ALL_FLOORS_FIELD_DESC = new org.apache.thrift.protocol.TField("nameForQueryAllFloors", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MapLayerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MapLayerTupleSchemeFactory());
  }

  private long layerId; // required
  private String name; // required
  private String nameForQuery; // optional
  private String nameForQueryAllFloors; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAYER_ID((short)1, "layerId"),
    NAME((short)2, "name"),
    NAME_FOR_QUERY((short)3, "nameForQuery"),
    NAME_FOR_QUERY_ALL_FLOORS((short)4, "nameForQueryAllFloors");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAYER_ID
          return LAYER_ID;
        case 2: // NAME
          return NAME;
        case 3: // NAME_FOR_QUERY
          return NAME_FOR_QUERY;
        case 4: // NAME_FOR_QUERY_ALL_FLOORS
          return NAME_FOR_QUERY_ALL_FLOORS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAYERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME_FOR_QUERY,_Fields.NAME_FOR_QUERY_ALL_FLOORS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("layerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_FOR_QUERY, new org.apache.thrift.meta_data.FieldMetaData("nameForQuery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_FOR_QUERY_ALL_FLOORS, new org.apache.thrift.meta_data.FieldMetaData("nameForQueryAllFloors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MapLayer.class, metaDataMap);
  }

  public MapLayer() {
  }

  public MapLayer(
    long layerId,
    String name)
  {
    this();
    this.layerId = layerId;
    setLayerIdIsSet(true);
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MapLayer(MapLayer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.layerId = other.layerId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetNameForQuery()) {
      this.nameForQuery = other.nameForQuery;
    }
    if (other.isSetNameForQueryAllFloors()) {
      this.nameForQueryAllFloors = other.nameForQueryAllFloors;
    }
  }

  public MapLayer deepCopy() {
    return new MapLayer(this);
  }

  @Override
  public void clear() {
    setLayerIdIsSet(false);
    this.layerId = 0;
    this.name = null;
    this.nameForQuery = null;
    this.nameForQueryAllFloors = null;
  }

  public long getLayerId() {
    return this.layerId;
  }

  public MapLayer setLayerId(long layerId) {
    this.layerId = layerId;
    setLayerIdIsSet(true);
    return this;
  }

  public void unsetLayerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAYERID_ISSET_ID);
  }

  /** Returns true if field layerId is set (has been assigned a value) and false otherwise */
  public boolean isSetLayerId() {
    return EncodingUtils.testBit(__isset_bitfield, __LAYERID_ISSET_ID);
  }

  public void setLayerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAYERID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public MapLayer setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getNameForQuery() {
    return this.nameForQuery;
  }

  public MapLayer setNameForQuery(String nameForQuery) {
    this.nameForQuery = nameForQuery;
    return this;
  }

  public void unsetNameForQuery() {
    this.nameForQuery = null;
  }

  /** Returns true if field nameForQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetNameForQuery() {
    return this.nameForQuery != null;
  }

  public void setNameForQueryIsSet(boolean value) {
    if (!value) {
      this.nameForQuery = null;
    }
  }

  public String getNameForQueryAllFloors() {
    return this.nameForQueryAllFloors;
  }

  public MapLayer setNameForQueryAllFloors(String nameForQueryAllFloors) {
    this.nameForQueryAllFloors = nameForQueryAllFloors;
    return this;
  }

  public void unsetNameForQueryAllFloors() {
    this.nameForQueryAllFloors = null;
  }

  /** Returns true if field nameForQueryAllFloors is set (has been assigned a value) and false otherwise */
  public boolean isSetNameForQueryAllFloors() {
    return this.nameForQueryAllFloors != null;
  }

  public void setNameForQueryAllFloorsIsSet(boolean value) {
    if (!value) {
      this.nameForQueryAllFloors = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAYER_ID:
      if (value == null) {
        unsetLayerId();
      } else {
        setLayerId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NAME_FOR_QUERY:
      if (value == null) {
        unsetNameForQuery();
      } else {
        setNameForQuery((String)value);
      }
      break;

    case NAME_FOR_QUERY_ALL_FLOORS:
      if (value == null) {
        unsetNameForQueryAllFloors();
      } else {
        setNameForQueryAllFloors((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAYER_ID:
      return Long.valueOf(getLayerId());

    case NAME:
      return getName();

    case NAME_FOR_QUERY:
      return getNameForQuery();

    case NAME_FOR_QUERY_ALL_FLOORS:
      return getNameForQueryAllFloors();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAYER_ID:
      return isSetLayerId();
    case NAME:
      return isSetName();
    case NAME_FOR_QUERY:
      return isSetNameForQuery();
    case NAME_FOR_QUERY_ALL_FLOORS:
      return isSetNameForQueryAllFloors();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MapLayer)
      return this.equals((MapLayer)that);
    return false;
  }

  public boolean equals(MapLayer that) {
    if (that == null)
      return false;

    boolean this_present_layerId = true;
    boolean that_present_layerId = true;
    if (this_present_layerId || that_present_layerId) {
      if (!(this_present_layerId && that_present_layerId))
        return false;
      if (this.layerId != that.layerId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_nameForQuery = true && this.isSetNameForQuery();
    boolean that_present_nameForQuery = true && that.isSetNameForQuery();
    if (this_present_nameForQuery || that_present_nameForQuery) {
      if (!(this_present_nameForQuery && that_present_nameForQuery))
        return false;
      if (!this.nameForQuery.equals(that.nameForQuery))
        return false;
    }

    boolean this_present_nameForQueryAllFloors = true && this.isSetNameForQueryAllFloors();
    boolean that_present_nameForQueryAllFloors = true && that.isSetNameForQueryAllFloors();
    if (this_present_nameForQueryAllFloors || that_present_nameForQueryAllFloors) {
      if (!(this_present_nameForQueryAllFloors && that_present_nameForQueryAllFloors))
        return false;
      if (!this.nameForQueryAllFloors.equals(that.nameForQueryAllFloors))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_layerId = true;
    list.add(present_layerId);
    if (present_layerId)
      list.add(layerId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_nameForQuery = true && (isSetNameForQuery());
    list.add(present_nameForQuery);
    if (present_nameForQuery)
      list.add(nameForQuery);

    boolean present_nameForQueryAllFloors = true && (isSetNameForQueryAllFloors());
    list.add(present_nameForQueryAllFloors);
    if (present_nameForQueryAllFloors)
      list.add(nameForQueryAllFloors);

    return list.hashCode();
  }

  @Override
  public int compareTo(MapLayer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLayerId()).compareTo(other.isSetLayerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLayerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.layerId, other.layerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameForQuery()).compareTo(other.isSetNameForQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameForQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameForQuery, other.nameForQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameForQueryAllFloors()).compareTo(other.isSetNameForQueryAllFloors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameForQueryAllFloors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameForQueryAllFloors, other.nameForQueryAllFloors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MapLayer(");
    boolean first = true;

    sb.append("layerId:");
    sb.append(this.layerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetNameForQuery()) {
      if (!first) sb.append(", ");
      sb.append("nameForQuery:");
      if (this.nameForQuery == null) {
        sb.append("null");
      } else {
        sb.append(this.nameForQuery);
      }
      first = false;
    }
    if (isSetNameForQueryAllFloors()) {
      if (!first) sb.append(", ");
      sb.append("nameForQueryAllFloors:");
      if (this.nameForQueryAllFloors == null) {
        sb.append("null");
      } else {
        sb.append(this.nameForQueryAllFloors);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'layerId' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MapLayerStandardSchemeFactory implements SchemeFactory {
    public MapLayerStandardScheme getScheme() {
      return new MapLayerStandardScheme();
    }
  }

  private static class MapLayerStandardScheme extends StandardScheme<MapLayer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MapLayer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAYER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.layerId = iprot.readI64();
              struct.setLayerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME_FOR_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameForQuery = iprot.readString();
              struct.setNameForQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME_FOR_QUERY_ALL_FLOORS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameForQueryAllFloors = iprot.readString();
              struct.setNameForQueryAllFloorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLayerId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'layerId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MapLayer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAYER_ID_FIELD_DESC);
      oprot.writeI64(struct.layerId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.nameForQuery != null) {
        if (struct.isSetNameForQuery()) {
          oprot.writeFieldBegin(NAME_FOR_QUERY_FIELD_DESC);
          oprot.writeString(struct.nameForQuery);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nameForQueryAllFloors != null) {
        if (struct.isSetNameForQueryAllFloors()) {
          oprot.writeFieldBegin(NAME_FOR_QUERY_ALL_FLOORS_FIELD_DESC);
          oprot.writeString(struct.nameForQueryAllFloors);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MapLayerTupleSchemeFactory implements SchemeFactory {
    public MapLayerTupleScheme getScheme() {
      return new MapLayerTupleScheme();
    }
  }

  private static class MapLayerTupleScheme extends TupleScheme<MapLayer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MapLayer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.layerId);
      oprot.writeString(struct.name);
      BitSet optionals = new BitSet();
      if (struct.isSetNameForQuery()) {
        optionals.set(0);
      }
      if (struct.isSetNameForQueryAllFloors()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNameForQuery()) {
        oprot.writeString(struct.nameForQuery);
      }
      if (struct.isSetNameForQueryAllFloors()) {
        oprot.writeString(struct.nameForQueryAllFloors);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MapLayer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.layerId = iprot.readI64();
      struct.setLayerIdIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.nameForQuery = iprot.readString();
        struct.setNameForQueryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameForQueryAllFloors = iprot.readString();
        struct.setNameForQueryAllFloorsIsSet(true);
      }
    }
  }

}

