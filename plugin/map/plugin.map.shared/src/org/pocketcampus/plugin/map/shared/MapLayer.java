/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.map.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MapLayer implements org.apache.thrift.TBase<MapLayer, MapLayer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MapLayer");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DRAWABLE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("drawableUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("externalId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PLUGIN_INTERNAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pluginInternalId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CACHE_IN_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheInSeconds", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DISPLAYABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("displayable", org.apache.thrift.protocol.TType.BOOL, (short)6);

  public String name; // required
  public String drawableUrl; // required
  public String externalId; // required
  public int pluginInternalId; // required
  public int cacheInSeconds; // required
  public boolean displayable; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    DRAWABLE_URL((short)2, "drawableUrl"),
    EXTERNAL_ID((short)3, "externalId"),
    PLUGIN_INTERNAL_ID((short)4, "pluginInternalId"),
    CACHE_IN_SECONDS((short)5, "cacheInSeconds"),
    DISPLAYABLE((short)6, "displayable");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // DRAWABLE_URL
          return DRAWABLE_URL;
        case 3: // EXTERNAL_ID
          return EXTERNAL_ID;
        case 4: // PLUGIN_INTERNAL_ID
          return PLUGIN_INTERNAL_ID;
        case 5: // CACHE_IN_SECONDS
          return CACHE_IN_SECONDS;
        case 6: // DISPLAYABLE
          return DISPLAYABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLUGININTERNALID_ISSET_ID = 0;
  private static final int __CACHEINSECONDS_ISSET_ID = 1;
  private static final int __DISPLAYABLE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRAWABLE_URL, new org.apache.thrift.meta_data.FieldMetaData("drawableUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_ID, new org.apache.thrift.meta_data.FieldMetaData("externalId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLUGIN_INTERNAL_ID, new org.apache.thrift.meta_data.FieldMetaData("pluginInternalId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CACHE_IN_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("cacheInSeconds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.DISPLAYABLE, new org.apache.thrift.meta_data.FieldMetaData("displayable", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MapLayer.class, metaDataMap);
  }

  public MapLayer() {
  }

  public MapLayer(
    String name,
    String drawableUrl,
    String externalId,
    int pluginInternalId,
    int cacheInSeconds,
    boolean displayable)
  {
    this();
    this.name = name;
    this.drawableUrl = drawableUrl;
    this.externalId = externalId;
    this.pluginInternalId = pluginInternalId;
    setPluginInternalIdIsSet(true);
    this.cacheInSeconds = cacheInSeconds;
    setCacheInSecondsIsSet(true);
    this.displayable = displayable;
    setDisplayableIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MapLayer(MapLayer other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDrawableUrl()) {
      this.drawableUrl = other.drawableUrl;
    }
    if (other.isSetExternalId()) {
      this.externalId = other.externalId;
    }
    this.pluginInternalId = other.pluginInternalId;
    this.cacheInSeconds = other.cacheInSeconds;
    this.displayable = other.displayable;
  }

  public MapLayer deepCopy() {
    return new MapLayer(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.drawableUrl = null;
    this.externalId = null;
    setPluginInternalIdIsSet(false);
    this.pluginInternalId = 0;
    setCacheInSecondsIsSet(false);
    this.cacheInSeconds = 0;
    setDisplayableIsSet(false);
    this.displayable = false;
  }

  public String getName() {
    return this.name;
  }

  public MapLayer setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDrawableUrl() {
    return this.drawableUrl;
  }

  public MapLayer setDrawableUrl(String drawableUrl) {
    this.drawableUrl = drawableUrl;
    return this;
  }

  public void unsetDrawableUrl() {
    this.drawableUrl = null;
  }

  /** Returns true if field drawableUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawableUrl() {
    return this.drawableUrl != null;
  }

  public void setDrawableUrlIsSet(boolean value) {
    if (!value) {
      this.drawableUrl = null;
    }
  }

  public String getExternalId() {
    return this.externalId;
  }

  public MapLayer setExternalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  public void unsetExternalId() {
    this.externalId = null;
  }

  /** Returns true if field externalId is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalId() {
    return this.externalId != null;
  }

  public void setExternalIdIsSet(boolean value) {
    if (!value) {
      this.externalId = null;
    }
  }

  public int getPluginInternalId() {
    return this.pluginInternalId;
  }

  public MapLayer setPluginInternalId(int pluginInternalId) {
    this.pluginInternalId = pluginInternalId;
    setPluginInternalIdIsSet(true);
    return this;
  }

  public void unsetPluginInternalId() {
    __isset_bit_vector.clear(__PLUGININTERNALID_ISSET_ID);
  }

  /** Returns true if field pluginInternalId is set (has been assigned a value) and false otherwise */
  public boolean isSetPluginInternalId() {
    return __isset_bit_vector.get(__PLUGININTERNALID_ISSET_ID);
  }

  public void setPluginInternalIdIsSet(boolean value) {
    __isset_bit_vector.set(__PLUGININTERNALID_ISSET_ID, value);
  }

  public int getCacheInSeconds() {
    return this.cacheInSeconds;
  }

  public MapLayer setCacheInSeconds(int cacheInSeconds) {
    this.cacheInSeconds = cacheInSeconds;
    setCacheInSecondsIsSet(true);
    return this;
  }

  public void unsetCacheInSeconds() {
    __isset_bit_vector.clear(__CACHEINSECONDS_ISSET_ID);
  }

  /** Returns true if field cacheInSeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheInSeconds() {
    return __isset_bit_vector.get(__CACHEINSECONDS_ISSET_ID);
  }

  public void setCacheInSecondsIsSet(boolean value) {
    __isset_bit_vector.set(__CACHEINSECONDS_ISSET_ID, value);
  }

  public boolean isDisplayable() {
    return this.displayable;
  }

  public MapLayer setDisplayable(boolean displayable) {
    this.displayable = displayable;
    setDisplayableIsSet(true);
    return this;
  }

  public void unsetDisplayable() {
    __isset_bit_vector.clear(__DISPLAYABLE_ISSET_ID);
  }

  /** Returns true if field displayable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayable() {
    return __isset_bit_vector.get(__DISPLAYABLE_ISSET_ID);
  }

  public void setDisplayableIsSet(boolean value) {
    __isset_bit_vector.set(__DISPLAYABLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DRAWABLE_URL:
      if (value == null) {
        unsetDrawableUrl();
      } else {
        setDrawableUrl((String)value);
      }
      break;

    case EXTERNAL_ID:
      if (value == null) {
        unsetExternalId();
      } else {
        setExternalId((String)value);
      }
      break;

    case PLUGIN_INTERNAL_ID:
      if (value == null) {
        unsetPluginInternalId();
      } else {
        setPluginInternalId((Integer)value);
      }
      break;

    case CACHE_IN_SECONDS:
      if (value == null) {
        unsetCacheInSeconds();
      } else {
        setCacheInSeconds((Integer)value);
      }
      break;

    case DISPLAYABLE:
      if (value == null) {
        unsetDisplayable();
      } else {
        setDisplayable((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case DRAWABLE_URL:
      return getDrawableUrl();

    case EXTERNAL_ID:
      return getExternalId();

    case PLUGIN_INTERNAL_ID:
      return Integer.valueOf(getPluginInternalId());

    case CACHE_IN_SECONDS:
      return Integer.valueOf(getCacheInSeconds());

    case DISPLAYABLE:
      return Boolean.valueOf(isDisplayable());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case DRAWABLE_URL:
      return isSetDrawableUrl();
    case EXTERNAL_ID:
      return isSetExternalId();
    case PLUGIN_INTERNAL_ID:
      return isSetPluginInternalId();
    case CACHE_IN_SECONDS:
      return isSetCacheInSeconds();
    case DISPLAYABLE:
      return isSetDisplayable();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MapLayer)
      return this.equals((MapLayer)that);
    return false;
  }

  public boolean equals(MapLayer that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_drawableUrl = true && this.isSetDrawableUrl();
    boolean that_present_drawableUrl = true && that.isSetDrawableUrl();
    if (this_present_drawableUrl || that_present_drawableUrl) {
      if (!(this_present_drawableUrl && that_present_drawableUrl))
        return false;
      if (!this.drawableUrl.equals(that.drawableUrl))
        return false;
    }

    boolean this_present_externalId = true && this.isSetExternalId();
    boolean that_present_externalId = true && that.isSetExternalId();
    if (this_present_externalId || that_present_externalId) {
      if (!(this_present_externalId && that_present_externalId))
        return false;
      if (!this.externalId.equals(that.externalId))
        return false;
    }

    boolean this_present_pluginInternalId = true;
    boolean that_present_pluginInternalId = true;
    if (this_present_pluginInternalId || that_present_pluginInternalId) {
      if (!(this_present_pluginInternalId && that_present_pluginInternalId))
        return false;
      if (this.pluginInternalId != that.pluginInternalId)
        return false;
    }

    boolean this_present_cacheInSeconds = true;
    boolean that_present_cacheInSeconds = true;
    if (this_present_cacheInSeconds || that_present_cacheInSeconds) {
      if (!(this_present_cacheInSeconds && that_present_cacheInSeconds))
        return false;
      if (this.cacheInSeconds != that.cacheInSeconds)
        return false;
    }

    boolean this_present_displayable = true;
    boolean that_present_displayable = true;
    if (this_present_displayable || that_present_displayable) {
      if (!(this_present_displayable && that_present_displayable))
        return false;
      if (this.displayable != that.displayable)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_drawableUrl = true && (isSetDrawableUrl());
    builder.append(present_drawableUrl);
    if (present_drawableUrl)
      builder.append(drawableUrl);

    boolean present_externalId = true && (isSetExternalId());
    builder.append(present_externalId);
    if (present_externalId)
      builder.append(externalId);

    boolean present_pluginInternalId = true;
    builder.append(present_pluginInternalId);
    if (present_pluginInternalId)
      builder.append(pluginInternalId);

    boolean present_cacheInSeconds = true;
    builder.append(present_cacheInSeconds);
    if (present_cacheInSeconds)
      builder.append(cacheInSeconds);

    boolean present_displayable = true;
    builder.append(present_displayable);
    if (present_displayable)
      builder.append(displayable);

    return builder.toHashCode();
  }

  public int compareTo(MapLayer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MapLayer typedOther = (MapLayer)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrawableUrl()).compareTo(typedOther.isSetDrawableUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawableUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drawableUrl, typedOther.drawableUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternalId()).compareTo(typedOther.isSetExternalId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalId, typedOther.externalId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPluginInternalId()).compareTo(typedOther.isSetPluginInternalId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPluginInternalId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pluginInternalId, typedOther.pluginInternalId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheInSeconds()).compareTo(typedOther.isSetCacheInSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheInSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheInSeconds, typedOther.cacheInSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayable()).compareTo(typedOther.isSetDisplayable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayable, typedOther.displayable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DRAWABLE_URL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.drawableUrl = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // EXTERNAL_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.externalId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PLUGIN_INTERNAL_ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.pluginInternalId = iprot.readI32();
            setPluginInternalIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CACHE_IN_SECONDS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.cacheInSeconds = iprot.readI32();
            setCacheInSecondsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DISPLAYABLE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.displayable = iprot.readBool();
            setDisplayableIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetPluginInternalId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pluginInternalId' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetCacheInSeconds()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cacheInSeconds' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetDisplayable()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'displayable' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.drawableUrl != null) {
      oprot.writeFieldBegin(DRAWABLE_URL_FIELD_DESC);
      oprot.writeString(this.drawableUrl);
      oprot.writeFieldEnd();
    }
    if (this.externalId != null) {
      oprot.writeFieldBegin(EXTERNAL_ID_FIELD_DESC);
      oprot.writeString(this.externalId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PLUGIN_INTERNAL_ID_FIELD_DESC);
    oprot.writeI32(this.pluginInternalId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CACHE_IN_SECONDS_FIELD_DESC);
    oprot.writeI32(this.cacheInSeconds);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DISPLAYABLE_FIELD_DESC);
    oprot.writeBool(this.displayable);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MapLayer(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("drawableUrl:");
    if (this.drawableUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.drawableUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("externalId:");
    if (this.externalId == null) {
      sb.append("null");
    } else {
      sb.append(this.externalId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pluginInternalId:");
    sb.append(this.pluginInternalId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheInSeconds:");
    sb.append(this.cacheInSeconds);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayable:");
    sb.append(this.displayable);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (externalId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'externalId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pluginInternalId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'cacheInSeconds' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'displayable' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

