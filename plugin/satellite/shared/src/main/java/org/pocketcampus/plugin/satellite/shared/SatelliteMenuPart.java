/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.satellite.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class SatelliteMenuPart implements org.apache.thrift.TBase<SatelliteMenuPart, SatelliteMenuPart._Fields>, java.io.Serializable, Cloneable, Comparable<SatelliteMenuPart> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SatelliteMenuPart");

  private static final org.apache.thrift.protocol.TField BEERS_OF_THE_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("beersOfTheMonth", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BEERS_FIELD_DESC = new org.apache.thrift.protocol.TField("beers", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SatelliteMenuPartStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SatelliteMenuPartTupleSchemeFactory());
  }

  private List<SatelliteBeer> beersOfTheMonth; // required
  private Map<String,List<SatelliteBeer>> beers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEERS_OF_THE_MONTH((short)1, "beersOfTheMonth"),
    BEERS((short)2, "beers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEERS_OF_THE_MONTH
          return BEERS_OF_THE_MONTH;
        case 2: // BEERS
          return BEERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEERS_OF_THE_MONTH, new org.apache.thrift.meta_data.FieldMetaData("beersOfTheMonth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SatelliteBeer.class))));
    tmpMap.put(_Fields.BEERS, new org.apache.thrift.meta_data.FieldMetaData("beers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SatelliteBeer.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SatelliteMenuPart.class, metaDataMap);
  }

  public SatelliteMenuPart() {
  }

  public SatelliteMenuPart(
    List<SatelliteBeer> beersOfTheMonth,
    Map<String,List<SatelliteBeer>> beers)
  {
    this();
    this.beersOfTheMonth = beersOfTheMonth;
    this.beers = beers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SatelliteMenuPart(SatelliteMenuPart other) {
    if (other.isSetBeersOfTheMonth()) {
      List<SatelliteBeer> __this__beersOfTheMonth = new ArrayList<SatelliteBeer>(other.beersOfTheMonth.size());
      for (SatelliteBeer other_element : other.beersOfTheMonth) {
        __this__beersOfTheMonth.add(new SatelliteBeer(other_element));
      }
      this.beersOfTheMonth = __this__beersOfTheMonth;
    }
    if (other.isSetBeers()) {
      Map<String,List<SatelliteBeer>> __this__beers = new HashMap<String,List<SatelliteBeer>>(other.beers.size());
      for (Map.Entry<String, List<SatelliteBeer>> other_element : other.beers.entrySet()) {

        String other_element_key = other_element.getKey();
        List<SatelliteBeer> other_element_value = other_element.getValue();

        String __this__beers_copy_key = other_element_key;

        List<SatelliteBeer> __this__beers_copy_value = new ArrayList<SatelliteBeer>(other_element_value.size());
        for (SatelliteBeer other_element_value_element : other_element_value) {
          __this__beers_copy_value.add(new SatelliteBeer(other_element_value_element));
        }

        __this__beers.put(__this__beers_copy_key, __this__beers_copy_value);
      }
      this.beers = __this__beers;
    }
  }

  public SatelliteMenuPart deepCopy() {
    return new SatelliteMenuPart(this);
  }

  @Override
  public void clear() {
    this.beersOfTheMonth = null;
    this.beers = null;
  }

  public int getBeersOfTheMonthSize() {
    return (this.beersOfTheMonth == null) ? 0 : this.beersOfTheMonth.size();
  }

  public java.util.Iterator<SatelliteBeer> getBeersOfTheMonthIterator() {
    return (this.beersOfTheMonth == null) ? null : this.beersOfTheMonth.iterator();
  }

  public void addToBeersOfTheMonth(SatelliteBeer elem) {
    if (this.beersOfTheMonth == null) {
      this.beersOfTheMonth = new ArrayList<SatelliteBeer>();
    }
    this.beersOfTheMonth.add(elem);
  }

  public List<SatelliteBeer> getBeersOfTheMonth() {
    return this.beersOfTheMonth;
  }

  public SatelliteMenuPart setBeersOfTheMonth(List<SatelliteBeer> beersOfTheMonth) {
    this.beersOfTheMonth = beersOfTheMonth;
    return this;
  }

  public void unsetBeersOfTheMonth() {
    this.beersOfTheMonth = null;
  }

  /** Returns true if field beersOfTheMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetBeersOfTheMonth() {
    return this.beersOfTheMonth != null;
  }

  public void setBeersOfTheMonthIsSet(boolean value) {
    if (!value) {
      this.beersOfTheMonth = null;
    }
  }

  public int getBeersSize() {
    return (this.beers == null) ? 0 : this.beers.size();
  }

  public void putToBeers(String key, List<SatelliteBeer> val) {
    if (this.beers == null) {
      this.beers = new HashMap<String,List<SatelliteBeer>>();
    }
    this.beers.put(key, val);
  }

  public Map<String,List<SatelliteBeer>> getBeers() {
    return this.beers;
  }

  public SatelliteMenuPart setBeers(Map<String,List<SatelliteBeer>> beers) {
    this.beers = beers;
    return this;
  }

  public void unsetBeers() {
    this.beers = null;
  }

  /** Returns true if field beers is set (has been assigned a value) and false otherwise */
  public boolean isSetBeers() {
    return this.beers != null;
  }

  public void setBeersIsSet(boolean value) {
    if (!value) {
      this.beers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BEERS_OF_THE_MONTH:
      if (value == null) {
        unsetBeersOfTheMonth();
      } else {
        setBeersOfTheMonth((List<SatelliteBeer>)value);
      }
      break;

    case BEERS:
      if (value == null) {
        unsetBeers();
      } else {
        setBeers((Map<String,List<SatelliteBeer>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BEERS_OF_THE_MONTH:
      return getBeersOfTheMonth();

    case BEERS:
      return getBeers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BEERS_OF_THE_MONTH:
      return isSetBeersOfTheMonth();
    case BEERS:
      return isSetBeers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SatelliteMenuPart)
      return this.equals((SatelliteMenuPart)that);
    return false;
  }

  public boolean equals(SatelliteMenuPart that) {
    if (that == null)
      return false;

    boolean this_present_beersOfTheMonth = true && this.isSetBeersOfTheMonth();
    boolean that_present_beersOfTheMonth = true && that.isSetBeersOfTheMonth();
    if (this_present_beersOfTheMonth || that_present_beersOfTheMonth) {
      if (!(this_present_beersOfTheMonth && that_present_beersOfTheMonth))
        return false;
      if (!this.beersOfTheMonth.equals(that.beersOfTheMonth))
        return false;
    }

    boolean this_present_beers = true && this.isSetBeers();
    boolean that_present_beers = true && that.isSetBeers();
    if (this_present_beers || that_present_beers) {
      if (!(this_present_beers && that_present_beers))
        return false;
      if (!this.beers.equals(that.beers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_beersOfTheMonth = true && (isSetBeersOfTheMonth());
    list.add(present_beersOfTheMonth);
    if (present_beersOfTheMonth)
      list.add(beersOfTheMonth);

    boolean present_beers = true && (isSetBeers());
    list.add(present_beers);
    if (present_beers)
      list.add(beers);

    return list.hashCode();
  }

  @Override
  public int compareTo(SatelliteMenuPart other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBeersOfTheMonth()).compareTo(other.isSetBeersOfTheMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeersOfTheMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beersOfTheMonth, other.beersOfTheMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeers()).compareTo(other.isSetBeers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beers, other.beers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SatelliteMenuPart(");
    boolean first = true;

    sb.append("beersOfTheMonth:");
    if (this.beersOfTheMonth == null) {
      sb.append("null");
    } else {
      sb.append(this.beersOfTheMonth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beers:");
    if (this.beers == null) {
      sb.append("null");
    } else {
      sb.append(this.beers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (beersOfTheMonth == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'beersOfTheMonth' was not present! Struct: " + toString());
    }
    if (beers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'beers' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SatelliteMenuPartStandardSchemeFactory implements SchemeFactory {
    public SatelliteMenuPartStandardScheme getScheme() {
      return new SatelliteMenuPartStandardScheme();
    }
  }

  private static class SatelliteMenuPartStandardScheme extends StandardScheme<SatelliteMenuPart> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SatelliteMenuPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEERS_OF_THE_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.beersOfTheMonth = new ArrayList<SatelliteBeer>(_list0.size);
                SatelliteBeer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new SatelliteBeer();
                  _elem1.read(iprot);
                  struct.beersOfTheMonth.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBeersOfTheMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BEERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.beers = new HashMap<String,List<SatelliteBeer>>(2*_map3.size);
                String _key4;
                List<SatelliteBeer> _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                    _val5 = new ArrayList<SatelliteBeer>(_list7.size);
                    SatelliteBeer _elem8;
                    for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                    {
                      _elem8 = new SatelliteBeer();
                      _elem8.read(iprot);
                      _val5.add(_elem8);
                    }
                    iprot.readListEnd();
                  }
                  struct.beers.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setBeersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SatelliteMenuPart struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.beersOfTheMonth != null) {
        oprot.writeFieldBegin(BEERS_OF_THE_MONTH_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.beersOfTheMonth.size()));
          for (SatelliteBeer _iter10 : struct.beersOfTheMonth)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.beers != null) {
        oprot.writeFieldBegin(BEERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.beers.size()));
          for (Map.Entry<String, List<SatelliteBeer>> _iter11 : struct.beers.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter11.getValue().size()));
              for (SatelliteBeer _iter12 : _iter11.getValue())
              {
                _iter12.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SatelliteMenuPartTupleSchemeFactory implements SchemeFactory {
    public SatelliteMenuPartTupleScheme getScheme() {
      return new SatelliteMenuPartTupleScheme();
    }
  }

  private static class SatelliteMenuPartTupleScheme extends TupleScheme<SatelliteMenuPart> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SatelliteMenuPart struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.beersOfTheMonth.size());
        for (SatelliteBeer _iter13 : struct.beersOfTheMonth)
        {
          _iter13.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.beers.size());
        for (Map.Entry<String, List<SatelliteBeer>> _iter14 : struct.beers.entrySet())
        {
          oprot.writeString(_iter14.getKey());
          {
            oprot.writeI32(_iter14.getValue().size());
            for (SatelliteBeer _iter15 : _iter14.getValue())
            {
              _iter15.write(oprot);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SatelliteMenuPart struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.beersOfTheMonth = new ArrayList<SatelliteBeer>(_list16.size);
        SatelliteBeer _elem17;
        for (int _i18 = 0; _i18 < _list16.size; ++_i18)
        {
          _elem17 = new SatelliteBeer();
          _elem17.read(iprot);
          struct.beersOfTheMonth.add(_elem17);
        }
      }
      struct.setBeersOfTheMonthIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.beers = new HashMap<String,List<SatelliteBeer>>(2*_map19.size);
        String _key20;
        List<SatelliteBeer> _val21;
        for (int _i22 = 0; _i22 < _map19.size; ++_i22)
        {
          _key20 = iprot.readString();
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _val21 = new ArrayList<SatelliteBeer>(_list23.size);
            SatelliteBeer _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              _elem24 = new SatelliteBeer();
              _elem24.read(iprot);
              _val21.add(_elem24);
            }
          }
          struct.beers.put(_key20, _val21);
        }
      }
      struct.setBeersIsSet(true);
    }
  }

}

