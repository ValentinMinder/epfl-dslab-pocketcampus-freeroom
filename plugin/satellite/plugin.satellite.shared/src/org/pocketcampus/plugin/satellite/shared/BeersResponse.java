/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.satellite.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BeersResponse implements org.apache.thrift.TBase<BeersResponse, BeersResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BeersResponse");

  private static final org.apache.thrift.protocol.TField BEERS_FIELD_DESC = new org.apache.thrift.protocol.TField("beers", org.apache.thrift.protocol.TType.LIST, (short)1);

  private List<SatelliteBeer> beers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEERS((short)1, "beers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEERS
          return BEERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEERS, new org.apache.thrift.meta_data.FieldMetaData("beers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SatelliteBeer.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BeersResponse.class, metaDataMap);
  }

  public BeersResponse() {
  }

  public BeersResponse(
    List<SatelliteBeer> beers)
  {
    this();
    this.beers = beers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BeersResponse(BeersResponse other) {
    if (other.isSetBeers()) {
      List<SatelliteBeer> __this__beers = new ArrayList<SatelliteBeer>();
      for (SatelliteBeer other_element : other.beers) {
        __this__beers.add(new SatelliteBeer(other_element));
      }
      this.beers = __this__beers;
    }
  }

  public BeersResponse deepCopy() {
    return new BeersResponse(this);
  }

  @Override
  public void clear() {
    this.beers = null;
  }

  public int getBeersSize() {
    return (this.beers == null) ? 0 : this.beers.size();
  }

  public java.util.Iterator<SatelliteBeer> getBeersIterator() {
    return (this.beers == null) ? null : this.beers.iterator();
  }

  public void addToBeers(SatelliteBeer elem) {
    if (this.beers == null) {
      this.beers = new ArrayList<SatelliteBeer>();
    }
    this.beers.add(elem);
  }

  public List<SatelliteBeer> getBeers() {
    return this.beers;
  }

  public BeersResponse setBeers(List<SatelliteBeer> beers) {
    this.beers = beers;
    return this;
  }

  public void unsetBeers() {
    this.beers = null;
  }

  /** Returns true if field beers is set (has been assigned a value) and false otherwise */
  public boolean isSetBeers() {
    return this.beers != null;
  }

  public void setBeersIsSet(boolean value) {
    if (!value) {
      this.beers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BEERS:
      if (value == null) {
        unsetBeers();
      } else {
        setBeers((List<SatelliteBeer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BEERS:
      return getBeers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BEERS:
      return isSetBeers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BeersResponse)
      return this.equals((BeersResponse)that);
    return false;
  }

  public boolean equals(BeersResponse that) {
    if (that == null)
      return false;

    boolean this_present_beers = true && this.isSetBeers();
    boolean that_present_beers = true && that.isSetBeers();
    if (this_present_beers || that_present_beers) {
      if (!(this_present_beers && that_present_beers))
        return false;
      if (!this.beers.equals(that.beers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_beers = true && (isSetBeers());
    builder.append(present_beers);
    if (present_beers)
      builder.append(beers);

    return builder.toHashCode();
  }

  public int compareTo(BeersResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BeersResponse typedOther = (BeersResponse)other;

    lastComparison = Boolean.valueOf(isSetBeers()).compareTo(typedOther.isSetBeers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beers, typedOther.beers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // BEERS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.beers = new ArrayList<SatelliteBeer>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                SatelliteBeer _elem2; // required
                _elem2 = new SatelliteBeer();
                _elem2.read(iprot);
                this.beers.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.beers != null) {
      oprot.writeFieldBegin(BEERS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.beers.size()));
        for (SatelliteBeer _iter3 : this.beers)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BeersResponse(");
    boolean first = true;

    sb.append("beers:");
    if (this.beers == null) {
      sb.append("null");
    } else {
      sb.append(this.beers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (beers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'beers' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

