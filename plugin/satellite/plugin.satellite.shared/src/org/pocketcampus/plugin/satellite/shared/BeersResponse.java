/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.satellite.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class BeersResponse implements org.apache.thrift.TBase<BeersResponse, BeersResponse._Fields>, java.io.Serializable, Cloneable, Comparable<BeersResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BeersResponse");

  private static final org.apache.thrift.protocol.TField BEER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("beerList", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCode", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BeersResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BeersResponseTupleSchemeFactory());
  }

  private Map<SatelliteBeerContainer,SatelliteMenuPart> beerList; // optional
  private SatelliteStatusCode statusCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEER_LIST((short)1, "beerList"),
    /**
     * 
     * @see SatelliteStatusCode
     */
    STATUS_CODE((short)2, "statusCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEER_LIST
          return BEER_LIST;
        case 2: // STATUS_CODE
          return STATUS_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BEER_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEER_LIST, new org.apache.thrift.meta_data.FieldMetaData("beerList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SatelliteBeerContainer.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SatelliteMenuPart.class))));
    tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("statusCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SatelliteStatusCode.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BeersResponse.class, metaDataMap);
  }

  public BeersResponse() {
  }

  public BeersResponse(
    SatelliteStatusCode statusCode)
  {
    this();
    this.statusCode = statusCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BeersResponse(BeersResponse other) {
    if (other.isSetBeerList()) {
      Map<SatelliteBeerContainer,SatelliteMenuPart> __this__beerList = new HashMap<SatelliteBeerContainer,SatelliteMenuPart>(other.beerList.size());
      for (Map.Entry<SatelliteBeerContainer, SatelliteMenuPart> other_element : other.beerList.entrySet()) {

        SatelliteBeerContainer other_element_key = other_element.getKey();
        SatelliteMenuPart other_element_value = other_element.getValue();

        SatelliteBeerContainer __this__beerList_copy_key = other_element_key;

        SatelliteMenuPart __this__beerList_copy_value = new SatelliteMenuPart(other_element_value);

        __this__beerList.put(__this__beerList_copy_key, __this__beerList_copy_value);
      }
      this.beerList = __this__beerList;
    }
    if (other.isSetStatusCode()) {
      this.statusCode = other.statusCode;
    }
  }

  public BeersResponse deepCopy() {
    return new BeersResponse(this);
  }

  @Override
  public void clear() {
    this.beerList = null;
    this.statusCode = null;
  }

  public int getBeerListSize() {
    return (this.beerList == null) ? 0 : this.beerList.size();
  }

  public void putToBeerList(SatelliteBeerContainer key, SatelliteMenuPart val) {
    if (this.beerList == null) {
      this.beerList = new HashMap<SatelliteBeerContainer,SatelliteMenuPart>();
    }
    this.beerList.put(key, val);
  }

  public Map<SatelliteBeerContainer,SatelliteMenuPart> getBeerList() {
    return this.beerList;
  }

  public BeersResponse setBeerList(Map<SatelliteBeerContainer,SatelliteMenuPart> beerList) {
    this.beerList = beerList;
    return this;
  }

  public void unsetBeerList() {
    this.beerList = null;
  }

  /** Returns true if field beerList is set (has been assigned a value) and false otherwise */
  public boolean isSetBeerList() {
    return this.beerList != null;
  }

  public void setBeerListIsSet(boolean value) {
    if (!value) {
      this.beerList = null;
    }
  }

  /**
   * 
   * @see SatelliteStatusCode
   */
  public SatelliteStatusCode getStatusCode() {
    return this.statusCode;
  }

  /**
   * 
   * @see SatelliteStatusCode
   */
  public BeersResponse setStatusCode(SatelliteStatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  public void unsetStatusCode() {
    this.statusCode = null;
  }

  /** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusCode() {
    return this.statusCode != null;
  }

  public void setStatusCodeIsSet(boolean value) {
    if (!value) {
      this.statusCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BEER_LIST:
      if (value == null) {
        unsetBeerList();
      } else {
        setBeerList((Map<SatelliteBeerContainer,SatelliteMenuPart>)value);
      }
      break;

    case STATUS_CODE:
      if (value == null) {
        unsetStatusCode();
      } else {
        setStatusCode((SatelliteStatusCode)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BEER_LIST:
      return getBeerList();

    case STATUS_CODE:
      return getStatusCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BEER_LIST:
      return isSetBeerList();
    case STATUS_CODE:
      return isSetStatusCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BeersResponse)
      return this.equals((BeersResponse)that);
    return false;
  }

  public boolean equals(BeersResponse that) {
    if (that == null)
      return false;

    boolean this_present_beerList = true && this.isSetBeerList();
    boolean that_present_beerList = true && that.isSetBeerList();
    if (this_present_beerList || that_present_beerList) {
      if (!(this_present_beerList && that_present_beerList))
        return false;
      if (!this.beerList.equals(that.beerList))
        return false;
    }

    boolean this_present_statusCode = true && this.isSetStatusCode();
    boolean that_present_statusCode = true && that.isSetStatusCode();
    if (this_present_statusCode || that_present_statusCode) {
      if (!(this_present_statusCode && that_present_statusCode))
        return false;
      if (!this.statusCode.equals(that.statusCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_beerList = true && (isSetBeerList());
    list.add(present_beerList);
    if (present_beerList)
      list.add(beerList);

    boolean present_statusCode = true && (isSetStatusCode());
    list.add(present_statusCode);
    if (present_statusCode)
      list.add(statusCode.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(BeersResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBeerList()).compareTo(other.isSetBeerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beerList, other.beerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusCode()).compareTo(other.isSetStatusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCode, other.statusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BeersResponse(");
    boolean first = true;

    if (isSetBeerList()) {
      sb.append("beerList:");
      if (this.beerList == null) {
        sb.append("null");
      } else {
        sb.append(this.beerList);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("statusCode:");
    if (this.statusCode == null) {
      sb.append("null");
    } else {
      sb.append(this.statusCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (statusCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusCode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BeersResponseStandardSchemeFactory implements SchemeFactory {
    public BeersResponseStandardScheme getScheme() {
      return new BeersResponseStandardScheme();
    }
  }

  private static class BeersResponseStandardScheme extends StandardScheme<BeersResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BeersResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.beerList = new HashMap<SatelliteBeerContainer,SatelliteMenuPart>(2*_map26.size);
                SatelliteBeerContainer _key27;
                SatelliteMenuPart _val28;
                for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                {
                  _key27 = org.pocketcampus.plugin.satellite.shared.SatelliteBeerContainer.findByValue(iprot.readI32());
                  _val28 = new SatelliteMenuPart();
                  _val28.read(iprot);
                  struct.beerList.put(_key27, _val28);
                }
                iprot.readMapEnd();
              }
              struct.setBeerListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusCode = org.pocketcampus.plugin.satellite.shared.SatelliteStatusCode.findByValue(iprot.readI32());
              struct.setStatusCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BeersResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.beerList != null) {
        if (struct.isSetBeerList()) {
          oprot.writeFieldBegin(BEER_LIST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.beerList.size()));
            for (Map.Entry<SatelliteBeerContainer, SatelliteMenuPart> _iter30 : struct.beerList.entrySet())
            {
              oprot.writeI32(_iter30.getKey().getValue());
              _iter30.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.statusCode != null) {
        oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
        oprot.writeI32(struct.statusCode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BeersResponseTupleSchemeFactory implements SchemeFactory {
    public BeersResponseTupleScheme getScheme() {
      return new BeersResponseTupleScheme();
    }
  }

  private static class BeersResponseTupleScheme extends TupleScheme<BeersResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BeersResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.statusCode.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetBeerList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetBeerList()) {
        {
          oprot.writeI32(struct.beerList.size());
          for (Map.Entry<SatelliteBeerContainer, SatelliteMenuPart> _iter31 : struct.beerList.entrySet())
          {
            oprot.writeI32(_iter31.getKey().getValue());
            _iter31.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BeersResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.statusCode = org.pocketcampus.plugin.satellite.shared.SatelliteStatusCode.findByValue(iprot.readI32());
      struct.setStatusCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.beerList = new HashMap<SatelliteBeerContainer,SatelliteMenuPart>(2*_map32.size);
          SatelliteBeerContainer _key33;
          SatelliteMenuPart _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = org.pocketcampus.plugin.satellite.shared.SatelliteBeerContainer.findByValue(iprot.readI32());
            _val34 = new SatelliteMenuPart();
            _val34.read(iprot);
            struct.beerList.put(_key33, _val34);
          }
        }
        struct.setBeerListIsSet(true);
      }
    }
  }

}

