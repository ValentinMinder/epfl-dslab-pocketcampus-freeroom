/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.satellite.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SatelliteBeer implements org.apache.thrift.TBase<SatelliteBeer, SatelliteBeer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SatelliteBeer");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BREWERY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("breweryName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BEER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("beerType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORIGIN_COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("originCountry", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ALCOHOL_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("alcoholRate", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BEER_OF_THE_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("beerOfTheMonth", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField CONTAINER_FIELD_DESC = new org.apache.thrift.protocol.TField("container", org.apache.thrift.protocol.TType.I32, (short)9);

  private String name; // required
  private String breweryName; // required
  private String beerType; // required
  private String originCountry; // required
  private double alcoholRate; // required
  private double price; // required
  private String description; // required
  private boolean beerOfTheMonth; // required
  private SatelliteBeerContainer container; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    BREWERY_NAME((short)2, "breweryName"),
    BEER_TYPE((short)3, "beerType"),
    ORIGIN_COUNTRY((short)4, "originCountry"),
    ALCOHOL_RATE((short)5, "alcoholRate"),
    PRICE((short)6, "price"),
    DESCRIPTION((short)7, "description"),
    BEER_OF_THE_MONTH((short)8, "beerOfTheMonth"),
    /**
     * 
     * @see SatelliteBeerContainer
     */
    CONTAINER((short)9, "container");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // BREWERY_NAME
          return BREWERY_NAME;
        case 3: // BEER_TYPE
          return BEER_TYPE;
        case 4: // ORIGIN_COUNTRY
          return ORIGIN_COUNTRY;
        case 5: // ALCOHOL_RATE
          return ALCOHOL_RATE;
        case 6: // PRICE
          return PRICE;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        case 8: // BEER_OF_THE_MONTH
          return BEER_OF_THE_MONTH;
        case 9: // CONTAINER
          return CONTAINER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALCOHOLRATE_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private static final int __BEEROFTHEMONTH_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BREWERY_NAME, new org.apache.thrift.meta_data.FieldMetaData("breweryName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("beerType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN_COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("originCountry", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALCOHOL_RATE, new org.apache.thrift.meta_data.FieldMetaData("alcoholRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEER_OF_THE_MONTH, new org.apache.thrift.meta_data.FieldMetaData("beerOfTheMonth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONTAINER, new org.apache.thrift.meta_data.FieldMetaData("container", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SatelliteBeerContainer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SatelliteBeer.class, metaDataMap);
  }

  public SatelliteBeer() {
  }

  public SatelliteBeer(
    String name,
    String breweryName,
    String beerType,
    String originCountry,
    double alcoholRate,
    double price,
    String description,
    boolean beerOfTheMonth,
    SatelliteBeerContainer container)
  {
    this();
    this.name = name;
    this.breweryName = breweryName;
    this.beerType = beerType;
    this.originCountry = originCountry;
    this.alcoholRate = alcoholRate;
    setAlcoholRateIsSet(true);
    this.price = price;
    setPriceIsSet(true);
    this.description = description;
    this.beerOfTheMonth = beerOfTheMonth;
    setBeerOfTheMonthIsSet(true);
    this.container = container;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SatelliteBeer(SatelliteBeer other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetBreweryName()) {
      this.breweryName = other.breweryName;
    }
    if (other.isSetBeerType()) {
      this.beerType = other.beerType;
    }
    if (other.isSetOriginCountry()) {
      this.originCountry = other.originCountry;
    }
    this.alcoholRate = other.alcoholRate;
    this.price = other.price;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.beerOfTheMonth = other.beerOfTheMonth;
    if (other.isSetContainer()) {
      this.container = other.container;
    }
  }

  public SatelliteBeer deepCopy() {
    return new SatelliteBeer(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.breweryName = null;
    this.beerType = null;
    this.originCountry = null;
    setAlcoholRateIsSet(false);
    this.alcoholRate = 0.0;
    setPriceIsSet(false);
    this.price = 0.0;
    this.description = null;
    setBeerOfTheMonthIsSet(false);
    this.beerOfTheMonth = false;
    this.container = null;
  }

  public String getName() {
    return this.name;
  }

  public SatelliteBeer setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getBreweryName() {
    return this.breweryName;
  }

  public SatelliteBeer setBreweryName(String breweryName) {
    this.breweryName = breweryName;
    return this;
  }

  public void unsetBreweryName() {
    this.breweryName = null;
  }

  /** Returns true if field breweryName is set (has been assigned a value) and false otherwise */
  public boolean isSetBreweryName() {
    return this.breweryName != null;
  }

  public void setBreweryNameIsSet(boolean value) {
    if (!value) {
      this.breweryName = null;
    }
  }

  public String getBeerType() {
    return this.beerType;
  }

  public SatelliteBeer setBeerType(String beerType) {
    this.beerType = beerType;
    return this;
  }

  public void unsetBeerType() {
    this.beerType = null;
  }

  /** Returns true if field beerType is set (has been assigned a value) and false otherwise */
  public boolean isSetBeerType() {
    return this.beerType != null;
  }

  public void setBeerTypeIsSet(boolean value) {
    if (!value) {
      this.beerType = null;
    }
  }

  public String getOriginCountry() {
    return this.originCountry;
  }

  public SatelliteBeer setOriginCountry(String originCountry) {
    this.originCountry = originCountry;
    return this;
  }

  public void unsetOriginCountry() {
    this.originCountry = null;
  }

  /** Returns true if field originCountry is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginCountry() {
    return this.originCountry != null;
  }

  public void setOriginCountryIsSet(boolean value) {
    if (!value) {
      this.originCountry = null;
    }
  }

  public double getAlcoholRate() {
    return this.alcoholRate;
  }

  public SatelliteBeer setAlcoholRate(double alcoholRate) {
    this.alcoholRate = alcoholRate;
    setAlcoholRateIsSet(true);
    return this;
  }

  public void unsetAlcoholRate() {
    __isset_bit_vector.clear(__ALCOHOLRATE_ISSET_ID);
  }

  /** Returns true if field alcoholRate is set (has been assigned a value) and false otherwise */
  public boolean isSetAlcoholRate() {
    return __isset_bit_vector.get(__ALCOHOLRATE_ISSET_ID);
  }

  public void setAlcoholRateIsSet(boolean value) {
    __isset_bit_vector.set(__ALCOHOLRATE_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public SatelliteBeer setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public SatelliteBeer setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public boolean isBeerOfTheMonth() {
    return this.beerOfTheMonth;
  }

  public SatelliteBeer setBeerOfTheMonth(boolean beerOfTheMonth) {
    this.beerOfTheMonth = beerOfTheMonth;
    setBeerOfTheMonthIsSet(true);
    return this;
  }

  public void unsetBeerOfTheMonth() {
    __isset_bit_vector.clear(__BEEROFTHEMONTH_ISSET_ID);
  }

  /** Returns true if field beerOfTheMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetBeerOfTheMonth() {
    return __isset_bit_vector.get(__BEEROFTHEMONTH_ISSET_ID);
  }

  public void setBeerOfTheMonthIsSet(boolean value) {
    __isset_bit_vector.set(__BEEROFTHEMONTH_ISSET_ID, value);
  }

  /**
   * 
   * @see SatelliteBeerContainer
   */
  public SatelliteBeerContainer getContainer() {
    return this.container;
  }

  /**
   * 
   * @see SatelliteBeerContainer
   */
  public SatelliteBeer setContainer(SatelliteBeerContainer container) {
    this.container = container;
    return this;
  }

  public void unsetContainer() {
    this.container = null;
  }

  /** Returns true if field container is set (has been assigned a value) and false otherwise */
  public boolean isSetContainer() {
    return this.container != null;
  }

  public void setContainerIsSet(boolean value) {
    if (!value) {
      this.container = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case BREWERY_NAME:
      if (value == null) {
        unsetBreweryName();
      } else {
        setBreweryName((String)value);
      }
      break;

    case BEER_TYPE:
      if (value == null) {
        unsetBeerType();
      } else {
        setBeerType((String)value);
      }
      break;

    case ORIGIN_COUNTRY:
      if (value == null) {
        unsetOriginCountry();
      } else {
        setOriginCountry((String)value);
      }
      break;

    case ALCOHOL_RATE:
      if (value == null) {
        unsetAlcoholRate();
      } else {
        setAlcoholRate((Double)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case BEER_OF_THE_MONTH:
      if (value == null) {
        unsetBeerOfTheMonth();
      } else {
        setBeerOfTheMonth((Boolean)value);
      }
      break;

    case CONTAINER:
      if (value == null) {
        unsetContainer();
      } else {
        setContainer((SatelliteBeerContainer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case BREWERY_NAME:
      return getBreweryName();

    case BEER_TYPE:
      return getBeerType();

    case ORIGIN_COUNTRY:
      return getOriginCountry();

    case ALCOHOL_RATE:
      return Double.valueOf(getAlcoholRate());

    case PRICE:
      return Double.valueOf(getPrice());

    case DESCRIPTION:
      return getDescription();

    case BEER_OF_THE_MONTH:
      return Boolean.valueOf(isBeerOfTheMonth());

    case CONTAINER:
      return getContainer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case BREWERY_NAME:
      return isSetBreweryName();
    case BEER_TYPE:
      return isSetBeerType();
    case ORIGIN_COUNTRY:
      return isSetOriginCountry();
    case ALCOHOL_RATE:
      return isSetAlcoholRate();
    case PRICE:
      return isSetPrice();
    case DESCRIPTION:
      return isSetDescription();
    case BEER_OF_THE_MONTH:
      return isSetBeerOfTheMonth();
    case CONTAINER:
      return isSetContainer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SatelliteBeer)
      return this.equals((SatelliteBeer)that);
    return false;
  }

  public boolean equals(SatelliteBeer that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_breweryName = true && this.isSetBreweryName();
    boolean that_present_breweryName = true && that.isSetBreweryName();
    if (this_present_breweryName || that_present_breweryName) {
      if (!(this_present_breweryName && that_present_breweryName))
        return false;
      if (!this.breweryName.equals(that.breweryName))
        return false;
    }

    boolean this_present_beerType = true && this.isSetBeerType();
    boolean that_present_beerType = true && that.isSetBeerType();
    if (this_present_beerType || that_present_beerType) {
      if (!(this_present_beerType && that_present_beerType))
        return false;
      if (!this.beerType.equals(that.beerType))
        return false;
    }

    boolean this_present_originCountry = true && this.isSetOriginCountry();
    boolean that_present_originCountry = true && that.isSetOriginCountry();
    if (this_present_originCountry || that_present_originCountry) {
      if (!(this_present_originCountry && that_present_originCountry))
        return false;
      if (!this.originCountry.equals(that.originCountry))
        return false;
    }

    boolean this_present_alcoholRate = true;
    boolean that_present_alcoholRate = true;
    if (this_present_alcoholRate || that_present_alcoholRate) {
      if (!(this_present_alcoholRate && that_present_alcoholRate))
        return false;
      if (this.alcoholRate != that.alcoholRate)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_beerOfTheMonth = true;
    boolean that_present_beerOfTheMonth = true;
    if (this_present_beerOfTheMonth || that_present_beerOfTheMonth) {
      if (!(this_present_beerOfTheMonth && that_present_beerOfTheMonth))
        return false;
      if (this.beerOfTheMonth != that.beerOfTheMonth)
        return false;
    }

    boolean this_present_container = true && this.isSetContainer();
    boolean that_present_container = true && that.isSetContainer();
    if (this_present_container || that_present_container) {
      if (!(this_present_container && that_present_container))
        return false;
      if (!this.container.equals(that.container))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_breweryName = true && (isSetBreweryName());
    builder.append(present_breweryName);
    if (present_breweryName)
      builder.append(breweryName);

    boolean present_beerType = true && (isSetBeerType());
    builder.append(present_beerType);
    if (present_beerType)
      builder.append(beerType);

    boolean present_originCountry = true && (isSetOriginCountry());
    builder.append(present_originCountry);
    if (present_originCountry)
      builder.append(originCountry);

    boolean present_alcoholRate = true;
    builder.append(present_alcoholRate);
    if (present_alcoholRate)
      builder.append(alcoholRate);

    boolean present_price = true;
    builder.append(present_price);
    if (present_price)
      builder.append(price);

    boolean present_description = true && (isSetDescription());
    builder.append(present_description);
    if (present_description)
      builder.append(description);

    boolean present_beerOfTheMonth = true;
    builder.append(present_beerOfTheMonth);
    if (present_beerOfTheMonth)
      builder.append(beerOfTheMonth);

    boolean present_container = true && (isSetContainer());
    builder.append(present_container);
    if (present_container)
      builder.append(container.getValue());

    return builder.toHashCode();
  }

  public int compareTo(SatelliteBeer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SatelliteBeer typedOther = (SatelliteBeer)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBreweryName()).compareTo(typedOther.isSetBreweryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBreweryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.breweryName, typedOther.breweryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeerType()).compareTo(typedOther.isSetBeerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beerType, typedOther.beerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginCountry()).compareTo(typedOther.isSetOriginCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originCountry, typedOther.originCountry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlcoholRate()).compareTo(typedOther.isSetAlcoholRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlcoholRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alcoholRate, typedOther.alcoholRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeerOfTheMonth()).compareTo(typedOther.isSetBeerOfTheMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeerOfTheMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beerOfTheMonth, typedOther.beerOfTheMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContainer()).compareTo(typedOther.isSetContainer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.container, typedOther.container);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BREWERY_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.breweryName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // BEER_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.beerType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ORIGIN_COUNTRY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.originCountry = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ALCOHOL_RATE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.alcoholRate = iprot.readDouble();
            setAlcoholRateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PRICE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.price = iprot.readDouble();
            setPriceIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.description = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // BEER_OF_THE_MONTH
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.beerOfTheMonth = iprot.readBool();
            setBeerOfTheMonthIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // CONTAINER
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.container = SatelliteBeerContainer.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetAlcoholRate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'alcoholRate' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetPrice()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'price' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetBeerOfTheMonth()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'beerOfTheMonth' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.breweryName != null) {
      oprot.writeFieldBegin(BREWERY_NAME_FIELD_DESC);
      oprot.writeString(this.breweryName);
      oprot.writeFieldEnd();
    }
    if (this.beerType != null) {
      oprot.writeFieldBegin(BEER_TYPE_FIELD_DESC);
      oprot.writeString(this.beerType);
      oprot.writeFieldEnd();
    }
    if (this.originCountry != null) {
      oprot.writeFieldBegin(ORIGIN_COUNTRY_FIELD_DESC);
      oprot.writeString(this.originCountry);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ALCOHOL_RATE_FIELD_DESC);
    oprot.writeDouble(this.alcoholRate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PRICE_FIELD_DESC);
    oprot.writeDouble(this.price);
    oprot.writeFieldEnd();
    if (this.description != null) {
      oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.description);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(BEER_OF_THE_MONTH_FIELD_DESC);
    oprot.writeBool(this.beerOfTheMonth);
    oprot.writeFieldEnd();
    if (this.container != null) {
      oprot.writeFieldBegin(CONTAINER_FIELD_DESC);
      oprot.writeI32(this.container.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SatelliteBeer(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("breweryName:");
    if (this.breweryName == null) {
      sb.append("null");
    } else {
      sb.append(this.breweryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beerType:");
    if (this.beerType == null) {
      sb.append("null");
    } else {
      sb.append(this.beerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originCountry:");
    if (this.originCountry == null) {
      sb.append("null");
    } else {
      sb.append(this.originCountry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alcoholRate:");
    sb.append(this.alcoholRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beerOfTheMonth:");
    sb.append(this.beerOfTheMonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("container:");
    if (this.container == null) {
      sb.append("null");
    } else {
      sb.append(this.container);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (breweryName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'breweryName' was not present! Struct: " + toString());
    }
    if (beerType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'beerType' was not present! Struct: " + toString());
    }
    if (originCountry == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'originCountry' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'alcoholRate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'price' because it's a primitive and you chose the non-beans generator.
    if (description == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'beerOfTheMonth' because it's a primitive and you chose the non-beans generator.
    if (container == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'container' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

