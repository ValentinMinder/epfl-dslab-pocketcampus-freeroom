/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.bikes.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BikeEmplacement implements org.apache.thrift.TBase<BikeEmplacement, BikeEmplacement._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BikeEmplacement");

  private static final org.apache.thrift.protocol.TField NUMBER_OF_EMPTY_SPACES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfEmptySpaces", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_AVAILABLE_BIKES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfAvailableBikes", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);

  public int numberOfEmptySpaces; // required
  public int numberOfAvailableBikes; // required
  public double latitude; // required
  public double longitude; // required
  public String name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMBER_OF_EMPTY_SPACES((short)1, "numberOfEmptySpaces"),
    NUMBER_OF_AVAILABLE_BIKES((short)2, "numberOfAvailableBikes"),
    LATITUDE((short)3, "latitude"),
    LONGITUDE((short)4, "longitude"),
    NAME((short)5, "name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMBER_OF_EMPTY_SPACES
          return NUMBER_OF_EMPTY_SPACES;
        case 2: // NUMBER_OF_AVAILABLE_BIKES
          return NUMBER_OF_AVAILABLE_BIKES;
        case 3: // LATITUDE
          return LATITUDE;
        case 4: // LONGITUDE
          return LONGITUDE;
        case 5: // NAME
          return NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBEROFEMPTYSPACES_ISSET_ID = 0;
  private static final int __NUMBEROFAVAILABLEBIKES_ISSET_ID = 1;
  private static final int __LATITUDE_ISSET_ID = 2;
  private static final int __LONGITUDE_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMBER_OF_EMPTY_SPACES, new org.apache.thrift.meta_data.FieldMetaData("numberOfEmptySpaces", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.NUMBER_OF_AVAILABLE_BIKES, new org.apache.thrift.meta_data.FieldMetaData("numberOfAvailableBikes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BikeEmplacement.class, metaDataMap);
  }

  public BikeEmplacement() {
  }

  public BikeEmplacement(
    int numberOfEmptySpaces,
    int numberOfAvailableBikes,
    double latitude,
    double longitude,
    String name)
  {
    this();
    this.numberOfEmptySpaces = numberOfEmptySpaces;
    setNumberOfEmptySpacesIsSet(true);
    this.numberOfAvailableBikes = numberOfAvailableBikes;
    setNumberOfAvailableBikesIsSet(true);
    this.latitude = latitude;
    setLatitudeIsSet(true);
    this.longitude = longitude;
    setLongitudeIsSet(true);
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BikeEmplacement(BikeEmplacement other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.numberOfEmptySpaces = other.numberOfEmptySpaces;
    this.numberOfAvailableBikes = other.numberOfAvailableBikes;
    this.latitude = other.latitude;
    this.longitude = other.longitude;
    if (other.isSetName()) {
      this.name = other.name;
    }
  }

  public BikeEmplacement deepCopy() {
    return new BikeEmplacement(this);
  }

  @Override
  public void clear() {
    setNumberOfEmptySpacesIsSet(false);
    this.numberOfEmptySpaces = 0;
    setNumberOfAvailableBikesIsSet(false);
    this.numberOfAvailableBikes = 0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    this.name = null;
  }

  public int getNumberOfEmptySpaces() {
    return this.numberOfEmptySpaces;
  }

  public BikeEmplacement setNumberOfEmptySpaces(int numberOfEmptySpaces) {
    this.numberOfEmptySpaces = numberOfEmptySpaces;
    setNumberOfEmptySpacesIsSet(true);
    return this;
  }

  public void unsetNumberOfEmptySpaces() {
    __isset_bit_vector.clear(__NUMBEROFEMPTYSPACES_ISSET_ID);
  }

  /** Returns true if field numberOfEmptySpaces is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfEmptySpaces() {
    return __isset_bit_vector.get(__NUMBEROFEMPTYSPACES_ISSET_ID);
  }

  public void setNumberOfEmptySpacesIsSet(boolean value) {
    __isset_bit_vector.set(__NUMBEROFEMPTYSPACES_ISSET_ID, value);
  }

  public int getNumberOfAvailableBikes() {
    return this.numberOfAvailableBikes;
  }

  public BikeEmplacement setNumberOfAvailableBikes(int numberOfAvailableBikes) {
    this.numberOfAvailableBikes = numberOfAvailableBikes;
    setNumberOfAvailableBikesIsSet(true);
    return this;
  }

  public void unsetNumberOfAvailableBikes() {
    __isset_bit_vector.clear(__NUMBEROFAVAILABLEBIKES_ISSET_ID);
  }

  /** Returns true if field numberOfAvailableBikes is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfAvailableBikes() {
    return __isset_bit_vector.get(__NUMBEROFAVAILABLEBIKES_ISSET_ID);
  }

  public void setNumberOfAvailableBikesIsSet(boolean value) {
    __isset_bit_vector.set(__NUMBEROFAVAILABLEBIKES_ISSET_ID, value);
  }

  public double getLatitude() {
    return this.latitude;
  }

  public BikeEmplacement setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bit_vector.clear(__LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return __isset_bit_vector.get(__LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bit_vector.set(__LATITUDE_ISSET_ID, value);
  }

  public double getLongitude() {
    return this.longitude;
  }

  public BikeEmplacement setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bit_vector.clear(__LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return __isset_bit_vector.get(__LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bit_vector.set(__LONGITUDE_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public BikeEmplacement setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUMBER_OF_EMPTY_SPACES:
      if (value == null) {
        unsetNumberOfEmptySpaces();
      } else {
        setNumberOfEmptySpaces((Integer)value);
      }
      break;

    case NUMBER_OF_AVAILABLE_BIKES:
      if (value == null) {
        unsetNumberOfAvailableBikes();
      } else {
        setNumberOfAvailableBikes((Integer)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER_OF_EMPTY_SPACES:
      return Integer.valueOf(getNumberOfEmptySpaces());

    case NUMBER_OF_AVAILABLE_BIKES:
      return Integer.valueOf(getNumberOfAvailableBikes());

    case LATITUDE:
      return Double.valueOf(getLatitude());

    case LONGITUDE:
      return Double.valueOf(getLongitude());

    case NAME:
      return getName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUMBER_OF_EMPTY_SPACES:
      return isSetNumberOfEmptySpaces();
    case NUMBER_OF_AVAILABLE_BIKES:
      return isSetNumberOfAvailableBikes();
    case LATITUDE:
      return isSetLatitude();
    case LONGITUDE:
      return isSetLongitude();
    case NAME:
      return isSetName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BikeEmplacement)
      return this.equals((BikeEmplacement)that);
    return false;
  }

  public boolean equals(BikeEmplacement that) {
    if (that == null)
      return false;

    boolean this_present_numberOfEmptySpaces = true;
    boolean that_present_numberOfEmptySpaces = true;
    if (this_present_numberOfEmptySpaces || that_present_numberOfEmptySpaces) {
      if (!(this_present_numberOfEmptySpaces && that_present_numberOfEmptySpaces))
        return false;
      if (this.numberOfEmptySpaces != that.numberOfEmptySpaces)
        return false;
    }

    boolean this_present_numberOfAvailableBikes = true;
    boolean that_present_numberOfAvailableBikes = true;
    if (this_present_numberOfAvailableBikes || that_present_numberOfAvailableBikes) {
      if (!(this_present_numberOfAvailableBikes && that_present_numberOfAvailableBikes))
        return false;
      if (this.numberOfAvailableBikes != that.numberOfAvailableBikes)
        return false;
    }

    boolean this_present_latitude = true;
    boolean that_present_latitude = true;
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_numberOfEmptySpaces = true;
    builder.append(present_numberOfEmptySpaces);
    if (present_numberOfEmptySpaces)
      builder.append(numberOfEmptySpaces);

    boolean present_numberOfAvailableBikes = true;
    builder.append(present_numberOfAvailableBikes);
    if (present_numberOfAvailableBikes)
      builder.append(numberOfAvailableBikes);

    boolean present_latitude = true;
    builder.append(present_latitude);
    if (present_latitude)
      builder.append(latitude);

    boolean present_longitude = true;
    builder.append(present_longitude);
    if (present_longitude)
      builder.append(longitude);

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    return builder.toHashCode();
  }

  public int compareTo(BikeEmplacement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BikeEmplacement typedOther = (BikeEmplacement)other;

    lastComparison = Boolean.valueOf(isSetNumberOfEmptySpaces()).compareTo(typedOther.isSetNumberOfEmptySpaces());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfEmptySpaces()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfEmptySpaces, typedOther.numberOfEmptySpaces);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfAvailableBikes()).compareTo(typedOther.isSetNumberOfAvailableBikes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfAvailableBikes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfAvailableBikes, typedOther.numberOfAvailableBikes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(typedOther.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, typedOther.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NUMBER_OF_EMPTY_SPACES
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.numberOfEmptySpaces = iprot.readI32();
            setNumberOfEmptySpacesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NUMBER_OF_AVAILABLE_BIKES
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.numberOfAvailableBikes = iprot.readI32();
            setNumberOfAvailableBikesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LATITUDE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.latitude = iprot.readDouble();
            setLatitudeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LONGITUDE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.longitude = iprot.readDouble();
            setLongitudeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetNumberOfEmptySpaces()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfEmptySpaces' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetNumberOfAvailableBikes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfAvailableBikes' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetLatitude()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'latitude' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetLongitude()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'longitude' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NUMBER_OF_EMPTY_SPACES_FIELD_DESC);
    oprot.writeI32(this.numberOfEmptySpaces);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUMBER_OF_AVAILABLE_BIKES_FIELD_DESC);
    oprot.writeI32(this.numberOfAvailableBikes);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
    oprot.writeDouble(this.latitude);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
    oprot.writeDouble(this.longitude);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BikeEmplacement(");
    boolean first = true;

    sb.append("numberOfEmptySpaces:");
    sb.append(this.numberOfEmptySpaces);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfAvailableBikes:");
    sb.append(this.numberOfAvailableBikes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latitude:");
    sb.append(this.latitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'numberOfEmptySpaces' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numberOfAvailableBikes' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'latitude' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'longitude' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

