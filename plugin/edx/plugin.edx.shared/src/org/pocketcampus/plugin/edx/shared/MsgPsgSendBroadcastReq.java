/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.edx.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class MsgPsgSendBroadcastReq implements org.apache.thrift.TBase<MsgPsgSendBroadcastReq, MsgPsgSendBroadcastReq._Fields>, java.io.Serializable, Cloneable, Comparable<MsgPsgSendBroadcastReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MsgPsgSendBroadcastReq");

  private static final org.apache.thrift.protocol.TField SENDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("senderRef", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ROOM_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("roomRef", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("messageHeader", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TEXT_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("textBody", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BINARY_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryBody", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MsgPsgSendBroadcastReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MsgPsgSendBroadcastReqTupleSchemeFactory());
  }

  private String senderRef; // required
  private String roomRef; // required
  private String messageHeader; // required
  private MsgPsgMessageType messageType; // required
  private String textBody; // optional
  private ByteBuffer binaryBody; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENDER_REF((short)1, "senderRef"),
    ROOM_REF((short)2, "roomRef"),
    MESSAGE_HEADER((short)3, "messageHeader"),
    /**
     * 
     * @see MsgPsgMessageType
     */
    MESSAGE_TYPE((short)4, "messageType"),
    TEXT_BODY((short)5, "textBody"),
    BINARY_BODY((short)6, "binaryBody");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENDER_REF
          return SENDER_REF;
        case 2: // ROOM_REF
          return ROOM_REF;
        case 3: // MESSAGE_HEADER
          return MESSAGE_HEADER;
        case 4: // MESSAGE_TYPE
          return MESSAGE_TYPE;
        case 5: // TEXT_BODY
          return TEXT_BODY;
        case 6: // BINARY_BODY
          return BINARY_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TEXT_BODY,_Fields.BINARY_BODY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENDER_REF, new org.apache.thrift.meta_data.FieldMetaData("senderRef", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROOM_REF, new org.apache.thrift.meta_data.FieldMetaData("roomRef", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_HEADER, new org.apache.thrift.meta_data.FieldMetaData("messageHeader", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MsgPsgMessageType.class)));
    tmpMap.put(_Fields.TEXT_BODY, new org.apache.thrift.meta_data.FieldMetaData("textBody", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_BODY, new org.apache.thrift.meta_data.FieldMetaData("binaryBody", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MsgPsgSendBroadcastReq.class, metaDataMap);
  }

  public MsgPsgSendBroadcastReq() {
  }

  public MsgPsgSendBroadcastReq(
    String senderRef,
    String roomRef,
    String messageHeader,
    MsgPsgMessageType messageType)
  {
    this();
    this.senderRef = senderRef;
    this.roomRef = roomRef;
    this.messageHeader = messageHeader;
    this.messageType = messageType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MsgPsgSendBroadcastReq(MsgPsgSendBroadcastReq other) {
    if (other.isSetSenderRef()) {
      this.senderRef = other.senderRef;
    }
    if (other.isSetRoomRef()) {
      this.roomRef = other.roomRef;
    }
    if (other.isSetMessageHeader()) {
      this.messageHeader = other.messageHeader;
    }
    if (other.isSetMessageType()) {
      this.messageType = other.messageType;
    }
    if (other.isSetTextBody()) {
      this.textBody = other.textBody;
    }
    if (other.isSetBinaryBody()) {
      this.binaryBody = org.apache.thrift.TBaseHelper.copyBinary(other.binaryBody);
    }
  }

  public MsgPsgSendBroadcastReq deepCopy() {
    return new MsgPsgSendBroadcastReq(this);
  }

  @Override
  public void clear() {
    this.senderRef = null;
    this.roomRef = null;
    this.messageHeader = null;
    this.messageType = null;
    this.textBody = null;
    this.binaryBody = null;
  }

  public String getSenderRef() {
    return this.senderRef;
  }

  public MsgPsgSendBroadcastReq setSenderRef(String senderRef) {
    this.senderRef = senderRef;
    return this;
  }

  public void unsetSenderRef() {
    this.senderRef = null;
  }

  /** Returns true if field senderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderRef() {
    return this.senderRef != null;
  }

  public void setSenderRefIsSet(boolean value) {
    if (!value) {
      this.senderRef = null;
    }
  }

  public String getRoomRef() {
    return this.roomRef;
  }

  public MsgPsgSendBroadcastReq setRoomRef(String roomRef) {
    this.roomRef = roomRef;
    return this;
  }

  public void unsetRoomRef() {
    this.roomRef = null;
  }

  /** Returns true if field roomRef is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomRef() {
    return this.roomRef != null;
  }

  public void setRoomRefIsSet(boolean value) {
    if (!value) {
      this.roomRef = null;
    }
  }

  public String getMessageHeader() {
    return this.messageHeader;
  }

  public MsgPsgSendBroadcastReq setMessageHeader(String messageHeader) {
    this.messageHeader = messageHeader;
    return this;
  }

  public void unsetMessageHeader() {
    this.messageHeader = null;
  }

  /** Returns true if field messageHeader is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageHeader() {
    return this.messageHeader != null;
  }

  public void setMessageHeaderIsSet(boolean value) {
    if (!value) {
      this.messageHeader = null;
    }
  }

  /**
   * 
   * @see MsgPsgMessageType
   */
  public MsgPsgMessageType getMessageType() {
    return this.messageType;
  }

  /**
   * 
   * @see MsgPsgMessageType
   */
  public MsgPsgSendBroadcastReq setMessageType(MsgPsgMessageType messageType) {
    this.messageType = messageType;
    return this;
  }

  public void unsetMessageType() {
    this.messageType = null;
  }

  /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageType() {
    return this.messageType != null;
  }

  public void setMessageTypeIsSet(boolean value) {
    if (!value) {
      this.messageType = null;
    }
  }

  public String getTextBody() {
    return this.textBody;
  }

  public MsgPsgSendBroadcastReq setTextBody(String textBody) {
    this.textBody = textBody;
    return this;
  }

  public void unsetTextBody() {
    this.textBody = null;
  }

  /** Returns true if field textBody is set (has been assigned a value) and false otherwise */
  public boolean isSetTextBody() {
    return this.textBody != null;
  }

  public void setTextBodyIsSet(boolean value) {
    if (!value) {
      this.textBody = null;
    }
  }

  public byte[] getBinaryBody() {
    setBinaryBody(org.apache.thrift.TBaseHelper.rightSize(binaryBody));
    return binaryBody == null ? null : binaryBody.array();
  }

  public ByteBuffer bufferForBinaryBody() {
    return org.apache.thrift.TBaseHelper.copyBinary(binaryBody);
  }

  public MsgPsgSendBroadcastReq setBinaryBody(byte[] binaryBody) {
    this.binaryBody = binaryBody == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(binaryBody, binaryBody.length));
    return this;
  }

  public MsgPsgSendBroadcastReq setBinaryBody(ByteBuffer binaryBody) {
    this.binaryBody = org.apache.thrift.TBaseHelper.copyBinary(binaryBody);
    return this;
  }

  public void unsetBinaryBody() {
    this.binaryBody = null;
  }

  /** Returns true if field binaryBody is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryBody() {
    return this.binaryBody != null;
  }

  public void setBinaryBodyIsSet(boolean value) {
    if (!value) {
      this.binaryBody = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SENDER_REF:
      if (value == null) {
        unsetSenderRef();
      } else {
        setSenderRef((String)value);
      }
      break;

    case ROOM_REF:
      if (value == null) {
        unsetRoomRef();
      } else {
        setRoomRef((String)value);
      }
      break;

    case MESSAGE_HEADER:
      if (value == null) {
        unsetMessageHeader();
      } else {
        setMessageHeader((String)value);
      }
      break;

    case MESSAGE_TYPE:
      if (value == null) {
        unsetMessageType();
      } else {
        setMessageType((MsgPsgMessageType)value);
      }
      break;

    case TEXT_BODY:
      if (value == null) {
        unsetTextBody();
      } else {
        setTextBody((String)value);
      }
      break;

    case BINARY_BODY:
      if (value == null) {
        unsetBinaryBody();
      } else {
        setBinaryBody((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENDER_REF:
      return getSenderRef();

    case ROOM_REF:
      return getRoomRef();

    case MESSAGE_HEADER:
      return getMessageHeader();

    case MESSAGE_TYPE:
      return getMessageType();

    case TEXT_BODY:
      return getTextBody();

    case BINARY_BODY:
      return getBinaryBody();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENDER_REF:
      return isSetSenderRef();
    case ROOM_REF:
      return isSetRoomRef();
    case MESSAGE_HEADER:
      return isSetMessageHeader();
    case MESSAGE_TYPE:
      return isSetMessageType();
    case TEXT_BODY:
      return isSetTextBody();
    case BINARY_BODY:
      return isSetBinaryBody();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MsgPsgSendBroadcastReq)
      return this.equals((MsgPsgSendBroadcastReq)that);
    return false;
  }

  public boolean equals(MsgPsgSendBroadcastReq that) {
    if (that == null)
      return false;

    boolean this_present_senderRef = true && this.isSetSenderRef();
    boolean that_present_senderRef = true && that.isSetSenderRef();
    if (this_present_senderRef || that_present_senderRef) {
      if (!(this_present_senderRef && that_present_senderRef))
        return false;
      if (!this.senderRef.equals(that.senderRef))
        return false;
    }

    boolean this_present_roomRef = true && this.isSetRoomRef();
    boolean that_present_roomRef = true && that.isSetRoomRef();
    if (this_present_roomRef || that_present_roomRef) {
      if (!(this_present_roomRef && that_present_roomRef))
        return false;
      if (!this.roomRef.equals(that.roomRef))
        return false;
    }

    boolean this_present_messageHeader = true && this.isSetMessageHeader();
    boolean that_present_messageHeader = true && that.isSetMessageHeader();
    if (this_present_messageHeader || that_present_messageHeader) {
      if (!(this_present_messageHeader && that_present_messageHeader))
        return false;
      if (!this.messageHeader.equals(that.messageHeader))
        return false;
    }

    boolean this_present_messageType = true && this.isSetMessageType();
    boolean that_present_messageType = true && that.isSetMessageType();
    if (this_present_messageType || that_present_messageType) {
      if (!(this_present_messageType && that_present_messageType))
        return false;
      if (!this.messageType.equals(that.messageType))
        return false;
    }

    boolean this_present_textBody = true && this.isSetTextBody();
    boolean that_present_textBody = true && that.isSetTextBody();
    if (this_present_textBody || that_present_textBody) {
      if (!(this_present_textBody && that_present_textBody))
        return false;
      if (!this.textBody.equals(that.textBody))
        return false;
    }

    boolean this_present_binaryBody = true && this.isSetBinaryBody();
    boolean that_present_binaryBody = true && that.isSetBinaryBody();
    if (this_present_binaryBody || that_present_binaryBody) {
      if (!(this_present_binaryBody && that_present_binaryBody))
        return false;
      if (!this.binaryBody.equals(that.binaryBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_senderRef = true && (isSetSenderRef());
    list.add(present_senderRef);
    if (present_senderRef)
      list.add(senderRef);

    boolean present_roomRef = true && (isSetRoomRef());
    list.add(present_roomRef);
    if (present_roomRef)
      list.add(roomRef);

    boolean present_messageHeader = true && (isSetMessageHeader());
    list.add(present_messageHeader);
    if (present_messageHeader)
      list.add(messageHeader);

    boolean present_messageType = true && (isSetMessageType());
    list.add(present_messageType);
    if (present_messageType)
      list.add(messageType.getValue());

    boolean present_textBody = true && (isSetTextBody());
    list.add(present_textBody);
    if (present_textBody)
      list.add(textBody);

    boolean present_binaryBody = true && (isSetBinaryBody());
    list.add(present_binaryBody);
    if (present_binaryBody)
      list.add(binaryBody);

    return list.hashCode();
  }

  @Override
  public int compareTo(MsgPsgSendBroadcastReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSenderRef()).compareTo(other.isSetSenderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderRef, other.senderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomRef()).compareTo(other.isSetRoomRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomRef, other.roomRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageHeader()).compareTo(other.isSetMessageHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageHeader, other.messageHeader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextBody()).compareTo(other.isSetTextBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textBody, other.textBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryBody()).compareTo(other.isSetBinaryBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryBody, other.binaryBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MsgPsgSendBroadcastReq(");
    boolean first = true;

    sb.append("senderRef:");
    if (this.senderRef == null) {
      sb.append("null");
    } else {
      sb.append(this.senderRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomRef:");
    if (this.roomRef == null) {
      sb.append("null");
    } else {
      sb.append(this.roomRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageHeader:");
    if (this.messageHeader == null) {
      sb.append("null");
    } else {
      sb.append(this.messageHeader);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageType:");
    if (this.messageType == null) {
      sb.append("null");
    } else {
      sb.append(this.messageType);
    }
    first = false;
    if (isSetTextBody()) {
      if (!first) sb.append(", ");
      sb.append("textBody:");
      if (this.textBody == null) {
        sb.append("null");
      } else {
        sb.append(this.textBody);
      }
      first = false;
    }
    if (isSetBinaryBody()) {
      if (!first) sb.append(", ");
      sb.append("binaryBody:");
      if (this.binaryBody == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryBody, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (senderRef == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'senderRef' was not present! Struct: " + toString());
    }
    if (roomRef == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'roomRef' was not present! Struct: " + toString());
    }
    if (messageHeader == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageHeader' was not present! Struct: " + toString());
    }
    if (messageType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MsgPsgSendBroadcastReqStandardSchemeFactory implements SchemeFactory {
    public MsgPsgSendBroadcastReqStandardScheme getScheme() {
      return new MsgPsgSendBroadcastReqStandardScheme();
    }
  }

  private static class MsgPsgSendBroadcastReqStandardScheme extends StandardScheme<MsgPsgSendBroadcastReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MsgPsgSendBroadcastReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.senderRef = iprot.readString();
              struct.setSenderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROOM_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roomRef = iprot.readString();
              struct.setRoomRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE_HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageHeader = iprot.readString();
              struct.setMessageHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageType = org.pocketcampus.plugin.edx.shared.MsgPsgMessageType.findByValue(iprot.readI32());
              struct.setMessageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEXT_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.textBody = iprot.readString();
              struct.setTextBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BINARY_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryBody = iprot.readBinary();
              struct.setBinaryBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MsgPsgSendBroadcastReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.senderRef != null) {
        oprot.writeFieldBegin(SENDER_REF_FIELD_DESC);
        oprot.writeString(struct.senderRef);
        oprot.writeFieldEnd();
      }
      if (struct.roomRef != null) {
        oprot.writeFieldBegin(ROOM_REF_FIELD_DESC);
        oprot.writeString(struct.roomRef);
        oprot.writeFieldEnd();
      }
      if (struct.messageHeader != null) {
        oprot.writeFieldBegin(MESSAGE_HEADER_FIELD_DESC);
        oprot.writeString(struct.messageHeader);
        oprot.writeFieldEnd();
      }
      if (struct.messageType != null) {
        oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.messageType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.textBody != null) {
        if (struct.isSetTextBody()) {
          oprot.writeFieldBegin(TEXT_BODY_FIELD_DESC);
          oprot.writeString(struct.textBody);
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryBody != null) {
        if (struct.isSetBinaryBody()) {
          oprot.writeFieldBegin(BINARY_BODY_FIELD_DESC);
          oprot.writeBinary(struct.binaryBody);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MsgPsgSendBroadcastReqTupleSchemeFactory implements SchemeFactory {
    public MsgPsgSendBroadcastReqTupleScheme getScheme() {
      return new MsgPsgSendBroadcastReqTupleScheme();
    }
  }

  private static class MsgPsgSendBroadcastReqTupleScheme extends TupleScheme<MsgPsgSendBroadcastReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MsgPsgSendBroadcastReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.senderRef);
      oprot.writeString(struct.roomRef);
      oprot.writeString(struct.messageHeader);
      oprot.writeI32(struct.messageType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetTextBody()) {
        optionals.set(0);
      }
      if (struct.isSetBinaryBody()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTextBody()) {
        oprot.writeString(struct.textBody);
      }
      if (struct.isSetBinaryBody()) {
        oprot.writeBinary(struct.binaryBody);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MsgPsgSendBroadcastReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.senderRef = iprot.readString();
      struct.setSenderRefIsSet(true);
      struct.roomRef = iprot.readString();
      struct.setRoomRefIsSet(true);
      struct.messageHeader = iprot.readString();
      struct.setMessageHeaderIsSet(true);
      struct.messageType = org.pocketcampus.plugin.edx.shared.MsgPsgMessageType.findByValue(iprot.readI32());
      struct.setMessageTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.textBody = iprot.readString();
        struct.setTextBodyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.binaryBody = iprot.readBinary();
        struct.setBinaryBodyIsSet(true);
      }
    }
  }

}

