/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.edx.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class EdxModule implements org.apache.thrift.TBase<EdxModule, EdxModule._Fields>, java.io.Serializable, Cloneable, Comparable<EdxModule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EdxModule");

  private static final org.apache.thrift.protocol.TField MODULE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODULE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleTitle", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EdxModuleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EdxModuleTupleSchemeFactory());
  }

  private String moduleUrl; // required
  private String moduleTitle; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODULE_URL((short)1, "moduleUrl"),
    MODULE_TITLE((short)2, "moduleTitle");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODULE_URL
          return MODULE_URL;
        case 2: // MODULE_TITLE
          return MODULE_TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODULE_URL, new org.apache.thrift.meta_data.FieldMetaData("moduleUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODULE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("moduleTitle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EdxModule.class, metaDataMap);
  }

  public EdxModule() {
  }

  public EdxModule(
    String moduleUrl,
    String moduleTitle)
  {
    this();
    this.moduleUrl = moduleUrl;
    this.moduleTitle = moduleTitle;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EdxModule(EdxModule other) {
    if (other.isSetModuleUrl()) {
      this.moduleUrl = other.moduleUrl;
    }
    if (other.isSetModuleTitle()) {
      this.moduleTitle = other.moduleTitle;
    }
  }

  public EdxModule deepCopy() {
    return new EdxModule(this);
  }

  @Override
  public void clear() {
    this.moduleUrl = null;
    this.moduleTitle = null;
  }

  public String getModuleUrl() {
    return this.moduleUrl;
  }

  public EdxModule setModuleUrl(String moduleUrl) {
    this.moduleUrl = moduleUrl;
    return this;
  }

  public void unsetModuleUrl() {
    this.moduleUrl = null;
  }

  /** Returns true if field moduleUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetModuleUrl() {
    return this.moduleUrl != null;
  }

  public void setModuleUrlIsSet(boolean value) {
    if (!value) {
      this.moduleUrl = null;
    }
  }

  public String getModuleTitle() {
    return this.moduleTitle;
  }

  public EdxModule setModuleTitle(String moduleTitle) {
    this.moduleTitle = moduleTitle;
    return this;
  }

  public void unsetModuleTitle() {
    this.moduleTitle = null;
  }

  /** Returns true if field moduleTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetModuleTitle() {
    return this.moduleTitle != null;
  }

  public void setModuleTitleIsSet(boolean value) {
    if (!value) {
      this.moduleTitle = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODULE_URL:
      if (value == null) {
        unsetModuleUrl();
      } else {
        setModuleUrl((String)value);
      }
      break;

    case MODULE_TITLE:
      if (value == null) {
        unsetModuleTitle();
      } else {
        setModuleTitle((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODULE_URL:
      return getModuleUrl();

    case MODULE_TITLE:
      return getModuleTitle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODULE_URL:
      return isSetModuleUrl();
    case MODULE_TITLE:
      return isSetModuleTitle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EdxModule)
      return this.equals((EdxModule)that);
    return false;
  }

  public boolean equals(EdxModule that) {
    if (that == null)
      return false;

    boolean this_present_moduleUrl = true && this.isSetModuleUrl();
    boolean that_present_moduleUrl = true && that.isSetModuleUrl();
    if (this_present_moduleUrl || that_present_moduleUrl) {
      if (!(this_present_moduleUrl && that_present_moduleUrl))
        return false;
      if (!this.moduleUrl.equals(that.moduleUrl))
        return false;
    }

    boolean this_present_moduleTitle = true && this.isSetModuleTitle();
    boolean that_present_moduleTitle = true && that.isSetModuleTitle();
    if (this_present_moduleTitle || that_present_moduleTitle) {
      if (!(this_present_moduleTitle && that_present_moduleTitle))
        return false;
      if (!this.moduleTitle.equals(that.moduleTitle))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_moduleUrl = true && (isSetModuleUrl());
    list.add(present_moduleUrl);
    if (present_moduleUrl)
      list.add(moduleUrl);

    boolean present_moduleTitle = true && (isSetModuleTitle());
    list.add(present_moduleTitle);
    if (present_moduleTitle)
      list.add(moduleTitle);

    return list.hashCode();
  }

  @Override
  public int compareTo(EdxModule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetModuleUrl()).compareTo(other.isSetModuleUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuleUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleUrl, other.moduleUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModuleTitle()).compareTo(other.isSetModuleTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuleTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleTitle, other.moduleTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EdxModule(");
    boolean first = true;

    sb.append("moduleUrl:");
    if (this.moduleUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.moduleUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moduleTitle:");
    if (this.moduleTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.moduleTitle);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (moduleUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'moduleUrl' was not present! Struct: " + toString());
    }
    if (moduleTitle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'moduleTitle' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EdxModuleStandardSchemeFactory implements SchemeFactory {
    public EdxModuleStandardScheme getScheme() {
      return new EdxModuleStandardScheme();
    }
  }

  private static class EdxModuleStandardScheme extends StandardScheme<EdxModule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EdxModule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODULE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moduleUrl = iprot.readString();
              struct.setModuleUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODULE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moduleTitle = iprot.readString();
              struct.setModuleTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EdxModule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.moduleUrl != null) {
        oprot.writeFieldBegin(MODULE_URL_FIELD_DESC);
        oprot.writeString(struct.moduleUrl);
        oprot.writeFieldEnd();
      }
      if (struct.moduleTitle != null) {
        oprot.writeFieldBegin(MODULE_TITLE_FIELD_DESC);
        oprot.writeString(struct.moduleTitle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EdxModuleTupleSchemeFactory implements SchemeFactory {
    public EdxModuleTupleScheme getScheme() {
      return new EdxModuleTupleScheme();
    }
  }

  private static class EdxModuleTupleScheme extends TupleScheme<EdxModule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EdxModule struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.moduleUrl);
      oprot.writeString(struct.moduleTitle);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EdxModule struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.moduleUrl = iprot.readString();
      struct.setModuleUrlIsSet(true);
      struct.moduleTitle = iprot.readString();
      struct.setModuleTitleIsSet(true);
    }
  }

}

