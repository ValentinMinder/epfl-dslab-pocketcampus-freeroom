/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.edx.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class EdxSequence implements org.apache.thrift.TBase<EdxSequence, EdxSequence._Fields>, java.io.Serializable, Cloneable, Comparable<EdxSequence> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EdxSequence");

  private static final org.apache.thrift.protocol.TField VERTICAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("verticalId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField VIDEO_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("videoItems", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField HTML_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("htmlItems", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField PROBLEM_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("problemItems", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EdxSequenceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EdxSequenceTupleSchemeFactory());
  }

  private String verticalId; // required
  private List<EdxItemType> items; // required
  private Map<Integer,EdxItemVideo> videoItems; // optional
  private Map<Integer,EdxItemHtml> htmlItems; // optional
  private Map<Integer,EdxItemProblem> problemItems; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERTICAL_ID((short)1, "verticalId"),
    ITEMS((short)2, "items"),
    VIDEO_ITEMS((short)3, "videoItems"),
    HTML_ITEMS((short)4, "htmlItems"),
    PROBLEM_ITEMS((short)5, "problemItems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERTICAL_ID
          return VERTICAL_ID;
        case 2: // ITEMS
          return ITEMS;
        case 3: // VIDEO_ITEMS
          return VIDEO_ITEMS;
        case 4: // HTML_ITEMS
          return HTML_ITEMS;
        case 5: // PROBLEM_ITEMS
          return PROBLEM_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.VIDEO_ITEMS,_Fields.HTML_ITEMS,_Fields.PROBLEM_ITEMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERTICAL_ID, new org.apache.thrift.meta_data.FieldMetaData("verticalId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EdxItemType.class))));
    tmpMap.put(_Fields.VIDEO_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("videoItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdxItemVideo.class))));
    tmpMap.put(_Fields.HTML_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("htmlItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdxItemHtml.class))));
    tmpMap.put(_Fields.PROBLEM_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("problemItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdxItemProblem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EdxSequence.class, metaDataMap);
  }

  public EdxSequence() {
  }

  public EdxSequence(
    String verticalId,
    List<EdxItemType> items)
  {
    this();
    this.verticalId = verticalId;
    this.items = items;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EdxSequence(EdxSequence other) {
    if (other.isSetVerticalId()) {
      this.verticalId = other.verticalId;
    }
    if (other.isSetItems()) {
      List<EdxItemType> __this__items = new ArrayList<EdxItemType>(other.items.size());
      for (EdxItemType other_element : other.items) {
        __this__items.add(other_element);
      }
      this.items = __this__items;
    }
    if (other.isSetVideoItems()) {
      Map<Integer,EdxItemVideo> __this__videoItems = new HashMap<Integer,EdxItemVideo>(other.videoItems.size());
      for (Map.Entry<Integer, EdxItemVideo> other_element : other.videoItems.entrySet()) {

        Integer other_element_key = other_element.getKey();
        EdxItemVideo other_element_value = other_element.getValue();

        Integer __this__videoItems_copy_key = other_element_key;

        EdxItemVideo __this__videoItems_copy_value = new EdxItemVideo(other_element_value);

        __this__videoItems.put(__this__videoItems_copy_key, __this__videoItems_copy_value);
      }
      this.videoItems = __this__videoItems;
    }
    if (other.isSetHtmlItems()) {
      Map<Integer,EdxItemHtml> __this__htmlItems = new HashMap<Integer,EdxItemHtml>(other.htmlItems.size());
      for (Map.Entry<Integer, EdxItemHtml> other_element : other.htmlItems.entrySet()) {

        Integer other_element_key = other_element.getKey();
        EdxItemHtml other_element_value = other_element.getValue();

        Integer __this__htmlItems_copy_key = other_element_key;

        EdxItemHtml __this__htmlItems_copy_value = new EdxItemHtml(other_element_value);

        __this__htmlItems.put(__this__htmlItems_copy_key, __this__htmlItems_copy_value);
      }
      this.htmlItems = __this__htmlItems;
    }
    if (other.isSetProblemItems()) {
      Map<Integer,EdxItemProblem> __this__problemItems = new HashMap<Integer,EdxItemProblem>(other.problemItems.size());
      for (Map.Entry<Integer, EdxItemProblem> other_element : other.problemItems.entrySet()) {

        Integer other_element_key = other_element.getKey();
        EdxItemProblem other_element_value = other_element.getValue();

        Integer __this__problemItems_copy_key = other_element_key;

        EdxItemProblem __this__problemItems_copy_value = new EdxItemProblem(other_element_value);

        __this__problemItems.put(__this__problemItems_copy_key, __this__problemItems_copy_value);
      }
      this.problemItems = __this__problemItems;
    }
  }

  public EdxSequence deepCopy() {
    return new EdxSequence(this);
  }

  @Override
  public void clear() {
    this.verticalId = null;
    this.items = null;
    this.videoItems = null;
    this.htmlItems = null;
    this.problemItems = null;
  }

  public String getVerticalId() {
    return this.verticalId;
  }

  public EdxSequence setVerticalId(String verticalId) {
    this.verticalId = verticalId;
    return this;
  }

  public void unsetVerticalId() {
    this.verticalId = null;
  }

  /** Returns true if field verticalId is set (has been assigned a value) and false otherwise */
  public boolean isSetVerticalId() {
    return this.verticalId != null;
  }

  public void setVerticalIdIsSet(boolean value) {
    if (!value) {
      this.verticalId = null;
    }
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<EdxItemType> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(EdxItemType elem) {
    if (this.items == null) {
      this.items = new ArrayList<EdxItemType>();
    }
    this.items.add(elem);
  }

  public List<EdxItemType> getItems() {
    return this.items;
  }

  public EdxSequence setItems(List<EdxItemType> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public int getVideoItemsSize() {
    return (this.videoItems == null) ? 0 : this.videoItems.size();
  }

  public void putToVideoItems(int key, EdxItemVideo val) {
    if (this.videoItems == null) {
      this.videoItems = new HashMap<Integer,EdxItemVideo>();
    }
    this.videoItems.put(key, val);
  }

  public Map<Integer,EdxItemVideo> getVideoItems() {
    return this.videoItems;
  }

  public EdxSequence setVideoItems(Map<Integer,EdxItemVideo> videoItems) {
    this.videoItems = videoItems;
    return this;
  }

  public void unsetVideoItems() {
    this.videoItems = null;
  }

  /** Returns true if field videoItems is set (has been assigned a value) and false otherwise */
  public boolean isSetVideoItems() {
    return this.videoItems != null;
  }

  public void setVideoItemsIsSet(boolean value) {
    if (!value) {
      this.videoItems = null;
    }
  }

  public int getHtmlItemsSize() {
    return (this.htmlItems == null) ? 0 : this.htmlItems.size();
  }

  public void putToHtmlItems(int key, EdxItemHtml val) {
    if (this.htmlItems == null) {
      this.htmlItems = new HashMap<Integer,EdxItemHtml>();
    }
    this.htmlItems.put(key, val);
  }

  public Map<Integer,EdxItemHtml> getHtmlItems() {
    return this.htmlItems;
  }

  public EdxSequence setHtmlItems(Map<Integer,EdxItemHtml> htmlItems) {
    this.htmlItems = htmlItems;
    return this;
  }

  public void unsetHtmlItems() {
    this.htmlItems = null;
  }

  /** Returns true if field htmlItems is set (has been assigned a value) and false otherwise */
  public boolean isSetHtmlItems() {
    return this.htmlItems != null;
  }

  public void setHtmlItemsIsSet(boolean value) {
    if (!value) {
      this.htmlItems = null;
    }
  }

  public int getProblemItemsSize() {
    return (this.problemItems == null) ? 0 : this.problemItems.size();
  }

  public void putToProblemItems(int key, EdxItemProblem val) {
    if (this.problemItems == null) {
      this.problemItems = new HashMap<Integer,EdxItemProblem>();
    }
    this.problemItems.put(key, val);
  }

  public Map<Integer,EdxItemProblem> getProblemItems() {
    return this.problemItems;
  }

  public EdxSequence setProblemItems(Map<Integer,EdxItemProblem> problemItems) {
    this.problemItems = problemItems;
    return this;
  }

  public void unsetProblemItems() {
    this.problemItems = null;
  }

  /** Returns true if field problemItems is set (has been assigned a value) and false otherwise */
  public boolean isSetProblemItems() {
    return this.problemItems != null;
  }

  public void setProblemItemsIsSet(boolean value) {
    if (!value) {
      this.problemItems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERTICAL_ID:
      if (value == null) {
        unsetVerticalId();
      } else {
        setVerticalId((String)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<EdxItemType>)value);
      }
      break;

    case VIDEO_ITEMS:
      if (value == null) {
        unsetVideoItems();
      } else {
        setVideoItems((Map<Integer,EdxItemVideo>)value);
      }
      break;

    case HTML_ITEMS:
      if (value == null) {
        unsetHtmlItems();
      } else {
        setHtmlItems((Map<Integer,EdxItemHtml>)value);
      }
      break;

    case PROBLEM_ITEMS:
      if (value == null) {
        unsetProblemItems();
      } else {
        setProblemItems((Map<Integer,EdxItemProblem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERTICAL_ID:
      return getVerticalId();

    case ITEMS:
      return getItems();

    case VIDEO_ITEMS:
      return getVideoItems();

    case HTML_ITEMS:
      return getHtmlItems();

    case PROBLEM_ITEMS:
      return getProblemItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERTICAL_ID:
      return isSetVerticalId();
    case ITEMS:
      return isSetItems();
    case VIDEO_ITEMS:
      return isSetVideoItems();
    case HTML_ITEMS:
      return isSetHtmlItems();
    case PROBLEM_ITEMS:
      return isSetProblemItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EdxSequence)
      return this.equals((EdxSequence)that);
    return false;
  }

  public boolean equals(EdxSequence that) {
    if (that == null)
      return false;

    boolean this_present_verticalId = true && this.isSetVerticalId();
    boolean that_present_verticalId = true && that.isSetVerticalId();
    if (this_present_verticalId || that_present_verticalId) {
      if (!(this_present_verticalId && that_present_verticalId))
        return false;
      if (!this.verticalId.equals(that.verticalId))
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_videoItems = true && this.isSetVideoItems();
    boolean that_present_videoItems = true && that.isSetVideoItems();
    if (this_present_videoItems || that_present_videoItems) {
      if (!(this_present_videoItems && that_present_videoItems))
        return false;
      if (!this.videoItems.equals(that.videoItems))
        return false;
    }

    boolean this_present_htmlItems = true && this.isSetHtmlItems();
    boolean that_present_htmlItems = true && that.isSetHtmlItems();
    if (this_present_htmlItems || that_present_htmlItems) {
      if (!(this_present_htmlItems && that_present_htmlItems))
        return false;
      if (!this.htmlItems.equals(that.htmlItems))
        return false;
    }

    boolean this_present_problemItems = true && this.isSetProblemItems();
    boolean that_present_problemItems = true && that.isSetProblemItems();
    if (this_present_problemItems || that_present_problemItems) {
      if (!(this_present_problemItems && that_present_problemItems))
        return false;
      if (!this.problemItems.equals(that.problemItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_verticalId = true && (isSetVerticalId());
    list.add(present_verticalId);
    if (present_verticalId)
      list.add(verticalId);

    boolean present_items = true && (isSetItems());
    list.add(present_items);
    if (present_items)
      list.add(items);

    boolean present_videoItems = true && (isSetVideoItems());
    list.add(present_videoItems);
    if (present_videoItems)
      list.add(videoItems);

    boolean present_htmlItems = true && (isSetHtmlItems());
    list.add(present_htmlItems);
    if (present_htmlItems)
      list.add(htmlItems);

    boolean present_problemItems = true && (isSetProblemItems());
    list.add(present_problemItems);
    if (present_problemItems)
      list.add(problemItems);

    return list.hashCode();
  }

  @Override
  public int compareTo(EdxSequence other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVerticalId()).compareTo(other.isSetVerticalId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerticalId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verticalId, other.verticalId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideoItems()).compareTo(other.isSetVideoItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideoItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videoItems, other.videoItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHtmlItems()).compareTo(other.isSetHtmlItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHtmlItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.htmlItems, other.htmlItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProblemItems()).compareTo(other.isSetProblemItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProblemItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problemItems, other.problemItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EdxSequence(");
    boolean first = true;

    sb.append("verticalId:");
    if (this.verticalId == null) {
      sb.append("null");
    } else {
      sb.append(this.verticalId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("items:");
    if (this.items == null) {
      sb.append("null");
    } else {
      sb.append(this.items);
    }
    first = false;
    if (isSetVideoItems()) {
      if (!first) sb.append(", ");
      sb.append("videoItems:");
      if (this.videoItems == null) {
        sb.append("null");
      } else {
        sb.append(this.videoItems);
      }
      first = false;
    }
    if (isSetHtmlItems()) {
      if (!first) sb.append(", ");
      sb.append("htmlItems:");
      if (this.htmlItems == null) {
        sb.append("null");
      } else {
        sb.append(this.htmlItems);
      }
      first = false;
    }
    if (isSetProblemItems()) {
      if (!first) sb.append(", ");
      sb.append("problemItems:");
      if (this.problemItems == null) {
        sb.append("null");
      } else {
        sb.append(this.problemItems);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (verticalId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'verticalId' was not present! Struct: " + toString());
    }
    if (items == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'items' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EdxSequenceStandardSchemeFactory implements SchemeFactory {
    public EdxSequenceStandardScheme getScheme() {
      return new EdxSequenceStandardScheme();
    }
  }

  private static class EdxSequenceStandardScheme extends StandardScheme<EdxSequence> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EdxSequence struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERTICAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verticalId = iprot.readString();
              struct.setVerticalIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.items = new ArrayList<EdxItemType>(_list8.size);
                EdxItemType _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = org.pocketcampus.plugin.edx.shared.EdxItemType.findByValue(iprot.readI32());
                  struct.items.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VIDEO_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
                struct.videoItems = new HashMap<Integer,EdxItemVideo>(2*_map11.size);
                int _key12;
                EdxItemVideo _val13;
                for (int _i14 = 0; _i14 < _map11.size; ++_i14)
                {
                  _key12 = iprot.readI32();
                  _val13 = new EdxItemVideo();
                  _val13.read(iprot);
                  struct.videoItems.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setVideoItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HTML_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
                struct.htmlItems = new HashMap<Integer,EdxItemHtml>(2*_map15.size);
                int _key16;
                EdxItemHtml _val17;
                for (int _i18 = 0; _i18 < _map15.size; ++_i18)
                {
                  _key16 = iprot.readI32();
                  _val17 = new EdxItemHtml();
                  _val17.read(iprot);
                  struct.htmlItems.put(_key16, _val17);
                }
                iprot.readMapEnd();
              }
              struct.setHtmlItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROBLEM_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                struct.problemItems = new HashMap<Integer,EdxItemProblem>(2*_map19.size);
                int _key20;
                EdxItemProblem _val21;
                for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                {
                  _key20 = iprot.readI32();
                  _val21 = new EdxItemProblem();
                  _val21.read(iprot);
                  struct.problemItems.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setProblemItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EdxSequence struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.verticalId != null) {
        oprot.writeFieldBegin(VERTICAL_ID_FIELD_DESC);
        oprot.writeString(struct.verticalId);
        oprot.writeFieldEnd();
      }
      if (struct.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.items.size()));
          for (EdxItemType _iter23 : struct.items)
          {
            oprot.writeI32(_iter23.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.videoItems != null) {
        if (struct.isSetVideoItems()) {
          oprot.writeFieldBegin(VIDEO_ITEMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.videoItems.size()));
            for (Map.Entry<Integer, EdxItemVideo> _iter24 : struct.videoItems.entrySet())
            {
              oprot.writeI32(_iter24.getKey());
              _iter24.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.htmlItems != null) {
        if (struct.isSetHtmlItems()) {
          oprot.writeFieldBegin(HTML_ITEMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.htmlItems.size()));
            for (Map.Entry<Integer, EdxItemHtml> _iter25 : struct.htmlItems.entrySet())
            {
              oprot.writeI32(_iter25.getKey());
              _iter25.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.problemItems != null) {
        if (struct.isSetProblemItems()) {
          oprot.writeFieldBegin(PROBLEM_ITEMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.problemItems.size()));
            for (Map.Entry<Integer, EdxItemProblem> _iter26 : struct.problemItems.entrySet())
            {
              oprot.writeI32(_iter26.getKey());
              _iter26.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EdxSequenceTupleSchemeFactory implements SchemeFactory {
    public EdxSequenceTupleScheme getScheme() {
      return new EdxSequenceTupleScheme();
    }
  }

  private static class EdxSequenceTupleScheme extends TupleScheme<EdxSequence> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EdxSequence struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.verticalId);
      {
        oprot.writeI32(struct.items.size());
        for (EdxItemType _iter27 : struct.items)
        {
          oprot.writeI32(_iter27.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetVideoItems()) {
        optionals.set(0);
      }
      if (struct.isSetHtmlItems()) {
        optionals.set(1);
      }
      if (struct.isSetProblemItems()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetVideoItems()) {
        {
          oprot.writeI32(struct.videoItems.size());
          for (Map.Entry<Integer, EdxItemVideo> _iter28 : struct.videoItems.entrySet())
          {
            oprot.writeI32(_iter28.getKey());
            _iter28.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetHtmlItems()) {
        {
          oprot.writeI32(struct.htmlItems.size());
          for (Map.Entry<Integer, EdxItemHtml> _iter29 : struct.htmlItems.entrySet())
          {
            oprot.writeI32(_iter29.getKey());
            _iter29.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetProblemItems()) {
        {
          oprot.writeI32(struct.problemItems.size());
          for (Map.Entry<Integer, EdxItemProblem> _iter30 : struct.problemItems.entrySet())
          {
            oprot.writeI32(_iter30.getKey());
            _iter30.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EdxSequence struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.verticalId = iprot.readString();
      struct.setVerticalIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.items = new ArrayList<EdxItemType>(_list31.size);
        EdxItemType _elem32;
        for (int _i33 = 0; _i33 < _list31.size; ++_i33)
        {
          _elem32 = org.pocketcampus.plugin.edx.shared.EdxItemType.findByValue(iprot.readI32());
          struct.items.add(_elem32);
        }
      }
      struct.setItemsIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.videoItems = new HashMap<Integer,EdxItemVideo>(2*_map34.size);
          int _key35;
          EdxItemVideo _val36;
          for (int _i37 = 0; _i37 < _map34.size; ++_i37)
          {
            _key35 = iprot.readI32();
            _val36 = new EdxItemVideo();
            _val36.read(iprot);
            struct.videoItems.put(_key35, _val36);
          }
        }
        struct.setVideoItemsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.htmlItems = new HashMap<Integer,EdxItemHtml>(2*_map38.size);
          int _key39;
          EdxItemHtml _val40;
          for (int _i41 = 0; _i41 < _map38.size; ++_i41)
          {
            _key39 = iprot.readI32();
            _val40 = new EdxItemHtml();
            _val40.read(iprot);
            struct.htmlItems.put(_key39, _val40);
          }
        }
        struct.setHtmlItemsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.problemItems = new HashMap<Integer,EdxItemProblem>(2*_map42.size);
          int _key43;
          EdxItemProblem _val44;
          for (int _i45 = 0; _i45 < _map42.size; ++_i45)
          {
            _key43 = iprot.readI32();
            _val44 = new EdxItemProblem();
            _val44.read(iprot);
            struct.problemItems.put(_key43, _val44);
          }
        }
        struct.setProblemItemsIsSet(true);
      }
    }
  }

}

