/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.edx.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class EdxResp implements org.apache.thrift.TBase<EdxResp, EdxResp._Fields>, java.io.Serializable, Cloneable, Comparable<EdxResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EdxResp");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_COURSES_FIELD_DESC = new org.apache.thrift.protocol.TField("userCourses", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COURSE_SECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("courseSections", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MODULE_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleDetails", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EdxRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EdxRespTupleSchemeFactory());
  }

  private int status; // required
  private List<EdxCourse> userCourses; // optional
  private List<EdxSection> courseSections; // optional
  private List<EdxSequence> moduleDetails; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    USER_COURSES((short)2, "userCourses"),
    COURSE_SECTIONS((short)3, "courseSections"),
    MODULE_DETAILS((short)4, "moduleDetails");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // USER_COURSES
          return USER_COURSES;
        case 3: // COURSE_SECTIONS
          return COURSE_SECTIONS;
        case 4: // MODULE_DETAILS
          return MODULE_DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_COURSES,_Fields.COURSE_SECTIONS,_Fields.MODULE_DETAILS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_COURSES, new org.apache.thrift.meta_data.FieldMetaData("userCourses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdxCourse.class))));
    tmpMap.put(_Fields.COURSE_SECTIONS, new org.apache.thrift.meta_data.FieldMetaData("courseSections", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdxSection.class))));
    tmpMap.put(_Fields.MODULE_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("moduleDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdxSequence.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EdxResp.class, metaDataMap);
  }

  public EdxResp() {
  }

  public EdxResp(
    int status)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EdxResp(EdxResp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status = other.status;
    if (other.isSetUserCourses()) {
      List<EdxCourse> __this__userCourses = new ArrayList<EdxCourse>(other.userCourses.size());
      for (EdxCourse other_element : other.userCourses) {
        __this__userCourses.add(new EdxCourse(other_element));
      }
      this.userCourses = __this__userCourses;
    }
    if (other.isSetCourseSections()) {
      List<EdxSection> __this__courseSections = new ArrayList<EdxSection>(other.courseSections.size());
      for (EdxSection other_element : other.courseSections) {
        __this__courseSections.add(new EdxSection(other_element));
      }
      this.courseSections = __this__courseSections;
    }
    if (other.isSetModuleDetails()) {
      List<EdxSequence> __this__moduleDetails = new ArrayList<EdxSequence>(other.moduleDetails.size());
      for (EdxSequence other_element : other.moduleDetails) {
        __this__moduleDetails.add(new EdxSequence(other_element));
      }
      this.moduleDetails = __this__moduleDetails;
    }
  }

  public EdxResp deepCopy() {
    return new EdxResp(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.userCourses = null;
    this.courseSections = null;
    this.moduleDetails = null;
  }

  public int getStatus() {
    return this.status;
  }

  public EdxResp setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getUserCoursesSize() {
    return (this.userCourses == null) ? 0 : this.userCourses.size();
  }

  public java.util.Iterator<EdxCourse> getUserCoursesIterator() {
    return (this.userCourses == null) ? null : this.userCourses.iterator();
  }

  public void addToUserCourses(EdxCourse elem) {
    if (this.userCourses == null) {
      this.userCourses = new ArrayList<EdxCourse>();
    }
    this.userCourses.add(elem);
  }

  public List<EdxCourse> getUserCourses() {
    return this.userCourses;
  }

  public EdxResp setUserCourses(List<EdxCourse> userCourses) {
    this.userCourses = userCourses;
    return this;
  }

  public void unsetUserCourses() {
    this.userCourses = null;
  }

  /** Returns true if field userCourses is set (has been assigned a value) and false otherwise */
  public boolean isSetUserCourses() {
    return this.userCourses != null;
  }

  public void setUserCoursesIsSet(boolean value) {
    if (!value) {
      this.userCourses = null;
    }
  }

  public int getCourseSectionsSize() {
    return (this.courseSections == null) ? 0 : this.courseSections.size();
  }

  public java.util.Iterator<EdxSection> getCourseSectionsIterator() {
    return (this.courseSections == null) ? null : this.courseSections.iterator();
  }

  public void addToCourseSections(EdxSection elem) {
    if (this.courseSections == null) {
      this.courseSections = new ArrayList<EdxSection>();
    }
    this.courseSections.add(elem);
  }

  public List<EdxSection> getCourseSections() {
    return this.courseSections;
  }

  public EdxResp setCourseSections(List<EdxSection> courseSections) {
    this.courseSections = courseSections;
    return this;
  }

  public void unsetCourseSections() {
    this.courseSections = null;
  }

  /** Returns true if field courseSections is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseSections() {
    return this.courseSections != null;
  }

  public void setCourseSectionsIsSet(boolean value) {
    if (!value) {
      this.courseSections = null;
    }
  }

  public int getModuleDetailsSize() {
    return (this.moduleDetails == null) ? 0 : this.moduleDetails.size();
  }

  public java.util.Iterator<EdxSequence> getModuleDetailsIterator() {
    return (this.moduleDetails == null) ? null : this.moduleDetails.iterator();
  }

  public void addToModuleDetails(EdxSequence elem) {
    if (this.moduleDetails == null) {
      this.moduleDetails = new ArrayList<EdxSequence>();
    }
    this.moduleDetails.add(elem);
  }

  public List<EdxSequence> getModuleDetails() {
    return this.moduleDetails;
  }

  public EdxResp setModuleDetails(List<EdxSequence> moduleDetails) {
    this.moduleDetails = moduleDetails;
    return this;
  }

  public void unsetModuleDetails() {
    this.moduleDetails = null;
  }

  /** Returns true if field moduleDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetModuleDetails() {
    return this.moduleDetails != null;
  }

  public void setModuleDetailsIsSet(boolean value) {
    if (!value) {
      this.moduleDetails = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case USER_COURSES:
      if (value == null) {
        unsetUserCourses();
      } else {
        setUserCourses((List<EdxCourse>)value);
      }
      break;

    case COURSE_SECTIONS:
      if (value == null) {
        unsetCourseSections();
      } else {
        setCourseSections((List<EdxSection>)value);
      }
      break;

    case MODULE_DETAILS:
      if (value == null) {
        unsetModuleDetails();
      } else {
        setModuleDetails((List<EdxSequence>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Integer.valueOf(getStatus());

    case USER_COURSES:
      return getUserCourses();

    case COURSE_SECTIONS:
      return getCourseSections();

    case MODULE_DETAILS:
      return getModuleDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case USER_COURSES:
      return isSetUserCourses();
    case COURSE_SECTIONS:
      return isSetCourseSections();
    case MODULE_DETAILS:
      return isSetModuleDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EdxResp)
      return this.equals((EdxResp)that);
    return false;
  }

  public boolean equals(EdxResp that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_userCourses = true && this.isSetUserCourses();
    boolean that_present_userCourses = true && that.isSetUserCourses();
    if (this_present_userCourses || that_present_userCourses) {
      if (!(this_present_userCourses && that_present_userCourses))
        return false;
      if (!this.userCourses.equals(that.userCourses))
        return false;
    }

    boolean this_present_courseSections = true && this.isSetCourseSections();
    boolean that_present_courseSections = true && that.isSetCourseSections();
    if (this_present_courseSections || that_present_courseSections) {
      if (!(this_present_courseSections && that_present_courseSections))
        return false;
      if (!this.courseSections.equals(that.courseSections))
        return false;
    }

    boolean this_present_moduleDetails = true && this.isSetModuleDetails();
    boolean that_present_moduleDetails = true && that.isSetModuleDetails();
    if (this_present_moduleDetails || that_present_moduleDetails) {
      if (!(this_present_moduleDetails && that_present_moduleDetails))
        return false;
      if (!this.moduleDetails.equals(that.moduleDetails))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_userCourses = true && (isSetUserCourses());
    list.add(present_userCourses);
    if (present_userCourses)
      list.add(userCourses);

    boolean present_courseSections = true && (isSetCourseSections());
    list.add(present_courseSections);
    if (present_courseSections)
      list.add(courseSections);

    boolean present_moduleDetails = true && (isSetModuleDetails());
    list.add(present_moduleDetails);
    if (present_moduleDetails)
      list.add(moduleDetails);

    return list.hashCode();
  }

  @Override
  public int compareTo(EdxResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserCourses()).compareTo(other.isSetUserCourses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserCourses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCourses, other.userCourses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseSections()).compareTo(other.isSetCourseSections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseSections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseSections, other.courseSections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModuleDetails()).compareTo(other.isSetModuleDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuleDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleDetails, other.moduleDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EdxResp(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetUserCourses()) {
      if (!first) sb.append(", ");
      sb.append("userCourses:");
      if (this.userCourses == null) {
        sb.append("null");
      } else {
        sb.append(this.userCourses);
      }
      first = false;
    }
    if (isSetCourseSections()) {
      if (!first) sb.append(", ");
      sb.append("courseSections:");
      if (this.courseSections == null) {
        sb.append("null");
      } else {
        sb.append(this.courseSections);
      }
      first = false;
    }
    if (isSetModuleDetails()) {
      if (!first) sb.append(", ");
      sb.append("moduleDetails:");
      if (this.moduleDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.moduleDetails);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EdxRespStandardSchemeFactory implements SchemeFactory {
    public EdxRespStandardScheme getScheme() {
      return new EdxRespStandardScheme();
    }
  }

  private static class EdxRespStandardScheme extends StandardScheme<EdxResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EdxResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_COURSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.userCourses = new ArrayList<EdxCourse>(_list46.size);
                EdxCourse _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = new EdxCourse();
                  _elem47.read(iprot);
                  struct.userCourses.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setUserCoursesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COURSE_SECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.courseSections = new ArrayList<EdxSection>(_list49.size);
                EdxSection _elem50;
                for (int _i51 = 0; _i51 < _list49.size; ++_i51)
                {
                  _elem50 = new EdxSection();
                  _elem50.read(iprot);
                  struct.courseSections.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setCourseSectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODULE_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.moduleDetails = new ArrayList<EdxSequence>(_list52.size);
                EdxSequence _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  _elem53 = new EdxSequence();
                  _elem53.read(iprot);
                  struct.moduleDetails.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setModuleDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EdxResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.userCourses != null) {
        if (struct.isSetUserCourses()) {
          oprot.writeFieldBegin(USER_COURSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userCourses.size()));
            for (EdxCourse _iter55 : struct.userCourses)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.courseSections != null) {
        if (struct.isSetCourseSections()) {
          oprot.writeFieldBegin(COURSE_SECTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.courseSections.size()));
            for (EdxSection _iter56 : struct.courseSections)
            {
              _iter56.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.moduleDetails != null) {
        if (struct.isSetModuleDetails()) {
          oprot.writeFieldBegin(MODULE_DETAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.moduleDetails.size()));
            for (EdxSequence _iter57 : struct.moduleDetails)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EdxRespTupleSchemeFactory implements SchemeFactory {
    public EdxRespTupleScheme getScheme() {
      return new EdxRespTupleScheme();
    }
  }

  private static class EdxRespTupleScheme extends TupleScheme<EdxResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EdxResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status);
      BitSet optionals = new BitSet();
      if (struct.isSetUserCourses()) {
        optionals.set(0);
      }
      if (struct.isSetCourseSections()) {
        optionals.set(1);
      }
      if (struct.isSetModuleDetails()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUserCourses()) {
        {
          oprot.writeI32(struct.userCourses.size());
          for (EdxCourse _iter58 : struct.userCourses)
          {
            _iter58.write(oprot);
          }
        }
      }
      if (struct.isSetCourseSections()) {
        {
          oprot.writeI32(struct.courseSections.size());
          for (EdxSection _iter59 : struct.courseSections)
          {
            _iter59.write(oprot);
          }
        }
      }
      if (struct.isSetModuleDetails()) {
        {
          oprot.writeI32(struct.moduleDetails.size());
          for (EdxSequence _iter60 : struct.moduleDetails)
          {
            _iter60.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EdxResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.userCourses = new ArrayList<EdxCourse>(_list61.size);
          EdxCourse _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = new EdxCourse();
            _elem62.read(iprot);
            struct.userCourses.add(_elem62);
          }
        }
        struct.setUserCoursesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list64 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.courseSections = new ArrayList<EdxSection>(_list64.size);
          EdxSection _elem65;
          for (int _i66 = 0; _i66 < _list64.size; ++_i66)
          {
            _elem65 = new EdxSection();
            _elem65.read(iprot);
            struct.courseSections.add(_elem65);
          }
        }
        struct.setCourseSectionsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.moduleDetails = new ArrayList<EdxSequence>(_list67.size);
          EdxSequence _elem68;
          for (int _i69 = 0; _i69 < _list67.size; ++_i69)
          {
            _elem68 = new EdxSequence();
            _elem68.read(iprot);
            struct.moduleDetails.add(_elem68);
          }
        }
        struct.setModuleDetailsIsSet(true);
      }
    }
  }

}

