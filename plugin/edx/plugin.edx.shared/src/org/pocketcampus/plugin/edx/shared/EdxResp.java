/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.edx.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EdxResp implements org.apache.thrift.TBase<EdxResp, EdxResp._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EdxResp");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_COURSES_FIELD_DESC = new org.apache.thrift.protocol.TField("userCourses", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COURSE_SECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("courseSections", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MODULE_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleDetails", org.apache.thrift.protocol.TType.LIST, (short)4);

  private int status; // required
  private List<EdxCourse> userCourses; // required
  private List<EdxSection> courseSections; // required
  private List<EdxSequence> moduleDetails; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    USER_COURSES((short)2, "userCourses"),
    COURSE_SECTIONS((short)3, "courseSections"),
    MODULE_DETAILS((short)4, "moduleDetails");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // USER_COURSES
          return USER_COURSES;
        case 3: // COURSE_SECTIONS
          return COURSE_SECTIONS;
        case 4: // MODULE_DETAILS
          return MODULE_DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_COURSES, new org.apache.thrift.meta_data.FieldMetaData("userCourses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdxCourse.class))));
    tmpMap.put(_Fields.COURSE_SECTIONS, new org.apache.thrift.meta_data.FieldMetaData("courseSections", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdxSection.class))));
    tmpMap.put(_Fields.MODULE_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("moduleDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdxSequence.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EdxResp.class, metaDataMap);
  }

  public EdxResp() {
  }

  public EdxResp(
    int status)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EdxResp(EdxResp other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.status = other.status;
    if (other.isSetUserCourses()) {
      List<EdxCourse> __this__userCourses = new ArrayList<EdxCourse>();
      for (EdxCourse other_element : other.userCourses) {
        __this__userCourses.add(new EdxCourse(other_element));
      }
      this.userCourses = __this__userCourses;
    }
    if (other.isSetCourseSections()) {
      List<EdxSection> __this__courseSections = new ArrayList<EdxSection>();
      for (EdxSection other_element : other.courseSections) {
        __this__courseSections.add(new EdxSection(other_element));
      }
      this.courseSections = __this__courseSections;
    }
    if (other.isSetModuleDetails()) {
      List<EdxSequence> __this__moduleDetails = new ArrayList<EdxSequence>();
      for (EdxSequence other_element : other.moduleDetails) {
        __this__moduleDetails.add(new EdxSequence(other_element));
      }
      this.moduleDetails = __this__moduleDetails;
    }
  }

  public EdxResp deepCopy() {
    return new EdxResp(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.userCourses = null;
    this.courseSections = null;
    this.moduleDetails = null;
  }

  public int getStatus() {
    return this.status;
  }

  public EdxResp setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public int getUserCoursesSize() {
    return (this.userCourses == null) ? 0 : this.userCourses.size();
  }

  public java.util.Iterator<EdxCourse> getUserCoursesIterator() {
    return (this.userCourses == null) ? null : this.userCourses.iterator();
  }

  public void addToUserCourses(EdxCourse elem) {
    if (this.userCourses == null) {
      this.userCourses = new ArrayList<EdxCourse>();
    }
    this.userCourses.add(elem);
  }

  public List<EdxCourse> getUserCourses() {
    return this.userCourses;
  }

  public EdxResp setUserCourses(List<EdxCourse> userCourses) {
    this.userCourses = userCourses;
    return this;
  }

  public void unsetUserCourses() {
    this.userCourses = null;
  }

  /** Returns true if field userCourses is set (has been assigned a value) and false otherwise */
  public boolean isSetUserCourses() {
    return this.userCourses != null;
  }

  public void setUserCoursesIsSet(boolean value) {
    if (!value) {
      this.userCourses = null;
    }
  }

  public int getCourseSectionsSize() {
    return (this.courseSections == null) ? 0 : this.courseSections.size();
  }

  public java.util.Iterator<EdxSection> getCourseSectionsIterator() {
    return (this.courseSections == null) ? null : this.courseSections.iterator();
  }

  public void addToCourseSections(EdxSection elem) {
    if (this.courseSections == null) {
      this.courseSections = new ArrayList<EdxSection>();
    }
    this.courseSections.add(elem);
  }

  public List<EdxSection> getCourseSections() {
    return this.courseSections;
  }

  public EdxResp setCourseSections(List<EdxSection> courseSections) {
    this.courseSections = courseSections;
    return this;
  }

  public void unsetCourseSections() {
    this.courseSections = null;
  }

  /** Returns true if field courseSections is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseSections() {
    return this.courseSections != null;
  }

  public void setCourseSectionsIsSet(boolean value) {
    if (!value) {
      this.courseSections = null;
    }
  }

  public int getModuleDetailsSize() {
    return (this.moduleDetails == null) ? 0 : this.moduleDetails.size();
  }

  public java.util.Iterator<EdxSequence> getModuleDetailsIterator() {
    return (this.moduleDetails == null) ? null : this.moduleDetails.iterator();
  }

  public void addToModuleDetails(EdxSequence elem) {
    if (this.moduleDetails == null) {
      this.moduleDetails = new ArrayList<EdxSequence>();
    }
    this.moduleDetails.add(elem);
  }

  public List<EdxSequence> getModuleDetails() {
    return this.moduleDetails;
  }

  public EdxResp setModuleDetails(List<EdxSequence> moduleDetails) {
    this.moduleDetails = moduleDetails;
    return this;
  }

  public void unsetModuleDetails() {
    this.moduleDetails = null;
  }

  /** Returns true if field moduleDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetModuleDetails() {
    return this.moduleDetails != null;
  }

  public void setModuleDetailsIsSet(boolean value) {
    if (!value) {
      this.moduleDetails = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case USER_COURSES:
      if (value == null) {
        unsetUserCourses();
      } else {
        setUserCourses((List<EdxCourse>)value);
      }
      break;

    case COURSE_SECTIONS:
      if (value == null) {
        unsetCourseSections();
      } else {
        setCourseSections((List<EdxSection>)value);
      }
      break;

    case MODULE_DETAILS:
      if (value == null) {
        unsetModuleDetails();
      } else {
        setModuleDetails((List<EdxSequence>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Integer.valueOf(getStatus());

    case USER_COURSES:
      return getUserCourses();

    case COURSE_SECTIONS:
      return getCourseSections();

    case MODULE_DETAILS:
      return getModuleDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case USER_COURSES:
      return isSetUserCourses();
    case COURSE_SECTIONS:
      return isSetCourseSections();
    case MODULE_DETAILS:
      return isSetModuleDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EdxResp)
      return this.equals((EdxResp)that);
    return false;
  }

  public boolean equals(EdxResp that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_userCourses = true && this.isSetUserCourses();
    boolean that_present_userCourses = true && that.isSetUserCourses();
    if (this_present_userCourses || that_present_userCourses) {
      if (!(this_present_userCourses && that_present_userCourses))
        return false;
      if (!this.userCourses.equals(that.userCourses))
        return false;
    }

    boolean this_present_courseSections = true && this.isSetCourseSections();
    boolean that_present_courseSections = true && that.isSetCourseSections();
    if (this_present_courseSections || that_present_courseSections) {
      if (!(this_present_courseSections && that_present_courseSections))
        return false;
      if (!this.courseSections.equals(that.courseSections))
        return false;
    }

    boolean this_present_moduleDetails = true && this.isSetModuleDetails();
    boolean that_present_moduleDetails = true && that.isSetModuleDetails();
    if (this_present_moduleDetails || that_present_moduleDetails) {
      if (!(this_present_moduleDetails && that_present_moduleDetails))
        return false;
      if (!this.moduleDetails.equals(that.moduleDetails))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_userCourses = true && (isSetUserCourses());
    builder.append(present_userCourses);
    if (present_userCourses)
      builder.append(userCourses);

    boolean present_courseSections = true && (isSetCourseSections());
    builder.append(present_courseSections);
    if (present_courseSections)
      builder.append(courseSections);

    boolean present_moduleDetails = true && (isSetModuleDetails());
    builder.append(present_moduleDetails);
    if (present_moduleDetails)
      builder.append(moduleDetails);

    return builder.toHashCode();
  }

  public int compareTo(EdxResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EdxResp typedOther = (EdxResp)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserCourses()).compareTo(typedOther.isSetUserCourses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserCourses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCourses, typedOther.userCourses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseSections()).compareTo(typedOther.isSetCourseSections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseSections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseSections, typedOther.courseSections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModuleDetails()).compareTo(typedOther.isSetModuleDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuleDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleDetails, typedOther.moduleDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // STATUS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_COURSES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
              this.userCourses = new ArrayList<EdxCourse>(_list23.size);
              for (int _i24 = 0; _i24 < _list23.size; ++_i24)
              {
                EdxCourse _elem25; // required
                _elem25 = new EdxCourse();
                _elem25.read(iprot);
                this.userCourses.add(_elem25);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COURSE_SECTIONS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
              this.courseSections = new ArrayList<EdxSection>(_list26.size);
              for (int _i27 = 0; _i27 < _list26.size; ++_i27)
              {
                EdxSection _elem28; // required
                _elem28 = new EdxSection();
                _elem28.read(iprot);
                this.courseSections.add(_elem28);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MODULE_DETAILS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
              this.moduleDetails = new ArrayList<EdxSequence>(_list29.size);
              for (int _i30 = 0; _i30 < _list29.size; ++_i30)
              {
                EdxSequence _elem31; // required
                _elem31 = new EdxSequence();
                _elem31.read(iprot);
                this.moduleDetails.add(_elem31);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    if (this.userCourses != null) {
      if (isSetUserCourses()) {
        oprot.writeFieldBegin(USER_COURSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.userCourses.size()));
          for (EdxCourse _iter32 : this.userCourses)
          {
            _iter32.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.courseSections != null) {
      if (isSetCourseSections()) {
        oprot.writeFieldBegin(COURSE_SECTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.courseSections.size()));
          for (EdxSection _iter33 : this.courseSections)
          {
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.moduleDetails != null) {
      if (isSetModuleDetails()) {
        oprot.writeFieldBegin(MODULE_DETAILS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.moduleDetails.size()));
          for (EdxSequence _iter34 : this.moduleDetails)
          {
            _iter34.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EdxResp(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetUserCourses()) {
      if (!first) sb.append(", ");
      sb.append("userCourses:");
      if (this.userCourses == null) {
        sb.append("null");
      } else {
        sb.append(this.userCourses);
      }
      first = false;
    }
    if (isSetCourseSections()) {
      if (!first) sb.append(", ");
      sb.append("courseSections:");
      if (this.courseSections == null) {
        sb.append("null");
      } else {
        sb.append(this.courseSections);
      }
      first = false;
    }
    if (isSetModuleDetails()) {
      if (!first) sb.append(", ");
      sb.append("moduleDetails:");
      if (this.moduleDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.moduleDetails);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

