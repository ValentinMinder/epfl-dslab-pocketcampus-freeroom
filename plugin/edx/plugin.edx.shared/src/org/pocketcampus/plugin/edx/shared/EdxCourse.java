/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.edx.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class EdxCourse implements org.apache.thrift.TBase<EdxCourse, EdxCourse._Fields>, java.io.Serializable, Cloneable, Comparable<EdxCourse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EdxCourse");

  private static final org.apache.thrift.protocol.TField COURSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COURSE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COURSE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("courseNumber", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EdxCourseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EdxCourseTupleSchemeFactory());
  }

  private String courseId; // required
  private String courseTitle; // required
  private String courseNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COURSE_ID((short)1, "courseId"),
    COURSE_TITLE((short)2, "courseTitle"),
    COURSE_NUMBER((short)3, "courseNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COURSE_ID
          return COURSE_ID;
        case 2: // COURSE_TITLE
          return COURSE_TITLE;
        case 3: // COURSE_NUMBER
          return COURSE_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COURSE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COURSE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("courseTitle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COURSE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("courseNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EdxCourse.class, metaDataMap);
  }

  public EdxCourse() {
  }

  public EdxCourse(
    String courseId,
    String courseTitle,
    String courseNumber)
  {
    this();
    this.courseId = courseId;
    this.courseTitle = courseTitle;
    this.courseNumber = courseNumber;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EdxCourse(EdxCourse other) {
    if (other.isSetCourseId()) {
      this.courseId = other.courseId;
    }
    if (other.isSetCourseTitle()) {
      this.courseTitle = other.courseTitle;
    }
    if (other.isSetCourseNumber()) {
      this.courseNumber = other.courseNumber;
    }
  }

  public EdxCourse deepCopy() {
    return new EdxCourse(this);
  }

  @Override
  public void clear() {
    this.courseId = null;
    this.courseTitle = null;
    this.courseNumber = null;
  }

  public String getCourseId() {
    return this.courseId;
  }

  public EdxCourse setCourseId(String courseId) {
    this.courseId = courseId;
    return this;
  }

  public void unsetCourseId() {
    this.courseId = null;
  }

  /** Returns true if field courseId is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseId() {
    return this.courseId != null;
  }

  public void setCourseIdIsSet(boolean value) {
    if (!value) {
      this.courseId = null;
    }
  }

  public String getCourseTitle() {
    return this.courseTitle;
  }

  public EdxCourse setCourseTitle(String courseTitle) {
    this.courseTitle = courseTitle;
    return this;
  }

  public void unsetCourseTitle() {
    this.courseTitle = null;
  }

  /** Returns true if field courseTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseTitle() {
    return this.courseTitle != null;
  }

  public void setCourseTitleIsSet(boolean value) {
    if (!value) {
      this.courseTitle = null;
    }
  }

  public String getCourseNumber() {
    return this.courseNumber;
  }

  public EdxCourse setCourseNumber(String courseNumber) {
    this.courseNumber = courseNumber;
    return this;
  }

  public void unsetCourseNumber() {
    this.courseNumber = null;
  }

  /** Returns true if field courseNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseNumber() {
    return this.courseNumber != null;
  }

  public void setCourseNumberIsSet(boolean value) {
    if (!value) {
      this.courseNumber = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COURSE_ID:
      if (value == null) {
        unsetCourseId();
      } else {
        setCourseId((String)value);
      }
      break;

    case COURSE_TITLE:
      if (value == null) {
        unsetCourseTitle();
      } else {
        setCourseTitle((String)value);
      }
      break;

    case COURSE_NUMBER:
      if (value == null) {
        unsetCourseNumber();
      } else {
        setCourseNumber((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COURSE_ID:
      return getCourseId();

    case COURSE_TITLE:
      return getCourseTitle();

    case COURSE_NUMBER:
      return getCourseNumber();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COURSE_ID:
      return isSetCourseId();
    case COURSE_TITLE:
      return isSetCourseTitle();
    case COURSE_NUMBER:
      return isSetCourseNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EdxCourse)
      return this.equals((EdxCourse)that);
    return false;
  }

  public boolean equals(EdxCourse that) {
    if (that == null)
      return false;

    boolean this_present_courseId = true && this.isSetCourseId();
    boolean that_present_courseId = true && that.isSetCourseId();
    if (this_present_courseId || that_present_courseId) {
      if (!(this_present_courseId && that_present_courseId))
        return false;
      if (!this.courseId.equals(that.courseId))
        return false;
    }

    boolean this_present_courseTitle = true && this.isSetCourseTitle();
    boolean that_present_courseTitle = true && that.isSetCourseTitle();
    if (this_present_courseTitle || that_present_courseTitle) {
      if (!(this_present_courseTitle && that_present_courseTitle))
        return false;
      if (!this.courseTitle.equals(that.courseTitle))
        return false;
    }

    boolean this_present_courseNumber = true && this.isSetCourseNumber();
    boolean that_present_courseNumber = true && that.isSetCourseNumber();
    if (this_present_courseNumber || that_present_courseNumber) {
      if (!(this_present_courseNumber && that_present_courseNumber))
        return false;
      if (!this.courseNumber.equals(that.courseNumber))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_courseId = true && (isSetCourseId());
    list.add(present_courseId);
    if (present_courseId)
      list.add(courseId);

    boolean present_courseTitle = true && (isSetCourseTitle());
    list.add(present_courseTitle);
    if (present_courseTitle)
      list.add(courseTitle);

    boolean present_courseNumber = true && (isSetCourseNumber());
    list.add(present_courseNumber);
    if (present_courseNumber)
      list.add(courseNumber);

    return list.hashCode();
  }

  @Override
  public int compareTo(EdxCourse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCourseId()).compareTo(other.isSetCourseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseId, other.courseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseTitle()).compareTo(other.isSetCourseTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTitle, other.courseTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseNumber()).compareTo(other.isSetCourseNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseNumber, other.courseNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EdxCourse(");
    boolean first = true;

    sb.append("courseId:");
    if (this.courseId == null) {
      sb.append("null");
    } else {
      sb.append(this.courseId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseTitle:");
    if (this.courseTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.courseTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseNumber:");
    if (this.courseNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.courseNumber);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (courseId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'courseId' was not present! Struct: " + toString());
    }
    if (courseTitle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'courseTitle' was not present! Struct: " + toString());
    }
    if (courseNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'courseNumber' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EdxCourseStandardSchemeFactory implements SchemeFactory {
    public EdxCourseStandardScheme getScheme() {
      return new EdxCourseStandardScheme();
    }
  }

  private static class EdxCourseStandardScheme extends StandardScheme<EdxCourse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EdxCourse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COURSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.courseId = iprot.readString();
              struct.setCourseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COURSE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.courseTitle = iprot.readString();
              struct.setCourseTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COURSE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.courseNumber = iprot.readString();
              struct.setCourseNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EdxCourse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.courseId != null) {
        oprot.writeFieldBegin(COURSE_ID_FIELD_DESC);
        oprot.writeString(struct.courseId);
        oprot.writeFieldEnd();
      }
      if (struct.courseTitle != null) {
        oprot.writeFieldBegin(COURSE_TITLE_FIELD_DESC);
        oprot.writeString(struct.courseTitle);
        oprot.writeFieldEnd();
      }
      if (struct.courseNumber != null) {
        oprot.writeFieldBegin(COURSE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.courseNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EdxCourseTupleSchemeFactory implements SchemeFactory {
    public EdxCourseTupleScheme getScheme() {
      return new EdxCourseTupleScheme();
    }
  }

  private static class EdxCourseTupleScheme extends TupleScheme<EdxCourse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EdxCourse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.courseId);
      oprot.writeString(struct.courseTitle);
      oprot.writeString(struct.courseNumber);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EdxCourse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.courseId = iprot.readString();
      struct.setCourseIdIsSet(true);
      struct.courseTitle = iprot.readString();
      struct.setCourseTitleIsSet(true);
      struct.courseNumber = iprot.readString();
      struct.setCourseNumberIsSet(true);
    }
  }

}

