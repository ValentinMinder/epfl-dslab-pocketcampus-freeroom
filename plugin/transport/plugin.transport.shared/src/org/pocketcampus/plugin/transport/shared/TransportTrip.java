/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransportTrip implements org.apache.thrift.TBase<TransportTrip, TransportTrip._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransportTrip");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEPARTURE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("departureTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ARRIVAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PARTS_FIELD_DESC = new org.apache.thrift.protocol.TField("parts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField FARES_FIELD_DESC = new org.apache.thrift.protocol.TField("fares", org.apache.thrift.protocol.TType.LIST, (short)8);

  public String id; // required
  public String link; // required
  public long departureTime; // required
  public long arrivalTime; // required
  public TransportStation from; // required
  public TransportStation to; // required
  public List<TransportConnection> parts; // required
  public List<Fare> fares; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LINK((short)2, "link"),
    DEPARTURE_TIME((short)3, "departureTime"),
    ARRIVAL_TIME((short)4, "arrivalTime"),
    FROM((short)5, "from"),
    TO((short)6, "to"),
    PARTS((short)7, "parts"),
    FARES((short)8, "fares");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LINK
          return LINK;
        case 3: // DEPARTURE_TIME
          return DEPARTURE_TIME;
        case 4: // ARRIVAL_TIME
          return ARRIVAL_TIME;
        case 5: // FROM
          return FROM;
        case 6: // TO
          return TO;
        case 7: // PARTS
          return PARTS;
        case 8: // FARES
          return FARES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEPARTURETIME_ISSET_ID = 0;
  private static final int __ARRIVALTIME_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTURE_TIME, new org.apache.thrift.meta_data.FieldMetaData("departureTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.ARRIVAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("arrivalTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class)));
    tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class)));
    tmpMap.put(_Fields.PARTS, new org.apache.thrift.meta_data.FieldMetaData("parts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportConnection.class))));
    tmpMap.put(_Fields.FARES, new org.apache.thrift.meta_data.FieldMetaData("fares", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Fare.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransportTrip.class, metaDataMap);
  }

  public TransportTrip() {
  }

  public TransportTrip(
    String id,
    long departureTime,
    long arrivalTime,
    TransportStation from,
    TransportStation to)
  {
    this();
    this.id = id;
    this.departureTime = departureTime;
    setDepartureTimeIsSet(true);
    this.arrivalTime = arrivalTime;
    setArrivalTimeIsSet(true);
    this.from = from;
    this.to = to;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransportTrip(TransportTrip other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLink()) {
      this.link = other.link;
    }
    this.departureTime = other.departureTime;
    this.arrivalTime = other.arrivalTime;
    if (other.isSetFrom()) {
      this.from = new TransportStation(other.from);
    }
    if (other.isSetTo()) {
      this.to = new TransportStation(other.to);
    }
    if (other.isSetParts()) {
      List<TransportConnection> __this__parts = new ArrayList<TransportConnection>();
      for (TransportConnection other_element : other.parts) {
        __this__parts.add(new TransportConnection(other_element));
      }
      this.parts = __this__parts;
    }
    if (other.isSetFares()) {
      List<Fare> __this__fares = new ArrayList<Fare>();
      for (Fare other_element : other.fares) {
        __this__fares.add(new Fare(other_element));
      }
      this.fares = __this__fares;
    }
  }

  public TransportTrip deepCopy() {
    return new TransportTrip(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.link = null;
    setDepartureTimeIsSet(false);
    this.departureTime = 0;
    setArrivalTimeIsSet(false);
    this.arrivalTime = 0;
    this.from = null;
    this.to = null;
    this.parts = null;
    this.fares = null;
  }

  public String getId() {
    return this.id;
  }

  public TransportTrip setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getLink() {
    return this.link;
  }

  public TransportTrip setLink(String link) {
    this.link = link;
    return this;
  }

  public void unsetLink() {
    this.link = null;
  }

  /** Returns true if field link is set (has been assigned a value) and false otherwise */
  public boolean isSetLink() {
    return this.link != null;
  }

  public void setLinkIsSet(boolean value) {
    if (!value) {
      this.link = null;
    }
  }

  public long getDepartureTime() {
    return this.departureTime;
  }

  public TransportTrip setDepartureTime(long departureTime) {
    this.departureTime = departureTime;
    setDepartureTimeIsSet(true);
    return this;
  }

  public void unsetDepartureTime() {
    __isset_bit_vector.clear(__DEPARTURETIME_ISSET_ID);
  }

  /** Returns true if field departureTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureTime() {
    return __isset_bit_vector.get(__DEPARTURETIME_ISSET_ID);
  }

  public void setDepartureTimeIsSet(boolean value) {
    __isset_bit_vector.set(__DEPARTURETIME_ISSET_ID, value);
  }

  public long getArrivalTime() {
    return this.arrivalTime;
  }

  public TransportTrip setArrivalTime(long arrivalTime) {
    this.arrivalTime = arrivalTime;
    setArrivalTimeIsSet(true);
    return this;
  }

  public void unsetArrivalTime() {
    __isset_bit_vector.clear(__ARRIVALTIME_ISSET_ID);
  }

  /** Returns true if field arrivalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalTime() {
    return __isset_bit_vector.get(__ARRIVALTIME_ISSET_ID);
  }

  public void setArrivalTimeIsSet(boolean value) {
    __isset_bit_vector.set(__ARRIVALTIME_ISSET_ID, value);
  }

  public TransportStation getFrom() {
    return this.from;
  }

  public TransportTrip setFrom(TransportStation from) {
    this.from = from;
    return this;
  }

  public void unsetFrom() {
    this.from = null;
  }

  /** Returns true if field from is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom() {
    return this.from != null;
  }

  public void setFromIsSet(boolean value) {
    if (!value) {
      this.from = null;
    }
  }

  public TransportStation getTo() {
    return this.to;
  }

  public TransportTrip setTo(TransportStation to) {
    this.to = to;
    return this;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  public int getPartsSize() {
    return (this.parts == null) ? 0 : this.parts.size();
  }

  public java.util.Iterator<TransportConnection> getPartsIterator() {
    return (this.parts == null) ? null : this.parts.iterator();
  }

  public void addToParts(TransportConnection elem) {
    if (this.parts == null) {
      this.parts = new ArrayList<TransportConnection>();
    }
    this.parts.add(elem);
  }

  public List<TransportConnection> getParts() {
    return this.parts;
  }

  public TransportTrip setParts(List<TransportConnection> parts) {
    this.parts = parts;
    return this;
  }

  public void unsetParts() {
    this.parts = null;
  }

  /** Returns true if field parts is set (has been assigned a value) and false otherwise */
  public boolean isSetParts() {
    return this.parts != null;
  }

  public void setPartsIsSet(boolean value) {
    if (!value) {
      this.parts = null;
    }
  }

  public int getFaresSize() {
    return (this.fares == null) ? 0 : this.fares.size();
  }

  public java.util.Iterator<Fare> getFaresIterator() {
    return (this.fares == null) ? null : this.fares.iterator();
  }

  public void addToFares(Fare elem) {
    if (this.fares == null) {
      this.fares = new ArrayList<Fare>();
    }
    this.fares.add(elem);
  }

  public List<Fare> getFares() {
    return this.fares;
  }

  public TransportTrip setFares(List<Fare> fares) {
    this.fares = fares;
    return this;
  }

  public void unsetFares() {
    this.fares = null;
  }

  /** Returns true if field fares is set (has been assigned a value) and false otherwise */
  public boolean isSetFares() {
    return this.fares != null;
  }

  public void setFaresIsSet(boolean value) {
    if (!value) {
      this.fares = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LINK:
      if (value == null) {
        unsetLink();
      } else {
        setLink((String)value);
      }
      break;

    case DEPARTURE_TIME:
      if (value == null) {
        unsetDepartureTime();
      } else {
        setDepartureTime((Long)value);
      }
      break;

    case ARRIVAL_TIME:
      if (value == null) {
        unsetArrivalTime();
      } else {
        setArrivalTime((Long)value);
      }
      break;

    case FROM:
      if (value == null) {
        unsetFrom();
      } else {
        setFrom((TransportStation)value);
      }
      break;

    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((TransportStation)value);
      }
      break;

    case PARTS:
      if (value == null) {
        unsetParts();
      } else {
        setParts((List<TransportConnection>)value);
      }
      break;

    case FARES:
      if (value == null) {
        unsetFares();
      } else {
        setFares((List<Fare>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LINK:
      return getLink();

    case DEPARTURE_TIME:
      return Long.valueOf(getDepartureTime());

    case ARRIVAL_TIME:
      return Long.valueOf(getArrivalTime());

    case FROM:
      return getFrom();

    case TO:
      return getTo();

    case PARTS:
      return getParts();

    case FARES:
      return getFares();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LINK:
      return isSetLink();
    case DEPARTURE_TIME:
      return isSetDepartureTime();
    case ARRIVAL_TIME:
      return isSetArrivalTime();
    case FROM:
      return isSetFrom();
    case TO:
      return isSetTo();
    case PARTS:
      return isSetParts();
    case FARES:
      return isSetFares();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransportTrip)
      return this.equals((TransportTrip)that);
    return false;
  }

  public boolean equals(TransportTrip that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_link = true && this.isSetLink();
    boolean that_present_link = true && that.isSetLink();
    if (this_present_link || that_present_link) {
      if (!(this_present_link && that_present_link))
        return false;
      if (!this.link.equals(that.link))
        return false;
    }

    boolean this_present_departureTime = true;
    boolean that_present_departureTime = true;
    if (this_present_departureTime || that_present_departureTime) {
      if (!(this_present_departureTime && that_present_departureTime))
        return false;
      if (this.departureTime != that.departureTime)
        return false;
    }

    boolean this_present_arrivalTime = true;
    boolean that_present_arrivalTime = true;
    if (this_present_arrivalTime || that_present_arrivalTime) {
      if (!(this_present_arrivalTime && that_present_arrivalTime))
        return false;
      if (this.arrivalTime != that.arrivalTime)
        return false;
    }

    boolean this_present_from = true && this.isSetFrom();
    boolean that_present_from = true && that.isSetFrom();
    if (this_present_from || that_present_from) {
      if (!(this_present_from && that_present_from))
        return false;
      if (!this.from.equals(that.from))
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_parts = true && this.isSetParts();
    boolean that_present_parts = true && that.isSetParts();
    if (this_present_parts || that_present_parts) {
      if (!(this_present_parts && that_present_parts))
        return false;
      if (!this.parts.equals(that.parts))
        return false;
    }

    boolean this_present_fares = true && this.isSetFares();
    boolean that_present_fares = true && that.isSetFares();
    if (this_present_fares || that_present_fares) {
      if (!(this_present_fares && that_present_fares))
        return false;
      if (!this.fares.equals(that.fares))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_link = true && (isSetLink());
    builder.append(present_link);
    if (present_link)
      builder.append(link);

    boolean present_departureTime = true;
    builder.append(present_departureTime);
    if (present_departureTime)
      builder.append(departureTime);

    boolean present_arrivalTime = true;
    builder.append(present_arrivalTime);
    if (present_arrivalTime)
      builder.append(arrivalTime);

    boolean present_from = true && (isSetFrom());
    builder.append(present_from);
    if (present_from)
      builder.append(from);

    boolean present_to = true && (isSetTo());
    builder.append(present_to);
    if (present_to)
      builder.append(to);

    boolean present_parts = true && (isSetParts());
    builder.append(present_parts);
    if (present_parts)
      builder.append(parts);

    boolean present_fares = true && (isSetFares());
    builder.append(present_fares);
    if (present_fares)
      builder.append(fares);

    return builder.toHashCode();
  }

  public int compareTo(TransportTrip other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TransportTrip typedOther = (TransportTrip)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLink()).compareTo(typedOther.isSetLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, typedOther.link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartureTime()).compareTo(typedOther.isSetDepartureTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureTime, typedOther.departureTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrivalTime()).compareTo(typedOther.isSetArrivalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalTime, typedOther.arrivalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrom()).compareTo(typedOther.isSetFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, typedOther.from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo()).compareTo(typedOther.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, typedOther.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParts()).compareTo(typedOther.isSetParts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parts, typedOther.parts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFares()).compareTo(typedOther.isSetFares());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFares()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fares, typedOther.fares);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LINK
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.link = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DEPARTURE_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.departureTime = iprot.readI64();
            setDepartureTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ARRIVAL_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.arrivalTime = iprot.readI64();
            setArrivalTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FROM
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.from = new TransportStation();
            this.from.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TO
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.to = new TransportStation();
            this.to.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PARTS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
              this.parts = new ArrayList<TransportConnection>(_list12.size);
              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
              {
                TransportConnection _elem14; // required
                _elem14 = new TransportConnection();
                _elem14.read(iprot);
                this.parts.add(_elem14);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // FARES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
              this.fares = new ArrayList<Fare>(_list15.size);
              for (int _i16 = 0; _i16 < _list15.size; ++_i16)
              {
                Fare _elem17; // required
                _elem17 = new Fare();
                _elem17.read(iprot);
                this.fares.add(_elem17);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetDepartureTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'departureTime' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetArrivalTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arrivalTime' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.link != null) {
      if (isSetLink()) {
        oprot.writeFieldBegin(LINK_FIELD_DESC);
        oprot.writeString(this.link);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(DEPARTURE_TIME_FIELD_DESC);
    oprot.writeI64(this.departureTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ARRIVAL_TIME_FIELD_DESC);
    oprot.writeI64(this.arrivalTime);
    oprot.writeFieldEnd();
    if (this.from != null) {
      oprot.writeFieldBegin(FROM_FIELD_DESC);
      this.from.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.to != null) {
      oprot.writeFieldBegin(TO_FIELD_DESC);
      this.to.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.parts != null) {
      if (isSetParts()) {
        oprot.writeFieldBegin(PARTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.parts.size()));
          for (TransportConnection _iter18 : this.parts)
          {
            _iter18.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.fares != null) {
      if (isSetFares()) {
        oprot.writeFieldBegin(FARES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.fares.size()));
          for (Fare _iter19 : this.fares)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransportTrip(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetLink()) {
      if (!first) sb.append(", ");
      sb.append("link:");
      if (this.link == null) {
        sb.append("null");
      } else {
        sb.append(this.link);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("departureTime:");
    sb.append(this.departureTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrivalTime:");
    sb.append(this.arrivalTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("from:");
    if (this.from == null) {
      sb.append("null");
    } else {
      sb.append(this.from);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (isSetParts()) {
      if (!first) sb.append(", ");
      sb.append("parts:");
      if (this.parts == null) {
        sb.append("null");
      } else {
        sb.append(this.parts);
      }
      first = false;
    }
    if (isSetFares()) {
      if (!first) sb.append(", ");
      sb.append("fares:");
      if (this.fares == null) {
        sb.append("null");
      } else {
        sb.append(this.fares);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'departureTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'arrivalTime' because it's a primitive and you chose the non-beans generator.
    if (from == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'from' was not present! Struct: " + toString());
    }
    if (to == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'to' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

