/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransportService {

  public interface Iface {

    public List<TransportStation> autocomplete(String constraint) throws org.apache.thrift.TException;

    public List<TransportStation> getLocationsFromIDs(List<Integer> ids) throws org.apache.thrift.TException;

    public List<TransportStation> getLocationsFromNames(List<String> names) throws org.apache.thrift.TException;

    public QueryDepartureResult nextDepartures(String IDStation) throws org.apache.thrift.TException;

    public QueryTripsResult getTrips(String from, String to) throws org.apache.thrift.TException;

    public QueryTripsResult getTripsAtTime(String from, String to, long time, boolean isDeparture) throws org.apache.thrift.TException;

    public QueryTripsResult getTripsFromStationsIDs(String fromID, String toID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void autocomplete(String constraint, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.autocomplete_call> resultHandler) throws org.apache.thrift.TException;

    public void getLocationsFromIDs(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLocationsFromIDs_call> resultHandler) throws org.apache.thrift.TException;

    public void getLocationsFromNames(List<String> names, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLocationsFromNames_call> resultHandler) throws org.apache.thrift.TException;

    public void nextDepartures(String IDStation, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.nextDepartures_call> resultHandler) throws org.apache.thrift.TException;

    public void getTrips(String from, String to, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTrips_call> resultHandler) throws org.apache.thrift.TException;

    public void getTripsAtTime(String from, String to, long time, boolean isDeparture, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTripsAtTime_call> resultHandler) throws org.apache.thrift.TException;

    public void getTripsFromStationsIDs(String fromID, String toID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTripsFromStationsIDs_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<TransportStation> autocomplete(String constraint) throws org.apache.thrift.TException
    {
      send_autocomplete(constraint);
      return recv_autocomplete();
    }

    public void send_autocomplete(String constraint) throws org.apache.thrift.TException
    {
      autocomplete_args args = new autocomplete_args();
      args.setConstraint(constraint);
      sendBase("autocomplete", args);
    }

    public List<TransportStation> recv_autocomplete() throws org.apache.thrift.TException
    {
      autocomplete_result result = new autocomplete_result();
      receiveBase(result, "autocomplete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "autocomplete failed: unknown result");
    }

    public List<TransportStation> getLocationsFromIDs(List<Integer> ids) throws org.apache.thrift.TException
    {
      send_getLocationsFromIDs(ids);
      return recv_getLocationsFromIDs();
    }

    public void send_getLocationsFromIDs(List<Integer> ids) throws org.apache.thrift.TException
    {
      getLocationsFromIDs_args args = new getLocationsFromIDs_args();
      args.setIds(ids);
      sendBase("getLocationsFromIDs", args);
    }

    public List<TransportStation> recv_getLocationsFromIDs() throws org.apache.thrift.TException
    {
      getLocationsFromIDs_result result = new getLocationsFromIDs_result();
      receiveBase(result, "getLocationsFromIDs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLocationsFromIDs failed: unknown result");
    }

    public List<TransportStation> getLocationsFromNames(List<String> names) throws org.apache.thrift.TException
    {
      send_getLocationsFromNames(names);
      return recv_getLocationsFromNames();
    }

    public void send_getLocationsFromNames(List<String> names) throws org.apache.thrift.TException
    {
      getLocationsFromNames_args args = new getLocationsFromNames_args();
      args.setNames(names);
      sendBase("getLocationsFromNames", args);
    }

    public List<TransportStation> recv_getLocationsFromNames() throws org.apache.thrift.TException
    {
      getLocationsFromNames_result result = new getLocationsFromNames_result();
      receiveBase(result, "getLocationsFromNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLocationsFromNames failed: unknown result");
    }

    public QueryDepartureResult nextDepartures(String IDStation) throws org.apache.thrift.TException
    {
      send_nextDepartures(IDStation);
      return recv_nextDepartures();
    }

    public void send_nextDepartures(String IDStation) throws org.apache.thrift.TException
    {
      nextDepartures_args args = new nextDepartures_args();
      args.setIDStation(IDStation);
      sendBase("nextDepartures", args);
    }

    public QueryDepartureResult recv_nextDepartures() throws org.apache.thrift.TException
    {
      nextDepartures_result result = new nextDepartures_result();
      receiveBase(result, "nextDepartures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "nextDepartures failed: unknown result");
    }

    public QueryTripsResult getTrips(String from, String to) throws org.apache.thrift.TException
    {
      send_getTrips(from, to);
      return recv_getTrips();
    }

    public void send_getTrips(String from, String to) throws org.apache.thrift.TException
    {
      getTrips_args args = new getTrips_args();
      args.setFrom(from);
      args.setTo(to);
      sendBase("getTrips", args);
    }

    public QueryTripsResult recv_getTrips() throws org.apache.thrift.TException
    {
      getTrips_result result = new getTrips_result();
      receiveBase(result, "getTrips");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTrips failed: unknown result");
    }

    public QueryTripsResult getTripsAtTime(String from, String to, long time, boolean isDeparture) throws org.apache.thrift.TException
    {
      send_getTripsAtTime(from, to, time, isDeparture);
      return recv_getTripsAtTime();
    }

    public void send_getTripsAtTime(String from, String to, long time, boolean isDeparture) throws org.apache.thrift.TException
    {
      getTripsAtTime_args args = new getTripsAtTime_args();
      args.setFrom(from);
      args.setTo(to);
      args.setTime(time);
      args.setIsDeparture(isDeparture);
      sendBase("getTripsAtTime", args);
    }

    public QueryTripsResult recv_getTripsAtTime() throws org.apache.thrift.TException
    {
      getTripsAtTime_result result = new getTripsAtTime_result();
      receiveBase(result, "getTripsAtTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTripsAtTime failed: unknown result");
    }

    public QueryTripsResult getTripsFromStationsIDs(String fromID, String toID) throws org.apache.thrift.TException
    {
      send_getTripsFromStationsIDs(fromID, toID);
      return recv_getTripsFromStationsIDs();
    }

    public void send_getTripsFromStationsIDs(String fromID, String toID) throws org.apache.thrift.TException
    {
      getTripsFromStationsIDs_args args = new getTripsFromStationsIDs_args();
      args.setFromID(fromID);
      args.setToID(toID);
      sendBase("getTripsFromStationsIDs", args);
    }

    public QueryTripsResult recv_getTripsFromStationsIDs() throws org.apache.thrift.TException
    {
      getTripsFromStationsIDs_result result = new getTripsFromStationsIDs_result();
      receiveBase(result, "getTripsFromStationsIDs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTripsFromStationsIDs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void autocomplete(String constraint, org.apache.thrift.async.AsyncMethodCallback<autocomplete_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      autocomplete_call method_call = new autocomplete_call(constraint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class autocomplete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String constraint;
      public autocomplete_call(String constraint, org.apache.thrift.async.AsyncMethodCallback<autocomplete_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.constraint = constraint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("autocomplete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        autocomplete_args args = new autocomplete_args();
        args.setConstraint(constraint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TransportStation> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_autocomplete();
      }
    }

    public void getLocationsFromIDs(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<getLocationsFromIDs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLocationsFromIDs_call method_call = new getLocationsFromIDs_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLocationsFromIDs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> ids;
      public getLocationsFromIDs_call(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<getLocationsFromIDs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLocationsFromIDs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLocationsFromIDs_args args = new getLocationsFromIDs_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TransportStation> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLocationsFromIDs();
      }
    }

    public void getLocationsFromNames(List<String> names, org.apache.thrift.async.AsyncMethodCallback<getLocationsFromNames_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLocationsFromNames_call method_call = new getLocationsFromNames_call(names, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLocationsFromNames_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> names;
      public getLocationsFromNames_call(List<String> names, org.apache.thrift.async.AsyncMethodCallback<getLocationsFromNames_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.names = names;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLocationsFromNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLocationsFromNames_args args = new getLocationsFromNames_args();
        args.setNames(names);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TransportStation> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLocationsFromNames();
      }
    }

    public void nextDepartures(String IDStation, org.apache.thrift.async.AsyncMethodCallback<nextDepartures_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      nextDepartures_call method_call = new nextDepartures_call(IDStation, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class nextDepartures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String IDStation;
      public nextDepartures_call(String IDStation, org.apache.thrift.async.AsyncMethodCallback<nextDepartures_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.IDStation = IDStation;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("nextDepartures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        nextDepartures_args args = new nextDepartures_args();
        args.setIDStation(IDStation);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public QueryDepartureResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_nextDepartures();
      }
    }

    public void getTrips(String from, String to, org.apache.thrift.async.AsyncMethodCallback<getTrips_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTrips_call method_call = new getTrips_call(from, to, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTrips_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String from;
      private String to;
      public getTrips_call(String from, String to, org.apache.thrift.async.AsyncMethodCallback<getTrips_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.from = from;
        this.to = to;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTrips", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTrips_args args = new getTrips_args();
        args.setFrom(from);
        args.setTo(to);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public QueryTripsResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTrips();
      }
    }

    public void getTripsAtTime(String from, String to, long time, boolean isDeparture, org.apache.thrift.async.AsyncMethodCallback<getTripsAtTime_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTripsAtTime_call method_call = new getTripsAtTime_call(from, to, time, isDeparture, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTripsAtTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String from;
      private String to;
      private long time;
      private boolean isDeparture;
      public getTripsAtTime_call(String from, String to, long time, boolean isDeparture, org.apache.thrift.async.AsyncMethodCallback<getTripsAtTime_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.from = from;
        this.to = to;
        this.time = time;
        this.isDeparture = isDeparture;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTripsAtTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTripsAtTime_args args = new getTripsAtTime_args();
        args.setFrom(from);
        args.setTo(to);
        args.setTime(time);
        args.setIsDeparture(isDeparture);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public QueryTripsResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTripsAtTime();
      }
    }

    public void getTripsFromStationsIDs(String fromID, String toID, org.apache.thrift.async.AsyncMethodCallback<getTripsFromStationsIDs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTripsFromStationsIDs_call method_call = new getTripsFromStationsIDs_call(fromID, toID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTripsFromStationsIDs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fromID;
      private String toID;
      public getTripsFromStationsIDs_call(String fromID, String toID, org.apache.thrift.async.AsyncMethodCallback<getTripsFromStationsIDs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromID = fromID;
        this.toID = toID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTripsFromStationsIDs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTripsFromStationsIDs_args args = new getTripsFromStationsIDs_args();
        args.setFromID(fromID);
        args.setToID(toID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public QueryTripsResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTripsFromStationsIDs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("autocomplete", new autocomplete());
      processMap.put("getLocationsFromIDs", new getLocationsFromIDs());
      processMap.put("getLocationsFromNames", new getLocationsFromNames());
      processMap.put("nextDepartures", new nextDepartures());
      processMap.put("getTrips", new getTrips());
      processMap.put("getTripsAtTime", new getTripsAtTime());
      processMap.put("getTripsFromStationsIDs", new getTripsFromStationsIDs());
      return processMap;
    }

    private static class autocomplete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, autocomplete_args> {
      public autocomplete() {
        super("autocomplete");
      }

      protected autocomplete_args getEmptyArgsInstance() {
        return new autocomplete_args();
      }

      protected autocomplete_result getResult(I iface, autocomplete_args args) throws org.apache.thrift.TException {
        autocomplete_result result = new autocomplete_result();
        result.success = iface.autocomplete(args.constraint);
        return result;
      }
    }

    private static class getLocationsFromIDs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLocationsFromIDs_args> {
      public getLocationsFromIDs() {
        super("getLocationsFromIDs");
      }

      protected getLocationsFromIDs_args getEmptyArgsInstance() {
        return new getLocationsFromIDs_args();
      }

      protected getLocationsFromIDs_result getResult(I iface, getLocationsFromIDs_args args) throws org.apache.thrift.TException {
        getLocationsFromIDs_result result = new getLocationsFromIDs_result();
        result.success = iface.getLocationsFromIDs(args.ids);
        return result;
      }
    }

    private static class getLocationsFromNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLocationsFromNames_args> {
      public getLocationsFromNames() {
        super("getLocationsFromNames");
      }

      protected getLocationsFromNames_args getEmptyArgsInstance() {
        return new getLocationsFromNames_args();
      }

      protected getLocationsFromNames_result getResult(I iface, getLocationsFromNames_args args) throws org.apache.thrift.TException {
        getLocationsFromNames_result result = new getLocationsFromNames_result();
        result.success = iface.getLocationsFromNames(args.names);
        return result;
      }
    }

    private static class nextDepartures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, nextDepartures_args> {
      public nextDepartures() {
        super("nextDepartures");
      }

      protected nextDepartures_args getEmptyArgsInstance() {
        return new nextDepartures_args();
      }

      protected nextDepartures_result getResult(I iface, nextDepartures_args args) throws org.apache.thrift.TException {
        nextDepartures_result result = new nextDepartures_result();
        result.success = iface.nextDepartures(args.IDStation);
        return result;
      }
    }

    private static class getTrips<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTrips_args> {
      public getTrips() {
        super("getTrips");
      }

      protected getTrips_args getEmptyArgsInstance() {
        return new getTrips_args();
      }

      protected getTrips_result getResult(I iface, getTrips_args args) throws org.apache.thrift.TException {
        getTrips_result result = new getTrips_result();
        result.success = iface.getTrips(args.from, args.to);
        return result;
      }
    }

    private static class getTripsAtTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTripsAtTime_args> {
      public getTripsAtTime() {
        super("getTripsAtTime");
      }

      protected getTripsAtTime_args getEmptyArgsInstance() {
        return new getTripsAtTime_args();
      }

      protected getTripsAtTime_result getResult(I iface, getTripsAtTime_args args) throws org.apache.thrift.TException {
        getTripsAtTime_result result = new getTripsAtTime_result();
        result.success = iface.getTripsAtTime(args.from, args.to, args.time, args.isDeparture);
        return result;
      }
    }

    private static class getTripsFromStationsIDs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTripsFromStationsIDs_args> {
      public getTripsFromStationsIDs() {
        super("getTripsFromStationsIDs");
      }

      protected getTripsFromStationsIDs_args getEmptyArgsInstance() {
        return new getTripsFromStationsIDs_args();
      }

      protected getTripsFromStationsIDs_result getResult(I iface, getTripsFromStationsIDs_args args) throws org.apache.thrift.TException {
        getTripsFromStationsIDs_result result = new getTripsFromStationsIDs_result();
        result.success = iface.getTripsFromStationsIDs(args.fromID, args.toID);
        return result;
      }
    }

  }

  public static class autocomplete_args implements org.apache.thrift.TBase<autocomplete_args, autocomplete_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("autocomplete_args");

    private static final org.apache.thrift.protocol.TField CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("constraint", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String constraint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONSTRAINT((short)1, "constraint");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONSTRAINT
            return CONSTRAINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("constraint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(autocomplete_args.class, metaDataMap);
    }

    public autocomplete_args() {
    }

    public autocomplete_args(
      String constraint)
    {
      this();
      this.constraint = constraint;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public autocomplete_args(autocomplete_args other) {
      if (other.isSetConstraint()) {
        this.constraint = other.constraint;
      }
    }

    public autocomplete_args deepCopy() {
      return new autocomplete_args(this);
    }

    @Override
    public void clear() {
      this.constraint = null;
    }

    public String getConstraint() {
      return this.constraint;
    }

    public autocomplete_args setConstraint(String constraint) {
      this.constraint = constraint;
      return this;
    }

    public void unsetConstraint() {
      this.constraint = null;
    }

    /** Returns true if field constraint is set (has been assigned a value) and false otherwise */
    public boolean isSetConstraint() {
      return this.constraint != null;
    }

    public void setConstraintIsSet(boolean value) {
      if (!value) {
        this.constraint = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONSTRAINT:
        if (value == null) {
          unsetConstraint();
        } else {
          setConstraint((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONSTRAINT:
        return getConstraint();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONSTRAINT:
        return isSetConstraint();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof autocomplete_args)
        return this.equals((autocomplete_args)that);
      return false;
    }

    public boolean equals(autocomplete_args that) {
      if (that == null)
        return false;

      boolean this_present_constraint = true && this.isSetConstraint();
      boolean that_present_constraint = true && that.isSetConstraint();
      if (this_present_constraint || that_present_constraint) {
        if (!(this_present_constraint && that_present_constraint))
          return false;
        if (!this.constraint.equals(that.constraint))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_constraint = true && (isSetConstraint());
      builder.append(present_constraint);
      if (present_constraint)
        builder.append(constraint);

      return builder.toHashCode();
    }

    public int compareTo(autocomplete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      autocomplete_args typedOther = (autocomplete_args)other;

      lastComparison = Boolean.valueOf(isSetConstraint()).compareTo(typedOther.isSetConstraint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstraint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraint, typedOther.constraint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CONSTRAINT
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.constraint = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.constraint != null) {
        oprot.writeFieldBegin(CONSTRAINT_FIELD_DESC);
        oprot.writeString(this.constraint);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("autocomplete_args(");
      boolean first = true;

      sb.append("constraint:");
      if (this.constraint == null) {
        sb.append("null");
      } else {
        sb.append(this.constraint);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class autocomplete_result implements org.apache.thrift.TBase<autocomplete_result, autocomplete_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("autocomplete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<TransportStation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(autocomplete_result.class, metaDataMap);
    }

    public autocomplete_result() {
    }

    public autocomplete_result(
      List<TransportStation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public autocomplete_result(autocomplete_result other) {
      if (other.isSetSuccess()) {
        List<TransportStation> __this__success = new ArrayList<TransportStation>();
        for (TransportStation other_element : other.success) {
          __this__success.add(new TransportStation(other_element));
        }
        this.success = __this__success;
      }
    }

    public autocomplete_result deepCopy() {
      return new autocomplete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TransportStation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TransportStation elem) {
      if (this.success == null) {
        this.success = new ArrayList<TransportStation>();
      }
      this.success.add(elem);
    }

    public List<TransportStation> getSuccess() {
      return this.success;
    }

    public autocomplete_result setSuccess(List<TransportStation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TransportStation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof autocomplete_result)
        return this.equals((autocomplete_result)that);
      return false;
    }

    public boolean equals(autocomplete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(autocomplete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      autocomplete_result typedOther = (autocomplete_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                this.success = new ArrayList<TransportStation>(_list92.size);
                for (int _i93 = 0; _i93 < _list92.size; ++_i93)
                {
                  TransportStation _elem94; // required
                  _elem94 = new TransportStation();
                  _elem94.read(iprot);
                  this.success.add(_elem94);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (TransportStation _iter95 : this.success)
          {
            _iter95.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("autocomplete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLocationsFromIDs_args implements org.apache.thrift.TBase<getLocationsFromIDs_args, getLocationsFromIDs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLocationsFromIDs_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    public List<Integer> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLocationsFromIDs_args.class, metaDataMap);
    }

    public getLocationsFromIDs_args() {
    }

    public getLocationsFromIDs_args(
      List<Integer> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLocationsFromIDs_args(getLocationsFromIDs_args other) {
      if (other.isSetIds()) {
        List<Integer> __this__ids = new ArrayList<Integer>();
        for (Integer other_element : other.ids) {
          __this__ids.add(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public getLocationsFromIDs_args deepCopy() {
      return new getLocationsFromIDs_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Integer> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(int elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Integer>();
      }
      this.ids.add(elem);
    }

    public List<Integer> getIds() {
      return this.ids;
    }

    public getLocationsFromIDs_args setIds(List<Integer> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLocationsFromIDs_args)
        return this.equals((getLocationsFromIDs_args)that);
      return false;
    }

    public boolean equals(getLocationsFromIDs_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ids = true && (isSetIds());
      builder.append(present_ids);
      if (present_ids)
        builder.append(ids);

      return builder.toHashCode();
    }

    public int compareTo(getLocationsFromIDs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLocationsFromIDs_args typedOther = (getLocationsFromIDs_args)other;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IDS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                this.ids = new ArrayList<Integer>(_list96.size);
                for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                {
                  int _elem98; // required
                  _elem98 = iprot.readI32();
                  this.ids.add(_elem98);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, this.ids.size()));
          for (int _iter99 : this.ids)
          {
            oprot.writeI32(_iter99);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLocationsFromIDs_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLocationsFromIDs_result implements org.apache.thrift.TBase<getLocationsFromIDs_result, getLocationsFromIDs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLocationsFromIDs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<TransportStation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLocationsFromIDs_result.class, metaDataMap);
    }

    public getLocationsFromIDs_result() {
    }

    public getLocationsFromIDs_result(
      List<TransportStation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLocationsFromIDs_result(getLocationsFromIDs_result other) {
      if (other.isSetSuccess()) {
        List<TransportStation> __this__success = new ArrayList<TransportStation>();
        for (TransportStation other_element : other.success) {
          __this__success.add(new TransportStation(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLocationsFromIDs_result deepCopy() {
      return new getLocationsFromIDs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TransportStation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TransportStation elem) {
      if (this.success == null) {
        this.success = new ArrayList<TransportStation>();
      }
      this.success.add(elem);
    }

    public List<TransportStation> getSuccess() {
      return this.success;
    }

    public getLocationsFromIDs_result setSuccess(List<TransportStation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TransportStation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLocationsFromIDs_result)
        return this.equals((getLocationsFromIDs_result)that);
      return false;
    }

    public boolean equals(getLocationsFromIDs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getLocationsFromIDs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLocationsFromIDs_result typedOther = (getLocationsFromIDs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                this.success = new ArrayList<TransportStation>(_list100.size);
                for (int _i101 = 0; _i101 < _list100.size; ++_i101)
                {
                  TransportStation _elem102; // required
                  _elem102 = new TransportStation();
                  _elem102.read(iprot);
                  this.success.add(_elem102);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (TransportStation _iter103 : this.success)
          {
            _iter103.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLocationsFromIDs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLocationsFromNames_args implements org.apache.thrift.TBase<getLocationsFromNames_args, getLocationsFromNames_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLocationsFromNames_args");

    private static final org.apache.thrift.protocol.TField NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("names", org.apache.thrift.protocol.TType.LIST, (short)1);

    public List<String> names; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAMES((short)1, "names");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAMES
            return NAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAMES, new org.apache.thrift.meta_data.FieldMetaData("names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLocationsFromNames_args.class, metaDataMap);
    }

    public getLocationsFromNames_args() {
    }

    public getLocationsFromNames_args(
      List<String> names)
    {
      this();
      this.names = names;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLocationsFromNames_args(getLocationsFromNames_args other) {
      if (other.isSetNames()) {
        List<String> __this__names = new ArrayList<String>();
        for (String other_element : other.names) {
          __this__names.add(other_element);
        }
        this.names = __this__names;
      }
    }

    public getLocationsFromNames_args deepCopy() {
      return new getLocationsFromNames_args(this);
    }

    @Override
    public void clear() {
      this.names = null;
    }

    public int getNamesSize() {
      return (this.names == null) ? 0 : this.names.size();
    }

    public java.util.Iterator<String> getNamesIterator() {
      return (this.names == null) ? null : this.names.iterator();
    }

    public void addToNames(String elem) {
      if (this.names == null) {
        this.names = new ArrayList<String>();
      }
      this.names.add(elem);
    }

    public List<String> getNames() {
      return this.names;
    }

    public getLocationsFromNames_args setNames(List<String> names) {
      this.names = names;
      return this;
    }

    public void unsetNames() {
      this.names = null;
    }

    /** Returns true if field names is set (has been assigned a value) and false otherwise */
    public boolean isSetNames() {
      return this.names != null;
    }

    public void setNamesIsSet(boolean value) {
      if (!value) {
        this.names = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAMES:
        if (value == null) {
          unsetNames();
        } else {
          setNames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAMES:
        return getNames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAMES:
        return isSetNames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLocationsFromNames_args)
        return this.equals((getLocationsFromNames_args)that);
      return false;
    }

    public boolean equals(getLocationsFromNames_args that) {
      if (that == null)
        return false;

      boolean this_present_names = true && this.isSetNames();
      boolean that_present_names = true && that.isSetNames();
      if (this_present_names || that_present_names) {
        if (!(this_present_names && that_present_names))
          return false;
        if (!this.names.equals(that.names))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_names = true && (isSetNames());
      builder.append(present_names);
      if (present_names)
        builder.append(names);

      return builder.toHashCode();
    }

    public int compareTo(getLocationsFromNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLocationsFromNames_args typedOther = (getLocationsFromNames_args)other;

      lastComparison = Boolean.valueOf(isSetNames()).compareTo(typedOther.isSetNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.names, typedOther.names);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NAMES
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                this.names = new ArrayList<String>(_list104.size);
                for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                {
                  String _elem106; // required
                  _elem106 = iprot.readString();
                  this.names.add(_elem106);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.names != null) {
        oprot.writeFieldBegin(NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.names.size()));
          for (String _iter107 : this.names)
          {
            oprot.writeString(_iter107);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLocationsFromNames_args(");
      boolean first = true;

      sb.append("names:");
      if (this.names == null) {
        sb.append("null");
      } else {
        sb.append(this.names);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLocationsFromNames_result implements org.apache.thrift.TBase<getLocationsFromNames_result, getLocationsFromNames_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLocationsFromNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<TransportStation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLocationsFromNames_result.class, metaDataMap);
    }

    public getLocationsFromNames_result() {
    }

    public getLocationsFromNames_result(
      List<TransportStation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLocationsFromNames_result(getLocationsFromNames_result other) {
      if (other.isSetSuccess()) {
        List<TransportStation> __this__success = new ArrayList<TransportStation>();
        for (TransportStation other_element : other.success) {
          __this__success.add(new TransportStation(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLocationsFromNames_result deepCopy() {
      return new getLocationsFromNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TransportStation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TransportStation elem) {
      if (this.success == null) {
        this.success = new ArrayList<TransportStation>();
      }
      this.success.add(elem);
    }

    public List<TransportStation> getSuccess() {
      return this.success;
    }

    public getLocationsFromNames_result setSuccess(List<TransportStation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TransportStation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLocationsFromNames_result)
        return this.equals((getLocationsFromNames_result)that);
      return false;
    }

    public boolean equals(getLocationsFromNames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getLocationsFromNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLocationsFromNames_result typedOther = (getLocationsFromNames_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                this.success = new ArrayList<TransportStation>(_list108.size);
                for (int _i109 = 0; _i109 < _list108.size; ++_i109)
                {
                  TransportStation _elem110; // required
                  _elem110 = new TransportStation();
                  _elem110.read(iprot);
                  this.success.add(_elem110);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (TransportStation _iter111 : this.success)
          {
            _iter111.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLocationsFromNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class nextDepartures_args implements org.apache.thrift.TBase<nextDepartures_args, nextDepartures_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nextDepartures_args");

    private static final org.apache.thrift.protocol.TField IDSTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("IDStation", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String IDStation; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDSTATION((short)2, "IDStation");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // IDSTATION
            return IDSTATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDSTATION, new org.apache.thrift.meta_data.FieldMetaData("IDStation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nextDepartures_args.class, metaDataMap);
    }

    public nextDepartures_args() {
    }

    public nextDepartures_args(
      String IDStation)
    {
      this();
      this.IDStation = IDStation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nextDepartures_args(nextDepartures_args other) {
      if (other.isSetIDStation()) {
        this.IDStation = other.IDStation;
      }
    }

    public nextDepartures_args deepCopy() {
      return new nextDepartures_args(this);
    }

    @Override
    public void clear() {
      this.IDStation = null;
    }

    public String getIDStation() {
      return this.IDStation;
    }

    public nextDepartures_args setIDStation(String IDStation) {
      this.IDStation = IDStation;
      return this;
    }

    public void unsetIDStation() {
      this.IDStation = null;
    }

    /** Returns true if field IDStation is set (has been assigned a value) and false otherwise */
    public boolean isSetIDStation() {
      return this.IDStation != null;
    }

    public void setIDStationIsSet(boolean value) {
      if (!value) {
        this.IDStation = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDSTATION:
        if (value == null) {
          unsetIDStation();
        } else {
          setIDStation((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDSTATION:
        return getIDStation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDSTATION:
        return isSetIDStation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof nextDepartures_args)
        return this.equals((nextDepartures_args)that);
      return false;
    }

    public boolean equals(nextDepartures_args that) {
      if (that == null)
        return false;

      boolean this_present_IDStation = true && this.isSetIDStation();
      boolean that_present_IDStation = true && that.isSetIDStation();
      if (this_present_IDStation || that_present_IDStation) {
        if (!(this_present_IDStation && that_present_IDStation))
          return false;
        if (!this.IDStation.equals(that.IDStation))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_IDStation = true && (isSetIDStation());
      builder.append(present_IDStation);
      if (present_IDStation)
        builder.append(IDStation);

      return builder.toHashCode();
    }

    public int compareTo(nextDepartures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      nextDepartures_args typedOther = (nextDepartures_args)other;

      lastComparison = Boolean.valueOf(isSetIDStation()).compareTo(typedOther.isSetIDStation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIDStation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDStation, typedOther.IDStation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // IDSTATION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.IDStation = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.IDStation != null) {
        oprot.writeFieldBegin(IDSTATION_FIELD_DESC);
        oprot.writeString(this.IDStation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("nextDepartures_args(");
      boolean first = true;

      sb.append("IDStation:");
      if (this.IDStation == null) {
        sb.append("null");
      } else {
        sb.append(this.IDStation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class nextDepartures_result implements org.apache.thrift.TBase<nextDepartures_result, nextDepartures_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nextDepartures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public QueryDepartureResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryDepartureResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nextDepartures_result.class, metaDataMap);
    }

    public nextDepartures_result() {
    }

    public nextDepartures_result(
      QueryDepartureResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nextDepartures_result(nextDepartures_result other) {
      if (other.isSetSuccess()) {
        this.success = new QueryDepartureResult(other.success);
      }
    }

    public nextDepartures_result deepCopy() {
      return new nextDepartures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public QueryDepartureResult getSuccess() {
      return this.success;
    }

    public nextDepartures_result setSuccess(QueryDepartureResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((QueryDepartureResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof nextDepartures_result)
        return this.equals((nextDepartures_result)that);
      return false;
    }

    public boolean equals(nextDepartures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(nextDepartures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      nextDepartures_result typedOther = (nextDepartures_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new QueryDepartureResult();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("nextDepartures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTrips_args implements org.apache.thrift.TBase<getTrips_args, getTrips_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTrips_args");

    private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String from; // required
    public String to; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM((short)1, "from"),
      TO((short)2, "to");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM
            return FROM;
          case 2: // TO
            return TO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTrips_args.class, metaDataMap);
    }

    public getTrips_args() {
    }

    public getTrips_args(
      String from,
      String to)
    {
      this();
      this.from = from;
      this.to = to;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTrips_args(getTrips_args other) {
      if (other.isSetFrom()) {
        this.from = other.from;
      }
      if (other.isSetTo()) {
        this.to = other.to;
      }
    }

    public getTrips_args deepCopy() {
      return new getTrips_args(this);
    }

    @Override
    public void clear() {
      this.from = null;
      this.to = null;
    }

    public String getFrom() {
      return this.from;
    }

    public getTrips_args setFrom(String from) {
      this.from = from;
      return this;
    }

    public void unsetFrom() {
      this.from = null;
    }

    /** Returns true if field from is set (has been assigned a value) and false otherwise */
    public boolean isSetFrom() {
      return this.from != null;
    }

    public void setFromIsSet(boolean value) {
      if (!value) {
        this.from = null;
      }
    }

    public String getTo() {
      return this.to;
    }

    public getTrips_args setTo(String to) {
      this.to = to;
      return this;
    }

    public void unsetTo() {
      this.to = null;
    }

    /** Returns true if field to is set (has been assigned a value) and false otherwise */
    public boolean isSetTo() {
      return this.to != null;
    }

    public void setToIsSet(boolean value) {
      if (!value) {
        this.to = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM:
        if (value == null) {
          unsetFrom();
        } else {
          setFrom((String)value);
        }
        break;

      case TO:
        if (value == null) {
          unsetTo();
        } else {
          setTo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM:
        return getFrom();

      case TO:
        return getTo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM:
        return isSetFrom();
      case TO:
        return isSetTo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTrips_args)
        return this.equals((getTrips_args)that);
      return false;
    }

    public boolean equals(getTrips_args that) {
      if (that == null)
        return false;

      boolean this_present_from = true && this.isSetFrom();
      boolean that_present_from = true && that.isSetFrom();
      if (this_present_from || that_present_from) {
        if (!(this_present_from && that_present_from))
          return false;
        if (!this.from.equals(that.from))
          return false;
      }

      boolean this_present_to = true && this.isSetTo();
      boolean that_present_to = true && that.isSetTo();
      if (this_present_to || that_present_to) {
        if (!(this_present_to && that_present_to))
          return false;
        if (!this.to.equals(that.to))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_from = true && (isSetFrom());
      builder.append(present_from);
      if (present_from)
        builder.append(from);

      boolean present_to = true && (isSetTo());
      builder.append(present_to);
      if (present_to)
        builder.append(to);

      return builder.toHashCode();
    }

    public int compareTo(getTrips_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTrips_args typedOther = (getTrips_args)other;

      lastComparison = Boolean.valueOf(isSetFrom()).compareTo(typedOther.isSetFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, typedOther.from);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTo()).compareTo(typedOther.isSetTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, typedOther.to);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FROM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.from = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TO
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.to = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.from != null) {
        oprot.writeFieldBegin(FROM_FIELD_DESC);
        oprot.writeString(this.from);
        oprot.writeFieldEnd();
      }
      if (this.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeString(this.to);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTrips_args(");
      boolean first = true;

      sb.append("from:");
      if (this.from == null) {
        sb.append("null");
      } else {
        sb.append(this.from);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("to:");
      if (this.to == null) {
        sb.append("null");
      } else {
        sb.append(this.to);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTrips_result implements org.apache.thrift.TBase<getTrips_result, getTrips_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTrips_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public QueryTripsResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryTripsResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTrips_result.class, metaDataMap);
    }

    public getTrips_result() {
    }

    public getTrips_result(
      QueryTripsResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTrips_result(getTrips_result other) {
      if (other.isSetSuccess()) {
        this.success = new QueryTripsResult(other.success);
      }
    }

    public getTrips_result deepCopy() {
      return new getTrips_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public QueryTripsResult getSuccess() {
      return this.success;
    }

    public getTrips_result setSuccess(QueryTripsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((QueryTripsResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTrips_result)
        return this.equals((getTrips_result)that);
      return false;
    }

    public boolean equals(getTrips_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getTrips_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTrips_result typedOther = (getTrips_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new QueryTripsResult();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTrips_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTripsAtTime_args implements org.apache.thrift.TBase<getTripsAtTime_args, getTripsAtTime_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTripsAtTime_args");

    private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField IS_DEPARTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDeparture", org.apache.thrift.protocol.TType.BOOL, (short)4);

    public String from; // required
    public String to; // required
    public long time; // required
    public boolean isDeparture; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM((short)1, "from"),
      TO((short)2, "to"),
      TIME((short)3, "time"),
      IS_DEPARTURE((short)4, "isDeparture");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM
            return FROM;
          case 2: // TO
            return TO;
          case 3: // TIME
            return TIME;
          case 4: // IS_DEPARTURE
            return IS_DEPARTURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private static final int __ISDEPARTURE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "timestamp")));
      tmpMap.put(_Fields.IS_DEPARTURE, new org.apache.thrift.meta_data.FieldMetaData("isDeparture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTripsAtTime_args.class, metaDataMap);
    }

    public getTripsAtTime_args() {
    }

    public getTripsAtTime_args(
      String from,
      String to,
      long time,
      boolean isDeparture)
    {
      this();
      this.from = from;
      this.to = to;
      this.time = time;
      setTimeIsSet(true);
      this.isDeparture = isDeparture;
      setIsDepartureIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTripsAtTime_args(getTripsAtTime_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetFrom()) {
        this.from = other.from;
      }
      if (other.isSetTo()) {
        this.to = other.to;
      }
      this.time = other.time;
      this.isDeparture = other.isDeparture;
    }

    public getTripsAtTime_args deepCopy() {
      return new getTripsAtTime_args(this);
    }

    @Override
    public void clear() {
      this.from = null;
      this.to = null;
      setTimeIsSet(false);
      this.time = 0;
      setIsDepartureIsSet(false);
      this.isDeparture = false;
    }

    public String getFrom() {
      return this.from;
    }

    public getTripsAtTime_args setFrom(String from) {
      this.from = from;
      return this;
    }

    public void unsetFrom() {
      this.from = null;
    }

    /** Returns true if field from is set (has been assigned a value) and false otherwise */
    public boolean isSetFrom() {
      return this.from != null;
    }

    public void setFromIsSet(boolean value) {
      if (!value) {
        this.from = null;
      }
    }

    public String getTo() {
      return this.to;
    }

    public getTripsAtTime_args setTo(String to) {
      this.to = to;
      return this;
    }

    public void unsetTo() {
      this.to = null;
    }

    /** Returns true if field to is set (has been assigned a value) and false otherwise */
    public boolean isSetTo() {
      return this.to != null;
    }

    public void setToIsSet(boolean value) {
      if (!value) {
        this.to = null;
      }
    }

    public long getTime() {
      return this.time;
    }

    public getTripsAtTime_args setTime(long time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public boolean isIsDeparture() {
      return this.isDeparture;
    }

    public getTripsAtTime_args setIsDeparture(boolean isDeparture) {
      this.isDeparture = isDeparture;
      setIsDepartureIsSet(true);
      return this;
    }

    public void unsetIsDeparture() {
      __isset_bit_vector.clear(__ISDEPARTURE_ISSET_ID);
    }

    /** Returns true if field isDeparture is set (has been assigned a value) and false otherwise */
    public boolean isSetIsDeparture() {
      return __isset_bit_vector.get(__ISDEPARTURE_ISSET_ID);
    }

    public void setIsDepartureIsSet(boolean value) {
      __isset_bit_vector.set(__ISDEPARTURE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM:
        if (value == null) {
          unsetFrom();
        } else {
          setFrom((String)value);
        }
        break;

      case TO:
        if (value == null) {
          unsetTo();
        } else {
          setTo((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Long)value);
        }
        break;

      case IS_DEPARTURE:
        if (value == null) {
          unsetIsDeparture();
        } else {
          setIsDeparture((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM:
        return getFrom();

      case TO:
        return getTo();

      case TIME:
        return Long.valueOf(getTime());

      case IS_DEPARTURE:
        return Boolean.valueOf(isIsDeparture());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM:
        return isSetFrom();
      case TO:
        return isSetTo();
      case TIME:
        return isSetTime();
      case IS_DEPARTURE:
        return isSetIsDeparture();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTripsAtTime_args)
        return this.equals((getTripsAtTime_args)that);
      return false;
    }

    public boolean equals(getTripsAtTime_args that) {
      if (that == null)
        return false;

      boolean this_present_from = true && this.isSetFrom();
      boolean that_present_from = true && that.isSetFrom();
      if (this_present_from || that_present_from) {
        if (!(this_present_from && that_present_from))
          return false;
        if (!this.from.equals(that.from))
          return false;
      }

      boolean this_present_to = true && this.isSetTo();
      boolean that_present_to = true && that.isSetTo();
      if (this_present_to || that_present_to) {
        if (!(this_present_to && that_present_to))
          return false;
        if (!this.to.equals(that.to))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      boolean this_present_isDeparture = true;
      boolean that_present_isDeparture = true;
      if (this_present_isDeparture || that_present_isDeparture) {
        if (!(this_present_isDeparture && that_present_isDeparture))
          return false;
        if (this.isDeparture != that.isDeparture)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_from = true && (isSetFrom());
      builder.append(present_from);
      if (present_from)
        builder.append(from);

      boolean present_to = true && (isSetTo());
      builder.append(present_to);
      if (present_to)
        builder.append(to);

      boolean present_time = true;
      builder.append(present_time);
      if (present_time)
        builder.append(time);

      boolean present_isDeparture = true;
      builder.append(present_isDeparture);
      if (present_isDeparture)
        builder.append(isDeparture);

      return builder.toHashCode();
    }

    public int compareTo(getTripsAtTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTripsAtTime_args typedOther = (getTripsAtTime_args)other;

      lastComparison = Boolean.valueOf(isSetFrom()).compareTo(typedOther.isSetFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, typedOther.from);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTo()).compareTo(typedOther.isSetTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, typedOther.to);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsDeparture()).compareTo(typedOther.isSetIsDeparture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsDeparture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDeparture, typedOther.isDeparture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FROM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.from = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TO
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.to = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TIME
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.time = iprot.readI64();
              setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // IS_DEPARTURE
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.isDeparture = iprot.readBool();
              setIsDepartureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.from != null) {
        oprot.writeFieldBegin(FROM_FIELD_DESC);
        oprot.writeString(this.from);
        oprot.writeFieldEnd();
      }
      if (this.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeString(this.to);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(this.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DEPARTURE_FIELD_DESC);
      oprot.writeBool(this.isDeparture);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTripsAtTime_args(");
      boolean first = true;

      sb.append("from:");
      if (this.from == null) {
        sb.append("null");
      } else {
        sb.append(this.from);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("to:");
      if (this.to == null) {
        sb.append("null");
      } else {
        sb.append(this.to);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isDeparture:");
      sb.append(this.isDeparture);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTripsAtTime_result implements org.apache.thrift.TBase<getTripsAtTime_result, getTripsAtTime_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTripsAtTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public QueryTripsResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryTripsResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTripsAtTime_result.class, metaDataMap);
    }

    public getTripsAtTime_result() {
    }

    public getTripsAtTime_result(
      QueryTripsResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTripsAtTime_result(getTripsAtTime_result other) {
      if (other.isSetSuccess()) {
        this.success = new QueryTripsResult(other.success);
      }
    }

    public getTripsAtTime_result deepCopy() {
      return new getTripsAtTime_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public QueryTripsResult getSuccess() {
      return this.success;
    }

    public getTripsAtTime_result setSuccess(QueryTripsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((QueryTripsResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTripsAtTime_result)
        return this.equals((getTripsAtTime_result)that);
      return false;
    }

    public boolean equals(getTripsAtTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getTripsAtTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTripsAtTime_result typedOther = (getTripsAtTime_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new QueryTripsResult();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTripsAtTime_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTripsFromStationsIDs_args implements org.apache.thrift.TBase<getTripsFromStationsIDs_args, getTripsFromStationsIDs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTripsFromStationsIDs_args");

    private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toID", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String fromID; // required
    public String toID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM_ID((short)1, "fromID"),
      TO_ID((short)2, "toID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM_ID
            return FROM_ID;
          case 2: // TO_ID
            return TO_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("fromID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TO_ID, new org.apache.thrift.meta_data.FieldMetaData("toID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTripsFromStationsIDs_args.class, metaDataMap);
    }

    public getTripsFromStationsIDs_args() {
    }

    public getTripsFromStationsIDs_args(
      String fromID,
      String toID)
    {
      this();
      this.fromID = fromID;
      this.toID = toID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTripsFromStationsIDs_args(getTripsFromStationsIDs_args other) {
      if (other.isSetFromID()) {
        this.fromID = other.fromID;
      }
      if (other.isSetToID()) {
        this.toID = other.toID;
      }
    }

    public getTripsFromStationsIDs_args deepCopy() {
      return new getTripsFromStationsIDs_args(this);
    }

    @Override
    public void clear() {
      this.fromID = null;
      this.toID = null;
    }

    public String getFromID() {
      return this.fromID;
    }

    public getTripsFromStationsIDs_args setFromID(String fromID) {
      this.fromID = fromID;
      return this;
    }

    public void unsetFromID() {
      this.fromID = null;
    }

    /** Returns true if field fromID is set (has been assigned a value) and false otherwise */
    public boolean isSetFromID() {
      return this.fromID != null;
    }

    public void setFromIDIsSet(boolean value) {
      if (!value) {
        this.fromID = null;
      }
    }

    public String getToID() {
      return this.toID;
    }

    public getTripsFromStationsIDs_args setToID(String toID) {
      this.toID = toID;
      return this;
    }

    public void unsetToID() {
      this.toID = null;
    }

    /** Returns true if field toID is set (has been assigned a value) and false otherwise */
    public boolean isSetToID() {
      return this.toID != null;
    }

    public void setToIDIsSet(boolean value) {
      if (!value) {
        this.toID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM_ID:
        if (value == null) {
          unsetFromID();
        } else {
          setFromID((String)value);
        }
        break;

      case TO_ID:
        if (value == null) {
          unsetToID();
        } else {
          setToID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM_ID:
        return getFromID();

      case TO_ID:
        return getToID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM_ID:
        return isSetFromID();
      case TO_ID:
        return isSetToID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTripsFromStationsIDs_args)
        return this.equals((getTripsFromStationsIDs_args)that);
      return false;
    }

    public boolean equals(getTripsFromStationsIDs_args that) {
      if (that == null)
        return false;

      boolean this_present_fromID = true && this.isSetFromID();
      boolean that_present_fromID = true && that.isSetFromID();
      if (this_present_fromID || that_present_fromID) {
        if (!(this_present_fromID && that_present_fromID))
          return false;
        if (!this.fromID.equals(that.fromID))
          return false;
      }

      boolean this_present_toID = true && this.isSetToID();
      boolean that_present_toID = true && that.isSetToID();
      if (this_present_toID || that_present_toID) {
        if (!(this_present_toID && that_present_toID))
          return false;
        if (!this.toID.equals(that.toID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_fromID = true && (isSetFromID());
      builder.append(present_fromID);
      if (present_fromID)
        builder.append(fromID);

      boolean present_toID = true && (isSetToID());
      builder.append(present_toID);
      if (present_toID)
        builder.append(toID);

      return builder.toHashCode();
    }

    public int compareTo(getTripsFromStationsIDs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTripsFromStationsIDs_args typedOther = (getTripsFromStationsIDs_args)other;

      lastComparison = Boolean.valueOf(isSetFromID()).compareTo(typedOther.isSetFromID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromID, typedOther.fromID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToID()).compareTo(typedOther.isSetToID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toID, typedOther.toID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FROM_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.fromID = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TO_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.toID = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.fromID != null) {
        oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
        oprot.writeString(this.fromID);
        oprot.writeFieldEnd();
      }
      if (this.toID != null) {
        oprot.writeFieldBegin(TO_ID_FIELD_DESC);
        oprot.writeString(this.toID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTripsFromStationsIDs_args(");
      boolean first = true;

      sb.append("fromID:");
      if (this.fromID == null) {
        sb.append("null");
      } else {
        sb.append(this.fromID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toID:");
      if (this.toID == null) {
        sb.append("null");
      } else {
        sb.append(this.toID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTripsFromStationsIDs_result implements org.apache.thrift.TBase<getTripsFromStationsIDs_result, getTripsFromStationsIDs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTripsFromStationsIDs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public QueryTripsResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryTripsResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTripsFromStationsIDs_result.class, metaDataMap);
    }

    public getTripsFromStationsIDs_result() {
    }

    public getTripsFromStationsIDs_result(
      QueryTripsResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTripsFromStationsIDs_result(getTripsFromStationsIDs_result other) {
      if (other.isSetSuccess()) {
        this.success = new QueryTripsResult(other.success);
      }
    }

    public getTripsFromStationsIDs_result deepCopy() {
      return new getTripsFromStationsIDs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public QueryTripsResult getSuccess() {
      return this.success;
    }

    public getTripsFromStationsIDs_result setSuccess(QueryTripsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((QueryTripsResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTripsFromStationsIDs_result)
        return this.equals((getTripsFromStationsIDs_result)that);
      return false;
    }

    public boolean equals(getTripsFromStationsIDs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getTripsFromStationsIDs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTripsFromStationsIDs_result typedOther = (getTripsFromStationsIDs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new QueryTripsResult();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTripsFromStationsIDs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
