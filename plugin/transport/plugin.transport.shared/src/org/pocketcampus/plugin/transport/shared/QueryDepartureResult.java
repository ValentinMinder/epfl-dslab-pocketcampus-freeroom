/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryDepartureResult implements org.apache.thrift.TBase<QueryDepartureResult, QueryDepartureResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryDepartureResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATION_DEPARTURES_FIELD_DESC = new org.apache.thrift.protocol.TField("stationDepartures", org.apache.thrift.protocol.TType.LIST, (short)2);

  /**
   * 
   * @see NearbyStatus
   */
  public NearbyStatus status; // required
  public List<StationDepartures> stationDepartures; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see NearbyStatus
     */
    STATUS((short)1, "status"),
    STATION_DEPARTURES((short)2, "stationDepartures");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // STATION_DEPARTURES
          return STATION_DEPARTURES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NearbyStatus.class)));
    tmpMap.put(_Fields.STATION_DEPARTURES, new org.apache.thrift.meta_data.FieldMetaData("stationDepartures", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StationDepartures.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryDepartureResult.class, metaDataMap);
  }

  public QueryDepartureResult() {
  }

  public QueryDepartureResult(
    NearbyStatus status,
    List<StationDepartures> stationDepartures)
  {
    this();
    this.status = status;
    this.stationDepartures = stationDepartures;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryDepartureResult(QueryDepartureResult other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetStationDepartures()) {
      List<StationDepartures> __this__stationDepartures = new ArrayList<StationDepartures>();
      for (StationDepartures other_element : other.stationDepartures) {
        __this__stationDepartures.add(new StationDepartures(other_element));
      }
      this.stationDepartures = __this__stationDepartures;
    }
  }

  public QueryDepartureResult deepCopy() {
    return new QueryDepartureResult(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.stationDepartures = null;
  }

  /**
   * 
   * @see NearbyStatus
   */
  public NearbyStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see NearbyStatus
   */
  public QueryDepartureResult setStatus(NearbyStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getStationDeparturesSize() {
    return (this.stationDepartures == null) ? 0 : this.stationDepartures.size();
  }

  public java.util.Iterator<StationDepartures> getStationDeparturesIterator() {
    return (this.stationDepartures == null) ? null : this.stationDepartures.iterator();
  }

  public void addToStationDepartures(StationDepartures elem) {
    if (this.stationDepartures == null) {
      this.stationDepartures = new ArrayList<StationDepartures>();
    }
    this.stationDepartures.add(elem);
  }

  public List<StationDepartures> getStationDepartures() {
    return this.stationDepartures;
  }

  public QueryDepartureResult setStationDepartures(List<StationDepartures> stationDepartures) {
    this.stationDepartures = stationDepartures;
    return this;
  }

  public void unsetStationDepartures() {
    this.stationDepartures = null;
  }

  /** Returns true if field stationDepartures is set (has been assigned a value) and false otherwise */
  public boolean isSetStationDepartures() {
    return this.stationDepartures != null;
  }

  public void setStationDeparturesIsSet(boolean value) {
    if (!value) {
      this.stationDepartures = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((NearbyStatus)value);
      }
      break;

    case STATION_DEPARTURES:
      if (value == null) {
        unsetStationDepartures();
      } else {
        setStationDepartures((List<StationDepartures>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case STATION_DEPARTURES:
      return getStationDepartures();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case STATION_DEPARTURES:
      return isSetStationDepartures();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryDepartureResult)
      return this.equals((QueryDepartureResult)that);
    return false;
  }

  public boolean equals(QueryDepartureResult that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_stationDepartures = true && this.isSetStationDepartures();
    boolean that_present_stationDepartures = true && that.isSetStationDepartures();
    if (this_present_stationDepartures || that_present_stationDepartures) {
      if (!(this_present_stationDepartures && that_present_stationDepartures))
        return false;
      if (!this.stationDepartures.equals(that.stationDepartures))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_status = true && (isSetStatus());
    builder.append(present_status);
    if (present_status)
      builder.append(status.getValue());

    boolean present_stationDepartures = true && (isSetStationDepartures());
    builder.append(present_stationDepartures);
    if (present_stationDepartures)
      builder.append(stationDepartures);

    return builder.toHashCode();
  }

  public int compareTo(QueryDepartureResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryDepartureResult typedOther = (QueryDepartureResult)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStationDepartures()).compareTo(typedOther.isSetStationDepartures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStationDepartures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stationDepartures, typedOther.stationDepartures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // STATUS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.status = NearbyStatus.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STATION_DEPARTURES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
              this.stationDepartures = new ArrayList<StationDepartures>(_list56.size);
              for (int _i57 = 0; _i57 < _list56.size; ++_i57)
              {
                StationDepartures _elem58; // required
                _elem58 = new StationDepartures();
                _elem58.read(iprot);
                this.stationDepartures.add(_elem58);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status.getValue());
      oprot.writeFieldEnd();
    }
    if (this.stationDepartures != null) {
      oprot.writeFieldBegin(STATION_DEPARTURES_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.stationDepartures.size()));
        for (StationDepartures _iter59 : this.stationDepartures)
        {
          _iter59.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryDepartureResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stationDepartures:");
    if (this.stationDepartures == null) {
      sb.append("null");
    } else {
      sb.append(this.stationDepartures);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (stationDepartures == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stationDepartures' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

