/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LineDestination implements org.apache.thrift.TBase<LineDestination, LineDestination._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LineDestination");

  private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LINE_COLORS_FIELD_DESC = new org.apache.thrift.protocol.TField("lineColors", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DESTINATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("destinationId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRING, (short)4);

  public String line; // required
  public List<String> lineColors; // required
  public int destinationId; // required
  public String destination; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LINE((short)1, "line"),
    LINE_COLORS((short)2, "lineColors"),
    DESTINATION_ID((short)3, "destinationId"),
    DESTINATION((short)4, "destination");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINE
          return LINE;
        case 2: // LINE_COLORS
          return LINE_COLORS;
        case 3: // DESTINATION_ID
          return DESTINATION_ID;
        case 4: // DESTINATION
          return DESTINATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DESTINATIONID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_COLORS, new org.apache.thrift.meta_data.FieldMetaData("lineColors", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DESTINATION_ID, new org.apache.thrift.meta_data.FieldMetaData("destinationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LineDestination.class, metaDataMap);
  }

  public LineDestination() {
  }

  public LineDestination(
    String line,
    List<String> lineColors,
    int destinationId,
    String destination)
  {
    this();
    this.line = line;
    this.lineColors = lineColors;
    this.destinationId = destinationId;
    setDestinationIdIsSet(true);
    this.destination = destination;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LineDestination(LineDestination other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetLine()) {
      this.line = other.line;
    }
    if (other.isSetLineColors()) {
      List<String> __this__lineColors = new ArrayList<String>();
      for (String other_element : other.lineColors) {
        __this__lineColors.add(other_element);
      }
      this.lineColors = __this__lineColors;
    }
    this.destinationId = other.destinationId;
    if (other.isSetDestination()) {
      this.destination = other.destination;
    }
  }

  public LineDestination deepCopy() {
    return new LineDestination(this);
  }

  @Override
  public void clear() {
    this.line = null;
    this.lineColors = null;
    setDestinationIdIsSet(false);
    this.destinationId = 0;
    this.destination = null;
  }

  public String getLine() {
    return this.line;
  }

  public LineDestination setLine(String line) {
    this.line = line;
    return this;
  }

  public void unsetLine() {
    this.line = null;
  }

  /** Returns true if field line is set (has been assigned a value) and false otherwise */
  public boolean isSetLine() {
    return this.line != null;
  }

  public void setLineIsSet(boolean value) {
    if (!value) {
      this.line = null;
    }
  }

  public int getLineColorsSize() {
    return (this.lineColors == null) ? 0 : this.lineColors.size();
  }

  public java.util.Iterator<String> getLineColorsIterator() {
    return (this.lineColors == null) ? null : this.lineColors.iterator();
  }

  public void addToLineColors(String elem) {
    if (this.lineColors == null) {
      this.lineColors = new ArrayList<String>();
    }
    this.lineColors.add(elem);
  }

  public List<String> getLineColors() {
    return this.lineColors;
  }

  public LineDestination setLineColors(List<String> lineColors) {
    this.lineColors = lineColors;
    return this;
  }

  public void unsetLineColors() {
    this.lineColors = null;
  }

  /** Returns true if field lineColors is set (has been assigned a value) and false otherwise */
  public boolean isSetLineColors() {
    return this.lineColors != null;
  }

  public void setLineColorsIsSet(boolean value) {
    if (!value) {
      this.lineColors = null;
    }
  }

  public int getDestinationId() {
    return this.destinationId;
  }

  public LineDestination setDestinationId(int destinationId) {
    this.destinationId = destinationId;
    setDestinationIdIsSet(true);
    return this;
  }

  public void unsetDestinationId() {
    __isset_bit_vector.clear(__DESTINATIONID_ISSET_ID);
  }

  /** Returns true if field destinationId is set (has been assigned a value) and false otherwise */
  public boolean isSetDestinationId() {
    return __isset_bit_vector.get(__DESTINATIONID_ISSET_ID);
  }

  public void setDestinationIdIsSet(boolean value) {
    __isset_bit_vector.set(__DESTINATIONID_ISSET_ID, value);
  }

  public String getDestination() {
    return this.destination;
  }

  public LineDestination setDestination(String destination) {
    this.destination = destination;
    return this;
  }

  public void unsetDestination() {
    this.destination = null;
  }

  /** Returns true if field destination is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination() {
    return this.destination != null;
  }

  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LINE:
      if (value == null) {
        unsetLine();
      } else {
        setLine((String)value);
      }
      break;

    case LINE_COLORS:
      if (value == null) {
        unsetLineColors();
      } else {
        setLineColors((List<String>)value);
      }
      break;

    case DESTINATION_ID:
      if (value == null) {
        unsetDestinationId();
      } else {
        setDestinationId((Integer)value);
      }
      break;

    case DESTINATION:
      if (value == null) {
        unsetDestination();
      } else {
        setDestination((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LINE:
      return getLine();

    case LINE_COLORS:
      return getLineColors();

    case DESTINATION_ID:
      return Integer.valueOf(getDestinationId());

    case DESTINATION:
      return getDestination();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LINE:
      return isSetLine();
    case LINE_COLORS:
      return isSetLineColors();
    case DESTINATION_ID:
      return isSetDestinationId();
    case DESTINATION:
      return isSetDestination();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LineDestination)
      return this.equals((LineDestination)that);
    return false;
  }

  public boolean equals(LineDestination that) {
    if (that == null)
      return false;

    boolean this_present_line = true && this.isSetLine();
    boolean that_present_line = true && that.isSetLine();
    if (this_present_line || that_present_line) {
      if (!(this_present_line && that_present_line))
        return false;
      if (!this.line.equals(that.line))
        return false;
    }

    boolean this_present_lineColors = true && this.isSetLineColors();
    boolean that_present_lineColors = true && that.isSetLineColors();
    if (this_present_lineColors || that_present_lineColors) {
      if (!(this_present_lineColors && that_present_lineColors))
        return false;
      if (!this.lineColors.equals(that.lineColors))
        return false;
    }

    boolean this_present_destinationId = true;
    boolean that_present_destinationId = true;
    if (this_present_destinationId || that_present_destinationId) {
      if (!(this_present_destinationId && that_present_destinationId))
        return false;
      if (this.destinationId != that.destinationId)
        return false;
    }

    boolean this_present_destination = true && this.isSetDestination();
    boolean that_present_destination = true && that.isSetDestination();
    if (this_present_destination || that_present_destination) {
      if (!(this_present_destination && that_present_destination))
        return false;
      if (!this.destination.equals(that.destination))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_line = true && (isSetLine());
    builder.append(present_line);
    if (present_line)
      builder.append(line);

    boolean present_lineColors = true && (isSetLineColors());
    builder.append(present_lineColors);
    if (present_lineColors)
      builder.append(lineColors);

    boolean present_destinationId = true;
    builder.append(present_destinationId);
    if (present_destinationId)
      builder.append(destinationId);

    boolean present_destination = true && (isSetDestination());
    builder.append(present_destination);
    if (present_destination)
      builder.append(destination);

    return builder.toHashCode();
  }

  public int compareTo(LineDestination other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LineDestination typedOther = (LineDestination)other;

    lastComparison = Boolean.valueOf(isSetLine()).compareTo(typedOther.isSetLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, typedOther.line);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineColors()).compareTo(typedOther.isSetLineColors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineColors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineColors, typedOther.lineColors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestinationId()).compareTo(typedOther.isSetDestinationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestinationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinationId, typedOther.destinationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestination()).compareTo(typedOther.isSetDestination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, typedOther.destination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // LINE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.line = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LINE_COLORS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
              this.lineColors = new ArrayList<String>(_list24.size);
              for (int _i25 = 0; _i25 < _list24.size; ++_i25)
              {
                String _elem26; // required
                _elem26 = iprot.readString();
                this.lineColors.add(_elem26);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DESTINATION_ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.destinationId = iprot.readI32();
            setDestinationIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // DESTINATION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.destination = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetDestinationId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'destinationId' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.line != null) {
      oprot.writeFieldBegin(LINE_FIELD_DESC);
      oprot.writeString(this.line);
      oprot.writeFieldEnd();
    }
    if (this.lineColors != null) {
      oprot.writeFieldBegin(LINE_COLORS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.lineColors.size()));
        for (String _iter27 : this.lineColors)
        {
          oprot.writeString(_iter27);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DESTINATION_ID_FIELD_DESC);
    oprot.writeI32(this.destinationId);
    oprot.writeFieldEnd();
    if (this.destination != null) {
      oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
      oprot.writeString(this.destination);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LineDestination(");
    boolean first = true;

    sb.append("line:");
    if (this.line == null) {
      sb.append("null");
    } else {
      sb.append(this.line);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineColors:");
    if (this.lineColors == null) {
      sb.append("null");
    } else {
      sb.append(this.lineColors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destinationId:");
    sb.append(this.destinationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("destination:");
    if (this.destination == null) {
      sb.append("null");
    } else {
      sb.append(this.destination);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (line == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'line' was not present! Struct: " + toString());
    }
    if (lineColors == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lineColors' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'destinationId' because it's a primitive and you chose the non-beans generator.
    if (destination == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'destination' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

