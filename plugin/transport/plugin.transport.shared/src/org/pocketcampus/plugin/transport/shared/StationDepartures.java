/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StationDepartures implements org.apache.thrift.TBase<StationDepartures, StationDepartures._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StationDepartures");

  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DEPARTURES_FIELD_DESC = new org.apache.thrift.protocol.TField("departures", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("lines", org.apache.thrift.protocol.TType.LIST, (short)3);

  public TransportStation location; // required
  public List<Departure> departures; // required
  public List<LineDestination> lines; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATION((short)1, "location"),
    DEPARTURES((short)2, "departures"),
    LINES((short)3, "lines");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION
          return LOCATION;
        case 2: // DEPARTURES
          return DEPARTURES;
        case 3: // LINES
          return LINES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class)));
    tmpMap.put(_Fields.DEPARTURES, new org.apache.thrift.meta_data.FieldMetaData("departures", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Departure.class))));
    tmpMap.put(_Fields.LINES, new org.apache.thrift.meta_data.FieldMetaData("lines", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LineDestination.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StationDepartures.class, metaDataMap);
  }

  public StationDepartures() {
  }

  public StationDepartures(
    TransportStation location,
    List<Departure> departures,
    List<LineDestination> lines)
  {
    this();
    this.location = location;
    this.departures = departures;
    this.lines = lines;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StationDepartures(StationDepartures other) {
    if (other.isSetLocation()) {
      this.location = new TransportStation(other.location);
    }
    if (other.isSetDepartures()) {
      List<Departure> __this__departures = new ArrayList<Departure>();
      for (Departure other_element : other.departures) {
        __this__departures.add(new Departure(other_element));
      }
      this.departures = __this__departures;
    }
    if (other.isSetLines()) {
      List<LineDestination> __this__lines = new ArrayList<LineDestination>();
      for (LineDestination other_element : other.lines) {
        __this__lines.add(new LineDestination(other_element));
      }
      this.lines = __this__lines;
    }
  }

  public StationDepartures deepCopy() {
    return new StationDepartures(this);
  }

  @Override
  public void clear() {
    this.location = null;
    this.departures = null;
    this.lines = null;
  }

  public TransportStation getLocation() {
    return this.location;
  }

  public StationDepartures setLocation(TransportStation location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getDeparturesSize() {
    return (this.departures == null) ? 0 : this.departures.size();
  }

  public java.util.Iterator<Departure> getDeparturesIterator() {
    return (this.departures == null) ? null : this.departures.iterator();
  }

  public void addToDepartures(Departure elem) {
    if (this.departures == null) {
      this.departures = new ArrayList<Departure>();
    }
    this.departures.add(elem);
  }

  public List<Departure> getDepartures() {
    return this.departures;
  }

  public StationDepartures setDepartures(List<Departure> departures) {
    this.departures = departures;
    return this;
  }

  public void unsetDepartures() {
    this.departures = null;
  }

  /** Returns true if field departures is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartures() {
    return this.departures != null;
  }

  public void setDeparturesIsSet(boolean value) {
    if (!value) {
      this.departures = null;
    }
  }

  public int getLinesSize() {
    return (this.lines == null) ? 0 : this.lines.size();
  }

  public java.util.Iterator<LineDestination> getLinesIterator() {
    return (this.lines == null) ? null : this.lines.iterator();
  }

  public void addToLines(LineDestination elem) {
    if (this.lines == null) {
      this.lines = new ArrayList<LineDestination>();
    }
    this.lines.add(elem);
  }

  public List<LineDestination> getLines() {
    return this.lines;
  }

  public StationDepartures setLines(List<LineDestination> lines) {
    this.lines = lines;
    return this;
  }

  public void unsetLines() {
    this.lines = null;
  }

  /** Returns true if field lines is set (has been assigned a value) and false otherwise */
  public boolean isSetLines() {
    return this.lines != null;
  }

  public void setLinesIsSet(boolean value) {
    if (!value) {
      this.lines = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((TransportStation)value);
      }
      break;

    case DEPARTURES:
      if (value == null) {
        unsetDepartures();
      } else {
        setDepartures((List<Departure>)value);
      }
      break;

    case LINES:
      if (value == null) {
        unsetLines();
      } else {
        setLines((List<LineDestination>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION:
      return getLocation();

    case DEPARTURES:
      return getDepartures();

    case LINES:
      return getLines();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCATION:
      return isSetLocation();
    case DEPARTURES:
      return isSetDepartures();
    case LINES:
      return isSetLines();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StationDepartures)
      return this.equals((StationDepartures)that);
    return false;
  }

  public boolean equals(StationDepartures that) {
    if (that == null)
      return false;

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_departures = true && this.isSetDepartures();
    boolean that_present_departures = true && that.isSetDepartures();
    if (this_present_departures || that_present_departures) {
      if (!(this_present_departures && that_present_departures))
        return false;
      if (!this.departures.equals(that.departures))
        return false;
    }

    boolean this_present_lines = true && this.isSetLines();
    boolean that_present_lines = true && that.isSetLines();
    if (this_present_lines || that_present_lines) {
      if (!(this_present_lines && that_present_lines))
        return false;
      if (!this.lines.equals(that.lines))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_location = true && (isSetLocation());
    builder.append(present_location);
    if (present_location)
      builder.append(location);

    boolean present_departures = true && (isSetDepartures());
    builder.append(present_departures);
    if (present_departures)
      builder.append(departures);

    boolean present_lines = true && (isSetLines());
    builder.append(present_lines);
    if (present_lines)
      builder.append(lines);

    return builder.toHashCode();
  }

  public int compareTo(StationDepartures other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StationDepartures typedOther = (StationDepartures)other;

    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartures()).compareTo(typedOther.isSetDepartures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departures, typedOther.departures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLines()).compareTo(typedOther.isSetLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lines, typedOther.lines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // LOCATION
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.location = new TransportStation();
            this.location.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DEPARTURES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
              this.departures = new ArrayList<Departure>(_list48.size);
              for (int _i49 = 0; _i49 < _list48.size; ++_i49)
              {
                Departure _elem50; // required
                _elem50 = new Departure();
                _elem50.read(iprot);
                this.departures.add(_elem50);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LINES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
              this.lines = new ArrayList<LineDestination>(_list51.size);
              for (int _i52 = 0; _i52 < _list51.size; ++_i52)
              {
                LineDestination _elem53; // required
                _elem53 = new LineDestination();
                _elem53.read(iprot);
                this.lines.add(_elem53);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.location != null) {
      oprot.writeFieldBegin(LOCATION_FIELD_DESC);
      this.location.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.departures != null) {
      oprot.writeFieldBegin(DEPARTURES_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.departures.size()));
        for (Departure _iter54 : this.departures)
        {
          _iter54.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.lines != null) {
      oprot.writeFieldBegin(LINES_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.lines.size()));
        for (LineDestination _iter55 : this.lines)
        {
          _iter55.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StationDepartures(");
    boolean first = true;

    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("departures:");
    if (this.departures == null) {
      sb.append("null");
    } else {
      sb.append(this.departures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lines:");
    if (this.lines == null) {
      sb.append("null");
    } else {
      sb.append(this.lines);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (location == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'location' was not present! Struct: " + toString());
    }
    if (departures == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'departures' was not present! Struct: " + toString());
    }
    if (lines == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lines' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

