/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Departure implements org.apache.thrift.TBase<Departure, Departure._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Departure");

  private static final org.apache.thrift.protocol.TField PLANNED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PREDICTED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("predictedTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LINE_COLORS_FIELD_DESC = new org.apache.thrift.protocol.TField("lineColors", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField LINE_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("lineLink", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESTINATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("destinationId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)9);

  public long plannedTime; // required
  public long predictedTime; // required
  public String line; // required
  public List<Integer> lineColors; // required
  public String lineLink; // required
  public String position; // required
  public int destinationId; // required
  public String destination; // required
  public String message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLANNED_TIME((short)1, "plannedTime"),
    PREDICTED_TIME((short)2, "predictedTime"),
    LINE((short)3, "line"),
    LINE_COLORS((short)4, "lineColors"),
    LINE_LINK((short)5, "lineLink"),
    POSITION((short)6, "position"),
    DESTINATION_ID((short)7, "destinationId"),
    DESTINATION((short)8, "destination"),
    MESSAGE((short)9, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLANNED_TIME
          return PLANNED_TIME;
        case 2: // PREDICTED_TIME
          return PREDICTED_TIME;
        case 3: // LINE
          return LINE;
        case 4: // LINE_COLORS
          return LINE_COLORS;
        case 5: // LINE_LINK
          return LINE_LINK;
        case 6: // POSITION
          return POSITION;
        case 7: // DESTINATION_ID
          return DESTINATION_ID;
        case 8: // DESTINATION
          return DESTINATION;
        case 9: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLANNEDTIME_ISSET_ID = 0;
  private static final int __PREDICTEDTIME_ISSET_ID = 1;
  private static final int __DESTINATIONID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLANNED_TIME, new org.apache.thrift.meta_data.FieldMetaData("plannedTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.PREDICTED_TIME, new org.apache.thrift.meta_data.FieldMetaData("predictedTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_COLORS, new org.apache.thrift.meta_data.FieldMetaData("lineColors", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LINE_LINK, new org.apache.thrift.meta_data.FieldMetaData("lineLink", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESTINATION_ID, new org.apache.thrift.meta_data.FieldMetaData("destinationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Departure.class, metaDataMap);
  }

  public Departure() {
  }

  public Departure(
    long plannedTime,
    long predictedTime,
    String line,
    List<Integer> lineColors,
    String lineLink,
    String position,
    int destinationId,
    String destination,
    String message)
  {
    this();
    this.plannedTime = plannedTime;
    setPlannedTimeIsSet(true);
    this.predictedTime = predictedTime;
    setPredictedTimeIsSet(true);
    this.line = line;
    this.lineColors = lineColors;
    this.lineLink = lineLink;
    this.position = position;
    this.destinationId = destinationId;
    setDestinationIdIsSet(true);
    this.destination = destination;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Departure(Departure other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.plannedTime = other.plannedTime;
    this.predictedTime = other.predictedTime;
    if (other.isSetLine()) {
      this.line = other.line;
    }
    if (other.isSetLineColors()) {
      List<Integer> __this__lineColors = new ArrayList<Integer>();
      for (Integer other_element : other.lineColors) {
        __this__lineColors.add(other_element);
      }
      this.lineColors = __this__lineColors;
    }
    if (other.isSetLineLink()) {
      this.lineLink = other.lineLink;
    }
    if (other.isSetPosition()) {
      this.position = other.position;
    }
    this.destinationId = other.destinationId;
    if (other.isSetDestination()) {
      this.destination = other.destination;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public Departure deepCopy() {
    return new Departure(this);
  }

  @Override
  public void clear() {
    setPlannedTimeIsSet(false);
    this.plannedTime = 0;
    setPredictedTimeIsSet(false);
    this.predictedTime = 0;
    this.line = null;
    this.lineColors = null;
    this.lineLink = null;
    this.position = null;
    setDestinationIdIsSet(false);
    this.destinationId = 0;
    this.destination = null;
    this.message = null;
  }

  public long getPlannedTime() {
    return this.plannedTime;
  }

  public Departure setPlannedTime(long plannedTime) {
    this.plannedTime = plannedTime;
    setPlannedTimeIsSet(true);
    return this;
  }

  public void unsetPlannedTime() {
    __isset_bit_vector.clear(__PLANNEDTIME_ISSET_ID);
  }

  /** Returns true if field plannedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedTime() {
    return __isset_bit_vector.get(__PLANNEDTIME_ISSET_ID);
  }

  public void setPlannedTimeIsSet(boolean value) {
    __isset_bit_vector.set(__PLANNEDTIME_ISSET_ID, value);
  }

  public long getPredictedTime() {
    return this.predictedTime;
  }

  public Departure setPredictedTime(long predictedTime) {
    this.predictedTime = predictedTime;
    setPredictedTimeIsSet(true);
    return this;
  }

  public void unsetPredictedTime() {
    __isset_bit_vector.clear(__PREDICTEDTIME_ISSET_ID);
  }

  /** Returns true if field predictedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPredictedTime() {
    return __isset_bit_vector.get(__PREDICTEDTIME_ISSET_ID);
  }

  public void setPredictedTimeIsSet(boolean value) {
    __isset_bit_vector.set(__PREDICTEDTIME_ISSET_ID, value);
  }

  public String getLine() {
    return this.line;
  }

  public Departure setLine(String line) {
    this.line = line;
    return this;
  }

  public void unsetLine() {
    this.line = null;
  }

  /** Returns true if field line is set (has been assigned a value) and false otherwise */
  public boolean isSetLine() {
    return this.line != null;
  }

  public void setLineIsSet(boolean value) {
    if (!value) {
      this.line = null;
    }
  }

  public int getLineColorsSize() {
    return (this.lineColors == null) ? 0 : this.lineColors.size();
  }

  public java.util.Iterator<Integer> getLineColorsIterator() {
    return (this.lineColors == null) ? null : this.lineColors.iterator();
  }

  public void addToLineColors(int elem) {
    if (this.lineColors == null) {
      this.lineColors = new ArrayList<Integer>();
    }
    this.lineColors.add(elem);
  }

  public List<Integer> getLineColors() {
    return this.lineColors;
  }

  public Departure setLineColors(List<Integer> lineColors) {
    this.lineColors = lineColors;
    return this;
  }

  public void unsetLineColors() {
    this.lineColors = null;
  }

  /** Returns true if field lineColors is set (has been assigned a value) and false otherwise */
  public boolean isSetLineColors() {
    return this.lineColors != null;
  }

  public void setLineColorsIsSet(boolean value) {
    if (!value) {
      this.lineColors = null;
    }
  }

  public String getLineLink() {
    return this.lineLink;
  }

  public Departure setLineLink(String lineLink) {
    this.lineLink = lineLink;
    return this;
  }

  public void unsetLineLink() {
    this.lineLink = null;
  }

  /** Returns true if field lineLink is set (has been assigned a value) and false otherwise */
  public boolean isSetLineLink() {
    return this.lineLink != null;
  }

  public void setLineLinkIsSet(boolean value) {
    if (!value) {
      this.lineLink = null;
    }
  }

  public String getPosition() {
    return this.position;
  }

  public Departure setPosition(String position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public int getDestinationId() {
    return this.destinationId;
  }

  public Departure setDestinationId(int destinationId) {
    this.destinationId = destinationId;
    setDestinationIdIsSet(true);
    return this;
  }

  public void unsetDestinationId() {
    __isset_bit_vector.clear(__DESTINATIONID_ISSET_ID);
  }

  /** Returns true if field destinationId is set (has been assigned a value) and false otherwise */
  public boolean isSetDestinationId() {
    return __isset_bit_vector.get(__DESTINATIONID_ISSET_ID);
  }

  public void setDestinationIdIsSet(boolean value) {
    __isset_bit_vector.set(__DESTINATIONID_ISSET_ID, value);
  }

  public String getDestination() {
    return this.destination;
  }

  public Departure setDestination(String destination) {
    this.destination = destination;
    return this;
  }

  public void unsetDestination() {
    this.destination = null;
  }

  /** Returns true if field destination is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination() {
    return this.destination != null;
  }

  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public Departure setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLANNED_TIME:
      if (value == null) {
        unsetPlannedTime();
      } else {
        setPlannedTime((Long)value);
      }
      break;

    case PREDICTED_TIME:
      if (value == null) {
        unsetPredictedTime();
      } else {
        setPredictedTime((Long)value);
      }
      break;

    case LINE:
      if (value == null) {
        unsetLine();
      } else {
        setLine((String)value);
      }
      break;

    case LINE_COLORS:
      if (value == null) {
        unsetLineColors();
      } else {
        setLineColors((List<Integer>)value);
      }
      break;

    case LINE_LINK:
      if (value == null) {
        unsetLineLink();
      } else {
        setLineLink((String)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((String)value);
      }
      break;

    case DESTINATION_ID:
      if (value == null) {
        unsetDestinationId();
      } else {
        setDestinationId((Integer)value);
      }
      break;

    case DESTINATION:
      if (value == null) {
        unsetDestination();
      } else {
        setDestination((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLANNED_TIME:
      return Long.valueOf(getPlannedTime());

    case PREDICTED_TIME:
      return Long.valueOf(getPredictedTime());

    case LINE:
      return getLine();

    case LINE_COLORS:
      return getLineColors();

    case LINE_LINK:
      return getLineLink();

    case POSITION:
      return getPosition();

    case DESTINATION_ID:
      return Integer.valueOf(getDestinationId());

    case DESTINATION:
      return getDestination();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLANNED_TIME:
      return isSetPlannedTime();
    case PREDICTED_TIME:
      return isSetPredictedTime();
    case LINE:
      return isSetLine();
    case LINE_COLORS:
      return isSetLineColors();
    case LINE_LINK:
      return isSetLineLink();
    case POSITION:
      return isSetPosition();
    case DESTINATION_ID:
      return isSetDestinationId();
    case DESTINATION:
      return isSetDestination();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Departure)
      return this.equals((Departure)that);
    return false;
  }

  public boolean equals(Departure that) {
    if (that == null)
      return false;

    boolean this_present_plannedTime = true;
    boolean that_present_plannedTime = true;
    if (this_present_plannedTime || that_present_plannedTime) {
      if (!(this_present_plannedTime && that_present_plannedTime))
        return false;
      if (this.plannedTime != that.plannedTime)
        return false;
    }

    boolean this_present_predictedTime = true;
    boolean that_present_predictedTime = true;
    if (this_present_predictedTime || that_present_predictedTime) {
      if (!(this_present_predictedTime && that_present_predictedTime))
        return false;
      if (this.predictedTime != that.predictedTime)
        return false;
    }

    boolean this_present_line = true && this.isSetLine();
    boolean that_present_line = true && that.isSetLine();
    if (this_present_line || that_present_line) {
      if (!(this_present_line && that_present_line))
        return false;
      if (!this.line.equals(that.line))
        return false;
    }

    boolean this_present_lineColors = true && this.isSetLineColors();
    boolean that_present_lineColors = true && that.isSetLineColors();
    if (this_present_lineColors || that_present_lineColors) {
      if (!(this_present_lineColors && that_present_lineColors))
        return false;
      if (!this.lineColors.equals(that.lineColors))
        return false;
    }

    boolean this_present_lineLink = true && this.isSetLineLink();
    boolean that_present_lineLink = true && that.isSetLineLink();
    if (this_present_lineLink || that_present_lineLink) {
      if (!(this_present_lineLink && that_present_lineLink))
        return false;
      if (!this.lineLink.equals(that.lineLink))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_destinationId = true;
    boolean that_present_destinationId = true;
    if (this_present_destinationId || that_present_destinationId) {
      if (!(this_present_destinationId && that_present_destinationId))
        return false;
      if (this.destinationId != that.destinationId)
        return false;
    }

    boolean this_present_destination = true && this.isSetDestination();
    boolean that_present_destination = true && that.isSetDestination();
    if (this_present_destination || that_present_destination) {
      if (!(this_present_destination && that_present_destination))
        return false;
      if (!this.destination.equals(that.destination))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_plannedTime = true;
    builder.append(present_plannedTime);
    if (present_plannedTime)
      builder.append(plannedTime);

    boolean present_predictedTime = true;
    builder.append(present_predictedTime);
    if (present_predictedTime)
      builder.append(predictedTime);

    boolean present_line = true && (isSetLine());
    builder.append(present_line);
    if (present_line)
      builder.append(line);

    boolean present_lineColors = true && (isSetLineColors());
    builder.append(present_lineColors);
    if (present_lineColors)
      builder.append(lineColors);

    boolean present_lineLink = true && (isSetLineLink());
    builder.append(present_lineLink);
    if (present_lineLink)
      builder.append(lineLink);

    boolean present_position = true && (isSetPosition());
    builder.append(present_position);
    if (present_position)
      builder.append(position);

    boolean present_destinationId = true;
    builder.append(present_destinationId);
    if (present_destinationId)
      builder.append(destinationId);

    boolean present_destination = true && (isSetDestination());
    builder.append(present_destination);
    if (present_destination)
      builder.append(destination);

    boolean present_message = true && (isSetMessage());
    builder.append(present_message);
    if (present_message)
      builder.append(message);

    return builder.toHashCode();
  }

  public int compareTo(Departure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Departure typedOther = (Departure)other;

    lastComparison = Boolean.valueOf(isSetPlannedTime()).compareTo(typedOther.isSetPlannedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedTime, typedOther.plannedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredictedTime()).compareTo(typedOther.isSetPredictedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredictedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictedTime, typedOther.predictedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLine()).compareTo(typedOther.isSetLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, typedOther.line);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineColors()).compareTo(typedOther.isSetLineColors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineColors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineColors, typedOther.lineColors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineLink()).compareTo(typedOther.isSetLineLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineLink, typedOther.lineLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(typedOther.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, typedOther.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestinationId()).compareTo(typedOther.isSetDestinationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestinationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinationId, typedOther.destinationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestination()).compareTo(typedOther.isSetDestination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, typedOther.destination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PLANNED_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.plannedTime = iprot.readI64();
            setPlannedTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PREDICTED_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.predictedTime = iprot.readI64();
            setPredictedTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LINE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.line = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LINE_COLORS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
              this.lineColors = new ArrayList<Integer>(_list20.size);
              for (int _i21 = 0; _i21 < _list20.size; ++_i21)
              {
                int _elem22; // required
                _elem22 = iprot.readI32();
                this.lineColors.add(_elem22);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // LINE_LINK
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.lineLink = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // POSITION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.position = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DESTINATION_ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.destinationId = iprot.readI32();
            setDestinationIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // DESTINATION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.destination = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // MESSAGE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.message = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetPlannedTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'plannedTime' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetPredictedTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'predictedTime' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetDestinationId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'destinationId' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PLANNED_TIME_FIELD_DESC);
    oprot.writeI64(this.plannedTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PREDICTED_TIME_FIELD_DESC);
    oprot.writeI64(this.predictedTime);
    oprot.writeFieldEnd();
    if (this.line != null) {
      oprot.writeFieldBegin(LINE_FIELD_DESC);
      oprot.writeString(this.line);
      oprot.writeFieldEnd();
    }
    if (this.lineColors != null) {
      oprot.writeFieldBegin(LINE_COLORS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, this.lineColors.size()));
        for (int _iter23 : this.lineColors)
        {
          oprot.writeI32(_iter23);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.lineLink != null) {
      oprot.writeFieldBegin(LINE_LINK_FIELD_DESC);
      oprot.writeString(this.lineLink);
      oprot.writeFieldEnd();
    }
    if (this.position != null) {
      oprot.writeFieldBegin(POSITION_FIELD_DESC);
      oprot.writeString(this.position);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DESTINATION_ID_FIELD_DESC);
    oprot.writeI32(this.destinationId);
    oprot.writeFieldEnd();
    if (this.destination != null) {
      oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
      oprot.writeString(this.destination);
      oprot.writeFieldEnd();
    }
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      oprot.writeString(this.message);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Departure(");
    boolean first = true;

    sb.append("plannedTime:");
    sb.append(this.plannedTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("predictedTime:");
    sb.append(this.predictedTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("line:");
    if (this.line == null) {
      sb.append("null");
    } else {
      sb.append(this.line);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineColors:");
    if (this.lineColors == null) {
      sb.append("null");
    } else {
      sb.append(this.lineColors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineLink:");
    if (this.lineLink == null) {
      sb.append("null");
    } else {
      sb.append(this.lineLink);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("position:");
    if (this.position == null) {
      sb.append("null");
    } else {
      sb.append(this.position);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destinationId:");
    sb.append(this.destinationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("destination:");
    if (this.destination == null) {
      sb.append("null");
    } else {
      sb.append(this.destination);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'plannedTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'predictedTime' because it's a primitive and you chose the non-beans generator.
    if (line == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'line' was not present! Struct: " + toString());
    }
    if (lineColors == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lineColors' was not present! Struct: " + toString());
    }
    if (lineLink == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lineLink' was not present! Struct: " + toString());
    }
    if (position == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'position' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'destinationId' because it's a primitive and you chose the non-beans generator.
    if (destination == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'destination' was not present! Struct: " + toString());
    }
    if (message == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'message' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

