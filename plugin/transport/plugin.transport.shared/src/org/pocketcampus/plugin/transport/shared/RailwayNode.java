/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RailwayNode implements org.apache.thrift.TBase<RailwayNode, RailwayNode._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RailwayNode");

  private static final org.apache.thrift.protocol.TField TAGS__FIELD_DESC = new org.apache.thrift.protocol.TField("tags_", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField LAT__FIELD_DESC = new org.apache.thrift.protocol.TField("lat_", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LON__FIELD_DESC = new org.apache.thrift.protocol.TField("lon_", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REF__FIELD_DESC = new org.apache.thrift.protocol.TField("ref_", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM__FIELD_DESC = new org.apache.thrift.protocol.TField("num_", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DIST_FROM_PREVIOUS__FIELD_DESC = new org.apache.thrift.protocol.TField("distFromPrevious_", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PREVIOUS_REF__FIELD_DESC = new org.apache.thrift.protocol.TField("previousRef_", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField UIC_REF__FIELD_DESC = new org.apache.thrift.protocol.TField("uicRef_", org.apache.thrift.protocol.TType.I32, (short)8);

  public Map<String,String> tags_; // required
  public int lat_; // required
  public int lon_; // required
  public int ref_; // required
  public int num_; // required
  public double distFromPrevious_; // required
  public int previousRef_; // required
  public int uicRef_; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TAGS_((short)1, "tags_"),
    LAT_((short)2, "lat_"),
    LON_((short)3, "lon_"),
    REF_((short)4, "ref_"),
    NUM_((short)5, "num_"),
    DIST_FROM_PREVIOUS_((short)6, "distFromPrevious_"),
    PREVIOUS_REF_((short)7, "previousRef_"),
    UIC_REF_((short)8, "uicRef_");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TAGS_
          return TAGS_;
        case 2: // LAT_
          return LAT_;
        case 3: // LON_
          return LON_;
        case 4: // REF_
          return REF_;
        case 5: // NUM_
          return NUM_;
        case 6: // DIST_FROM_PREVIOUS_
          return DIST_FROM_PREVIOUS_;
        case 7: // PREVIOUS_REF_
          return PREVIOUS_REF_;
        case 8: // UIC_REF_
          return UIC_REF_;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAT__ISSET_ID = 0;
  private static final int __LON__ISSET_ID = 1;
  private static final int __REF__ISSET_ID = 2;
  private static final int __NUM__ISSET_ID = 3;
  private static final int __DISTFROMPREVIOUS__ISSET_ID = 4;
  private static final int __PREVIOUSREF__ISSET_ID = 5;
  private static final int __UICREF__ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TAGS_, new org.apache.thrift.meta_data.FieldMetaData("tags_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAT_, new org.apache.thrift.meta_data.FieldMetaData("lat_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LON_, new org.apache.thrift.meta_data.FieldMetaData("lon_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_, new org.apache.thrift.meta_data.FieldMetaData("ref_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_, new org.apache.thrift.meta_data.FieldMetaData("num_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIST_FROM_PREVIOUS_, new org.apache.thrift.meta_data.FieldMetaData("distFromPrevious_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREVIOUS_REF_, new org.apache.thrift.meta_data.FieldMetaData("previousRef_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UIC_REF_, new org.apache.thrift.meta_data.FieldMetaData("uicRef_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RailwayNode.class, metaDataMap);
  }

  public RailwayNode() {
  }

  public RailwayNode(
    Map<String,String> tags_,
    int lat_,
    int lon_,
    int ref_,
    int num_,
    double distFromPrevious_,
    int previousRef_,
    int uicRef_)
  {
    this();
    this.tags_ = tags_;
    this.lat_ = lat_;
    setLat_IsSet(true);
    this.lon_ = lon_;
    setLon_IsSet(true);
    this.ref_ = ref_;
    setRef_IsSet(true);
    this.num_ = num_;
    setNum_IsSet(true);
    this.distFromPrevious_ = distFromPrevious_;
    setDistFromPrevious_IsSet(true);
    this.previousRef_ = previousRef_;
    setPreviousRef_IsSet(true);
    this.uicRef_ = uicRef_;
    setUicRef_IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RailwayNode(RailwayNode other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTags_()) {
      Map<String,String> __this__tags_ = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.tags_.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__tags__copy_key = other_element_key;

        String __this__tags__copy_value = other_element_value;

        __this__tags_.put(__this__tags__copy_key, __this__tags__copy_value);
      }
      this.tags_ = __this__tags_;
    }
    this.lat_ = other.lat_;
    this.lon_ = other.lon_;
    this.ref_ = other.ref_;
    this.num_ = other.num_;
    this.distFromPrevious_ = other.distFromPrevious_;
    this.previousRef_ = other.previousRef_;
    this.uicRef_ = other.uicRef_;
  }

  public RailwayNode deepCopy() {
    return new RailwayNode(this);
  }

  @Override
  public void clear() {
    this.tags_ = null;
    setLat_IsSet(false);
    this.lat_ = 0;
    setLon_IsSet(false);
    this.lon_ = 0;
    setRef_IsSet(false);
    this.ref_ = 0;
    setNum_IsSet(false);
    this.num_ = 0;
    setDistFromPrevious_IsSet(false);
    this.distFromPrevious_ = 0.0;
    setPreviousRef_IsSet(false);
    this.previousRef_ = 0;
    setUicRef_IsSet(false);
    this.uicRef_ = 0;
  }

  public int getTags_Size() {
    return (this.tags_ == null) ? 0 : this.tags_.size();
  }

  public void putToTags_(String key, String val) {
    if (this.tags_ == null) {
      this.tags_ = new HashMap<String,String>();
    }
    this.tags_.put(key, val);
  }

  public Map<String,String> getTags_() {
    return this.tags_;
  }

  public RailwayNode setTags_(Map<String,String> tags_) {
    this.tags_ = tags_;
    return this;
  }

  public void unsetTags_() {
    this.tags_ = null;
  }

  /** Returns true if field tags_ is set (has been assigned a value) and false otherwise */
  public boolean isSetTags_() {
    return this.tags_ != null;
  }

  public void setTags_IsSet(boolean value) {
    if (!value) {
      this.tags_ = null;
    }
  }

  public int getLat_() {
    return this.lat_;
  }

  public RailwayNode setLat_(int lat_) {
    this.lat_ = lat_;
    setLat_IsSet(true);
    return this;
  }

  public void unsetLat_() {
    __isset_bit_vector.clear(__LAT__ISSET_ID);
  }

  /** Returns true if field lat_ is set (has been assigned a value) and false otherwise */
  public boolean isSetLat_() {
    return __isset_bit_vector.get(__LAT__ISSET_ID);
  }

  public void setLat_IsSet(boolean value) {
    __isset_bit_vector.set(__LAT__ISSET_ID, value);
  }

  public int getLon_() {
    return this.lon_;
  }

  public RailwayNode setLon_(int lon_) {
    this.lon_ = lon_;
    setLon_IsSet(true);
    return this;
  }

  public void unsetLon_() {
    __isset_bit_vector.clear(__LON__ISSET_ID);
  }

  /** Returns true if field lon_ is set (has been assigned a value) and false otherwise */
  public boolean isSetLon_() {
    return __isset_bit_vector.get(__LON__ISSET_ID);
  }

  public void setLon_IsSet(boolean value) {
    __isset_bit_vector.set(__LON__ISSET_ID, value);
  }

  public int getRef_() {
    return this.ref_;
  }

  public RailwayNode setRef_(int ref_) {
    this.ref_ = ref_;
    setRef_IsSet(true);
    return this;
  }

  public void unsetRef_() {
    __isset_bit_vector.clear(__REF__ISSET_ID);
  }

  /** Returns true if field ref_ is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_() {
    return __isset_bit_vector.get(__REF__ISSET_ID);
  }

  public void setRef_IsSet(boolean value) {
    __isset_bit_vector.set(__REF__ISSET_ID, value);
  }

  public int getNum_() {
    return this.num_;
  }

  public RailwayNode setNum_(int num_) {
    this.num_ = num_;
    setNum_IsSet(true);
    return this;
  }

  public void unsetNum_() {
    __isset_bit_vector.clear(__NUM__ISSET_ID);
  }

  /** Returns true if field num_ is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_() {
    return __isset_bit_vector.get(__NUM__ISSET_ID);
  }

  public void setNum_IsSet(boolean value) {
    __isset_bit_vector.set(__NUM__ISSET_ID, value);
  }

  public double getDistFromPrevious_() {
    return this.distFromPrevious_;
  }

  public RailwayNode setDistFromPrevious_(double distFromPrevious_) {
    this.distFromPrevious_ = distFromPrevious_;
    setDistFromPrevious_IsSet(true);
    return this;
  }

  public void unsetDistFromPrevious_() {
    __isset_bit_vector.clear(__DISTFROMPREVIOUS__ISSET_ID);
  }

  /** Returns true if field distFromPrevious_ is set (has been assigned a value) and false otherwise */
  public boolean isSetDistFromPrevious_() {
    return __isset_bit_vector.get(__DISTFROMPREVIOUS__ISSET_ID);
  }

  public void setDistFromPrevious_IsSet(boolean value) {
    __isset_bit_vector.set(__DISTFROMPREVIOUS__ISSET_ID, value);
  }

  public int getPreviousRef_() {
    return this.previousRef_;
  }

  public RailwayNode setPreviousRef_(int previousRef_) {
    this.previousRef_ = previousRef_;
    setPreviousRef_IsSet(true);
    return this;
  }

  public void unsetPreviousRef_() {
    __isset_bit_vector.clear(__PREVIOUSREF__ISSET_ID);
  }

  /** Returns true if field previousRef_ is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviousRef_() {
    return __isset_bit_vector.get(__PREVIOUSREF__ISSET_ID);
  }

  public void setPreviousRef_IsSet(boolean value) {
    __isset_bit_vector.set(__PREVIOUSREF__ISSET_ID, value);
  }

  public int getUicRef_() {
    return this.uicRef_;
  }

  public RailwayNode setUicRef_(int uicRef_) {
    this.uicRef_ = uicRef_;
    setUicRef_IsSet(true);
    return this;
  }

  public void unsetUicRef_() {
    __isset_bit_vector.clear(__UICREF__ISSET_ID);
  }

  /** Returns true if field uicRef_ is set (has been assigned a value) and false otherwise */
  public boolean isSetUicRef_() {
    return __isset_bit_vector.get(__UICREF__ISSET_ID);
  }

  public void setUicRef_IsSet(boolean value) {
    __isset_bit_vector.set(__UICREF__ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TAGS_:
      if (value == null) {
        unsetTags_();
      } else {
        setTags_((Map<String,String>)value);
      }
      break;

    case LAT_:
      if (value == null) {
        unsetLat_();
      } else {
        setLat_((Integer)value);
      }
      break;

    case LON_:
      if (value == null) {
        unsetLon_();
      } else {
        setLon_((Integer)value);
      }
      break;

    case REF_:
      if (value == null) {
        unsetRef_();
      } else {
        setRef_((Integer)value);
      }
      break;

    case NUM_:
      if (value == null) {
        unsetNum_();
      } else {
        setNum_((Integer)value);
      }
      break;

    case DIST_FROM_PREVIOUS_:
      if (value == null) {
        unsetDistFromPrevious_();
      } else {
        setDistFromPrevious_((Double)value);
      }
      break;

    case PREVIOUS_REF_:
      if (value == null) {
        unsetPreviousRef_();
      } else {
        setPreviousRef_((Integer)value);
      }
      break;

    case UIC_REF_:
      if (value == null) {
        unsetUicRef_();
      } else {
        setUicRef_((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TAGS_:
      return getTags_();

    case LAT_:
      return Integer.valueOf(getLat_());

    case LON_:
      return Integer.valueOf(getLon_());

    case REF_:
      return Integer.valueOf(getRef_());

    case NUM_:
      return Integer.valueOf(getNum_());

    case DIST_FROM_PREVIOUS_:
      return Double.valueOf(getDistFromPrevious_());

    case PREVIOUS_REF_:
      return Integer.valueOf(getPreviousRef_());

    case UIC_REF_:
      return Integer.valueOf(getUicRef_());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TAGS_:
      return isSetTags_();
    case LAT_:
      return isSetLat_();
    case LON_:
      return isSetLon_();
    case REF_:
      return isSetRef_();
    case NUM_:
      return isSetNum_();
    case DIST_FROM_PREVIOUS_:
      return isSetDistFromPrevious_();
    case PREVIOUS_REF_:
      return isSetPreviousRef_();
    case UIC_REF_:
      return isSetUicRef_();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RailwayNode)
      return this.equals((RailwayNode)that);
    return false;
  }

  public boolean equals(RailwayNode that) {
    if (that == null)
      return false;

    boolean this_present_tags_ = true && this.isSetTags_();
    boolean that_present_tags_ = true && that.isSetTags_();
    if (this_present_tags_ || that_present_tags_) {
      if (!(this_present_tags_ && that_present_tags_))
        return false;
      if (!this.tags_.equals(that.tags_))
        return false;
    }

    boolean this_present_lat_ = true;
    boolean that_present_lat_ = true;
    if (this_present_lat_ || that_present_lat_) {
      if (!(this_present_lat_ && that_present_lat_))
        return false;
      if (this.lat_ != that.lat_)
        return false;
    }

    boolean this_present_lon_ = true;
    boolean that_present_lon_ = true;
    if (this_present_lon_ || that_present_lon_) {
      if (!(this_present_lon_ && that_present_lon_))
        return false;
      if (this.lon_ != that.lon_)
        return false;
    }

    boolean this_present_ref_ = true;
    boolean that_present_ref_ = true;
    if (this_present_ref_ || that_present_ref_) {
      if (!(this_present_ref_ && that_present_ref_))
        return false;
      if (this.ref_ != that.ref_)
        return false;
    }

    boolean this_present_num_ = true;
    boolean that_present_num_ = true;
    if (this_present_num_ || that_present_num_) {
      if (!(this_present_num_ && that_present_num_))
        return false;
      if (this.num_ != that.num_)
        return false;
    }

    boolean this_present_distFromPrevious_ = true;
    boolean that_present_distFromPrevious_ = true;
    if (this_present_distFromPrevious_ || that_present_distFromPrevious_) {
      if (!(this_present_distFromPrevious_ && that_present_distFromPrevious_))
        return false;
      if (this.distFromPrevious_ != that.distFromPrevious_)
        return false;
    }

    boolean this_present_previousRef_ = true;
    boolean that_present_previousRef_ = true;
    if (this_present_previousRef_ || that_present_previousRef_) {
      if (!(this_present_previousRef_ && that_present_previousRef_))
        return false;
      if (this.previousRef_ != that.previousRef_)
        return false;
    }

    boolean this_present_uicRef_ = true;
    boolean that_present_uicRef_ = true;
    if (this_present_uicRef_ || that_present_uicRef_) {
      if (!(this_present_uicRef_ && that_present_uicRef_))
        return false;
      if (this.uicRef_ != that.uicRef_)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_tags_ = true && (isSetTags_());
    builder.append(present_tags_);
    if (present_tags_)
      builder.append(tags_);

    boolean present_lat_ = true;
    builder.append(present_lat_);
    if (present_lat_)
      builder.append(lat_);

    boolean present_lon_ = true;
    builder.append(present_lon_);
    if (present_lon_)
      builder.append(lon_);

    boolean present_ref_ = true;
    builder.append(present_ref_);
    if (present_ref_)
      builder.append(ref_);

    boolean present_num_ = true;
    builder.append(present_num_);
    if (present_num_)
      builder.append(num_);

    boolean present_distFromPrevious_ = true;
    builder.append(present_distFromPrevious_);
    if (present_distFromPrevious_)
      builder.append(distFromPrevious_);

    boolean present_previousRef_ = true;
    builder.append(present_previousRef_);
    if (present_previousRef_)
      builder.append(previousRef_);

    boolean present_uicRef_ = true;
    builder.append(present_uicRef_);
    if (present_uicRef_)
      builder.append(uicRef_);

    return builder.toHashCode();
  }

  public int compareTo(RailwayNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RailwayNode typedOther = (RailwayNode)other;

    lastComparison = Boolean.valueOf(isSetTags_()).compareTo(typedOther.isSetTags_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags_, typedOther.tags_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat_()).compareTo(typedOther.isSetLat_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat_, typedOther.lat_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLon_()).compareTo(typedOther.isSetLon_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLon_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lon_, typedOther.lon_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRef_()).compareTo(typedOther.isSetRef_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_, typedOther.ref_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_()).compareTo(typedOther.isSetNum_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_, typedOther.num_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistFromPrevious_()).compareTo(typedOther.isSetDistFromPrevious_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistFromPrevious_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distFromPrevious_, typedOther.distFromPrevious_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreviousRef_()).compareTo(typedOther.isSetPreviousRef_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviousRef_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousRef_, typedOther.previousRef_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUicRef_()).compareTo(typedOther.isSetUicRef_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUicRef_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uicRef_, typedOther.uicRef_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TAGS_
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
              this.tags_ = new HashMap<String,String>(2*_map60.size);
              for (int _i61 = 0; _i61 < _map60.size; ++_i61)
              {
                String _key62; // required
                String _val63; // required
                _key62 = iprot.readString();
                _val63 = iprot.readString();
                this.tags_.put(_key62, _val63);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LAT_
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.lat_ = iprot.readI32();
            setLat_IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LON_
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.lon_ = iprot.readI32();
            setLon_IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // REF_
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.ref_ = iprot.readI32();
            setRef_IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // NUM_
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_ = iprot.readI32();
            setNum_IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DIST_FROM_PREVIOUS_
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.distFromPrevious_ = iprot.readDouble();
            setDistFromPrevious_IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PREVIOUS_REF_
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.previousRef_ = iprot.readI32();
            setPreviousRef_IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // UIC_REF_
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.uicRef_ = iprot.readI32();
            setUicRef_IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetLat_()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lat_' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetLon_()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lon_' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetRef_()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref_' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetNum_()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetDistFromPrevious_()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'distFromPrevious_' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetPreviousRef_()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'previousRef_' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetUicRef_()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uicRef_' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tags_ != null) {
      oprot.writeFieldBegin(TAGS__FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.tags_.size()));
        for (Map.Entry<String, String> _iter64 : this.tags_.entrySet())
        {
          oprot.writeString(_iter64.getKey());
          oprot.writeString(_iter64.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LAT__FIELD_DESC);
    oprot.writeI32(this.lat_);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LON__FIELD_DESC);
    oprot.writeI32(this.lon_);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(REF__FIELD_DESC);
    oprot.writeI32(this.ref_);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM__FIELD_DESC);
    oprot.writeI32(this.num_);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DIST_FROM_PREVIOUS__FIELD_DESC);
    oprot.writeDouble(this.distFromPrevious_);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PREVIOUS_REF__FIELD_DESC);
    oprot.writeI32(this.previousRef_);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UIC_REF__FIELD_DESC);
    oprot.writeI32(this.uicRef_);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RailwayNode(");
    boolean first = true;

    sb.append("tags_:");
    if (this.tags_ == null) {
      sb.append("null");
    } else {
      sb.append(this.tags_);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lat_:");
    sb.append(this.lat_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lon_:");
    sb.append(this.lon_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ref_:");
    sb.append(this.ref_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_:");
    sb.append(this.num_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("distFromPrevious_:");
    sb.append(this.distFromPrevious_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("previousRef_:");
    sb.append(this.previousRef_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uicRef_:");
    sb.append(this.uicRef_);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tags_ == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tags_' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'lat_' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'lon_' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ref_' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'distFromPrevious_' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'previousRef_' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'uicRef_' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

