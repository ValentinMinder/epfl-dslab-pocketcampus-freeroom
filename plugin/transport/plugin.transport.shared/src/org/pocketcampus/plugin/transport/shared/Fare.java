/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Fare implements org.apache.thrift.TBase<Fare, Fare._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Fare");

  private static final org.apache.thrift.protocol.TField NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("network", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FARE_FIELD_DESC = new org.apache.thrift.protocol.TField("fare", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField UNIT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("unitName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("units", org.apache.thrift.protocol.TType.STRING, (short)6);

  public String network; // required
  /**
   * 
   * @see FareType
   */
  public FareType type; // required
  public String currency; // required
  public double fare; // required
  public String unitName; // required
  public String units; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NETWORK((short)1, "network"),
    /**
     * 
     * @see FareType
     */
    TYPE((short)2, "type"),
    CURRENCY((short)3, "currency"),
    FARE((short)4, "fare"),
    UNIT_NAME((short)5, "unitName"),
    UNITS((short)6, "units");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NETWORK
          return NETWORK;
        case 2: // TYPE
          return TYPE;
        case 3: // CURRENCY
          return CURRENCY;
        case 4: // FARE
          return FARE;
        case 5: // UNIT_NAME
          return UNIT_NAME;
        case 6: // UNITS
          return UNITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FARE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NETWORK, new org.apache.thrift.meta_data.FieldMetaData("network", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FareType.class)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FARE, new org.apache.thrift.meta_data.FieldMetaData("fare", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UNIT_NAME, new org.apache.thrift.meta_data.FieldMetaData("unitName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNITS, new org.apache.thrift.meta_data.FieldMetaData("units", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Fare.class, metaDataMap);
  }

  public Fare() {
  }

  public Fare(
    String network,
    FareType type,
    String currency,
    double fare,
    String unitName,
    String units)
  {
    this();
    this.network = network;
    this.type = type;
    this.currency = currency;
    this.fare = fare;
    setFareIsSet(true);
    this.unitName = unitName;
    this.units = units;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Fare(Fare other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetNetwork()) {
      this.network = other.network;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.fare = other.fare;
    if (other.isSetUnitName()) {
      this.unitName = other.unitName;
    }
    if (other.isSetUnits()) {
      this.units = other.units;
    }
  }

  public Fare deepCopy() {
    return new Fare(this);
  }

  @Override
  public void clear() {
    this.network = null;
    this.type = null;
    this.currency = null;
    setFareIsSet(false);
    this.fare = 0.0;
    this.unitName = null;
    this.units = null;
  }

  public String getNetwork() {
    return this.network;
  }

  public Fare setNetwork(String network) {
    this.network = network;
    return this;
  }

  public void unsetNetwork() {
    this.network = null;
  }

  /** Returns true if field network is set (has been assigned a value) and false otherwise */
  public boolean isSetNetwork() {
    return this.network != null;
  }

  public void setNetworkIsSet(boolean value) {
    if (!value) {
      this.network = null;
    }
  }

  /**
   * 
   * @see FareType
   */
  public FareType getType() {
    return this.type;
  }

  /**
   * 
   * @see FareType
   */
  public Fare setType(FareType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public Fare setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public double getFare() {
    return this.fare;
  }

  public Fare setFare(double fare) {
    this.fare = fare;
    setFareIsSet(true);
    return this;
  }

  public void unsetFare() {
    __isset_bit_vector.clear(__FARE_ISSET_ID);
  }

  /** Returns true if field fare is set (has been assigned a value) and false otherwise */
  public boolean isSetFare() {
    return __isset_bit_vector.get(__FARE_ISSET_ID);
  }

  public void setFareIsSet(boolean value) {
    __isset_bit_vector.set(__FARE_ISSET_ID, value);
  }

  public String getUnitName() {
    return this.unitName;
  }

  public Fare setUnitName(String unitName) {
    this.unitName = unitName;
    return this;
  }

  public void unsetUnitName() {
    this.unitName = null;
  }

  /** Returns true if field unitName is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitName() {
    return this.unitName != null;
  }

  public void setUnitNameIsSet(boolean value) {
    if (!value) {
      this.unitName = null;
    }
  }

  public String getUnits() {
    return this.units;
  }

  public Fare setUnits(String units) {
    this.units = units;
    return this;
  }

  public void unsetUnits() {
    this.units = null;
  }

  /** Returns true if field units is set (has been assigned a value) and false otherwise */
  public boolean isSetUnits() {
    return this.units != null;
  }

  public void setUnitsIsSet(boolean value) {
    if (!value) {
      this.units = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NETWORK:
      if (value == null) {
        unsetNetwork();
      } else {
        setNetwork((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((FareType)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case FARE:
      if (value == null) {
        unsetFare();
      } else {
        setFare((Double)value);
      }
      break;

    case UNIT_NAME:
      if (value == null) {
        unsetUnitName();
      } else {
        setUnitName((String)value);
      }
      break;

    case UNITS:
      if (value == null) {
        unsetUnits();
      } else {
        setUnits((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NETWORK:
      return getNetwork();

    case TYPE:
      return getType();

    case CURRENCY:
      return getCurrency();

    case FARE:
      return Double.valueOf(getFare());

    case UNIT_NAME:
      return getUnitName();

    case UNITS:
      return getUnits();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NETWORK:
      return isSetNetwork();
    case TYPE:
      return isSetType();
    case CURRENCY:
      return isSetCurrency();
    case FARE:
      return isSetFare();
    case UNIT_NAME:
      return isSetUnitName();
    case UNITS:
      return isSetUnits();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Fare)
      return this.equals((Fare)that);
    return false;
  }

  public boolean equals(Fare that) {
    if (that == null)
      return false;

    boolean this_present_network = true && this.isSetNetwork();
    boolean that_present_network = true && that.isSetNetwork();
    if (this_present_network || that_present_network) {
      if (!(this_present_network && that_present_network))
        return false;
      if (!this.network.equals(that.network))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_fare = true;
    boolean that_present_fare = true;
    if (this_present_fare || that_present_fare) {
      if (!(this_present_fare && that_present_fare))
        return false;
      if (this.fare != that.fare)
        return false;
    }

    boolean this_present_unitName = true && this.isSetUnitName();
    boolean that_present_unitName = true && that.isSetUnitName();
    if (this_present_unitName || that_present_unitName) {
      if (!(this_present_unitName && that_present_unitName))
        return false;
      if (!this.unitName.equals(that.unitName))
        return false;
    }

    boolean this_present_units = true && this.isSetUnits();
    boolean that_present_units = true && that.isSetUnits();
    if (this_present_units || that_present_units) {
      if (!(this_present_units && that_present_units))
        return false;
      if (!this.units.equals(that.units))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_network = true && (isSetNetwork());
    builder.append(present_network);
    if (present_network)
      builder.append(network);

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type.getValue());

    boolean present_currency = true && (isSetCurrency());
    builder.append(present_currency);
    if (present_currency)
      builder.append(currency);

    boolean present_fare = true;
    builder.append(present_fare);
    if (present_fare)
      builder.append(fare);

    boolean present_unitName = true && (isSetUnitName());
    builder.append(present_unitName);
    if (present_unitName)
      builder.append(unitName);

    boolean present_units = true && (isSetUnits());
    builder.append(present_units);
    if (present_units)
      builder.append(units);

    return builder.toHashCode();
  }

  public int compareTo(Fare other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Fare typedOther = (Fare)other;

    lastComparison = Boolean.valueOf(isSetNetwork()).compareTo(typedOther.isSetNetwork());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetwork()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.network, typedOther.network);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(typedOther.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, typedOther.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFare()).compareTo(typedOther.isSetFare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fare, typedOther.fare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitName()).compareTo(typedOther.isSetUnitName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitName, typedOther.unitName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnits()).compareTo(typedOther.isSetUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.units, typedOther.units);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NETWORK
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.network = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.type = FareType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CURRENCY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.currency = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // FARE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.fare = iprot.readDouble();
            setFareIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // UNIT_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.unitName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // UNITS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.units = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetFare()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fare' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.network != null) {
      oprot.writeFieldBegin(NETWORK_FIELD_DESC);
      oprot.writeString(this.network);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    if (this.currency != null) {
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeString(this.currency);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FARE_FIELD_DESC);
    oprot.writeDouble(this.fare);
    oprot.writeFieldEnd();
    if (this.unitName != null) {
      oprot.writeFieldBegin(UNIT_NAME_FIELD_DESC);
      oprot.writeString(this.unitName);
      oprot.writeFieldEnd();
    }
    if (this.units != null) {
      oprot.writeFieldBegin(UNITS_FIELD_DESC);
      oprot.writeString(this.units);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Fare(");
    boolean first = true;

    sb.append("network:");
    if (this.network == null) {
      sb.append("null");
    } else {
      sb.append(this.network);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fare:");
    sb.append(this.fare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitName:");
    if (this.unitName == null) {
      sb.append("null");
    } else {
      sb.append(this.unitName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("units:");
    if (this.units == null) {
      sb.append("null");
    } else {
      sb.append(this.units);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (network == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'network' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (currency == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'currency' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'fare' because it's a primitive and you chose the non-beans generator.
    if (unitName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unitName' was not present! Struct: " + toString());
    }
    if (units == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'units' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

