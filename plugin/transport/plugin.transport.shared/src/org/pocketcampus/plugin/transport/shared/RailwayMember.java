/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RailwayMember implements org.apache.thrift.TBase<RailwayMember, RailwayMember._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RailwayMember");

  private static final org.apache.thrift.protocol.TField TYPE__FIELD_DESC = new org.apache.thrift.protocol.TField("type_", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REF__FIELD_DESC = new org.apache.thrift.protocol.TField("ref_", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ROLE__FIELD_DESC = new org.apache.thrift.protocol.TField("role_", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NUM__FIELD_DESC = new org.apache.thrift.protocol.TField("num_", org.apache.thrift.protocol.TType.I32, (short)4);

  public String type_; // required
  public int ref_; // required
  public String role_; // required
  public int num_; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE_((short)1, "type_"),
    REF_((short)2, "ref_"),
    ROLE_((short)3, "role_"),
    NUM_((short)4, "num_");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE_
          return TYPE_;
        case 2: // REF_
          return REF_;
        case 3: // ROLE_
          return ROLE_;
        case 4: // NUM_
          return NUM_;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REF__ISSET_ID = 0;
  private static final int __NUM__ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE_, new org.apache.thrift.meta_data.FieldMetaData("type_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_, new org.apache.thrift.meta_data.FieldMetaData("ref_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLE_, new org.apache.thrift.meta_data.FieldMetaData("role_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_, new org.apache.thrift.meta_data.FieldMetaData("num_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RailwayMember.class, metaDataMap);
  }

  public RailwayMember() {
  }

  public RailwayMember(
    String type_,
    int ref_,
    String role_,
    int num_)
  {
    this();
    this.type_ = type_;
    this.ref_ = ref_;
    setRef_IsSet(true);
    this.role_ = role_;
    this.num_ = num_;
    setNum_IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RailwayMember(RailwayMember other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetType_()) {
      this.type_ = other.type_;
    }
    this.ref_ = other.ref_;
    if (other.isSetRole_()) {
      this.role_ = other.role_;
    }
    this.num_ = other.num_;
  }

  public RailwayMember deepCopy() {
    return new RailwayMember(this);
  }

  @Override
  public void clear() {
    this.type_ = null;
    setRef_IsSet(false);
    this.ref_ = 0;
    this.role_ = null;
    setNum_IsSet(false);
    this.num_ = 0;
  }

  public String getType_() {
    return this.type_;
  }

  public RailwayMember setType_(String type_) {
    this.type_ = type_;
    return this;
  }

  public void unsetType_() {
    this.type_ = null;
  }

  /** Returns true if field type_ is set (has been assigned a value) and false otherwise */
  public boolean isSetType_() {
    return this.type_ != null;
  }

  public void setType_IsSet(boolean value) {
    if (!value) {
      this.type_ = null;
    }
  }

  public int getRef_() {
    return this.ref_;
  }

  public RailwayMember setRef_(int ref_) {
    this.ref_ = ref_;
    setRef_IsSet(true);
    return this;
  }

  public void unsetRef_() {
    __isset_bit_vector.clear(__REF__ISSET_ID);
  }

  /** Returns true if field ref_ is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_() {
    return __isset_bit_vector.get(__REF__ISSET_ID);
  }

  public void setRef_IsSet(boolean value) {
    __isset_bit_vector.set(__REF__ISSET_ID, value);
  }

  public String getRole_() {
    return this.role_;
  }

  public RailwayMember setRole_(String role_) {
    this.role_ = role_;
    return this;
  }

  public void unsetRole_() {
    this.role_ = null;
  }

  /** Returns true if field role_ is set (has been assigned a value) and false otherwise */
  public boolean isSetRole_() {
    return this.role_ != null;
  }

  public void setRole_IsSet(boolean value) {
    if (!value) {
      this.role_ = null;
    }
  }

  public int getNum_() {
    return this.num_;
  }

  public RailwayMember setNum_(int num_) {
    this.num_ = num_;
    setNum_IsSet(true);
    return this;
  }

  public void unsetNum_() {
    __isset_bit_vector.clear(__NUM__ISSET_ID);
  }

  /** Returns true if field num_ is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_() {
    return __isset_bit_vector.get(__NUM__ISSET_ID);
  }

  public void setNum_IsSet(boolean value) {
    __isset_bit_vector.set(__NUM__ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE_:
      if (value == null) {
        unsetType_();
      } else {
        setType_((String)value);
      }
      break;

    case REF_:
      if (value == null) {
        unsetRef_();
      } else {
        setRef_((Integer)value);
      }
      break;

    case ROLE_:
      if (value == null) {
        unsetRole_();
      } else {
        setRole_((String)value);
      }
      break;

    case NUM_:
      if (value == null) {
        unsetNum_();
      } else {
        setNum_((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE_:
      return getType_();

    case REF_:
      return Integer.valueOf(getRef_());

    case ROLE_:
      return getRole_();

    case NUM_:
      return Integer.valueOf(getNum_());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE_:
      return isSetType_();
    case REF_:
      return isSetRef_();
    case ROLE_:
      return isSetRole_();
    case NUM_:
      return isSetNum_();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RailwayMember)
      return this.equals((RailwayMember)that);
    return false;
  }

  public boolean equals(RailwayMember that) {
    if (that == null)
      return false;

    boolean this_present_type_ = true && this.isSetType_();
    boolean that_present_type_ = true && that.isSetType_();
    if (this_present_type_ || that_present_type_) {
      if (!(this_present_type_ && that_present_type_))
        return false;
      if (!this.type_.equals(that.type_))
        return false;
    }

    boolean this_present_ref_ = true;
    boolean that_present_ref_ = true;
    if (this_present_ref_ || that_present_ref_) {
      if (!(this_present_ref_ && that_present_ref_))
        return false;
      if (this.ref_ != that.ref_)
        return false;
    }

    boolean this_present_role_ = true && this.isSetRole_();
    boolean that_present_role_ = true && that.isSetRole_();
    if (this_present_role_ || that_present_role_) {
      if (!(this_present_role_ && that_present_role_))
        return false;
      if (!this.role_.equals(that.role_))
        return false;
    }

    boolean this_present_num_ = true;
    boolean that_present_num_ = true;
    if (this_present_num_ || that_present_num_) {
      if (!(this_present_num_ && that_present_num_))
        return false;
      if (this.num_ != that.num_)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_type_ = true && (isSetType_());
    builder.append(present_type_);
    if (present_type_)
      builder.append(type_);

    boolean present_ref_ = true;
    builder.append(present_ref_);
    if (present_ref_)
      builder.append(ref_);

    boolean present_role_ = true && (isSetRole_());
    builder.append(present_role_);
    if (present_role_)
      builder.append(role_);

    boolean present_num_ = true;
    builder.append(present_num_);
    if (present_num_)
      builder.append(num_);

    return builder.toHashCode();
  }

  public int compareTo(RailwayMember other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RailwayMember typedOther = (RailwayMember)other;

    lastComparison = Boolean.valueOf(isSetType_()).compareTo(typedOther.isSetType_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_, typedOther.type_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRef_()).compareTo(typedOther.isSetRef_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_, typedOther.ref_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole_()).compareTo(typedOther.isSetRole_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role_, typedOther.role_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_()).compareTo(typedOther.isSetNum_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_, typedOther.num_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TYPE_
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.type_ = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REF_
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.ref_ = iprot.readI32();
            setRef_IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ROLE_
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.role_ = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // NUM_
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_ = iprot.readI32();
            setNum_IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetRef_()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref_' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetNum_()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.type_ != null) {
      oprot.writeFieldBegin(TYPE__FIELD_DESC);
      oprot.writeString(this.type_);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REF__FIELD_DESC);
    oprot.writeI32(this.ref_);
    oprot.writeFieldEnd();
    if (this.role_ != null) {
      oprot.writeFieldBegin(ROLE__FIELD_DESC);
      oprot.writeString(this.role_);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(NUM__FIELD_DESC);
    oprot.writeI32(this.num_);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RailwayMember(");
    boolean first = true;

    sb.append("type_:");
    if (this.type_ == null) {
      sb.append("null");
    } else {
      sb.append(this.type_);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ref_:");
    sb.append(this.ref_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("role_:");
    if (this.role_ == null) {
      sb.append("null");
    } else {
      sb.append(this.role_);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_:");
    sb.append(this.num_);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type_ == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type_' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ref_' because it's a primitive and you chose the non-beans generator.
    if (role_ == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'role_' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'num_' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

