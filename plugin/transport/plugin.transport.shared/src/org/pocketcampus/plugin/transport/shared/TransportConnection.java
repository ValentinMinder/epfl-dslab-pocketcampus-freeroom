/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransportConnection implements org.apache.thrift.TBase<TransportConnection, TransportConnection._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransportConnection");

  private static final org.apache.thrift.protocol.TField DEPARTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("departure", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ARRIVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("arrival", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DEPARTURE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("departureTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DEPARTURE_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("departurePosition", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ARRIVAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ARRIVAL_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalPosition", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FOOT_FIELD_DESC = new org.apache.thrift.protocol.TField("foot", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField FOOT_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("footDuration", org.apache.thrift.protocol.TType.I32, (short)12);

  private TransportStation departure; // required
  private TransportStation arrival; // required
  private TransportLine line; // required
  private long departureTime; // required
  private String departurePosition; // required
  private long arrivalTime; // required
  private String arrivalPosition; // required
  private boolean foot; // required
  private int footDuration; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEPARTURE((short)1, "departure"),
    ARRIVAL((short)2, "arrival"),
    LINE((short)4, "line"),
    DEPARTURE_TIME((short)6, "departureTime"),
    DEPARTURE_POSITION((short)7, "departurePosition"),
    ARRIVAL_TIME((short)8, "arrivalTime"),
    ARRIVAL_POSITION((short)9, "arrivalPosition"),
    FOOT((short)11, "foot"),
    FOOT_DURATION((short)12, "footDuration");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEPARTURE
          return DEPARTURE;
        case 2: // ARRIVAL
          return ARRIVAL;
        case 4: // LINE
          return LINE;
        case 6: // DEPARTURE_TIME
          return DEPARTURE_TIME;
        case 7: // DEPARTURE_POSITION
          return DEPARTURE_POSITION;
        case 8: // ARRIVAL_TIME
          return ARRIVAL_TIME;
        case 9: // ARRIVAL_POSITION
          return ARRIVAL_POSITION;
        case 11: // FOOT
          return FOOT;
        case 12: // FOOT_DURATION
          return FOOT_DURATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEPARTURETIME_ISSET_ID = 0;
  private static final int __ARRIVALTIME_ISSET_ID = 1;
  private static final int __FOOT_ISSET_ID = 2;
  private static final int __FOOTDURATION_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEPARTURE, new org.apache.thrift.meta_data.FieldMetaData("departure", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class)));
    tmpMap.put(_Fields.ARRIVAL, new org.apache.thrift.meta_data.FieldMetaData("arrival", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class)));
    tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportLine.class)));
    tmpMap.put(_Fields.DEPARTURE_TIME, new org.apache.thrift.meta_data.FieldMetaData("departureTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEPARTURE_POSITION, new org.apache.thrift.meta_data.FieldMetaData("departurePosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARRIVAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("arrivalTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ARRIVAL_POSITION, new org.apache.thrift.meta_data.FieldMetaData("arrivalPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOOT, new org.apache.thrift.meta_data.FieldMetaData("foot", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FOOT_DURATION, new org.apache.thrift.meta_data.FieldMetaData("footDuration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransportConnection.class, metaDataMap);
  }

  public TransportConnection() {
  }

  public TransportConnection(
    TransportStation departure,
    TransportStation arrival,
    boolean foot)
  {
    this();
    this.departure = departure;
    this.arrival = arrival;
    this.foot = foot;
    setFootIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransportConnection(TransportConnection other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetDeparture()) {
      this.departure = new TransportStation(other.departure);
    }
    if (other.isSetArrival()) {
      this.arrival = new TransportStation(other.arrival);
    }
    if (other.isSetLine()) {
      this.line = new TransportLine(other.line);
    }
    this.departureTime = other.departureTime;
    if (other.isSetDeparturePosition()) {
      this.departurePosition = other.departurePosition;
    }
    this.arrivalTime = other.arrivalTime;
    if (other.isSetArrivalPosition()) {
      this.arrivalPosition = other.arrivalPosition;
    }
    this.foot = other.foot;
    this.footDuration = other.footDuration;
  }

  public TransportConnection deepCopy() {
    return new TransportConnection(this);
  }

  @Override
  public void clear() {
    this.departure = null;
    this.arrival = null;
    this.line = null;
    setDepartureTimeIsSet(false);
    this.departureTime = 0;
    this.departurePosition = null;
    setArrivalTimeIsSet(false);
    this.arrivalTime = 0;
    this.arrivalPosition = null;
    setFootIsSet(false);
    this.foot = false;
    setFootDurationIsSet(false);
    this.footDuration = 0;
  }

  public TransportStation getDeparture() {
    return this.departure;
  }

  public TransportConnection setDeparture(TransportStation departure) {
    this.departure = departure;
    return this;
  }

  public void unsetDeparture() {
    this.departure = null;
  }

  /** Returns true if field departure is set (has been assigned a value) and false otherwise */
  public boolean isSetDeparture() {
    return this.departure != null;
  }

  public void setDepartureIsSet(boolean value) {
    if (!value) {
      this.departure = null;
    }
  }

  public TransportStation getArrival() {
    return this.arrival;
  }

  public TransportConnection setArrival(TransportStation arrival) {
    this.arrival = arrival;
    return this;
  }

  public void unsetArrival() {
    this.arrival = null;
  }

  /** Returns true if field arrival is set (has been assigned a value) and false otherwise */
  public boolean isSetArrival() {
    return this.arrival != null;
  }

  public void setArrivalIsSet(boolean value) {
    if (!value) {
      this.arrival = null;
    }
  }

  public TransportLine getLine() {
    return this.line;
  }

  public TransportConnection setLine(TransportLine line) {
    this.line = line;
    return this;
  }

  public void unsetLine() {
    this.line = null;
  }

  /** Returns true if field line is set (has been assigned a value) and false otherwise */
  public boolean isSetLine() {
    return this.line != null;
  }

  public void setLineIsSet(boolean value) {
    if (!value) {
      this.line = null;
    }
  }

  public long getDepartureTime() {
    return this.departureTime;
  }

  public TransportConnection setDepartureTime(long departureTime) {
    this.departureTime = departureTime;
    setDepartureTimeIsSet(true);
    return this;
  }

  public void unsetDepartureTime() {
    __isset_bit_vector.clear(__DEPARTURETIME_ISSET_ID);
  }

  /** Returns true if field departureTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureTime() {
    return __isset_bit_vector.get(__DEPARTURETIME_ISSET_ID);
  }

  public void setDepartureTimeIsSet(boolean value) {
    __isset_bit_vector.set(__DEPARTURETIME_ISSET_ID, value);
  }

  public String getDeparturePosition() {
    return this.departurePosition;
  }

  public TransportConnection setDeparturePosition(String departurePosition) {
    this.departurePosition = departurePosition;
    return this;
  }

  public void unsetDeparturePosition() {
    this.departurePosition = null;
  }

  /** Returns true if field departurePosition is set (has been assigned a value) and false otherwise */
  public boolean isSetDeparturePosition() {
    return this.departurePosition != null;
  }

  public void setDeparturePositionIsSet(boolean value) {
    if (!value) {
      this.departurePosition = null;
    }
  }

  public long getArrivalTime() {
    return this.arrivalTime;
  }

  public TransportConnection setArrivalTime(long arrivalTime) {
    this.arrivalTime = arrivalTime;
    setArrivalTimeIsSet(true);
    return this;
  }

  public void unsetArrivalTime() {
    __isset_bit_vector.clear(__ARRIVALTIME_ISSET_ID);
  }

  /** Returns true if field arrivalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalTime() {
    return __isset_bit_vector.get(__ARRIVALTIME_ISSET_ID);
  }

  public void setArrivalTimeIsSet(boolean value) {
    __isset_bit_vector.set(__ARRIVALTIME_ISSET_ID, value);
  }

  public String getArrivalPosition() {
    return this.arrivalPosition;
  }

  public TransportConnection setArrivalPosition(String arrivalPosition) {
    this.arrivalPosition = arrivalPosition;
    return this;
  }

  public void unsetArrivalPosition() {
    this.arrivalPosition = null;
  }

  /** Returns true if field arrivalPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalPosition() {
    return this.arrivalPosition != null;
  }

  public void setArrivalPositionIsSet(boolean value) {
    if (!value) {
      this.arrivalPosition = null;
    }
  }

  public boolean isFoot() {
    return this.foot;
  }

  public TransportConnection setFoot(boolean foot) {
    this.foot = foot;
    setFootIsSet(true);
    return this;
  }

  public void unsetFoot() {
    __isset_bit_vector.clear(__FOOT_ISSET_ID);
  }

  /** Returns true if field foot is set (has been assigned a value) and false otherwise */
  public boolean isSetFoot() {
    return __isset_bit_vector.get(__FOOT_ISSET_ID);
  }

  public void setFootIsSet(boolean value) {
    __isset_bit_vector.set(__FOOT_ISSET_ID, value);
  }

  public int getFootDuration() {
    return this.footDuration;
  }

  public TransportConnection setFootDuration(int footDuration) {
    this.footDuration = footDuration;
    setFootDurationIsSet(true);
    return this;
  }

  public void unsetFootDuration() {
    __isset_bit_vector.clear(__FOOTDURATION_ISSET_ID);
  }

  /** Returns true if field footDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetFootDuration() {
    return __isset_bit_vector.get(__FOOTDURATION_ISSET_ID);
  }

  public void setFootDurationIsSet(boolean value) {
    __isset_bit_vector.set(__FOOTDURATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEPARTURE:
      if (value == null) {
        unsetDeparture();
      } else {
        setDeparture((TransportStation)value);
      }
      break;

    case ARRIVAL:
      if (value == null) {
        unsetArrival();
      } else {
        setArrival((TransportStation)value);
      }
      break;

    case LINE:
      if (value == null) {
        unsetLine();
      } else {
        setLine((TransportLine)value);
      }
      break;

    case DEPARTURE_TIME:
      if (value == null) {
        unsetDepartureTime();
      } else {
        setDepartureTime((Long)value);
      }
      break;

    case DEPARTURE_POSITION:
      if (value == null) {
        unsetDeparturePosition();
      } else {
        setDeparturePosition((String)value);
      }
      break;

    case ARRIVAL_TIME:
      if (value == null) {
        unsetArrivalTime();
      } else {
        setArrivalTime((Long)value);
      }
      break;

    case ARRIVAL_POSITION:
      if (value == null) {
        unsetArrivalPosition();
      } else {
        setArrivalPosition((String)value);
      }
      break;

    case FOOT:
      if (value == null) {
        unsetFoot();
      } else {
        setFoot((Boolean)value);
      }
      break;

    case FOOT_DURATION:
      if (value == null) {
        unsetFootDuration();
      } else {
        setFootDuration((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEPARTURE:
      return getDeparture();

    case ARRIVAL:
      return getArrival();

    case LINE:
      return getLine();

    case DEPARTURE_TIME:
      return Long.valueOf(getDepartureTime());

    case DEPARTURE_POSITION:
      return getDeparturePosition();

    case ARRIVAL_TIME:
      return Long.valueOf(getArrivalTime());

    case ARRIVAL_POSITION:
      return getArrivalPosition();

    case FOOT:
      return Boolean.valueOf(isFoot());

    case FOOT_DURATION:
      return Integer.valueOf(getFootDuration());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEPARTURE:
      return isSetDeparture();
    case ARRIVAL:
      return isSetArrival();
    case LINE:
      return isSetLine();
    case DEPARTURE_TIME:
      return isSetDepartureTime();
    case DEPARTURE_POSITION:
      return isSetDeparturePosition();
    case ARRIVAL_TIME:
      return isSetArrivalTime();
    case ARRIVAL_POSITION:
      return isSetArrivalPosition();
    case FOOT:
      return isSetFoot();
    case FOOT_DURATION:
      return isSetFootDuration();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransportConnection)
      return this.equals((TransportConnection)that);
    return false;
  }

  public boolean equals(TransportConnection that) {
    if (that == null)
      return false;

    boolean this_present_departure = true && this.isSetDeparture();
    boolean that_present_departure = true && that.isSetDeparture();
    if (this_present_departure || that_present_departure) {
      if (!(this_present_departure && that_present_departure))
        return false;
      if (!this.departure.equals(that.departure))
        return false;
    }

    boolean this_present_arrival = true && this.isSetArrival();
    boolean that_present_arrival = true && that.isSetArrival();
    if (this_present_arrival || that_present_arrival) {
      if (!(this_present_arrival && that_present_arrival))
        return false;
      if (!this.arrival.equals(that.arrival))
        return false;
    }

    boolean this_present_line = true && this.isSetLine();
    boolean that_present_line = true && that.isSetLine();
    if (this_present_line || that_present_line) {
      if (!(this_present_line && that_present_line))
        return false;
      if (!this.line.equals(that.line))
        return false;
    }

    boolean this_present_departureTime = true && this.isSetDepartureTime();
    boolean that_present_departureTime = true && that.isSetDepartureTime();
    if (this_present_departureTime || that_present_departureTime) {
      if (!(this_present_departureTime && that_present_departureTime))
        return false;
      if (this.departureTime != that.departureTime)
        return false;
    }

    boolean this_present_departurePosition = true && this.isSetDeparturePosition();
    boolean that_present_departurePosition = true && that.isSetDeparturePosition();
    if (this_present_departurePosition || that_present_departurePosition) {
      if (!(this_present_departurePosition && that_present_departurePosition))
        return false;
      if (!this.departurePosition.equals(that.departurePosition))
        return false;
    }

    boolean this_present_arrivalTime = true && this.isSetArrivalTime();
    boolean that_present_arrivalTime = true && that.isSetArrivalTime();
    if (this_present_arrivalTime || that_present_arrivalTime) {
      if (!(this_present_arrivalTime && that_present_arrivalTime))
        return false;
      if (this.arrivalTime != that.arrivalTime)
        return false;
    }

    boolean this_present_arrivalPosition = true && this.isSetArrivalPosition();
    boolean that_present_arrivalPosition = true && that.isSetArrivalPosition();
    if (this_present_arrivalPosition || that_present_arrivalPosition) {
      if (!(this_present_arrivalPosition && that_present_arrivalPosition))
        return false;
      if (!this.arrivalPosition.equals(that.arrivalPosition))
        return false;
    }

    boolean this_present_foot = true;
    boolean that_present_foot = true;
    if (this_present_foot || that_present_foot) {
      if (!(this_present_foot && that_present_foot))
        return false;
      if (this.foot != that.foot)
        return false;
    }

    boolean this_present_footDuration = true && this.isSetFootDuration();
    boolean that_present_footDuration = true && that.isSetFootDuration();
    if (this_present_footDuration || that_present_footDuration) {
      if (!(this_present_footDuration && that_present_footDuration))
        return false;
      if (this.footDuration != that.footDuration)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_departure = true && (isSetDeparture());
    builder.append(present_departure);
    if (present_departure)
      builder.append(departure);

    boolean present_arrival = true && (isSetArrival());
    builder.append(present_arrival);
    if (present_arrival)
      builder.append(arrival);

    boolean present_line = true && (isSetLine());
    builder.append(present_line);
    if (present_line)
      builder.append(line);

    boolean present_departureTime = true && (isSetDepartureTime());
    builder.append(present_departureTime);
    if (present_departureTime)
      builder.append(departureTime);

    boolean present_departurePosition = true && (isSetDeparturePosition());
    builder.append(present_departurePosition);
    if (present_departurePosition)
      builder.append(departurePosition);

    boolean present_arrivalTime = true && (isSetArrivalTime());
    builder.append(present_arrivalTime);
    if (present_arrivalTime)
      builder.append(arrivalTime);

    boolean present_arrivalPosition = true && (isSetArrivalPosition());
    builder.append(present_arrivalPosition);
    if (present_arrivalPosition)
      builder.append(arrivalPosition);

    boolean present_foot = true;
    builder.append(present_foot);
    if (present_foot)
      builder.append(foot);

    boolean present_footDuration = true && (isSetFootDuration());
    builder.append(present_footDuration);
    if (present_footDuration)
      builder.append(footDuration);

    return builder.toHashCode();
  }

  public int compareTo(TransportConnection other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TransportConnection typedOther = (TransportConnection)other;

    lastComparison = Boolean.valueOf(isSetDeparture()).compareTo(typedOther.isSetDeparture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeparture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departure, typedOther.departure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrival()).compareTo(typedOther.isSetArrival());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrival()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrival, typedOther.arrival);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLine()).compareTo(typedOther.isSetLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, typedOther.line);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartureTime()).compareTo(typedOther.isSetDepartureTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureTime, typedOther.departureTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeparturePosition()).compareTo(typedOther.isSetDeparturePosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeparturePosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departurePosition, typedOther.departurePosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrivalTime()).compareTo(typedOther.isSetArrivalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalTime, typedOther.arrivalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrivalPosition()).compareTo(typedOther.isSetArrivalPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalPosition, typedOther.arrivalPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoot()).compareTo(typedOther.isSetFoot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foot, typedOther.foot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFootDuration()).compareTo(typedOther.isSetFootDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFootDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.footDuration, typedOther.footDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // DEPARTURE
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.departure = new TransportStation();
            this.departure.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ARRIVAL
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.arrival = new TransportStation();
            this.arrival.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LINE
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.line = new TransportLine();
            this.line.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DEPARTURE_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.departureTime = iprot.readI64();
            setDepartureTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DEPARTURE_POSITION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.departurePosition = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // ARRIVAL_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.arrivalTime = iprot.readI64();
            setArrivalTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // ARRIVAL_POSITION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.arrivalPosition = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // FOOT
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.foot = iprot.readBool();
            setFootIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // FOOT_DURATION
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.footDuration = iprot.readI32();
            setFootDurationIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetFoot()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'foot' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.departure != null) {
      oprot.writeFieldBegin(DEPARTURE_FIELD_DESC);
      this.departure.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.arrival != null) {
      oprot.writeFieldBegin(ARRIVAL_FIELD_DESC);
      this.arrival.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.line != null) {
      if (isSetLine()) {
        oprot.writeFieldBegin(LINE_FIELD_DESC);
        this.line.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetDepartureTime()) {
      oprot.writeFieldBegin(DEPARTURE_TIME_FIELD_DESC);
      oprot.writeI64(this.departureTime);
      oprot.writeFieldEnd();
    }
    if (this.departurePosition != null) {
      if (isSetDeparturePosition()) {
        oprot.writeFieldBegin(DEPARTURE_POSITION_FIELD_DESC);
        oprot.writeString(this.departurePosition);
        oprot.writeFieldEnd();
      }
    }
    if (isSetArrivalTime()) {
      oprot.writeFieldBegin(ARRIVAL_TIME_FIELD_DESC);
      oprot.writeI64(this.arrivalTime);
      oprot.writeFieldEnd();
    }
    if (this.arrivalPosition != null) {
      if (isSetArrivalPosition()) {
        oprot.writeFieldBegin(ARRIVAL_POSITION_FIELD_DESC);
        oprot.writeString(this.arrivalPosition);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(FOOT_FIELD_DESC);
    oprot.writeBool(this.foot);
    oprot.writeFieldEnd();
    if (isSetFootDuration()) {
      oprot.writeFieldBegin(FOOT_DURATION_FIELD_DESC);
      oprot.writeI32(this.footDuration);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransportConnection(");
    boolean first = true;

    sb.append("departure:");
    if (this.departure == null) {
      sb.append("null");
    } else {
      sb.append(this.departure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrival:");
    if (this.arrival == null) {
      sb.append("null");
    } else {
      sb.append(this.arrival);
    }
    first = false;
    if (isSetLine()) {
      if (!first) sb.append(", ");
      sb.append("line:");
      if (this.line == null) {
        sb.append("null");
      } else {
        sb.append(this.line);
      }
      first = false;
    }
    if (isSetDepartureTime()) {
      if (!first) sb.append(", ");
      sb.append("departureTime:");
      sb.append(this.departureTime);
      first = false;
    }
    if (isSetDeparturePosition()) {
      if (!first) sb.append(", ");
      sb.append("departurePosition:");
      if (this.departurePosition == null) {
        sb.append("null");
      } else {
        sb.append(this.departurePosition);
      }
      first = false;
    }
    if (isSetArrivalTime()) {
      if (!first) sb.append(", ");
      sb.append("arrivalTime:");
      sb.append(this.arrivalTime);
      first = false;
    }
    if (isSetArrivalPosition()) {
      if (!first) sb.append(", ");
      sb.append("arrivalPosition:");
      if (this.arrivalPosition == null) {
        sb.append("null");
      } else {
        sb.append(this.arrivalPosition);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("foot:");
    sb.append(this.foot);
    first = false;
    if (isSetFootDuration()) {
      if (!first) sb.append(", ");
      sb.append("footDuration:");
      sb.append(this.footDuration);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (departure == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'departure' was not present! Struct: " + toString());
    }
    if (arrival == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arrival' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'foot' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

