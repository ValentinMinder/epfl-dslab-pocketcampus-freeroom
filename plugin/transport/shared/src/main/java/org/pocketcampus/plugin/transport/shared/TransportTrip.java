/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class TransportTrip implements org.apache.thrift.TBase<TransportTrip, TransportTrip._Fields>, java.io.Serializable, Cloneable, Comparable<TransportTrip> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransportTrip");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEPARTURE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("departureTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ARRIVAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PARTS_FIELD_DESC = new org.apache.thrift.protocol.TField("parts", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransportTripStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransportTripTupleSchemeFactory());
  }

  private String id; // required
  private long departureTime; // required
  private long arrivalTime; // required
  private TransportStation from; // required
  private TransportStation to; // required
  private List<TransportConnection> parts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DEPARTURE_TIME((short)3, "departureTime"),
    ARRIVAL_TIME((short)4, "arrivalTime"),
    FROM((short)5, "from"),
    TO((short)6, "to"),
    PARTS((short)7, "parts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 3: // DEPARTURE_TIME
          return DEPARTURE_TIME;
        case 4: // ARRIVAL_TIME
          return ARRIVAL_TIME;
        case 5: // FROM
          return FROM;
        case 6: // TO
          return TO;
        case 7: // PARTS
          return PARTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEPARTURETIME_ISSET_ID = 0;
  private static final int __ARRIVALTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTURE_TIME, new org.apache.thrift.meta_data.FieldMetaData("departureTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ARRIVAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("arrivalTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class)));
    tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class)));
    tmpMap.put(_Fields.PARTS, new org.apache.thrift.meta_data.FieldMetaData("parts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportConnection.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransportTrip.class, metaDataMap);
  }

  public TransportTrip() {
  }

  public TransportTrip(
    String id,
    long departureTime,
    long arrivalTime,
    TransportStation from,
    TransportStation to,
    List<TransportConnection> parts)
  {
    this();
    this.id = id;
    this.departureTime = departureTime;
    setDepartureTimeIsSet(true);
    this.arrivalTime = arrivalTime;
    setArrivalTimeIsSet(true);
    this.from = from;
    this.to = to;
    this.parts = parts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransportTrip(TransportTrip other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.departureTime = other.departureTime;
    this.arrivalTime = other.arrivalTime;
    if (other.isSetFrom()) {
      this.from = new TransportStation(other.from);
    }
    if (other.isSetTo()) {
      this.to = new TransportStation(other.to);
    }
    if (other.isSetParts()) {
      List<TransportConnection> __this__parts = new ArrayList<TransportConnection>(other.parts.size());
      for (TransportConnection other_element : other.parts) {
        __this__parts.add(new TransportConnection(other_element));
      }
      this.parts = __this__parts;
    }
  }

  public TransportTrip deepCopy() {
    return new TransportTrip(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setDepartureTimeIsSet(false);
    this.departureTime = 0;
    setArrivalTimeIsSet(false);
    this.arrivalTime = 0;
    this.from = null;
    this.to = null;
    this.parts = null;
  }

  public String getId() {
    return this.id;
  }

  public TransportTrip setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getDepartureTime() {
    return this.departureTime;
  }

  public TransportTrip setDepartureTime(long departureTime) {
    this.departureTime = departureTime;
    setDepartureTimeIsSet(true);
    return this;
  }

  public void unsetDepartureTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTURETIME_ISSET_ID);
  }

  /** Returns true if field departureTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureTime() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTURETIME_ISSET_ID);
  }

  public void setDepartureTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTURETIME_ISSET_ID, value);
  }

  public long getArrivalTime() {
    return this.arrivalTime;
  }

  public TransportTrip setArrivalTime(long arrivalTime) {
    this.arrivalTime = arrivalTime;
    setArrivalTimeIsSet(true);
    return this;
  }

  public void unsetArrivalTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARRIVALTIME_ISSET_ID);
  }

  /** Returns true if field arrivalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ARRIVALTIME_ISSET_ID);
  }

  public void setArrivalTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARRIVALTIME_ISSET_ID, value);
  }

  public TransportStation getFrom() {
    return this.from;
  }

  public TransportTrip setFrom(TransportStation from) {
    this.from = from;
    return this;
  }

  public void unsetFrom() {
    this.from = null;
  }

  /** Returns true if field from is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom() {
    return this.from != null;
  }

  public void setFromIsSet(boolean value) {
    if (!value) {
      this.from = null;
    }
  }

  public TransportStation getTo() {
    return this.to;
  }

  public TransportTrip setTo(TransportStation to) {
    this.to = to;
    return this;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  public int getPartsSize() {
    return (this.parts == null) ? 0 : this.parts.size();
  }

  public java.util.Iterator<TransportConnection> getPartsIterator() {
    return (this.parts == null) ? null : this.parts.iterator();
  }

  public void addToParts(TransportConnection elem) {
    if (this.parts == null) {
      this.parts = new ArrayList<TransportConnection>();
    }
    this.parts.add(elem);
  }

  public List<TransportConnection> getParts() {
    return this.parts;
  }

  public TransportTrip setParts(List<TransportConnection> parts) {
    this.parts = parts;
    return this;
  }

  public void unsetParts() {
    this.parts = null;
  }

  /** Returns true if field parts is set (has been assigned a value) and false otherwise */
  public boolean isSetParts() {
    return this.parts != null;
  }

  public void setPartsIsSet(boolean value) {
    if (!value) {
      this.parts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case DEPARTURE_TIME:
      if (value == null) {
        unsetDepartureTime();
      } else {
        setDepartureTime((Long)value);
      }
      break;

    case ARRIVAL_TIME:
      if (value == null) {
        unsetArrivalTime();
      } else {
        setArrivalTime((Long)value);
      }
      break;

    case FROM:
      if (value == null) {
        unsetFrom();
      } else {
        setFrom((TransportStation)value);
      }
      break;

    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((TransportStation)value);
      }
      break;

    case PARTS:
      if (value == null) {
        unsetParts();
      } else {
        setParts((List<TransportConnection>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DEPARTURE_TIME:
      return Long.valueOf(getDepartureTime());

    case ARRIVAL_TIME:
      return Long.valueOf(getArrivalTime());

    case FROM:
      return getFrom();

    case TO:
      return getTo();

    case PARTS:
      return getParts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DEPARTURE_TIME:
      return isSetDepartureTime();
    case ARRIVAL_TIME:
      return isSetArrivalTime();
    case FROM:
      return isSetFrom();
    case TO:
      return isSetTo();
    case PARTS:
      return isSetParts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransportTrip)
      return this.equals((TransportTrip)that);
    return false;
  }

  public boolean equals(TransportTrip that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_departureTime = true;
    boolean that_present_departureTime = true;
    if (this_present_departureTime || that_present_departureTime) {
      if (!(this_present_departureTime && that_present_departureTime))
        return false;
      if (this.departureTime != that.departureTime)
        return false;
    }

    boolean this_present_arrivalTime = true;
    boolean that_present_arrivalTime = true;
    if (this_present_arrivalTime || that_present_arrivalTime) {
      if (!(this_present_arrivalTime && that_present_arrivalTime))
        return false;
      if (this.arrivalTime != that.arrivalTime)
        return false;
    }

    boolean this_present_from = true && this.isSetFrom();
    boolean that_present_from = true && that.isSetFrom();
    if (this_present_from || that_present_from) {
      if (!(this_present_from && that_present_from))
        return false;
      if (!this.from.equals(that.from))
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_parts = true && this.isSetParts();
    boolean that_present_parts = true && that.isSetParts();
    if (this_present_parts || that_present_parts) {
      if (!(this_present_parts && that_present_parts))
        return false;
      if (!this.parts.equals(that.parts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_departureTime = true;
    list.add(present_departureTime);
    if (present_departureTime)
      list.add(departureTime);

    boolean present_arrivalTime = true;
    list.add(present_arrivalTime);
    if (present_arrivalTime)
      list.add(arrivalTime);

    boolean present_from = true && (isSetFrom());
    list.add(present_from);
    if (present_from)
      list.add(from);

    boolean present_to = true && (isSetTo());
    list.add(present_to);
    if (present_to)
      list.add(to);

    boolean present_parts = true && (isSetParts());
    list.add(present_parts);
    if (present_parts)
      list.add(parts);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransportTrip other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartureTime()).compareTo(other.isSetDepartureTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureTime, other.departureTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrivalTime()).compareTo(other.isSetArrivalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalTime, other.arrivalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrom()).compareTo(other.isSetFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, other.from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParts()).compareTo(other.isSetParts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parts, other.parts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransportTrip(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("departureTime:");
    sb.append(this.departureTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrivalTime:");
    sb.append(this.arrivalTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("from:");
    if (this.from == null) {
      sb.append("null");
    } else {
      sb.append(this.from);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parts:");
    if (this.parts == null) {
      sb.append("null");
    } else {
      sb.append(this.parts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'departureTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'arrivalTime' because it's a primitive and you chose the non-beans generator.
    if (from == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'from' was not present! Struct: " + toString());
    }
    if (to == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'to' was not present! Struct: " + toString());
    }
    if (parts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parts' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (from != null) {
      from.validate();
    }
    if (to != null) {
      to.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransportTripStandardSchemeFactory implements SchemeFactory {
    public TransportTripStandardScheme getScheme() {
      return new TransportTripStandardScheme();
    }
  }

  private static class TransportTripStandardScheme extends StandardScheme<TransportTrip> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransportTrip struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPARTURE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.departureTime = iprot.readI64();
              struct.setDepartureTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARRIVAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.arrivalTime = iprot.readI64();
              struct.setArrivalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.from = new TransportStation();
              struct.from.read(iprot);
              struct.setFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.to = new TransportStation();
              struct.to.read(iprot);
              struct.setToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.parts = new ArrayList<TransportConnection>(_list8.size);
                TransportConnection _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TransportConnection();
                  _elem9.read(iprot);
                  struct.parts.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setPartsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDepartureTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'departureTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetArrivalTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'arrivalTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransportTrip struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEPARTURE_TIME_FIELD_DESC);
      oprot.writeI64(struct.departureTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARRIVAL_TIME_FIELD_DESC);
      oprot.writeI64(struct.arrivalTime);
      oprot.writeFieldEnd();
      if (struct.from != null) {
        oprot.writeFieldBegin(FROM_FIELD_DESC);
        struct.from.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        struct.to.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.parts != null) {
        oprot.writeFieldBegin(PARTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parts.size()));
          for (TransportConnection _iter11 : struct.parts)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransportTripTupleSchemeFactory implements SchemeFactory {
    public TransportTripTupleScheme getScheme() {
      return new TransportTripTupleScheme();
    }
  }

  private static class TransportTripTupleScheme extends TupleScheme<TransportTrip> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransportTrip struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeI64(struct.departureTime);
      oprot.writeI64(struct.arrivalTime);
      struct.from.write(oprot);
      struct.to.write(oprot);
      {
        oprot.writeI32(struct.parts.size());
        for (TransportConnection _iter12 : struct.parts)
        {
          _iter12.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransportTrip struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.departureTime = iprot.readI64();
      struct.setDepartureTimeIsSet(true);
      struct.arrivalTime = iprot.readI64();
      struct.setArrivalTimeIsSet(true);
      struct.from = new TransportStation();
      struct.from.read(iprot);
      struct.setFromIsSet(true);
      struct.to = new TransportStation();
      struct.to.read(iprot);
      struct.setToIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.parts = new ArrayList<TransportConnection>(_list13.size);
        TransportConnection _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new TransportConnection();
          _elem14.read(iprot);
          struct.parts.add(_elem14);
        }
      }
      struct.setPartsIsSet(true);
    }
  }

}

