/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class TransportTripSearchRequest implements org.apache.thrift.TBase<TransportTripSearchRequest, TransportTripSearchRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TransportTripSearchRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransportTripSearchRequest");

  private static final org.apache.thrift.protocol.TField FROM_STATION_FIELD_DESC = new org.apache.thrift.protocol.TField("fromStation", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TO_STATION_FIELD_DESC = new org.apache.thrift.protocol.TField("toStation", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransportTripSearchRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransportTripSearchRequestTupleSchemeFactory());
  }

  private TransportStation fromStation; // required
  private TransportStation toStation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_STATION((short)1, "fromStation"),
    TO_STATION((short)2, "toStation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_STATION
          return FROM_STATION;
        case 2: // TO_STATION
          return TO_STATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_STATION, new org.apache.thrift.meta_data.FieldMetaData("fromStation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class)));
    tmpMap.put(_Fields.TO_STATION, new org.apache.thrift.meta_data.FieldMetaData("toStation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportStation.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransportTripSearchRequest.class, metaDataMap);
  }

  public TransportTripSearchRequest() {
  }

  public TransportTripSearchRequest(
    TransportStation fromStation,
    TransportStation toStation)
  {
    this();
    this.fromStation = fromStation;
    this.toStation = toStation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransportTripSearchRequest(TransportTripSearchRequest other) {
    if (other.isSetFromStation()) {
      this.fromStation = new TransportStation(other.fromStation);
    }
    if (other.isSetToStation()) {
      this.toStation = new TransportStation(other.toStation);
    }
  }

  public TransportTripSearchRequest deepCopy() {
    return new TransportTripSearchRequest(this);
  }

  @Override
  public void clear() {
    this.fromStation = null;
    this.toStation = null;
  }

  public TransportStation getFromStation() {
    return this.fromStation;
  }

  public TransportTripSearchRequest setFromStation(TransportStation fromStation) {
    this.fromStation = fromStation;
    return this;
  }

  public void unsetFromStation() {
    this.fromStation = null;
  }

  /** Returns true if field fromStation is set (has been assigned a value) and false otherwise */
  public boolean isSetFromStation() {
    return this.fromStation != null;
  }

  public void setFromStationIsSet(boolean value) {
    if (!value) {
      this.fromStation = null;
    }
  }

  public TransportStation getToStation() {
    return this.toStation;
  }

  public TransportTripSearchRequest setToStation(TransportStation toStation) {
    this.toStation = toStation;
    return this;
  }

  public void unsetToStation() {
    this.toStation = null;
  }

  /** Returns true if field toStation is set (has been assigned a value) and false otherwise */
  public boolean isSetToStation() {
    return this.toStation != null;
  }

  public void setToStationIsSet(boolean value) {
    if (!value) {
      this.toStation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FROM_STATION:
      if (value == null) {
        unsetFromStation();
      } else {
        setFromStation((TransportStation)value);
      }
      break;

    case TO_STATION:
      if (value == null) {
        unsetToStation();
      } else {
        setToStation((TransportStation)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_STATION:
      return getFromStation();

    case TO_STATION:
      return getToStation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FROM_STATION:
      return isSetFromStation();
    case TO_STATION:
      return isSetToStation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransportTripSearchRequest)
      return this.equals((TransportTripSearchRequest)that);
    return false;
  }

  public boolean equals(TransportTripSearchRequest that) {
    if (that == null)
      return false;

    boolean this_present_fromStation = true && this.isSetFromStation();
    boolean that_present_fromStation = true && that.isSetFromStation();
    if (this_present_fromStation || that_present_fromStation) {
      if (!(this_present_fromStation && that_present_fromStation))
        return false;
      if (!this.fromStation.equals(that.fromStation))
        return false;
    }

    boolean this_present_toStation = true && this.isSetToStation();
    boolean that_present_toStation = true && that.isSetToStation();
    if (this_present_toStation || that_present_toStation) {
      if (!(this_present_toStation && that_present_toStation))
        return false;
      if (!this.toStation.equals(that.toStation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fromStation = true && (isSetFromStation());
    list.add(present_fromStation);
    if (present_fromStation)
      list.add(fromStation);

    boolean present_toStation = true && (isSetToStation());
    list.add(present_toStation);
    if (present_toStation)
      list.add(toStation);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransportTripSearchRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFromStation()).compareTo(other.isSetFromStation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromStation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromStation, other.fromStation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToStation()).compareTo(other.isSetToStation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toStation, other.toStation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransportTripSearchRequest(");
    boolean first = true;

    sb.append("fromStation:");
    if (this.fromStation == null) {
      sb.append("null");
    } else {
      sb.append(this.fromStation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toStation:");
    if (this.toStation == null) {
      sb.append("null");
    } else {
      sb.append(this.toStation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fromStation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromStation' was not present! Struct: " + toString());
    }
    if (toStation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toStation' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fromStation != null) {
      fromStation.validate();
    }
    if (toStation != null) {
      toStation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransportTripSearchRequestStandardSchemeFactory implements SchemeFactory {
    public TransportTripSearchRequestStandardScheme getScheme() {
      return new TransportTripSearchRequestStandardScheme();
    }
  }

  private static class TransportTripSearchRequestStandardScheme extends StandardScheme<TransportTripSearchRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransportTripSearchRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_STATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromStation = new TransportStation();
              struct.fromStation.read(iprot);
              struct.setFromStationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_STATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toStation = new TransportStation();
              struct.toStation.read(iprot);
              struct.setToStationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransportTripSearchRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fromStation != null) {
        oprot.writeFieldBegin(FROM_STATION_FIELD_DESC);
        struct.fromStation.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.toStation != null) {
        oprot.writeFieldBegin(TO_STATION_FIELD_DESC);
        struct.toStation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransportTripSearchRequestTupleSchemeFactory implements SchemeFactory {
    public TransportTripSearchRequestTupleScheme getScheme() {
      return new TransportTripSearchRequestTupleScheme();
    }
  }

  private static class TransportTripSearchRequestTupleScheme extends TupleScheme<TransportTripSearchRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransportTripSearchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.fromStation.write(oprot);
      struct.toStation.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransportTripSearchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fromStation = new TransportStation();
      struct.fromStation.read(iprot);
      struct.setFromStationIsSet(true);
      struct.toStation = new TransportStation();
      struct.toStation.read(iprot);
      struct.setToStationIsSet(true);
    }
  }

}

