/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.transport.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class TransportStationSearchRequest implements org.apache.thrift.TBase<TransportStationSearchRequest, TransportStationSearchRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TransportStationSearchRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransportStationSearchRequest");

  private static final org.apache.thrift.protocol.TField STATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stationName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GEO_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("geoPoint", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransportStationSearchRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransportStationSearchRequestTupleSchemeFactory());
  }

  private String stationName; // required
  private TransportGeoPoint geoPoint; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATION_NAME((short)1, "stationName"),
    GEO_POINT((short)2, "geoPoint");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATION_NAME
          return STATION_NAME;
        case 2: // GEO_POINT
          return GEO_POINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.GEO_POINT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("stationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_POINT, new org.apache.thrift.meta_data.FieldMetaData("geoPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransportGeoPoint.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransportStationSearchRequest.class, metaDataMap);
  }

  public TransportStationSearchRequest() {
  }

  public TransportStationSearchRequest(
    String stationName)
  {
    this();
    this.stationName = stationName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransportStationSearchRequest(TransportStationSearchRequest other) {
    if (other.isSetStationName()) {
      this.stationName = other.stationName;
    }
    if (other.isSetGeoPoint()) {
      this.geoPoint = new TransportGeoPoint(other.geoPoint);
    }
  }

  public TransportStationSearchRequest deepCopy() {
    return new TransportStationSearchRequest(this);
  }

  @Override
  public void clear() {
    this.stationName = null;
    this.geoPoint = null;
  }

  public String getStationName() {
    return this.stationName;
  }

  public TransportStationSearchRequest setStationName(String stationName) {
    this.stationName = stationName;
    return this;
  }

  public void unsetStationName() {
    this.stationName = null;
  }

  /** Returns true if field stationName is set (has been assigned a value) and false otherwise */
  public boolean isSetStationName() {
    return this.stationName != null;
  }

  public void setStationNameIsSet(boolean value) {
    if (!value) {
      this.stationName = null;
    }
  }

  public TransportGeoPoint getGeoPoint() {
    return this.geoPoint;
  }

  public TransportStationSearchRequest setGeoPoint(TransportGeoPoint geoPoint) {
    this.geoPoint = geoPoint;
    return this;
  }

  public void unsetGeoPoint() {
    this.geoPoint = null;
  }

  /** Returns true if field geoPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoPoint() {
    return this.geoPoint != null;
  }

  public void setGeoPointIsSet(boolean value) {
    if (!value) {
      this.geoPoint = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATION_NAME:
      if (value == null) {
        unsetStationName();
      } else {
        setStationName((String)value);
      }
      break;

    case GEO_POINT:
      if (value == null) {
        unsetGeoPoint();
      } else {
        setGeoPoint((TransportGeoPoint)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATION_NAME:
      return getStationName();

    case GEO_POINT:
      return getGeoPoint();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATION_NAME:
      return isSetStationName();
    case GEO_POINT:
      return isSetGeoPoint();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransportStationSearchRequest)
      return this.equals((TransportStationSearchRequest)that);
    return false;
  }

  public boolean equals(TransportStationSearchRequest that) {
    if (that == null)
      return false;

    boolean this_present_stationName = true && this.isSetStationName();
    boolean that_present_stationName = true && that.isSetStationName();
    if (this_present_stationName || that_present_stationName) {
      if (!(this_present_stationName && that_present_stationName))
        return false;
      if (!this.stationName.equals(that.stationName))
        return false;
    }

    boolean this_present_geoPoint = true && this.isSetGeoPoint();
    boolean that_present_geoPoint = true && that.isSetGeoPoint();
    if (this_present_geoPoint || that_present_geoPoint) {
      if (!(this_present_geoPoint && that_present_geoPoint))
        return false;
      if (!this.geoPoint.equals(that.geoPoint))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stationName = true && (isSetStationName());
    list.add(present_stationName);
    if (present_stationName)
      list.add(stationName);

    boolean present_geoPoint = true && (isSetGeoPoint());
    list.add(present_geoPoint);
    if (present_geoPoint)
      list.add(geoPoint);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransportStationSearchRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStationName()).compareTo(other.isSetStationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stationName, other.stationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoPoint()).compareTo(other.isSetGeoPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoPoint, other.geoPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransportStationSearchRequest(");
    boolean first = true;

    sb.append("stationName:");
    if (this.stationName == null) {
      sb.append("null");
    } else {
      sb.append(this.stationName);
    }
    first = false;
    if (isSetGeoPoint()) {
      if (!first) sb.append(", ");
      sb.append("geoPoint:");
      if (this.geoPoint == null) {
        sb.append("null");
      } else {
        sb.append(this.geoPoint);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (stationName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stationName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (geoPoint != null) {
      geoPoint.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransportStationSearchRequestStandardSchemeFactory implements SchemeFactory {
    public TransportStationSearchRequestStandardScheme getScheme() {
      return new TransportStationSearchRequestStandardScheme();
    }
  }

  private static class TransportStationSearchRequestStandardScheme extends StandardScheme<TransportStationSearchRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransportStationSearchRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stationName = iprot.readString();
              struct.setStationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GEO_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.geoPoint = new TransportGeoPoint();
              struct.geoPoint.read(iprot);
              struct.setGeoPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransportStationSearchRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stationName != null) {
        oprot.writeFieldBegin(STATION_NAME_FIELD_DESC);
        oprot.writeString(struct.stationName);
        oprot.writeFieldEnd();
      }
      if (struct.geoPoint != null) {
        if (struct.isSetGeoPoint()) {
          oprot.writeFieldBegin(GEO_POINT_FIELD_DESC);
          struct.geoPoint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransportStationSearchRequestTupleSchemeFactory implements SchemeFactory {
    public TransportStationSearchRequestTupleScheme getScheme() {
      return new TransportStationSearchRequestTupleScheme();
    }
  }

  private static class TransportStationSearchRequestTupleScheme extends TupleScheme<TransportStationSearchRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransportStationSearchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.stationName);
      BitSet optionals = new BitSet();
      if (struct.isSetGeoPoint()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetGeoPoint()) {
        struct.geoPoint.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransportStationSearchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.stationName = iprot.readString();
      struct.setStationNameIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.geoPoint = new TransportGeoPoint();
        struct.geoPoint.read(iprot);
        struct.setGeoPointIsSet(true);
      }
    }
  }

}

