<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Mit XMLSpy v2010 rel. 3 sp1 (http://www.altova.com) von Reinhard Hüttermann (HaCon Ingenieurgesellschaft mbH) bearbeitet -->
<!-- edited with XMLSpy v2010 rel. 3 sp1 (x64) (http://www.altova.com) by HaCon (HaCon Ingenieurgesellschaft mbH) -->
<!-- ======================================================================= -->
<!-- location validation request/result -->
<!-- connection request/result -->
<!-- connection scroll request/result -->
<!-- -->
<!-- Version history:  ver. 1.0  initial version  -  Sascha Heinze 26.04.05 -->
<!--                             ver. 1.1 added annotations - Sascha Heinze, 17.05.05 -->
<!--                             ver. 1.2 added attribute output to the element ReqLoc -->
<!--                             ver. 1.3 polylines added for special versions  -->
<!--                             ver. 1.5 SBB pretest version -->
<!--                             ver 1.6 SBB attribute type in element I is now optional with default value 0 -->
<!--                             ver 1.7 attribute RTState  has got  2 extra values NO_RT_INFO and HAS_DELAYINFO -->
<!--                             ver 1.8 added capacity values at StopPrognosis -->
<!--                             ver 1.9 I element attribute dep and arr are now of type xs:string -->
<!--                             ver 2.0 rtState attribute does not exist anymore. Instead RtStateList with possible RtState are written out  -->
<!--                             ver 2.1 IList is now also written out in JourneyRes -->
<!--                             ver 2.2 new values for lang - FR, DK, IT, DK -->
<!--                             ver 2.3 . New XMLHandle Element is defined.  -->
<!--                             ver 2.4 new attributes in serviceDays - from and to -->
<!--                             ver 2.5 Added handicapped data -->
<!--                             ver 2.6 Added emissiondata request/response (rhu: 05.10.2010)-->
<!--                             ver 2.7 ConIntervallReq added (rhu: 29.11.2010) -->
<!--                             ver 2.8 DirectTrainReq added (rhu: 09.12.2010) -->
<!--                             ver 2.9 firstConDiffersFromReqDate Attribut in ConRes attribute group added (tpae: 18.01.2011) -->
<!--                             ver 3.0 Added description of attribute symbol of I element (ad: 2011-02-02) -->
<!--                             ver 3.0.1 UMC: Documentation of element productclass completed (rhu: 2011-02-10) -->
<!--                             ver 3.0.2 Added JHandle to STBJourney (ad: 2011-02-10) -->
<!--                             ver 3.0.3 Comment of element RTState modified (rhu: 2011-02-21) -->
<!--                             ver 3.0.4 Added minChTime, maxChTime, unsharp search and attribute filter (tpae: 2011-06-22) -->
<!--                             ver 3.0.5 Added Attribute needServiceBitfield to element ConReq (rhu: 2011-07-11) -->
<!--                             ver 3.0.6 attlist.RFlags removed from xsd; Parameter "unsharp" added to attlist.BasicRFlags; attlist.RFlags exchanged against attlist.BasicRFlags in element RFlags; Parameter "b" and "f" added to element RFlags (rhu: 2011-08-05) -->
<!--                             ver 3.0.7 Attribute bike removed from attlist.Prod, because bike search is realized via attribute search (rhu: 2011-08-12) -->
<!--                             ver 3.0.8 Added attribute type EXT_ID for attlist.Attribute (dsc: 2013-07-24) -->
<!--                             ver 3.0.9 Description of element ConReqAttrFilter  corrected (rhu: 2013-10-29 -->
<!--                             ver 3.1 Added LINE attribute, description for ADMINISTRATION and three NAMEFORMATA/B/C attributes for the new 5.20.39 timetable data (jf: 2014-01-15) -->
<!--                             ver 3.2 Added request and response for TrainSearch (mschu: 2014-01-31) ; element JHandle extended-->
<!--                             ver 3.2.1 Updated status of handicappedAccess values, changed attributes NAMEFORMATA/B/C to NAMEFORMATTED(jf: 2014-03-05) -->
<!--                             ver 3.2.2 Removed Time element from the StopType element used for the TrainSearch result. The server doesn't return a time for a trainsearch result. (mschu 2014-04-16) -->
<!--                             ver 3.2.3 Added maxResults parameter to the TrainSearch request and added example error code values for the errorCode attribute in the trainsearch result. (mschu 2014-04-22) -->
<!-- ======================================================================= -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xs:element name="ReqC">
		<xs:annotation>
			<xs:documentation>The element ReqC is the root element for requests to  the HAFAS system. It must contain either a location vlidation request, a  connection request or a connection scroll request. (See the corresponding elements for more details).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="STBReq"/>
				<xs:element ref="LocValReq" maxOccurs="unbounded"/>
				<xs:element ref="ConReq"/>
				<xs:element ref="ConIntervalReq"/>
				<xs:element ref="ConScrReq"/>
				<xs:element ref="JourneyReq"/>
				<xs:element ref="DirectTrainReq"/>
				<xs:element ref="TrainSearchReq">
					<xs:annotation>
						<xs:documentation>TrainSearch request. Request information about a train number or stations.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:choice>
			<xs:attributeGroup ref="attlist.ReqCResC"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ReqCResC">
		<xs:attribute name="ver" type="xs:string" use="required" fixed="3.2.2">
			<xs:annotation>
				<xs:documentation>Current version of the Interface. The version given in the result must match the version specified in the request.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="prod" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Free form string identifying the application that produced the xml.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="lang" use="required">
			<xs:annotation>
				<xs:documentation>Specifies the language for the request. Possible values depend on the languages contained in the actual Hafas system. Almost all versions will contain german (DE) and english (EN). Other possible values include FR, IT, DK, PL.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="DE"/>
					<xs:enumeration value="EN"/>
					<xs:enumeration value="FR"/>
					<xs:enumeration value="DK"/>
					<xs:enumeration value="IT"/>
					<xs:enumeration value="PL"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="accessId" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The id imay contain any string for identification of the user</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="LocValReq">
		<xs:annotation>
			<xs:documentation>The element LocValReq specifies the current task to be a location validation request. The response to this request will be a result container with a sequence of location validation results  (LocValRes)</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="ReqLoc"/>
			</xs:choice>
			<xs:attributeGroup ref="attlist.LocValReq"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.LocValReq">
		<xs:attribute name="id" type="xs:ID" use="required">
			<xs:annotation>
				<xs:documentation>An identifier for the current request. The id will be repeated in the corresponding LocValRes, So if there are multiple LocValReq elements in the request, this id can be used to find the corresponding result.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="maxNr">
			<xs:simpleType>
				<xs:annotation>
					<xs:documentation>Maximum number of matched locations to return in the LocValRes, if the input can not be matched exactly. Currently, this number must be in the range of 1 to 50.</xs:documentation>
				</xs:annotation>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="1"/>
					<xs:maxInclusive value="50"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="sMode" default="1">
			<xs:annotation>
				<xs:documentation>searchMode describes the methods that hafas shall use to perform location validation. At the moment, possible values are 1=Hafas internal, 2=Euspirit, 4 = Delfi. Combinations of the values are alloewd: 1+4=5=search Hafas pools and Delfi together. Searches for Euspirit and Combinations of Euspirit and Delfi, or Euspirit and Hafas internal will not work at the moment.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="1"/>
					<xs:maxInclusive value="7"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="ReqLoc">
		<xs:annotation>
			<xs:documentation>A request location contains, within some other informations, the string to match. For stations, the validation will be a one step process. For Adresses and Pois, the validation can be a two step process. (See elementlocValRes for further informations)</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.ReqLoc"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ReqLoc">
		<xs:attribute name="type" use="required">
			<xs:annotation>
				<xs:documentation>The attribute type specifies the type of locations to be returned. Valid values are ST (station), ADR (address), POI (point of interest) or ALLTYPE, in which case the returned locations can be of any of the types specified above.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="ST"/>
					<xs:enumeration value="ADR"/>
					<xs:enumeration value="POI"/>
					<xs:enumeration value="ALLTYPE"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="stFlag" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The attribute stFlag restricts the search to locations containing this special flag. This is an optional attribute. In most cases there will be no need to fill in this attribute. (To be continued: specify the values that are valid for this flag)</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refine" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The attribute refine must be filled, if a refinement of the returned location is nessessary. (For addresses or pois). If a refinement is nessessary, the LocValReq will contain ReqLoc elements with the refinement attribute set to whatever is nessessary to perform the refinement step. These ReqLoc elements can be taken as input for subsequent LocValReq steps. This attribute is optional.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="match" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The attribute match takes the userinput to be matched with the Hafas ngramm search algorithm. This is an optional attribute. In a request location either match, or refinement should be set, but not both at the same time.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" type="xs:string">
			<xs:annotation>
				<xs:documentation>The element output will be ignored in requests. if an element ReqLoc is returned in a LocValRes, the attribute output is filled with the output name of the meta location. This enables the requesting application to present the user a name for the location to be refined.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="LocValRes">
		<xs:annotation>
			<xs:documentation>The LocValRes takes matched locations, returned by Hafas as a response to a LocValReq. In case of Address, Poi or Station, these Locations can 	ectly be taken as part of a subsequent connectionrequest (ConReq). If the returned element is a ReqLoc, this location may not be inserted into a ConReq, but must be refined. This means that another LocValReq step must be performed, if the user selects this location. The ReqLoc therefore must be inserted as is into this subsequent LocValReq. (The ReqLoc will have filled the attribute refine instead of match, telling Hafas to perform a refinement step instead of the initial request.) A single LocValRes can can contain any type of Location in an arbitrary order.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Err" minOccurs="0" maxOccurs="unbounded"/>
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:choice>
						<xs:element ref="Address"/>
						<xs:element ref="Poi"/>
						<xs:element ref="Station"/>
					</xs:choice>
					<xs:element ref="ReqLoc"/>
				</xs:choice>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.LocValRes"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.LocValRes">
		<xs:attribute name="id" type="xs:ID" use="required">
			<xs:annotation>
				<xs:documentation>The attribute id ist the id supplied in the corresponding LocValReq.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="flag" use="required">
			<xs:annotation>
				<xs:documentation>The attribute flag indicates, whether the contained locations are ready to perform a subsequent ConReq (FINAL), if a refinement step has to be performed (META) or if both possibilites occur within the result (MIXED)</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="META"/>
					<xs:enumeration value="FINAL"/>
					<xs:enumeration value="MIXED"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Err">
		<xs:annotation>
			<xs:documentation>If an error occurs, the element Err indicates the type of the error and a descriptive text. This text is meant to be used for logging purposes or other internal use. Normally this message should not be presented to the user.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.Err"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="IndividualTransportParameters">
		<xs:attribute name="type">
			<xs:annotation>
				<xs:documentation>The attribute type specifies the type of individual transport to use for pre/post trip. Possible values are FOOT, BIKE, TAXI, PARKANDRIDE (only stations with P+R parking areas are searched, currently not used) , CAR</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="FOOT"/>
					<xs:enumeration value="BIKE"/>
					<xs:enumeration value="TAXI"/>
					<xs:enumeration value="PARKANDRIDE"/>
					<xs:enumeration value="CAR"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="minDist" use="required">
			<xs:annotation>
				<xs:documentation>The minimum distance in meters. For different means of transport, different minimum distances can be set. For foot this should usually be set to 0, for cars a higher distance should be used</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="maxDist" use="required">
			<xs:annotation>
				<xs:documentation>The maximum distance in meters. With minDist and maxDist, you can specify a range, valid for the current means of transportation, so for foot a range of 0 to 2000 meters could be set, for bike a range of 1000 to 5000 and for car/taxi a range of 3000-10000. According to the distance between the starting point and the stations found, the appropriate means of transport will be chosen. </xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="max_duration" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum duration in minutes.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="cost" use="optional">
			<xs:annotation>
				<xs:documentation>Cost per kilometer in EURO cents.(currently not used)</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="speed" use="optional">
			<xs:annotation>
				<xs:documentation>Speed in km/h (currently not used)</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="attlist.Err">
		<xs:attribute name="code" type="xs:token" use="required">
			<xs:annotation>
				<xs:documentation>The attribute code contains an identifier for the current error. This code is meant to be used by the application. A list containing possible errorcodes will be available in a separate document.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="text" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The attribute text specifies a human readable description of the current error.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="level" default="E">
			<xs:annotation>
				<xs:documentation>The attribute level specifies the importance of the current error. Valid values are M for messages, W for warnings, E for errors and F for fatal errors.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="M"/>
					<xs:enumeration value="W"/>
					<xs:enumeration value="E"/>
					<xs:enumeration value="F"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:complexType name="ConBasicReq">
		<xs:sequence>
			<xs:element ref="Start"/>
			<xs:element ref="Dest"/>
			<xs:element ref="Via" minOccurs="0" maxOccurs="3"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="FilterList">
		<xs:annotation>
			<xs:documentation>The element FilterList contains one or several possible filters to restrict the connection result.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ConReqAttrFilter">
					<xs:annotation>
						<xs:documentation>The element ConReqAttrFilter is an attribute filter, which can be applicated on trains, stations, walks or combined.
Use the following parameters for carriage of bicycles:  mode="1" type="EXC" value="VT:VN:aq"
Use the following parameters for group travel:  mode="1" type="EXC" value="GN"</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="ConReqAttrFilter">
		<xs:annotation>
			<xs:documentation>The element ConReqAttrFilter is an attribute filter, which can be applicated on trains, stations, walks or combined.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.ConReqAttrFilter"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ConReqAttrFilter">
		<xs:attribute name="mode" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>The attribute mode stands for requested attribute mode: 1 - train, 2 - foot, 3 train or foot, 4 - station, 5 - train or station, 6 - foot or station, 7 - train or foot or station. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" use="required">
			<xs:annotation>
				<xs:documentation>The attribute type describes an excluded or included attribute.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="INC"/>
					<xs:enumeration value="EXC"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="value" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The attribute value contains one or several attribute name to search for. If several attributes are given, they are separated with colon sign ":". For instance:"X1:Y1" </xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="PlanDataReq">
		<xs:annotation>
			<xs:documentation>The element PlanDataReq specifies request with aid of you get plan data in the form of Locations</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="connectionPoolsOnly" type="xs:boolean" use="required">
				<xs:annotation>
					<xs:documentation>The attribute connectionPoolsOnly, if set to true, specifies that only connection pools are going to be scanned in th plandata. If the attribute is set to false, all pools are going to be scanned</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="eliminateDoubleStations" type="xs:boolean" use="required">
				<xs:annotation>
					<xs:documentation>The attribute eliminateDoubleStations, if set to true, specifies that external station numbers occur once. If the attribute is set to false, external station number can occur twice</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="poolNumber" type="xs:int" use="optional">
				<xs:annotation>
					<xs:documentation>The attribute poolNumber speicifies that given poolNumber is going to be searched for station numbers. In this case information in attribute connectionPoolsOnly is going to be rejected</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="ConReq">
		<xs:annotation>
			<xs:documentation>The element ConReq specifies an initial connection request (opposed to the element ConScrReq, that specifies a subsequent scroll request based on this initial request).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Start"/>
				<xs:element ref="Dest"/>
				<xs:element ref="Via" minOccurs="0" maxOccurs="5"/>
				<xs:element ref="ReqT"/>
				<xs:element ref="RFlags"/>
				<xs:element ref="GISParameters" minOccurs="0"/>
				<xs:element ref="ECOParameters" minOccurs="0"/>
				<xs:element ref="FilterList" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="needReqParamInResult" use="optional" default="0">
				<xs:annotation>
					<xs:documentation>If this attribute is set to 1, the connection result will contain the ConReq-XML.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="needServiceBitfield" use="optional" default="0">
				<xs:annotation>
					<xs:documentation>If this attribute is set to 1, the connection result returns the traffic days in a bitfield. Each position represents a traffic day. A 1 represents the information, that the traffic runs at the corresponding day. A 0 represents the information, that the traffic don't run at the corresponding traffix day. The first position in the bitfield represents the first day of the timetable period. The last position the last day in the timetable period.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="GISParameters">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Front" minOccurs="0"/>
				<xs:element ref="Back" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Front">
		<xs:annotation>
			<xs:documentation>The means of transport choosen in the front section are used to travel from the starting point to the first station of a journey.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence minOccurs="0">
				<xs:element ref="IndividualTransport" maxOccurs="5"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Back">
		<xs:annotation>
			<xs:documentation>The means of transport choosen in the Back section are considered when travelling from the last station to the destination address.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence minOccurs="0">
				<xs:element ref="IndividualTransport" maxOccurs="5"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="IndividualTransport">
		<xs:complexType>
			<xs:attributeGroup ref="IndividualTransportParameters"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ConScrReq">
		<xs:annotation>
			<xs:documentation>ConScrReq specifies a connection scroll request based on a previously performed ConReq. It takes a ConResCtxt supplied by the ConRes (as the answer to this previously performed ConReq)</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ConResCtxt"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.ConScrReq"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ConScrReq">
		<xs:attribute name="scrDir" default="F">
			<xs:annotation>
				<xs:documentation>The attribute scrDir specifies the scroll direction relative to the previously received ConRes. A value of B will retrieve the connections preceeding the connections of this ConRes. A value of F will retrieve the connection following the connections in this ConRes. A value of I will retrieve the same connections once again. The option I is for future use and will not work in this version of the interface. If supplied, an error message will be  returned.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="B"/>
					<xs:enumeration value="F"/>
					<xs:enumeration value="I"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="nrCons" use="required">
			<xs:annotation>
				<xs:documentation>nrCons specifies the number of connections to be returned in the ConRes containing the answer of the current ConScrReq. Please keep in mind that there can be returned fewer connections (in which case the result will contain an Err element specifying the reason for this behaviour). In some cases the Hafas algorithm will calculate more tan the requested number of connections. This is due to te fact, that the HAFAS algorithm apart from returning the best connections additionally calculates more comfortable connections, which will be returned as well. This is a basic feature of the Hafas algorithm.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Start" type="StartViaType">
		<xs:annotation>
			<xs:documentation>The element Start contains the Startlocation for  the current connection request. This might either be a Station, Adress or Poi, as returned by a previously obtained location validation result (LocValRes), or a userspecified coordinate (Coord) which does not require a location validation.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Via" type="ViaType">
		<xs:annotation>
			<xs:documentation>The Via element specifies a Station that has to be passed during the journey. There can be specified up o three Via elements in the request.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Dest" type="RequestLocationType">
		<xs:annotation>
			<xs:documentation>The element Dest specifies the destination of the  journey. As in the Start element there can be supplied Station, and Coord elements.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ViaType">
		<xs:sequence>
			<xs:element ref="Station"/>
			<xs:element ref="Prod"/>
		</xs:sequence>
		<xs:attributeGroup ref="attlist.RequestLocationRef"/>
	</xs:complexType>
	<xs:complexType name="StartViaType">
		<xs:complexContent>
			<xs:extension base="RequestLocationType">
				<xs:sequence>
					<xs:element ref="Prod"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RequestLocationType">
		<xs:choice>
			<xs:element ref="Address"/>
			<xs:element ref="Poi"/>
			<xs:element ref="Station"/>
			<xs:element ref="Coord"/>
		</xs:choice>
		<xs:attributeGroup ref="attlist.RequestLocationRef"/>
	</xs:complexType>
	<xs:attributeGroup name="attlist.RequestLocationRef">
		<xs:attribute name="min">
			<xs:annotation>
				<xs:documentation>The attribute min is given in minutes. For the Start and the Dest, min specifies pre- and post trip times (for example a walk time to the specified location). For the element Via, min specifies the change time (the amount of time a passenger wants to stay at the specified via, before continuing the travel). There is a maximum of 48 hours (2880 minutes) that the change time must not exceed.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Prod">
		<xs:annotation>
			<xs:documentation>The element Prod contains the product choice and related things. The element prod is placed within the Start ans the Via elements. The product choice defined in Prod is valid for the section of the Journey, that starts at the current location and ends at the next Via or Dest element.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.Prod"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.Prod">
		<xs:attribute name="prod">
			<xs:annotation>
				<xs:documentation>The attribute prod contains a product filter. Each means of transportation belongs to a product category. The product category of a means of transport is dependent on the data used with the current Hafas system. The concrete definements are placed in the file zugart of the Hafas raw data. There is a maximum of 16 product categories (0 - 15) in the Hafas system. The element prod contains a bitfield for these product categories. The first byte represents category 0, the second category 1, and so on. A 1 means that the category is selected for the search, a 0 means deselected. For example prod="1111000000000000" selects the categories 0 to 3 and deselects all other categories.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:pattern value="[01]{16}"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="direct" default="0">
			<xs:annotation>
				<xs:documentation>Valid values are 0 and 1. if direct is set to 1,  this means, that on the current section of the journey only direct connections are allowed. A value of 0 allows changes in this section.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="sleeper" default="0">
			<xs:annotation>
				<xs:documentation>If set to 1, on this section only night trains  containing beds are allowed. In this case, the direct flag will be set to one implicitly. The default is 0 to allow for searches of all sorts of trains.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="couchette" default="0">
			<xs:annotation>
				<xs:documentation>If set to 1, in this section only night trains containing couchettes are allowed. In this case the direct flag is set to 1 implicitly. The default is 0 to allow searches for all sorts of trains.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="ReqT">
		<xs:annotation>
			<xs:documentation>ReqT contains the request time for the current request.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.ReqT"/>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="ReqTType">
		<xs:annotation>
			<xs:documentation>ReqTType contains the request time for the current
				request.</xs:documentation>
		</xs:annotation>
		<xs:attributeGroup ref="attlist.ReqT"/>
	</xs:complexType>
	<xs:element name="ReqIT">
		<xs:annotation>
			<xs:documentation>ReqInterval is a time interval (a departure time interval if a=0 or an arrival time interval if a=1). For further explanation on the limits of intervals see annotations on attribute iDuration.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ReqTType">
					<xs:attribute name="iDuration" use="required">
						<xs:annotation>
							<xs:documentation>ReqTimeInterval will be considered to be a time interval with a length according to iDuration in minutes. Depending on a-attribute the interval will be from (date,time) forwards to (date,time+iDuration) for a=0 (departure time interval) - or from (date,time) backwards to (date,time-iDuration) for a=1 (arrival time interval). The limitation is 1440 minutes.
</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ReqT">
		<xs:attribute name="time" use="required">
			<xs:annotation>
				<xs:documentation>The attribute time contains the request time. The format is: hh:mm</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:pattern value="[0-9][0-9][:][0-9][0-9]"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="date" use="required">
			<xs:annotation>
				<xs:documentation>The attribute date contains the request date. The format is: yyyymmdd</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:pattern value="[2][0-9][0-9][0-9][0-1][0-9][0-3][0-9]"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="a" default="0">
			<xs:annotation>
				<xs:documentation>The attribute a specifies the current request time to be an arrival time (if set to 1) or a departure time (if set to 0). Default is 0.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="RFlags">
		<xs:annotation>
			<xs:documentation>RFlags specifies some essential request flags passed to the Hafas kernel.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="b">
				<xs:annotation>
					<xs:documentation>The attribute b specifies the number of connections to find in searchdirection backward. This means connections starting/ending (depends on the value of the attribute a) before the time specified in ReqT. The number must not be below zero and must not exceed 6.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="f">
				<xs:annotation>
					<xs:documentation>The attribute f specifies the number of connections to find in searchdirection forward. This means connections starting/ending (depends on the value of the attribute a) after the time specified in ReqT. The number must not be below zero and must not exceed 6.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="attlist.BasicRFlags"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.BasicRFlags">
		<xs:attribute name="nrChanges">
			<xs:annotation>
				<xs:documentation>Number of changes. If this optional attribute is given, it restricts the number of changes for the current request. Possible values are from 0 (only direct connections) to 6. If the attribute is not given, the number of changes is not restricted.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:int">
					<xs:minInclusive value="0"/>
					<xs:maxInclusive value="6"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="chExtension" use="optional" default="0">
			<xs:annotation>
				<xs:documentation>The attribute chExtension offers a percentual extension of the changetime. Valid values are from 0 (no extension) to 400 (changeTime*5). It is not possible to decrease change times.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:int">
					<xs:minInclusive value="0"/>
					<xs:maxInclusive value="400"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="minChTime" use="optional" default="0">
			<xs:annotation>
				<xs:documentation>The attribute minChTime can be used to specify a minimal change time.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="0"/>
					<xs:maxInclusive value="400"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="maxChTime" use="optional" default="0">
			<xs:annotation>
				<xs:documentation>The attribute maxChTime can be used to specify a maximal change time.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="0"/>
					<xs:maxInclusive value="400"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="sMode" use="optional" default="N">
			<xs:annotation>
				<xs:documentation>The attribute sMode specifies a search mode. Valid values are N for normal search and P for economic search. The default is N.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="N"/>
					<xs:enumeration value="P"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unsharp" type="xs:token" use="optional" default="0">
			<xs:annotation>
				<xs:documentation>If set to 1, also alternative stations near the departure/arrival station are taken into account.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="RIFlags">
		<xs:annotation>
			<xs:documentation>RIFlags specifies some essential request flags passed to the HAFAS kernel in case of a ConIntervalReq.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="maxCons" use="optional" default="0">
				<xs:annotation>
					<xs:documentation>The attribute maxCons specifies the number of connections to find in case of an interval-based connection search.  The number must not be below zero and must not exceed 127. Effectively this represents an additional termination criteria: the connection search will terminate either if the interval end is reached or if maxCons connections are found. Default is "0" (no termination based on number of connections found).</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:int">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="127"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="attlist.BasicRFlags"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ResC">
		<xs:annotation>
			<xs:documentation>ResC is the container for any type of results, calculated by the Hafas server.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Err" minOccurs="0" maxOccurs="unbounded"/>
				<xs:choice>
					<xs:element ref="ConRes"/>
					<xs:element ref="LocValRes" maxOccurs="unbounded"/>
					<xs:element ref="STBRes"/>
					<xs:element ref="JourneyRes"/>
					<xs:element ref="TrainSearchRes"/>
				</xs:choice>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.ReqCResC"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ConRes">
		<xs:annotation>
			<xs:documentation>A ConRes is the connection result. This Type of result is returned as a resonse to a connection request (ConReq) or a connection scroll request (ConScrReq).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Err" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="ConResCtxt" minOccurs="0"/>
				<xs:element ref="ConnectionList" minOccurs="0" maxOccurs="2"/>
				<xs:element name="ReqParam" minOccurs="0">
					<xs:annotation>
						<xs:documentation>If requested, this element will contain the XML from the connection request as xml encoded text.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.ConRes"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ConRes">
		<xs:attribute name="dir" use="required">
			<xs:annotation>
				<xs:documentation>dir represents the direction that the result represents. O means outward connections, R means retuen connections. Currently only outward connections are calculated, so this value will be set to O.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="O"/>
					<xs:enumeration value="R"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="firstConDiffersFromReqDate" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>This flag indicates that the departure date of the first connection in the result differs from the requested date of the connection.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="ConnectionList">
		<xs:annotation>
			<xs:documentation>The ConnectionList element is the container for all connections calculated by the Hafas server.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Err" minOccurs="0"/>
				<xs:element ref="Connection" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.ConnectionList"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ConnectionList">
		<xs:attribute name="type" use="optional">
			<xs:annotation>
				<xs:documentation>OEV public transport, IV individual transport</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="OEV"/>
					<xs:enumeration value="IV"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="ConResCtxt">
		<xs:annotation>
			<xs:documentation>The element ConResCtxt is part of a ConRes. For a subsequent ConScrReq, the ConResCtxt must be supplied as a part of the request..</xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="attlist.ConResCtxt"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ConResCtxt">
		<xs:annotation>
			<xs:documentation>The attribute b specifies, whether backward scrolling is possible (1=yes, 0=no), the attribute f specifies whether forward scrolling is possible (1=yes, 0=no)</xs:documentation>
		</xs:annotation>
		<xs:attribute name="b" default="1">
			<xs:annotation>
				<xs:documentation>The element ConResCtxt contains informations about the session used. The ConResCtxt must be inserted in sbsequent connection scroll requests. Based on this information, the data needed to perform such a request will be read from the corresponding spoolfile.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="f" default="1">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Date" type="xs:string">
		<xs:annotation>
			<xs:documentation>The element date contains the base date for a connection. The base date is the date at which the conection starts. All time elements refer to the base date.
In requests (DirectTrainReq) the format must be: yyyymmdd.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="TimeType">
		<xs:sequence>
			<xs:element ref="Time" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="Time">
		<xs:annotation>
			<xs:documentation>The format of the Time element is [dd:]hh:mm. dd represents a day offset. All offsets are relative to the base date of the connection. For example a time 01:12:30 means 12:30 at the first day following the day specified as the base date in the Date element in the Overview section of the connection.</xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true"/>
	</xs:element>
	<xs:attributeGroup name="attlist.Time">
		<xs:attribute name="delay">
			<xs:annotation>
				<xs:documentation>This attribute is not used at the moment.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Coord" type="LocationType">
		<xs:annotation>
			<xs:documentation>The Coord element represents a coordinate. In connection requests, the Coord element can be used to describe the start and the destination of a request. Coord elements can not be obtained via a LocValReq, instead the user is responsible to create valid Coord elements. the format is WGS84 multiplied with 1000000 </xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="LocationType">
		<xs:attributeGroup ref="attlist.Location"/>
	</xs:complexType>
	<xs:attributeGroup name="attlist.Location">
		<xs:attribute name="name" type="xs:string">
			<xs:annotation>
				<xs:documentation>The attribute name contains the output name of a location.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="x" type="xs:integer">
			<xs:annotation>
				<xs:documentation>The x-coordinate of the location.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="y" type="xs:integer">
			<xs:annotation>
				<xs:documentation>The y-coordinate of the location.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="z" type="xs:integer">
			<xs:annotation>
				<xs:documentation>The z-coordinate is currently not used.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" default="WGS84">
			<xs:annotation>
				<xs:documentation>currently WGS84 only</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:annotation>
					<xs:documentation>The attribute type specifies the format of the coordinate. WGS84 is the default and the preferred format.</xs:documentation>
				</xs:annotation>
				<xs:restriction base="xs:token">
					<xs:enumeration value="HAFAS_GEO"/>
					<xs:enumeration value="HAFAS_HANNOVER"/>
					<xs:enumeration value="WGS84"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:complexType name="StationType">
		<xs:complexContent>
			<xs:extension base="LocationType">
				<xs:attributeGroup ref="attlist.StationType"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Station" type="StationType">
		<xs:annotation>
			<xs:documentation>A station</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:attributeGroup name="attlist.StationType">
		<xs:attribute name="distance">
			<xs:annotation>
				<xs:documentation> The attribute distance contains the distance in meters to given station. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="duration">
			<xs:annotation>
				<xs:documentation> The attribute duration contains the duration of walk in seconds to given station. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="externalId">
			<xs:annotation>
				<xs:documentation>The externalId contains an identifier for the current station/Address/POI. This identifier can only be used for subsequent XML-Requests. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="externalStationNr">
			<xs:annotation>
				<xs:documentation>The attribute externalStationNr contains the EVA-ID for the current station. This attribute will not be present for Adresses, POIs and stations found in the delfi context. If nessessary, this id can be used in subsequent HTML-based requests.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Address" type="StationType">
		<xs:annotation>
			<xs:documentation>An address.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Poi" type="StationType">
		<xs:annotation>
			<xs:documentation>A Point of Interest.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Text">
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="attlist.Text"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.Text">
		<xs:attribute name="lang">
			<xs:annotation>
				<xs:documentation>The attribute lang specifies the language of the current text element. Possible values are data dependant(see ReqC.lang)</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="DE"/>
					<xs:enumeration value="DK"/>
					<xs:enumeration value="EN"/>
					<xs:enumeration value="FR"/>
					<xs:enumeration value="PL"/>
					<xs:enumeration value="IT"/>
					<xs:enumeration value="MACRO"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="NamedValue">
		<xs:annotation>
			<xs:documentation>A named value is used to specify generic extensions. The attribute name specifies the name of the element, the attribute valuetakes the corresponding value.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.NamedValue"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.NamedValue">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="value" type="xs:string" use="required"/>
	</xs:attributeGroup>
	<xs:element name="ServiceDays">
		<xs:annotation>
			<xs:documentation>The element ServiceDays specifies the days, the current connection is served. There are two representations of the servicedays. The ServiceBits take a bitfield of the servicedays. In addition there is a textual description of the servicedays, separated into regular servicedays (Mo-Fr) and irregular servicedays (not 24., 25, 26. Dez...) The textual description is given in a macro language, where all language specific parts are substituted with macros of the form $(vt&lt;xy&gt;) </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ServiceBits" minOccurs="0"/>
				<xs:element ref="RegularServiceText" minOccurs="0"/>
				<xs:element ref="IrregularServiceText" minOccurs="0"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.ServiceDays"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ServiceBits" type="xs:string"/>
	<xs:element name="RegularServiceText">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Text" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="IrregularServiceText">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Text" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ServiceDays">
		<xs:attribute name="from" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>The attribute "from" characterizes the start index of the validity of the days of service concerning  the pass list .</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="to" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>The attribute "to" characterizes the end index of the validity of the days of service concerning  the pass list .</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Attribute">
		<xs:annotation>
			<xs:documentation>Attributes describe the characteristics of a ConSection, such as the name of the means of transport, the category of the means of transport, general attributes like Bord Restaurant, Reservation required and other characteristics. For a detailed description of the different attributes see the attribute type. Some types of attributes can have different attribute variants (NORMAL, SHORT and LONG), containing different Levels of information.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="AttributeVariant" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.Attribute"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.Attribute">
		<xs:attribute name="priority">
			<xs:annotation>
				<xs:documentation>Attributes of type NORMAL do have a priority, describing the importance of the current attribute. Therange for the priority is 0 - 999. lower values have a higher priority, so 0 is the most important priority. </xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="0"/>
					<xs:maxInclusive value="999"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="type" default="NORMAL">
			<xs:annotation>
				<xs:documentation>There is a variety of different attributetypes, specifying different characteristics of the current consection. Attributes of type NORMAL specify classical train attributes like BordRestaurant, Carriage of Bicycles etc. Attributes of type DIRECTION show the direction of a train, this can either be the name of the destination station or the external Id of the station, depending on the underlying data. Not all means of transportation do have a DIRECTION entry. CATEGORY specifies the the category of the train. Attributevariants of type SHORT show the internally used description of the category and has a maximum length of eight characters. Attributevariants of type NORMAL show the output category of the train and also has a maximum length of eight characters, this should be used for output. Attributevariants of type LONG take a more detailed description (like Intercity Express). Dependant on the data, the Attributevariants of type NORMAL and LONG might not be available, in which case the output of the category should be suppressed. Attributes of type INTERNALCATEGORY... Attributes of type OPERATOR contain a description of the operator of the train. Attributes of type NAME take the name of the means of transport. Attributes of Type NAMEFORMATTED contain the name of the means of transport, defined in the zugart file. The code value contains the index of the formatted name while the attribute variant of type normal contain the actual formatted name. NAMEFORMATTED attributes with code equal to 1 contain the name for the connection overview page (travel with column) in the oFpl. NAMEFORMATTED attribute with a code value of 2 contain the name in the comment column in the oFpl and so on. Please note that some rare cases the means of transport	does not have a name (for example any english trains do not have names in the data), in which case the attribute will	not be printed out. Attributes of type NUMBER take the external train number. ICON contains the iconname. Attributes of type EXT_ID contains the external id of the mean of transport from the data. Attributes of type LINE contains	the line name, if the ride is a line, e. g. a Tram. Attributes of type ADMINISTRATION contains the administration info for the train.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="NORMAL"/>
					<xs:enumeration value="DIRECTION"/>
					<xs:enumeration value="CATEGORY"/>
					<xs:enumeration value="INTERNALCATEGORY"/>
					<xs:enumeration value="OPERATOR"/>
					<xs:enumeration value="NAME"/>
					<xs:enumeration value="NAMEFORMATTED"/>
					<xs:enumeration value="NUMBER"/>
					<xs:enumeration value="LINE"/>
					<xs:enumeration value="EXT_ID"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="code">
			<xs:annotation>
				<xs:documentation>The attribute code will be available for attributes of type NORMAL and CATEGORY. For Attributes of type NORMAL it represents the internal two-byte code of the ATTRIBUTE. For attributes of type NAMEFORMATTED the code value contains the index of the name format. NAMEFORMATTED attributes with a code value of 1 contain the train name formatted using the first format as defined in the zugart file while a code value of 2 indicate that the second format was used to format the train name.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:maxLength value="2"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="AttributeVariant">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Text" maxOccurs="3"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.AttributeVariant"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.AttributeVariant">
		<xs:attribute name="type" default="NORMAL">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="SHORT"/>
					<xs:enumeration value="NORMAL"/>
					<xs:enumeration value="LONG"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Connection">
		<xs:annotation>
			<xs:documentation>The element Connection is a container for all the data belonging to one connection.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="RtStateList" minOccurs="0"/>
				<xs:element ref="Overview"/>
				<xs:element ref="ConSectionList" minOccurs="0"/>
				<xs:element ref="IList" minOccurs="0"/>
				<xs:element ref="CommentList" minOccurs="0"/>
				<xs:element ref="AltConList" minOccurs="0"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.Connection"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="RtStateList">
		<xs:annotation>
			<xs:documentation>RtStateList contains one or more possible "RtState" elements</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="RtState" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="RtState">
		<xs:annotation>
			<xs:documentation>The element RtState characterizes one possible real time state of a connection.   </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="value" use="optional" default="NORMAL">
				<xs:annotation>
					<xs:documentation>The attribute value indicates, whether realtime data for the connection are avaiable</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="NORMAL">
							<xs:annotation>
								<xs:documentation>The value "NORMAL" must not  appear. It means the connection is based on schedule data.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="WARNING">
							<xs:annotation>
								<xs:documentation>The value "WARNING" that there is partial failure, or partial failure at departure stop or failure at arrival.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="HAS_ALTERNATIVE">
							<xs:annotation>
								<xs:documentation>The value "HAS_ALTERNATIVE" means this connection has an alternative connection.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="IS_ALTERNATIVE">
							<xs:annotation>
								<xs:documentation>The value "HAS_ALTERNATVIE" means this connection is the alternative connection to given.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="NO_RT_INFO">
							<xs:annotation>
								<xs:documentation>The value "NO_RT_INFO" is reserved for future use.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="HAS_DELAYINFO">
							<xs:annotation>
								<xs:documentation>The value "HAS_DELAYINFO" is written out if the connection has a delay.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="WARNING_TRANSFER">
							<xs:annotation>
								<xs:documentation>The value "WARNING_TRANSFER" appears if transfer is not possbile because of delay.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="WARNING_CONNECTION_NOT_RIDABLE">
							<xs:annotation>
								<xs:documentation>The value "WARNING_CONNECTION_NOT_RIDABLE" means, that the connection is not ridable. The reason for it can be, that a change is not possible.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.Connection">
		<xs:attribute name="id" type="xs:ID" use="required">
			<xs:annotation>
				<xs:documentation>Every connection is given an identifier. This identifier is guaranteed to be unique within the complete session which means, that the connections returned for an initial ConReq and for subsequent ConScrReq requests all get a different identifier.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Duration" type="TimeType">
		<xs:annotation>
			<xs:documentation>The element Duration contains the duration of the current connection in the format hh:mm</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Transfers" type="xs:string">
		<xs:annotation>
			<xs:documentation>The element Transfers contains the number of transfers in the current connection. Walks will not be counted: Train-&gt;Walk-&gt;Train counts a one transfer. As the maximum number of conCsection within a connection is 12, the maximum number of transfers is 11. the minimum is of course 0 for direct connections</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Overview">
		<xs:annotation>
			<xs:documentation>The element overview takes all relevant elements to display an overview of the connection. This includes Date (the base date), Departure, Arrival, Transfers, Duration, ServiceDays and ContextURL. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Date"/>
				<xs:element ref="Departure"/>
				<xs:element ref="Arrival"/>
				<xs:element ref="Transfers"/>
				<xs:element ref="Duration"/>
				<xs:element ref="ServiceDays"/>
				<xs:element ref="Products"/>
				<xs:element ref="ContextURL" minOccurs="0"/>
				<xs:element ref="XMLHandle" minOccurs="0"/>
				<xs:element ref="ECOResEnvironmentalImpact" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Products">
		<xs:annotation>
			<xs:documentation>The Products section shows the product categories, used in the current connection.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Product" maxOccurs="12"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Product">
		<xs:complexType>
			<xs:attributeGroup ref="attlist.Product"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.Product">
		<xs:attribute name="cat" type="xs:string"/>
	</xs:attributeGroup>
	<xs:element name="ContextURL">
		<xs:annotation>
			<xs:documentation>The element ContextURL takes an URL that generates a more detailed view of the connection specified in the overview. If you need this element please contact  us. By default, this element will not be available.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.ContextURL"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.ContextURL">
		<xs:attribute name="url" type="xs:anyURI" use="required"/>
	</xs:attributeGroup>
	<xs:element name="XMLHandle">
		<xs:annotation>
			<xs:documentation>The element XMLHandle takes an URL that generates ticketing integration url. It has following appearance:			[environmentUrl]/query.exe/dn?showXml=1&amp;xmlId= [identNr]:[seqNr]:[conId] </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.XMLHandle"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.XMLHandle">
		<xs:attribute name="url" type="xs:anyURI" use="required"/>
	</xs:attributeGroup>
	<xs:element name="ConSectionList">
		<xs:annotation>
			<xs:documentation>The ConSectionList is a container for the consections that form the connection. A connecton can have a maximum of 12 ConSections. Sections of type Walk and Transfer are counted as a ConSection.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ConSection" maxOccurs="12"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="ConSection">
		<xs:annotation>
			<xs:documentation>A ConSection consists of a Departure an Arrival and an element Journey, Walk, Transfer or GisRoute, giving more informations about the current ConSection.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Departure"/>
				<xs:choice>
					<xs:element ref="Journey"/>
					<xs:element ref="Walk"/>
					<xs:element ref="Transfer"/>
					<xs:element ref="GisRoute"/>
				</xs:choice>
				<xs:element ref="Polyline" minOccurs="0"/>
				<xs:element ref="Arrival"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Departure">
		<xs:annotation>
			<xs:documentation>The departure location of a ConSection</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="BasicStop"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Arrival">
		<xs:annotation>
			<xs:documentation>The arrival location of a ConSection</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="BasicStop"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="BasicStop">
		<xs:annotation>
			<xs:documentation>The element BasicStop represents a Location, as a part of the current ConSection. It contains a Location (Station, Address, Poi) together with the arrival and departure times at this location, as well as some other information like platforms.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="StAttrList" minOccurs="0"/>
				<xs:choice>
					<xs:element ref="Address"/>
					<xs:element ref="Poi"/>
					<xs:element ref="Station"/>
				</xs:choice>
				<xs:element ref="Arr" minOccurs="0"/>
				<xs:element ref="Dep" minOccurs="0"/>
				<xs:element name="StopPrognosis" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Prognosis data for the trains</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="Arr" minOccurs="0"/>
							<xs:element ref="Dep" minOccurs="0"/>
							<xs:element name="Status" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Possible values are: DISABLED - no messages will be shown. REDIRECTION - the train is redirected, the train passes additional stops or one or some stops can not be served. SCHEDULED - the train is in time. FAILURE - train failure via real time.  PARTIAL_ACTIVATION, REPLACEMENT are reserverd for future use.  PARTIAL_FAILURE - a part of track can not be served.   PARTIAL_FAILURE_AT_DEP - identifies partial failure at departure station. PARTIAL_FAILURE_AT_ARR - identifies partial failure at arrival station. ADDITIONAL or NEW identicates additional train. REPLACEMENT identicates an alternative train </xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="FreeTextL" minOccurs="0">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Freetext">
											<xs:annotation>
												<xs:documentation>A freetext message is used to display reasons for a delay. If a code is given, the text belonging to the code has to be displayed. If the code is unknown, no text shall be displayed. Only if no code is given, the Text element has to be used.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:choice>
													<xs:element ref="Text"/>
													<xs:element name="Code"/>
												</xs:choice>
												<xs:attribute name="validFor">
													<xs:annotation>
														<xs:documentation>ARR: only to be displayed, if the arrival delay is displayed. DEP: only to be displayed, if the departure delay is displayed. BOTH The Freetext is valid for Aiirval delays and departure delays</xs:documentation>
													</xs:annotation>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="Capacity1st" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Capacity value at departure for the 1st class. Possible values are -1 := error, 0 := "Keine Angaben", 1 := "Normale Belegung", 2 := "Hohe Belegung", 3 := "Sehr hohe Belegung"</xs:documentation>
								</xs:annotation>
								<xs:simpleType>
									<xs:restriction base="xs:integer">
										<xs:enumeration value="-1"/>
										<xs:enumeration value="0"/>
										<xs:enumeration value="1"/>
										<xs:enumeration value="2"/>
										<xs:enumeration value="3"/>
									</xs:restriction>
								</xs:simpleType>
							</xs:element>
							<xs:element name="Capacity2nd" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Capacity value at departure for the 2nd class. Possible values are -1 := error, 0 := "Keine Angaben", 1 := "Normale Belegung", 2 := "Hohe Belegung", 3 := "Sehr hohe Belegung"</xs:documentation>
								</xs:annotation>
								<xs:simpleType>
									<xs:restriction base="xs:integer">
										<xs:enumeration value="-1"/>
										<xs:enumeration value="0"/>
										<xs:enumeration value="1"/>
										<xs:enumeration value="2"/>
										<xs:enumeration value="3"/>
									</xs:restriction>
								</xs:simpleType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.BasicStop"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.BasicStop">
		<xs:attribute name="type" default="NORMAL">
			<xs:annotation>
				<xs:documentation>The attribute type classifies the BasicStop either to be a normal or a virtual stop. Virtual stops can be used to display tariff borders or national boundaries, they normally do not represent physical stops, where people can leave and enter a train.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="NORMAL"/>
					<xs:enumeration value="VIRTUAL"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="index">
			<xs:annotation>
				<xs:documentation>The attribute index specifies an index into the passlist of the current train.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="StAttrList">
		<xs:annotation>
			<xs:documentation>The element StAttrList will only be present, if there are additional informations (StAttr) concerning the current BasicStop/Location.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="StAttr" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="StAttr">
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="attlist.StAttr"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.StAttr">
		<xs:attribute name="code" type="xs:token">
			<xs:annotation>
				<xs:documentation>The attribute code can be used as an identifier for the current StationAttribute. The code is data-dependant but is supposed to be kept stable. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="text" type="xs:string">
			<xs:annotation>
				<xs:documentation>The attribute text is the description text of a StatiionAttribute</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="priority">
			<xs:annotation>
				<xs:documentation>The priority is a numeric value between 0 and 999. The priority is data-dependant. If not available, the attribute priority will not be printed out. If available, lower values have ha higher priority. For example a priority of 0 will be the highest priority. This flag can be used to classify the attributes concerning their importance.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:integer">
					<xs:minInclusive value="0"/>
					<xs:maxInclusive value="999"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="type" use="optional">
			<xs:annotation>
				<xs:documentation>The attribute type states if	 the present
							   StAttr is station attribute (value: "attr" )or an
							   info text (value:"info").  	info text
							   (value:"info").
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="info"/>
					<xs:enumeration value="attr"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Platform">
		<xs:annotation>
			<xs:documentation>The element Platform supplies information about the Departure- and Arrivalplatform at a Station. The maximum length of this string is 8 characters.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Text" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="ArrDepType">
		<xs:complexContent>
			<xs:extension base="TimeType">
				<xs:sequence>
					<xs:element ref="Platform" minOccurs="0"/>
				</xs:sequence>
				<xs:attributeGroup ref="attlist.ArrDep"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:attributeGroup name="attlist.ArrDep">
		<xs:attribute name="getOut" default="YES">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="YES"/>
					<xs:enumeration value="NO"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="getIn" default="YES">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="YES"/>
					<xs:enumeration value="NO"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="handicappedAccess" default="0">
			<xs:annotation>
				<xs:documentation>Provides the opportunity for  handicapped transport. Possible values are: 0 := no data available, 1 := indipendent access/exit, 2 := Boarding/alighting possible upon advance notice, 3 := need for help to access/exit, 4:= no wheelchair transport </xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
					<xs:enumeration value="2"/>
					<xs:enumeration value="3"/>
					<xs:enumeration value="4"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="handicappedComment" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Comment string for the handicapped status. Information will be stored in the plandata set. Detailed data delivery has to be declared by SBB/HaCon.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Dep" type="ArrDepType">
		<xs:annotation>
			<xs:documentation>Information for the departure of a train at the current BasicStop. This includes the departure time, the departure platform and the information whether it is allowed to enter the train at the current stop or not.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Arr" type="ArrDepType">
		<xs:annotation>
			<xs:documentation>Information for the arrival of a train at a current stop. This includes the arrival time, the arrival platform and the information, whether it is allowed to get out of the train at the current stop.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Journey">
		<xs:annotation>
			<xs:documentation>The element Journey contains the List with the JourneyAttributes valid for the current ConSection, as well as (optionally) a PassList containing extended Information about the passed stations.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="JHandle"/>
				<xs:element ref="JourneyAttributeList"/>
				<xs:element ref="PassList"/>
				<xs:element ref="JProg" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="JourneyAttributeList">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="JourneyAttribute" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="JourneyAttribute">
		<xs:annotation>
			<xs:documentation>A JourneyAttribute contains an element Attribute as well as validity informations for this attribute. An attribute must not be valid for the whole ConSection and it must not be valid at all the ServiceDays of the connection. So the JourneyAttribute can take two attributes from and to, specifying an index into the PassList. Every BasicStop within a PassList has an attribute index. The Attribute is valid from the BasicStop with the index matching the index given in the attribute from, to the BasicStop with the index matching the index given in the attribute to. The element SeviceDays specifies the days were the Attribute is valid. if the element ServiceDays is not given, the attribute is valid at all the servicedays of the connection. The restriction of the ServiceDays of an Attribute is not used at the moment, but may be activated in later versions of this interface.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Attribute"/>
				<xs:element ref="ServiceDays" minOccurs="0"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.JourneyAttribute"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.JourneyAttribute">
		<xs:attribute name="from" type="xs:integer"/>
		<xs:attribute name="to" type="xs:integer"/>
	</xs:attributeGroup>
	<xs:element name="Walk">
		<xs:annotation>
			<xs:documentation>A Walk is an unrouted transition with a duration of max. 15 minutes.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Duration"/>
				<xs:element ref="JourneyAttributeList" minOccurs="0"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.Walk"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.Walk">
		<xs:attribute name="length" type="xs:integer"/>
	</xs:attributeGroup>
	<xs:element name="Transfer">
		<xs:annotation>
			<xs:documentation>A Transfer is an unrouted transition with a duration of more than 15 minutes.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Duration"/>
				<xs:element ref="JourneyAttributeList" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="GisRoute">
		<xs:annotation>
			<xs:documentation>A GisRoute is an externally routed consection. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Duration"/>
				<xs:element ref="Distance" minOccurs="0"/>
				<xs:element ref="JourneyAttributeList" minOccurs="0"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.GisRoute"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.GisRoute">
		<xs:attribute name="type" use="required">
			<xs:annotation>
				<xs:documentation>The attribute type specifies the type of the individual traffic used. Valid values are: FOOT, BIKE, CAR, TAXI.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Distance">
		<xs:annotation>
			<xs:documentation>Distance in meters.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="PassList">
		<xs:annotation>
			<xs:documentation>The element PassList contains informations about the passed stops of the current ConSection. It will either contain a single BasicStop element, (Startlocation of the train for arrival boards, destination location of the train for departure boards) or the whole list of passed stops(Start  -> Main location for arrival boards, main location -> destination for departure boards) depending on the requested detail level </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="BasicStop" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="CommentList">
		<xs:annotation>
			<xs:documentation>The CommentList may contain additional informations for the current connection/consection. This feature is not used in the current version of the interface. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Comment" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Comment">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Text" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attributeGroup ref="attlist.Comment"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="AltConList">
		<xs:annotation>
			<xs:documentation>The AltConList may contain references to alternative connections (realtime).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="id" type="xs:ID" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.Comment">
		<xs:attribute name="id" type="xs:ID"/>
	</xs:attributeGroup>
	<xs:element name="Polyline">
		<xs:annotation>
			<xs:documentation>A polygon line of coordinates for the geographical description of a route.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Point" minOccurs="2" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Point">
		<xs:annotation>
			<xs:documentation>Describes a geographical point.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.Point"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.Point">
		<xs:attribute name="x" use="required">
			<xs:annotation>
				<xs:documentation>Geographical x-coordinate multiplied with 1.000.000.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="y" use="required">
			<xs:annotation>
				<xs:documentation>Geographical y-coordinate multiplied with 1.000.000.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="ConIntervalReq">
		<xs:annotation>
			<xs:documentation>ConIntervalReq specifies an initiona connection interval	request. You can request all connections between two locations wthin a given time interval. The result can be found in ConRes element. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ConBasicReq">
					<xs:sequence>
						<xs:element ref="ReqIT"/>
						<xs:element ref="RIFlags"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="STBReq">
		<xs:annotation>
			<xs:documentation>StationBoardRequest</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Time"/>
				<xs:choice>
					<xs:element ref="Period"/>
					<xs:element ref="Today"/>
				</xs:choice>
				<xs:element ref="TableStation"/>
				<xs:element ref="DirectionFilter" minOccurs="0"/>
				<xs:element ref="TrainFilter" minOccurs="0"/>
				<xs:element ref="ProductFilter" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="boardType">
				<xs:annotation>
					<xs:documentation>Type of StationBoard: ARR -> Arrivalboard, DEP -> DepartureBoard</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="ARR"/>
						<xs:enumeration value="DEP"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="Today">
		<xs:annotation>
			<xs:documentation>Stationboardrequest for the current day.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Period">
		<xs:annotation>
			<xs:documentation>A period is requested. If DateBegin and DateEnd are ommitted, a table for the whole timetableperiod is generated. If DateBegin is ommitted, the current date is taken as the begin of the period. If DateEnd is ommitted, the end of the timetable period is  taken as the end of the requested period</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="DateBegin" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="Date"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="DateEnd" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="Date"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="TableStation" type="StationType">
		<xs:annotation>
			<xs:documentation>Thie requested Station. This element must be filled with the results from a previously performed location validation request. Only stations are allowed as input here</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="DirectionFilter" type="StationType">
		<xs:annotation>
			<xs:documentation>The directionfilter restricts the table to trains that pass the given station.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="TrainFilter">
		<xs:annotation>
			<xs:documentation>The trainFilter takes a category (IC, RE, ...) or a complete train name. The output is restricted to trains, that match the given category / name. </xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="ProductFilter">
		<xs:annotation>
			<xs:documentation>Filter for product classes. The output is restricted to product classes that are enabled here. If no ProductFilter is given, trains of all productclasses will be returned. The productfilter is a string of 0 and 1, where each numer stands for a product class, based on the position of the number in the  string. The leftmost number represents productclass 0, the next productclass 1 etc. Example: 111000 enables the productclasses 0,1, 2</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="STBRes">
		<xs:annotation>
			<xs:documentation>Result of a stationboard request (STBReq)</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="Err"/>
				<xs:sequence>
					<xs:element ref="JourneyList" minOccurs="0"/>
					<xs:element ref="IList" minOccurs="0"/>
				</xs:sequence>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="JourneyList">
		<xs:complexType>
			<xs:sequence maxOccurs="unbounded">
				<xs:element ref="STBJourney"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="STBJourney">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="JHandle"/>
				<xs:element ref="MainStop"/>
				<xs:element ref="JourneyAttributeList"/>
				<xs:element ref="PassList" minOccurs="0"/>
				<xs:element name="ServiceDaysList" minOccurs="0">
					<xs:complexType>
						<xs:sequence maxOccurs="unbounded">
							<xs:element ref="ServiceDays"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="IList" minOccurs="0"/>
				<xs:element ref="JProg" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="MainStop">
		<xs:annotation>
			<xs:documentation>Tablestation. The BasicStop contained here, will only contain Stations, no other type of locations</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="BasicStop"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="IList">
		<xs:annotation>
			<xs:documentation>The InfoList may contain announcements (HIM messages) for the current connection.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="I" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="I">
		<xs:annotation>
			<xs:documentation>One specific Information (HIM message) for the current connection. It can contain a header of the message, the text body and a uniform resource identifier (URI) like a HTML page with detailed information.	</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="attlist.I"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="attlist.I">
		<xs:attribute name="header" type="xs:string">
			<xs:annotation>
				<xs:documentation>Header text for HIM messages.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="lead" type="xs:string">
			<xs:annotation>
				<xs:documentation>Leading text for a HIM message.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="text" type="xs:string">
			<xs:annotation>
				<xs:documentation>The HIM mesage text (depending on requested language).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="uriCustom" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>URI to additional HIM information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" type="xs:integer" use="optional" default="0">
			<xs:annotation>
				<xs:documentation>The HIM types. (0 - normal message, 1 - common message, 2 - cancelation of train, 3 - news ticker, 4 - teletext message, 6 - cancelation of stop)
                </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="symbol" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The icon for the HIM message. (0 - information, 1 - construction, 2- disturbance,
 3 - delay, 4 - train substitution by bus)</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="section" type="xs:integer" use="optional">
			<xs:annotation>
				<xs:documentation>Link to the involved section of the HIM message.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="altRouteStart" type="xs:integer" use="optional">
			<xs:annotation>
				<xs:documentation>The passlist index for alternative station name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="altRouteEnd" type="xs:integer" use="optional">
			<xs:annotation>
				<xs:documentation>The passlist index for alternative station name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dep" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The station name for HIM message start.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="arr" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The station name for HIM message end.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="channel" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>For future use.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="locType" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>For future use.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<!-- Anchor for ECO parameters - Start -->
	<xs:element name="ECOParameters">
		<xs:annotation>
			<xs:documentation>This element decribes a request to evaluate emission data based either on a requested connection or by elements of type ECODistance. Additionally the corresponding GIS routing can be requested via the attribut ivCons of the ReqC element. The software  than deliver the subsequent emissions. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:sequence>
					<xs:element ref="ECODefaultParaChanges" minOccurs="0"/>
				</xs:sequence>
				<xs:choice>
					<xs:element name="ECODistanceList" minOccurs="0">
						<xs:complexType>
							<xs:sequence minOccurs="0" maxOccurs="14">
								<xs:element ref="ECODistance" minOccurs="0"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="ECODistance">
		<xs:annotation>
			<xs:documentation>Contains the distance for each public transport product class</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="productclass" type="xs:int" use="required">
				<xs:annotation>
					<xs:documentation>Public transport product classes: e. g. 0=ICE, 1=IC/EC, 2=Regional trains, 3=IR, 4=Suburban (S), 5=Tram, 6=urban Bus, 7=Ship, 8=cableway, 9= Highspeed > 200 km/h, 10= Highspeed > 200 km/h</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="distance" type="xs:int" use="required">
				<xs:annotation>
					<xs:documentation>distance in [m]</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="ECODefaultParaChanges">
		<xs:annotation>
			<xs:documentation>Contains changes of the server site default parameters</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="PTUtilization" type="xs:int" use="optional">
				<xs:annotation>
					<xs:documentation>Auslastung oeffentlicher Personenverkehr: 100: volle Auslastung; 50 = durchschnittliche Auslastung; default: 50</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="IVPersons" type="xs:int" use="optional">
				<xs:annotation>
					<xs:documentation>Number of persons for the IV-Route; Default: 1.5 Persons</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="IVCarclass" type="xs:int" use="optional">
				<xs:annotation>
					<xs:documentation>DEFAULT: 5
0=Kleinst-/Kleinwagen (4 l); 1=Kleinst-/Kleinwagen (5 l); 2=Kleinst-/Kleinwagen (6 l);
3=Mittelklasse (5 l); 4=Mittelklasse (7 l); 5=Mittelklasse (8,8 l) = Durchschnitt Schweiz);
6=Obere Mitteklasse (6 l); 7=Obere Mitteklasse (8 l); 8=Obere Mitteklasse (10 l);
9=Van (7 l); 10=Van (9 l); 11=Van (11 l);
12=Offroad (8 l);  13=Offroad (12 l); 14=Offroad (15 l); </xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="IVEngineclass" type="xs:int" use="optional">
				<xs:annotation>
					<xs:documentation>Default: 0;
0=Durschschnitt, 1=Benzin_EURO3;2=Benzin_EURO4;3=Benzin_EURO5;4=Diesel bis einschliesslich EURO3; 5=Diesel ab EURO4; 6=Benzin_EURO5 (inkl. Partikefilter); 6=Erdgas</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="Flight" type="xs:boolean" use="optional" default="true">
				<xs:annotation>
					<xs:documentation>treu: get flight connection if avialable (default)</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="FlightFeeder" type="xs:int" use="optional">
				<xs:annotation>
					<xs:documentation>Zubringer Flug (Bahn oder IV); Default: 1;
0=Bahn; 1=IV;</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="ECOResEnvironmentalImpact">
		<xs:annotation>
			<xs:documentation>This element contains the different environmental impacts. Note: All emission data are returned in [g]; the decimal number is separated by a dot; e. g. 14.567 [g]</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:annotation>
				<xs:documentation>Quantitatve Beschreibung der Antwort</xs:documentation>
			</xs:annotation>
			<xs:sequence>
				<xs:element ref="ECOCarrierDescription"/>
				<xs:element ref="ECOConsumption" minOccurs="0" maxOccurs="2"/>
				<xs:element ref="ECODust" minOccurs="0" maxOccurs="3"/>
				<xs:element ref="ECOCO2" minOccurs="0" maxOccurs="2"/>
			</xs:sequence>
			<xs:attribute name="CO2" type="xs:float" use="optional" default="0">
				<xs:annotation>
					<xs:documentation>Gesamtemission</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="NOX" type="xs:float" use="optional" default="0"/>
			<xs:attribute name="SO2" type="xs:float" use="optional" default="0"/>
			<xs:attribute name="NMHC" type="xs:float" use="optional" default="0"/>
			<xs:attribute name="UBP06" type="xs:float" use="optional" default="0"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ECOConsumption">
		<xs:annotation>
			<xs:documentation>Contains values for primary energy; e. g. operating only and/or operating including supply; Note: value is dot separated decimal number</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="type" use="required">
				<xs:annotation>
					<xs:documentation>Primary energy consumption; 1=complete; 2=operating only</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="value" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ECOCarrierDescription">
		<xs:annotation>
			<xs:documentation>Describes the different carriers causing the different emissions</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="type" type="xs:string" use="optional" default="0">
				<xs:annotation>
					<xs:documentation>PUT=public transport; PRT=private transport; PFT=public flight transport</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="distance" type="xs:integer" use="optional" default="0">
				<xs:annotation>
					<xs:documentation>[m]</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="description" type="xs:string" use="optional" default="NULL"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ECODust">
		<xs:annotation>
			<xs:documentation>Contains differnet types of dust; e. g. PM100, PM25 etc.; Note: value is dot separated decimal number</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="type" type="xs:int" default="1">
				<xs:annotation>
					<xs:documentation>1 = PM10 (complete); 2=PM25 (complete); 3=PM25 (vehicle only)</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="value" type="xs:float" default="0"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ECOCO2">
		<xs:annotation>
			<xs:documentation>Contains values for CO2 emissions; e. g. operating only and/or operating including supply; Note: value is dot separated decimal number</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="type" type="xs:float" use="optional" default="1">
				<xs:annotation>
					<xs:documentation>1=gesamt; 2=nur Betrieb</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="value" type="xs:float" use="optional" default="0"/>
		</xs:complexType>
	</xs:element>
	<!-- Anchor for ECO parameters - Finish  -->
	<xs:element name="AnnoText">
		<xs:annotation>
			<xs:documentation>Text message </xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="AnnoList">
		<xs:annotation>
			<xs:documentation>Announcements (Störungsmeldungen)</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence maxOccurs="unbounded">
				<xs:element name="Anno">
					<xs:annotation>
						<xs:documentation>An Annotation can either have a combination of codes, out ouf which a predefined message can be built, or a freely defined textual message, that is not covered by any codes. If a code is available, The  freely defined text is only displayed, if no ...Id elements are given. </xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element ref="AnnoText" minOccurs="0"/>
							<xs:sequence minOccurs="0">
								<xs:element name="CodeId" minOccurs="0"/>
								<xs:element name="ReasonId"/>
								<xs:element name="CategoryId"/>
								<xs:element ref="AnnoText"/>
								<xs:element name="TypeId"/>
								<xs:element name="FromBhf"/>
								<xs:element name="ToBhf"/>
							</xs:sequence>
						</xs:choice>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="JProg">
		<xs:annotation>
			<xs:documentation>Train based realtime information</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="AnnoList" minOccurs="0"/>
				<xs:element name="JStatus">
					<xs:annotation>
						<xs:documentation>Possible values are: FAILURE - train failure via real time.  NEW or  ADDITIONAL - identifies addtional train. REPLACEMENT - identifies alternative train.  REDIRECTION - one or several additional stops and/or contrary some stops can not be served. PARTIAL_FAILURE - a part of a track can not be served.   PARTIAL_ACTIVATION , REDIRECTION_FAILURE,  REPLACEMENT_REDIRECTION are reserverd for future use. SCHEDULED - train is in time.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="JHandle">
		<xs:annotation>
			<xs:documentation>A journey handle for subsequent journey requests. Can be taken as is, and placed in the corresponding JourneyReq</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="tNr">
				<xs:annotation>
					<xs:documentation>Internal train number</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="puic">
				<xs:annotation>
					<xs:documentation>UIC pool ID</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="cycle">
				<xs:annotation>
					<xs:documentation>Optional cycle value if trains runs multiple times a day</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="ptimestamp" type="xs:integer">
				<xs:annotation>
					<xs:documentation>Will only be written if value >= 0.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="operationDate" type="xs:string">
				<xs:annotation>
					<xs:documentation>Format YYYMMDD. Will only be written if ptimestamp >= 0.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="JourneyReq">
		<xs:annotation>
			<xs:documentation>Journey request. Request information about a train</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="JHandle"/>
			</xs:sequence>
			<xs:attribute name="date">
				<xs:annotation>
					<xs:documentation>Format YYYMMDD</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="externalId">
				<xs:annotation>
					<xs:documentation>taken from the station element.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="type">
				<xs:annotation>
					<xs:documentation>ARR (date/time belong to the arrival), DEP ( date/time belong to the departure)</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="time">
				<xs:annotation>
					<xs:documentation>Format: hh:mm; The attributes above
						specify the station, the date and time at which the
						train has passed the station, and whether the date and
						time belong to the arrival or the departure at this
						station. These values only have to be supplied, if the
						train is requested for a specific date. Only if the
						values are supplied and the times are within the
						realtime range, realtime data will be returned,
						</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="JourneyRes">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ServiceDays" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="Journey"/>
				<xs:element ref="IList" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--Anchor for DirectTrainReq -->
	<xs:element name="DirectTrainReq">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="StartDirect"/>
				<xs:element ref="Dest"/>
				<xs:element ref="TrainFilter"/>
				<xs:element ref="Date"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="StartDirect" type="RequestLocationType">
		<xs:annotation>
			<xs:documentation>The element StartDirect contains the Startlocation for a direct search connection request. This might either be a Station, Address or Poi, as returned by a previously obtained location validation result (LocValRes), or a userspecified coordinate (Coord) which does not require a location validation.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<!--  Anchor DirectTrainReq - Finish -->
	<xs:element name="TrainSearchReq">
		<xs:annotation>
			<xs:documentation>TrainSearch request. Request information about trains.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Date" minOccurs="0">
					<xs:annotation>
						<xs:documentation>The element date contains the base date for a connection. The base date is the date at which the connection starts. All time elements refer to the base date.
In requests (DirectTrainReq or TrainSearchReq) the format must be: yyyymmdd.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="Time" minOccurs="0">
					<xs:annotation>
						<xs:documentation>The format of the Time element is [dd:]hh:mm. dd represents a day offset. All offsets are relative to the base date of the connection. For example a time 01:12:30 in a connection means 12:30 at the first day following the day specified as the base date in the Date element in the Overview section of the connection.
In a train search, the Time element specifies the departure time of the train at the first stop.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="maxResults">
				<xs:annotation>
					<xs:documentation>Limits the number of train search results. For example, if maxResults is set to 10 and the train search would find more than 10 matching trains for the specified search parameters, no trains would be returned and the error code in the train search result would be set to 14 (TrainResult_Too_Complex). </xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="timeInterval" type="xs:string" use="optional">
				<xs:annotation>
					<xs:documentation>Format: hh:mm-hh:mm. Specifies a time interval during which the train is running or all trains passing through a station during that time.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="searchString" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>Train name to be searched for.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="stationFilter" type="xs:string" use="optional">
				<xs:annotation>
					<xs:documentation>Filter which stations (specified by UIC) shall be included in the search.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="productClassFilter" type="xs:int" use="optional">
				<xs:annotation>
					<xs:documentation>Filter which product classes shall be included in the search. E.g. "Select high speed trains: 100000.....</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="TrainSearchRes">
		<xs:annotation>
			<xs:documentation>TrainSearch response. Information about trains.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Train" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="errorCode" type="xs:integer">
				<xs:annotation>
					<xs:documentation>Error code returned from the server. For a successful operation, a value of 10 is returned. If more results were found than the maximum number of results allowed, the error code is set to 14. A error value of 16 indicates invalid search parameters. If the server found no matching trains, the error code is set to 17.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="noOfResults" type="xs:integer">
				<xs:annotation>
					<xs:documentation>Number of results for the request</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="StopType">
		<xs:sequence>
			<xs:element name="Station" type="StationType"/>
			<xs:element ref="Date"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="Train">
		<xs:annotation>
			<xs:documentation>Train information</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="JHandle"/>
				<xs:element ref="Point" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Current geographical position of the train. Only available in realtime configurations.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="FirstStop" type="StopType"/>
				<xs:element name="LastStop" type="StopType"/>
				<xs:element ref="ServiceDays"/>
			</xs:sequence>
			<xs:attribute name="externalID" type="xs:integer">
				<xs:annotation>
					<xs:documentation>External ID for the train</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="trainName" type="xs:string">
				<xs:annotation>
					<xs:documentation>Name of the train</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="lineName" type="xs:string">
				<xs:annotation>
					<xs:documentation>Name of the line the train runs on</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="operator" type="xs:string">
				<xs:annotation>
					<xs:documentation>Name of the operator running the train</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="administration" type="xs:string">
				<xs:annotation>
					<xs:documentation>Name of the administration responsible for the train</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="category" type="xs:integer">
				<xs:annotation>
					<xs:documentation>Category ID of the train</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="categoryName" type="xs:string">
				<xs:annotation>
					<xs:documentation>Name of the train's category</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="trainsPerRoute" type="xs:integer">
				<xs:annotation>
					<xs:documentation>Number of equivalent trains running on the route</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="averageTrainsPerDay" type="xs:integer">
				<xs:annotation>
					<xs:documentation>Average number of trains running on the route per day</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="tripID" type="xs:integer">
				<xs:annotation>
					<xs:documentation>ID of the trip</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="resultFlags" type="xs:integer">
				<xs:annotation>
					<xs:documentation>Contains several result flags</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="delay" type="xs:integer">
				<xs:annotation>
					<xs:documentation>Current delay of the train in minutes</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
</xs:schema>
