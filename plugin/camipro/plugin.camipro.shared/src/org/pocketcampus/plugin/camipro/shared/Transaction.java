/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.camipro.shared;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Transaction implements org.apache.thrift.TBase<Transaction, Transaction._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Transaction");

  private static final org.apache.thrift.protocol.TField X_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("xType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField X_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("xDescription", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField X_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("xDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField X_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("xAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  public String xType; // required
  public String xDescription; // required
  public String xDate; // required
  public double xAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    X_TYPE((short)1, "xType"),
    X_DESCRIPTION((short)2, "xDescription"),
    X_DATE((short)3, "xDate"),
    X_AMOUNT((short)4, "xAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // X_TYPE
          return X_TYPE;
        case 2: // X_DESCRIPTION
          return X_DESCRIPTION;
        case 3: // X_DATE
          return X_DATE;
        case 4: // X_AMOUNT
          return X_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __XAMOUNT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.X_TYPE, new org.apache.thrift.meta_data.FieldMetaData("xType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.X_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("xDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.X_DATE, new org.apache.thrift.meta_data.FieldMetaData("xDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.X_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("xAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Transaction.class, metaDataMap);
  }

  public Transaction() {
  }

  public Transaction(
    String xType,
    String xDescription,
    String xDate,
    double xAmount)
  {
    this();
    this.xType = xType;
    this.xDescription = xDescription;
    this.xDate = xDate;
    this.xAmount = xAmount;
    setXAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Transaction(Transaction other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetXType()) {
      this.xType = other.xType;
    }
    if (other.isSetXDescription()) {
      this.xDescription = other.xDescription;
    }
    if (other.isSetXDate()) {
      this.xDate = other.xDate;
    }
    this.xAmount = other.xAmount;
  }

  public Transaction deepCopy() {
    return new Transaction(this);
  }

  @Override
  public void clear() {
    this.xType = null;
    this.xDescription = null;
    this.xDate = null;
    setXAmountIsSet(false);
    this.xAmount = 0.0;
  }

  public String getXType() {
    return this.xType;
  }

  public Transaction setXType(String xType) {
    this.xType = xType;
    return this;
  }

  public void unsetXType() {
    this.xType = null;
  }

  /** Returns true if field xType is set (has been assigned a value) and false otherwise */
  public boolean isSetXType() {
    return this.xType != null;
  }

  public void setXTypeIsSet(boolean value) {
    if (!value) {
      this.xType = null;
    }
  }

  public String getXDescription() {
    return this.xDescription;
  }

  public Transaction setXDescription(String xDescription) {
    this.xDescription = xDescription;
    return this;
  }

  public void unsetXDescription() {
    this.xDescription = null;
  }

  /** Returns true if field xDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetXDescription() {
    return this.xDescription != null;
  }

  public void setXDescriptionIsSet(boolean value) {
    if (!value) {
      this.xDescription = null;
    }
  }

  public String getXDate() {
    return this.xDate;
  }

  public Transaction setXDate(String xDate) {
    this.xDate = xDate;
    return this;
  }

  public void unsetXDate() {
    this.xDate = null;
  }

  /** Returns true if field xDate is set (has been assigned a value) and false otherwise */
  public boolean isSetXDate() {
    return this.xDate != null;
  }

  public void setXDateIsSet(boolean value) {
    if (!value) {
      this.xDate = null;
    }
  }

  public double getXAmount() {
    return this.xAmount;
  }

  public Transaction setXAmount(double xAmount) {
    this.xAmount = xAmount;
    setXAmountIsSet(true);
    return this;
  }

  public void unsetXAmount() {
    __isset_bit_vector.clear(__XAMOUNT_ISSET_ID);
  }

  /** Returns true if field xAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetXAmount() {
    return __isset_bit_vector.get(__XAMOUNT_ISSET_ID);
  }

  public void setXAmountIsSet(boolean value) {
    __isset_bit_vector.set(__XAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case X_TYPE:
      if (value == null) {
        unsetXType();
      } else {
        setXType((String)value);
      }
      break;

    case X_DESCRIPTION:
      if (value == null) {
        unsetXDescription();
      } else {
        setXDescription((String)value);
      }
      break;

    case X_DATE:
      if (value == null) {
        unsetXDate();
      } else {
        setXDate((String)value);
      }
      break;

    case X_AMOUNT:
      if (value == null) {
        unsetXAmount();
      } else {
        setXAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case X_TYPE:
      return getXType();

    case X_DESCRIPTION:
      return getXDescription();

    case X_DATE:
      return getXDate();

    case X_AMOUNT:
      return Double.valueOf(getXAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case X_TYPE:
      return isSetXType();
    case X_DESCRIPTION:
      return isSetXDescription();
    case X_DATE:
      return isSetXDate();
    case X_AMOUNT:
      return isSetXAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Transaction)
      return this.equals((Transaction)that);
    return false;
  }

  public boolean equals(Transaction that) {
    if (that == null)
      return false;

    boolean this_present_xType = true && this.isSetXType();
    boolean that_present_xType = true && that.isSetXType();
    if (this_present_xType || that_present_xType) {
      if (!(this_present_xType && that_present_xType))
        return false;
      if (!this.xType.equals(that.xType))
        return false;
    }

    boolean this_present_xDescription = true && this.isSetXDescription();
    boolean that_present_xDescription = true && that.isSetXDescription();
    if (this_present_xDescription || that_present_xDescription) {
      if (!(this_present_xDescription && that_present_xDescription))
        return false;
      if (!this.xDescription.equals(that.xDescription))
        return false;
    }

    boolean this_present_xDate = true && this.isSetXDate();
    boolean that_present_xDate = true && that.isSetXDate();
    if (this_present_xDate || that_present_xDate) {
      if (!(this_present_xDate && that_present_xDate))
        return false;
      if (!this.xDate.equals(that.xDate))
        return false;
    }

    boolean this_present_xAmount = true;
    boolean that_present_xAmount = true;
    if (this_present_xAmount || that_present_xAmount) {
      if (!(this_present_xAmount && that_present_xAmount))
        return false;
      if (this.xAmount != that.xAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Transaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Transaction typedOther = (Transaction)other;

    lastComparison = Boolean.valueOf(isSetXType()).compareTo(typedOther.isSetXType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xType, typedOther.xType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXDescription()).compareTo(typedOther.isSetXDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xDescription, typedOther.xDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXDate()).compareTo(typedOther.isSetXDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xDate, typedOther.xDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXAmount()).compareTo(typedOther.isSetXAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xAmount, typedOther.xAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // X_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.xType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // X_DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.xDescription = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // X_DATE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.xDate = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // X_AMOUNT
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.xAmount = iprot.readDouble();
            setXAmountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetXAmount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'xAmount' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.xType != null) {
      oprot.writeFieldBegin(X_TYPE_FIELD_DESC);
      oprot.writeString(this.xType);
      oprot.writeFieldEnd();
    }
    if (this.xDescription != null) {
      oprot.writeFieldBegin(X_DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.xDescription);
      oprot.writeFieldEnd();
    }
    if (this.xDate != null) {
      oprot.writeFieldBegin(X_DATE_FIELD_DESC);
      oprot.writeString(this.xDate);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(X_AMOUNT_FIELD_DESC);
    oprot.writeDouble(this.xAmount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Transaction(");
    boolean first = true;

    sb.append("xType:");
    if (this.xType == null) {
      sb.append("null");
    } else {
      sb.append(this.xType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xDescription:");
    if (this.xDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.xDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xDate:");
    if (this.xDate == null) {
      sb.append("null");
    } else {
      sb.append(this.xDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xAmount:");
    sb.append(this.xAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (xType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'xType' was not present! Struct: " + toString());
    }
    if (xDescription == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'xDescription' was not present! Struct: " + toString());
    }
    if (xDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'xDate' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'xAmount' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

