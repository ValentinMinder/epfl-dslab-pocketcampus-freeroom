/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.camipro.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatsAndLoadingInfo implements org.apache.thrift.TBase<StatsAndLoadingInfo, StatsAndLoadingInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatsAndLoadingInfo");

  private static final org.apache.thrift.protocol.TField I_CARD_STATISTICS_FIELD_DESC = new org.apache.thrift.protocol.TField("iCardStatistics", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField I_CARD_LOADING_WITH_EBANKING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("iCardLoadingWithEbankingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  public CardStatistics iCardStatistics; // required
  public CardLoadingWithEbankingInfo iCardLoadingWithEbankingInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_CARD_STATISTICS((short)1, "iCardStatistics"),
    I_CARD_LOADING_WITH_EBANKING_INFO((short)2, "iCardLoadingWithEbankingInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_CARD_STATISTICS
          return I_CARD_STATISTICS;
        case 2: // I_CARD_LOADING_WITH_EBANKING_INFO
          return I_CARD_LOADING_WITH_EBANKING_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_CARD_STATISTICS, new org.apache.thrift.meta_data.FieldMetaData("iCardStatistics", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CardStatistics.class)));
    tmpMap.put(_Fields.I_CARD_LOADING_WITH_EBANKING_INFO, new org.apache.thrift.meta_data.FieldMetaData("iCardLoadingWithEbankingInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CardLoadingWithEbankingInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatsAndLoadingInfo.class, metaDataMap);
  }

  public StatsAndLoadingInfo() {
  }

  public StatsAndLoadingInfo(
    CardStatistics iCardStatistics,
    CardLoadingWithEbankingInfo iCardLoadingWithEbankingInfo)
  {
    this();
    this.iCardStatistics = iCardStatistics;
    this.iCardLoadingWithEbankingInfo = iCardLoadingWithEbankingInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatsAndLoadingInfo(StatsAndLoadingInfo other) {
    if (other.isSetICardStatistics()) {
      this.iCardStatistics = new CardStatistics(other.iCardStatistics);
    }
    if (other.isSetICardLoadingWithEbankingInfo()) {
      this.iCardLoadingWithEbankingInfo = new CardLoadingWithEbankingInfo(other.iCardLoadingWithEbankingInfo);
    }
  }

  public StatsAndLoadingInfo deepCopy() {
    return new StatsAndLoadingInfo(this);
  }

  @Override
  public void clear() {
    this.iCardStatistics = null;
    this.iCardLoadingWithEbankingInfo = null;
  }

  public CardStatistics getICardStatistics() {
    return this.iCardStatistics;
  }

  public StatsAndLoadingInfo setICardStatistics(CardStatistics iCardStatistics) {
    this.iCardStatistics = iCardStatistics;
    return this;
  }

  public void unsetICardStatistics() {
    this.iCardStatistics = null;
  }

  /** Returns true if field iCardStatistics is set (has been assigned a value) and false otherwise */
  public boolean isSetICardStatistics() {
    return this.iCardStatistics != null;
  }

  public void setICardStatisticsIsSet(boolean value) {
    if (!value) {
      this.iCardStatistics = null;
    }
  }

  public CardLoadingWithEbankingInfo getICardLoadingWithEbankingInfo() {
    return this.iCardLoadingWithEbankingInfo;
  }

  public StatsAndLoadingInfo setICardLoadingWithEbankingInfo(CardLoadingWithEbankingInfo iCardLoadingWithEbankingInfo) {
    this.iCardLoadingWithEbankingInfo = iCardLoadingWithEbankingInfo;
    return this;
  }

  public void unsetICardLoadingWithEbankingInfo() {
    this.iCardLoadingWithEbankingInfo = null;
  }

  /** Returns true if field iCardLoadingWithEbankingInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetICardLoadingWithEbankingInfo() {
    return this.iCardLoadingWithEbankingInfo != null;
  }

  public void setICardLoadingWithEbankingInfoIsSet(boolean value) {
    if (!value) {
      this.iCardLoadingWithEbankingInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_CARD_STATISTICS:
      if (value == null) {
        unsetICardStatistics();
      } else {
        setICardStatistics((CardStatistics)value);
      }
      break;

    case I_CARD_LOADING_WITH_EBANKING_INFO:
      if (value == null) {
        unsetICardLoadingWithEbankingInfo();
      } else {
        setICardLoadingWithEbankingInfo((CardLoadingWithEbankingInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_CARD_STATISTICS:
      return getICardStatistics();

    case I_CARD_LOADING_WITH_EBANKING_INFO:
      return getICardLoadingWithEbankingInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_CARD_STATISTICS:
      return isSetICardStatistics();
    case I_CARD_LOADING_WITH_EBANKING_INFO:
      return isSetICardLoadingWithEbankingInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatsAndLoadingInfo)
      return this.equals((StatsAndLoadingInfo)that);
    return false;
  }

  public boolean equals(StatsAndLoadingInfo that) {
    if (that == null)
      return false;

    boolean this_present_iCardStatistics = true && this.isSetICardStatistics();
    boolean that_present_iCardStatistics = true && that.isSetICardStatistics();
    if (this_present_iCardStatistics || that_present_iCardStatistics) {
      if (!(this_present_iCardStatistics && that_present_iCardStatistics))
        return false;
      if (!this.iCardStatistics.equals(that.iCardStatistics))
        return false;
    }

    boolean this_present_iCardLoadingWithEbankingInfo = true && this.isSetICardLoadingWithEbankingInfo();
    boolean that_present_iCardLoadingWithEbankingInfo = true && that.isSetICardLoadingWithEbankingInfo();
    if (this_present_iCardLoadingWithEbankingInfo || that_present_iCardLoadingWithEbankingInfo) {
      if (!(this_present_iCardLoadingWithEbankingInfo && that_present_iCardLoadingWithEbankingInfo))
        return false;
      if (!this.iCardLoadingWithEbankingInfo.equals(that.iCardLoadingWithEbankingInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_iCardStatistics = true && (isSetICardStatistics());
    builder.append(present_iCardStatistics);
    if (present_iCardStatistics)
      builder.append(iCardStatistics);

    boolean present_iCardLoadingWithEbankingInfo = true && (isSetICardLoadingWithEbankingInfo());
    builder.append(present_iCardLoadingWithEbankingInfo);
    if (present_iCardLoadingWithEbankingInfo)
      builder.append(iCardLoadingWithEbankingInfo);

    return builder.toHashCode();
  }

  public int compareTo(StatsAndLoadingInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StatsAndLoadingInfo typedOther = (StatsAndLoadingInfo)other;

    lastComparison = Boolean.valueOf(isSetICardStatistics()).compareTo(typedOther.isSetICardStatistics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetICardStatistics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iCardStatistics, typedOther.iCardStatistics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetICardLoadingWithEbankingInfo()).compareTo(typedOther.isSetICardLoadingWithEbankingInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetICardLoadingWithEbankingInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iCardLoadingWithEbankingInfo, typedOther.iCardLoadingWithEbankingInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // I_CARD_STATISTICS
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.iCardStatistics = new CardStatistics();
            this.iCardStatistics.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // I_CARD_LOADING_WITH_EBANKING_INFO
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.iCardLoadingWithEbankingInfo = new CardLoadingWithEbankingInfo();
            this.iCardLoadingWithEbankingInfo.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.iCardStatistics != null) {
      oprot.writeFieldBegin(I_CARD_STATISTICS_FIELD_DESC);
      this.iCardStatistics.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.iCardLoadingWithEbankingInfo != null) {
      oprot.writeFieldBegin(I_CARD_LOADING_WITH_EBANKING_INFO_FIELD_DESC);
      this.iCardLoadingWithEbankingInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatsAndLoadingInfo(");
    boolean first = true;

    sb.append("iCardStatistics:");
    if (this.iCardStatistics == null) {
      sb.append("null");
    } else {
      sb.append(this.iCardStatistics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iCardLoadingWithEbankingInfo:");
    if (this.iCardLoadingWithEbankingInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.iCardLoadingWithEbankingInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (iCardStatistics == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iCardStatistics' was not present! Struct: " + toString());
    }
    if (iCardLoadingWithEbankingInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iCardLoadingWithEbankingInfo' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

