/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.camipro.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class SendMailResult implements org.apache.thrift.TBase<SendMailResult, SendMailResult._Fields>, java.io.Serializable, Cloneable, Comparable<SendMailResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendMailResult");

  private static final org.apache.thrift.protocol.TField I_RESULT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("iResultText", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField I_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("iStatus", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SendMailResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SendMailResultTupleSchemeFactory());
  }

  private String iResultText; // optional
  private int iStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_RESULT_TEXT((short)1, "iResultText"),
    I_STATUS((short)2, "iStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_RESULT_TEXT
          return I_RESULT_TEXT;
        case 2: // I_STATUS
          return I_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISTATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.I_RESULT_TEXT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_RESULT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("iResultText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_STATUS, new org.apache.thrift.meta_data.FieldMetaData("iStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendMailResult.class, metaDataMap);
  }

  public SendMailResult() {
  }

  public SendMailResult(
    int iStatus)
  {
    this();
    this.iStatus = iStatus;
    setIStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SendMailResult(SendMailResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIResultText()) {
      this.iResultText = other.iResultText;
    }
    this.iStatus = other.iStatus;
  }

  public SendMailResult deepCopy() {
    return new SendMailResult(this);
  }

  @Override
  public void clear() {
    this.iResultText = null;
    setIStatusIsSet(false);
    this.iStatus = 0;
  }

  public String getIResultText() {
    return this.iResultText;
  }

  public SendMailResult setIResultText(String iResultText) {
    this.iResultText = iResultText;
    return this;
  }

  public void unsetIResultText() {
    this.iResultText = null;
  }

  /** Returns true if field iResultText is set (has been assigned a value) and false otherwise */
  public boolean isSetIResultText() {
    return this.iResultText != null;
  }

  public void setIResultTextIsSet(boolean value) {
    if (!value) {
      this.iResultText = null;
    }
  }

  public int getIStatus() {
    return this.iStatus;
  }

  public SendMailResult setIStatus(int iStatus) {
    this.iStatus = iStatus;
    setIStatusIsSet(true);
    return this;
  }

  public void unsetIStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTATUS_ISSET_ID);
  }

  /** Returns true if field iStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetIStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTATUS_ISSET_ID);
  }

  public void setIStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_RESULT_TEXT:
      if (value == null) {
        unsetIResultText();
      } else {
        setIResultText((String)value);
      }
      break;

    case I_STATUS:
      if (value == null) {
        unsetIStatus();
      } else {
        setIStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_RESULT_TEXT:
      return getIResultText();

    case I_STATUS:
      return Integer.valueOf(getIStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_RESULT_TEXT:
      return isSetIResultText();
    case I_STATUS:
      return isSetIStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SendMailResult)
      return this.equals((SendMailResult)that);
    return false;
  }

  public boolean equals(SendMailResult that) {
    if (that == null)
      return false;

    boolean this_present_iResultText = true && this.isSetIResultText();
    boolean that_present_iResultText = true && that.isSetIResultText();
    if (this_present_iResultText || that_present_iResultText) {
      if (!(this_present_iResultText && that_present_iResultText))
        return false;
      if (!this.iResultText.equals(that.iResultText))
        return false;
    }

    boolean this_present_iStatus = true;
    boolean that_present_iStatus = true;
    if (this_present_iStatus || that_present_iStatus) {
      if (!(this_present_iStatus && that_present_iStatus))
        return false;
      if (this.iStatus != that.iStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_iResultText = true && (isSetIResultText());
    list.add(present_iResultText);
    if (present_iResultText)
      list.add(iResultText);

    boolean present_iStatus = true;
    list.add(present_iStatus);
    if (present_iStatus)
      list.add(iStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(SendMailResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIResultText()).compareTo(other.isSetIResultText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIResultText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iResultText, other.iResultText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIStatus()).compareTo(other.isSetIStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iStatus, other.iStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SendMailResult(");
    boolean first = true;

    if (isSetIResultText()) {
      sb.append("iResultText:");
      if (this.iResultText == null) {
        sb.append("null");
      } else {
        sb.append(this.iResultText);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("iStatus:");
    sb.append(this.iStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'iStatus' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SendMailResultStandardSchemeFactory implements SchemeFactory {
    public SendMailResultStandardScheme getScheme() {
      return new SendMailResultStandardScheme();
    }
  }

  private static class SendMailResultStandardScheme extends StandardScheme<SendMailResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SendMailResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // I_RESULT_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iResultText = iprot.readString();
              struct.setIResultTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // I_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iStatus = iprot.readI32();
              struct.setIStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'iStatus' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SendMailResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.iResultText != null) {
        if (struct.isSetIResultText()) {
          oprot.writeFieldBegin(I_RESULT_TEXT_FIELD_DESC);
          oprot.writeString(struct.iResultText);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(I_STATUS_FIELD_DESC);
      oprot.writeI32(struct.iStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SendMailResultTupleSchemeFactory implements SchemeFactory {
    public SendMailResultTupleScheme getScheme() {
      return new SendMailResultTupleScheme();
    }
  }

  private static class SendMailResultTupleScheme extends TupleScheme<SendMailResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SendMailResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.iStatus);
      BitSet optionals = new BitSet();
      if (struct.isSetIResultText()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetIResultText()) {
        oprot.writeString(struct.iResultText);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SendMailResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.iStatus = iprot.readI32();
      struct.setIStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.iResultText = iprot.readString();
        struct.setIResultTextIsSet(true);
      }
    }
  }

}

