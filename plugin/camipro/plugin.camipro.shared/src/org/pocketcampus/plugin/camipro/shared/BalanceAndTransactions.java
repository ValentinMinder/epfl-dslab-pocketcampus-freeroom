/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.camipro.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class BalanceAndTransactions implements org.apache.thrift.TBase<BalanceAndTransactions, BalanceAndTransactions._Fields>, java.io.Serializable, Cloneable, Comparable<BalanceAndTransactions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BalanceAndTransactions");

  private static final org.apache.thrift.protocol.TField I_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("iBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField I_TRANSACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("iTransactions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField I_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("iDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField I_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("iStatus", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BalanceAndTransactionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BalanceAndTransactionsTupleSchemeFactory());
  }

  private double iBalance; // optional
  private List<Transaction> iTransactions; // optional
  private String iDate; // optional
  private int iStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_BALANCE((short)1, "iBalance"),
    I_TRANSACTIONS((short)2, "iTransactions"),
    I_DATE((short)3, "iDate"),
    I_STATUS((short)4, "iStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_BALANCE
          return I_BALANCE;
        case 2: // I_TRANSACTIONS
          return I_TRANSACTIONS;
        case 3: // I_DATE
          return I_DATE;
        case 4: // I_STATUS
          return I_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IBALANCE_ISSET_ID = 0;
  private static final int __ISTATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.I_BALANCE,_Fields.I_TRANSACTIONS,_Fields.I_DATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("iBalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.I_TRANSACTIONS, new org.apache.thrift.meta_data.FieldMetaData("iTransactions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transaction.class))));
    tmpMap.put(_Fields.I_DATE, new org.apache.thrift.meta_data.FieldMetaData("iDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_STATUS, new org.apache.thrift.meta_data.FieldMetaData("iStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BalanceAndTransactions.class, metaDataMap);
  }

  public BalanceAndTransactions() {
  }

  public BalanceAndTransactions(
    int iStatus)
  {
    this();
    this.iStatus = iStatus;
    setIStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BalanceAndTransactions(BalanceAndTransactions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.iBalance = other.iBalance;
    if (other.isSetITransactions()) {
      List<Transaction> __this__iTransactions = new ArrayList<Transaction>(other.iTransactions.size());
      for (Transaction other_element : other.iTransactions) {
        __this__iTransactions.add(new Transaction(other_element));
      }
      this.iTransactions = __this__iTransactions;
    }
    if (other.isSetIDate()) {
      this.iDate = other.iDate;
    }
    this.iStatus = other.iStatus;
  }

  public BalanceAndTransactions deepCopy() {
    return new BalanceAndTransactions(this);
  }

  @Override
  public void clear() {
    setIBalanceIsSet(false);
    this.iBalance = 0.0;
    this.iTransactions = null;
    this.iDate = null;
    setIStatusIsSet(false);
    this.iStatus = 0;
  }

  public double getIBalance() {
    return this.iBalance;
  }

  public BalanceAndTransactions setIBalance(double iBalance) {
    this.iBalance = iBalance;
    setIBalanceIsSet(true);
    return this;
  }

  public void unsetIBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IBALANCE_ISSET_ID);
  }

  /** Returns true if field iBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetIBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __IBALANCE_ISSET_ID);
  }

  public void setIBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IBALANCE_ISSET_ID, value);
  }

  public int getITransactionsSize() {
    return (this.iTransactions == null) ? 0 : this.iTransactions.size();
  }

  public java.util.Iterator<Transaction> getITransactionsIterator() {
    return (this.iTransactions == null) ? null : this.iTransactions.iterator();
  }

  public void addToITransactions(Transaction elem) {
    if (this.iTransactions == null) {
      this.iTransactions = new ArrayList<Transaction>();
    }
    this.iTransactions.add(elem);
  }

  public List<Transaction> getITransactions() {
    return this.iTransactions;
  }

  public BalanceAndTransactions setITransactions(List<Transaction> iTransactions) {
    this.iTransactions = iTransactions;
    return this;
  }

  public void unsetITransactions() {
    this.iTransactions = null;
  }

  /** Returns true if field iTransactions is set (has been assigned a value) and false otherwise */
  public boolean isSetITransactions() {
    return this.iTransactions != null;
  }

  public void setITransactionsIsSet(boolean value) {
    if (!value) {
      this.iTransactions = null;
    }
  }

  public String getIDate() {
    return this.iDate;
  }

  public BalanceAndTransactions setIDate(String iDate) {
    this.iDate = iDate;
    return this;
  }

  public void unsetIDate() {
    this.iDate = null;
  }

  /** Returns true if field iDate is set (has been assigned a value) and false otherwise */
  public boolean isSetIDate() {
    return this.iDate != null;
  }

  public void setIDateIsSet(boolean value) {
    if (!value) {
      this.iDate = null;
    }
  }

  public int getIStatus() {
    return this.iStatus;
  }

  public BalanceAndTransactions setIStatus(int iStatus) {
    this.iStatus = iStatus;
    setIStatusIsSet(true);
    return this;
  }

  public void unsetIStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTATUS_ISSET_ID);
  }

  /** Returns true if field iStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetIStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTATUS_ISSET_ID);
  }

  public void setIStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_BALANCE:
      if (value == null) {
        unsetIBalance();
      } else {
        setIBalance((Double)value);
      }
      break;

    case I_TRANSACTIONS:
      if (value == null) {
        unsetITransactions();
      } else {
        setITransactions((List<Transaction>)value);
      }
      break;

    case I_DATE:
      if (value == null) {
        unsetIDate();
      } else {
        setIDate((String)value);
      }
      break;

    case I_STATUS:
      if (value == null) {
        unsetIStatus();
      } else {
        setIStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_BALANCE:
      return Double.valueOf(getIBalance());

    case I_TRANSACTIONS:
      return getITransactions();

    case I_DATE:
      return getIDate();

    case I_STATUS:
      return Integer.valueOf(getIStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_BALANCE:
      return isSetIBalance();
    case I_TRANSACTIONS:
      return isSetITransactions();
    case I_DATE:
      return isSetIDate();
    case I_STATUS:
      return isSetIStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BalanceAndTransactions)
      return this.equals((BalanceAndTransactions)that);
    return false;
  }

  public boolean equals(BalanceAndTransactions that) {
    if (that == null)
      return false;

    boolean this_present_iBalance = true && this.isSetIBalance();
    boolean that_present_iBalance = true && that.isSetIBalance();
    if (this_present_iBalance || that_present_iBalance) {
      if (!(this_present_iBalance && that_present_iBalance))
        return false;
      if (this.iBalance != that.iBalance)
        return false;
    }

    boolean this_present_iTransactions = true && this.isSetITransactions();
    boolean that_present_iTransactions = true && that.isSetITransactions();
    if (this_present_iTransactions || that_present_iTransactions) {
      if (!(this_present_iTransactions && that_present_iTransactions))
        return false;
      if (!this.iTransactions.equals(that.iTransactions))
        return false;
    }

    boolean this_present_iDate = true && this.isSetIDate();
    boolean that_present_iDate = true && that.isSetIDate();
    if (this_present_iDate || that_present_iDate) {
      if (!(this_present_iDate && that_present_iDate))
        return false;
      if (!this.iDate.equals(that.iDate))
        return false;
    }

    boolean this_present_iStatus = true;
    boolean that_present_iStatus = true;
    if (this_present_iStatus || that_present_iStatus) {
      if (!(this_present_iStatus && that_present_iStatus))
        return false;
      if (this.iStatus != that.iStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_iBalance = true && (isSetIBalance());
    list.add(present_iBalance);
    if (present_iBalance)
      list.add(iBalance);

    boolean present_iTransactions = true && (isSetITransactions());
    list.add(present_iTransactions);
    if (present_iTransactions)
      list.add(iTransactions);

    boolean present_iDate = true && (isSetIDate());
    list.add(present_iDate);
    if (present_iDate)
      list.add(iDate);

    boolean present_iStatus = true;
    list.add(present_iStatus);
    if (present_iStatus)
      list.add(iStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(BalanceAndTransactions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIBalance()).compareTo(other.isSetIBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iBalance, other.iBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetITransactions()).compareTo(other.isSetITransactions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetITransactions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iTransactions, other.iTransactions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDate()).compareTo(other.isSetIDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iDate, other.iDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIStatus()).compareTo(other.isSetIStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iStatus, other.iStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BalanceAndTransactions(");
    boolean first = true;

    if (isSetIBalance()) {
      sb.append("iBalance:");
      sb.append(this.iBalance);
      first = false;
    }
    if (isSetITransactions()) {
      if (!first) sb.append(", ");
      sb.append("iTransactions:");
      if (this.iTransactions == null) {
        sb.append("null");
      } else {
        sb.append(this.iTransactions);
      }
      first = false;
    }
    if (isSetIDate()) {
      if (!first) sb.append(", ");
      sb.append("iDate:");
      if (this.iDate == null) {
        sb.append("null");
      } else {
        sb.append(this.iDate);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("iStatus:");
    sb.append(this.iStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'iStatus' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BalanceAndTransactionsStandardSchemeFactory implements SchemeFactory {
    public BalanceAndTransactionsStandardScheme getScheme() {
      return new BalanceAndTransactionsStandardScheme();
    }
  }

  private static class BalanceAndTransactionsStandardScheme extends StandardScheme<BalanceAndTransactions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BalanceAndTransactions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // I_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.iBalance = iprot.readDouble();
              struct.setIBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // I_TRANSACTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.iTransactions = new ArrayList<Transaction>(_list0.size);
                Transaction _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Transaction();
                  _elem1.read(iprot);
                  struct.iTransactions.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setITransactionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iDate = iprot.readString();
              struct.setIDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iStatus = iprot.readI32();
              struct.setIStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'iStatus' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BalanceAndTransactions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIBalance()) {
        oprot.writeFieldBegin(I_BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.iBalance);
        oprot.writeFieldEnd();
      }
      if (struct.iTransactions != null) {
        if (struct.isSetITransactions()) {
          oprot.writeFieldBegin(I_TRANSACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.iTransactions.size()));
            for (Transaction _iter3 : struct.iTransactions)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.iDate != null) {
        if (struct.isSetIDate()) {
          oprot.writeFieldBegin(I_DATE_FIELD_DESC);
          oprot.writeString(struct.iDate);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(I_STATUS_FIELD_DESC);
      oprot.writeI32(struct.iStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BalanceAndTransactionsTupleSchemeFactory implements SchemeFactory {
    public BalanceAndTransactionsTupleScheme getScheme() {
      return new BalanceAndTransactionsTupleScheme();
    }
  }

  private static class BalanceAndTransactionsTupleScheme extends TupleScheme<BalanceAndTransactions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BalanceAndTransactions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.iStatus);
      BitSet optionals = new BitSet();
      if (struct.isSetIBalance()) {
        optionals.set(0);
      }
      if (struct.isSetITransactions()) {
        optionals.set(1);
      }
      if (struct.isSetIDate()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIBalance()) {
        oprot.writeDouble(struct.iBalance);
      }
      if (struct.isSetITransactions()) {
        {
          oprot.writeI32(struct.iTransactions.size());
          for (Transaction _iter4 : struct.iTransactions)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetIDate()) {
        oprot.writeString(struct.iDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BalanceAndTransactions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.iStatus = iprot.readI32();
      struct.setIStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.iBalance = iprot.readDouble();
        struct.setIBalanceIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.iTransactions = new ArrayList<Transaction>(_list5.size);
          Transaction _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new Transaction();
            _elem6.read(iprot);
            struct.iTransactions.add(_elem6);
          }
        }
        struct.setITransactionsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.iDate = iprot.readString();
        struct.setIDateIsSet(true);
      }
    }
  }

}

