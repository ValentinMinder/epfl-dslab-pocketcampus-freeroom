/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.isacademia.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-5-27")
public class SemesterGrades implements org.apache.thrift.TBase<SemesterGrades, SemesterGrades._Fields>, java.io.Serializable, Cloneable, Comparable<SemesterGrades> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SemesterGrades");

  private static final org.apache.thrift.protocol.TField SEMESTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("semesterName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GRADES_FIELD_DESC = new org.apache.thrift.protocol.TField("grades", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SemesterGradesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SemesterGradesTupleSchemeFactory());
  }

  private String semesterName; // required
  private Map<String,String> grades; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEMESTER_NAME((short)1, "semesterName"),
    GRADES((short)2, "grades");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEMESTER_NAME
          return SEMESTER_NAME;
        case 2: // GRADES
          return GRADES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEMESTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("semesterName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRADES, new org.apache.thrift.meta_data.FieldMetaData("grades", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SemesterGrades.class, metaDataMap);
  }

  public SemesterGrades() {
  }

  public SemesterGrades(
    String semesterName,
    Map<String,String> grades)
  {
    this();
    this.semesterName = semesterName;
    this.grades = grades;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SemesterGrades(SemesterGrades other) {
    if (other.isSetSemesterName()) {
      this.semesterName = other.semesterName;
    }
    if (other.isSetGrades()) {
      Map<String,String> __this__grades = new HashMap<String,String>(other.grades);
      this.grades = __this__grades;
    }
  }

  public SemesterGrades deepCopy() {
    return new SemesterGrades(this);
  }

  @Override
  public void clear() {
    this.semesterName = null;
    this.grades = null;
  }

  public String getSemesterName() {
    return this.semesterName;
  }

  public SemesterGrades setSemesterName(String semesterName) {
    this.semesterName = semesterName;
    return this;
  }

  public void unsetSemesterName() {
    this.semesterName = null;
  }

  /** Returns true if field semesterName is set (has been assigned a value) and false otherwise */
  public boolean isSetSemesterName() {
    return this.semesterName != null;
  }

  public void setSemesterNameIsSet(boolean value) {
    if (!value) {
      this.semesterName = null;
    }
  }

  public int getGradesSize() {
    return (this.grades == null) ? 0 : this.grades.size();
  }

  public void putToGrades(String key, String val) {
    if (this.grades == null) {
      this.grades = new HashMap<String,String>();
    }
    this.grades.put(key, val);
  }

  public Map<String,String> getGrades() {
    return this.grades;
  }

  public SemesterGrades setGrades(Map<String,String> grades) {
    this.grades = grades;
    return this;
  }

  public void unsetGrades() {
    this.grades = null;
  }

  /** Returns true if field grades is set (has been assigned a value) and false otherwise */
  public boolean isSetGrades() {
    return this.grades != null;
  }

  public void setGradesIsSet(boolean value) {
    if (!value) {
      this.grades = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEMESTER_NAME:
      if (value == null) {
        unsetSemesterName();
      } else {
        setSemesterName((String)value);
      }
      break;

    case GRADES:
      if (value == null) {
        unsetGrades();
      } else {
        setGrades((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEMESTER_NAME:
      return getSemesterName();

    case GRADES:
      return getGrades();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEMESTER_NAME:
      return isSetSemesterName();
    case GRADES:
      return isSetGrades();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SemesterGrades)
      return this.equals((SemesterGrades)that);
    return false;
  }

  public boolean equals(SemesterGrades that) {
    if (that == null)
      return false;

    boolean this_present_semesterName = true && this.isSetSemesterName();
    boolean that_present_semesterName = true && that.isSetSemesterName();
    if (this_present_semesterName || that_present_semesterName) {
      if (!(this_present_semesterName && that_present_semesterName))
        return false;
      if (!this.semesterName.equals(that.semesterName))
        return false;
    }

    boolean this_present_grades = true && this.isSetGrades();
    boolean that_present_grades = true && that.isSetGrades();
    if (this_present_grades || that_present_grades) {
      if (!(this_present_grades && that_present_grades))
        return false;
      if (!this.grades.equals(that.grades))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_semesterName = true && (isSetSemesterName());
    list.add(present_semesterName);
    if (present_semesterName)
      list.add(semesterName);

    boolean present_grades = true && (isSetGrades());
    list.add(present_grades);
    if (present_grades)
      list.add(grades);

    return list.hashCode();
  }

  @Override
  public int compareTo(SemesterGrades other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSemesterName()).compareTo(other.isSetSemesterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSemesterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semesterName, other.semesterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrades()).compareTo(other.isSetGrades());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrades()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grades, other.grades);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SemesterGrades(");
    boolean first = true;

    sb.append("semesterName:");
    if (this.semesterName == null) {
      sb.append("null");
    } else {
      sb.append(this.semesterName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("grades:");
    if (this.grades == null) {
      sb.append("null");
    } else {
      sb.append(this.grades);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (semesterName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'semesterName' was not present! Struct: " + toString());
    }
    if (grades == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'grades' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SemesterGradesStandardSchemeFactory implements SchemeFactory {
    public SemesterGradesStandardScheme getScheme() {
      return new SemesterGradesStandardScheme();
    }
  }

  private static class SemesterGradesStandardScheme extends StandardScheme<SemesterGrades> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SemesterGrades struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEMESTER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.semesterName = iprot.readString();
              struct.setSemesterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GRADES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.grades = new HashMap<String,String>(2*_map24.size);
                String _key25;
                String _val26;
                for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                {
                  _key25 = iprot.readString();
                  _val26 = iprot.readString();
                  struct.grades.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setGradesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SemesterGrades struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.semesterName != null) {
        oprot.writeFieldBegin(SEMESTER_NAME_FIELD_DESC);
        oprot.writeString(struct.semesterName);
        oprot.writeFieldEnd();
      }
      if (struct.grades != null) {
        oprot.writeFieldBegin(GRADES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.grades.size()));
          for (Map.Entry<String, String> _iter28 : struct.grades.entrySet())
          {
            oprot.writeString(_iter28.getKey());
            oprot.writeString(_iter28.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SemesterGradesTupleSchemeFactory implements SchemeFactory {
    public SemesterGradesTupleScheme getScheme() {
      return new SemesterGradesTupleScheme();
    }
  }

  private static class SemesterGradesTupleScheme extends TupleScheme<SemesterGrades> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SemesterGrades struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.semesterName);
      {
        oprot.writeI32(struct.grades.size());
        for (Map.Entry<String, String> _iter29 : struct.grades.entrySet())
        {
          oprot.writeString(_iter29.getKey());
          oprot.writeString(_iter29.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SemesterGrades struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.semesterName = iprot.readString();
      struct.setSemesterNameIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.grades = new HashMap<String,String>(2*_map30.size);
        String _key31;
        String _val32;
        for (int _i33 = 0; _i33 < _map30.size; ++_i33)
        {
          _key31 = iprot.readString();
          _val32 = iprot.readString();
          struct.grades.put(_key31, _val32);
        }
      }
      struct.setGradesIsSet(true);
    }
  }

}

