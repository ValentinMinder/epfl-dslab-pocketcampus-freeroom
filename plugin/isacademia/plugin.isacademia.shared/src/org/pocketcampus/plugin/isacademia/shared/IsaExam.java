/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.isacademia.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IsaExam implements org.apache.thrift.TBase<IsaExam, IsaExam._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsaExam");

  private static final org.apache.thrift.protocol.TField COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("course", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTRUCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("instructor", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("rooms", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREDITS_FIELD_DESC = new org.apache.thrift.protocol.TField("credits", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("grade", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SEMESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("semester", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACADEMIC_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("academicYear", org.apache.thrift.protocol.TType.STRING, (short)9);

  public String course; // required
  public String code; // required
  public String instructor; // required
  public String rooms; // required
  public String dateTime; // required
  public int credits; // required
  public String grade; // required
  public String semester; // required
  public String academicYear; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COURSE((short)1, "course"),
    CODE((short)2, "code"),
    INSTRUCTOR((short)3, "instructor"),
    ROOMS((short)4, "rooms"),
    DATE_TIME((short)5, "dateTime"),
    CREDITS((short)6, "credits"),
    GRADE((short)7, "grade"),
    SEMESTER((short)8, "semester"),
    ACADEMIC_YEAR((short)9, "academicYear");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COURSE
          return COURSE;
        case 2: // CODE
          return CODE;
        case 3: // INSTRUCTOR
          return INSTRUCTOR;
        case 4: // ROOMS
          return ROOMS;
        case 5: // DATE_TIME
          return DATE_TIME;
        case 6: // CREDITS
          return CREDITS;
        case 7: // GRADE
          return GRADE;
        case 8: // SEMESTER
          return SEMESTER;
        case 9: // ACADEMIC_YEAR
          return ACADEMIC_YEAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREDITS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COURSE, new org.apache.thrift.meta_data.FieldMetaData("course", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTRUCTOR, new org.apache.thrift.meta_data.FieldMetaData("instructor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROOMS, new org.apache.thrift.meta_data.FieldMetaData("rooms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDITS, new org.apache.thrift.meta_data.FieldMetaData("credits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GRADE, new org.apache.thrift.meta_data.FieldMetaData("grade", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEMESTER, new org.apache.thrift.meta_data.FieldMetaData("semester", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACADEMIC_YEAR, new org.apache.thrift.meta_data.FieldMetaData("academicYear", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsaExam.class, metaDataMap);
  }

  public IsaExam() {
  }

  public IsaExam(
    String course,
    String code,
    String instructor,
    int credits,
    String semester,
    String academicYear)
  {
    this();
    this.course = course;
    this.code = code;
    this.instructor = instructor;
    this.credits = credits;
    setCreditsIsSet(true);
    this.semester = semester;
    this.academicYear = academicYear;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IsaExam(IsaExam other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCourse()) {
      this.course = other.course;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetInstructor()) {
      this.instructor = other.instructor;
    }
    if (other.isSetRooms()) {
      this.rooms = other.rooms;
    }
    if (other.isSetDateTime()) {
      this.dateTime = other.dateTime;
    }
    this.credits = other.credits;
    if (other.isSetGrade()) {
      this.grade = other.grade;
    }
    if (other.isSetSemester()) {
      this.semester = other.semester;
    }
    if (other.isSetAcademicYear()) {
      this.academicYear = other.academicYear;
    }
  }

  public IsaExam deepCopy() {
    return new IsaExam(this);
  }

  @Override
  public void clear() {
    this.course = null;
    this.code = null;
    this.instructor = null;
    this.rooms = null;
    this.dateTime = null;
    setCreditsIsSet(false);
    this.credits = 0;
    this.grade = null;
    this.semester = null;
    this.academicYear = null;
  }

  public String getCourse() {
    return this.course;
  }

  public IsaExam setCourse(String course) {
    this.course = course;
    return this;
  }

  public void unsetCourse() {
    this.course = null;
  }

  /** Returns true if field course is set (has been assigned a value) and false otherwise */
  public boolean isSetCourse() {
    return this.course != null;
  }

  public void setCourseIsSet(boolean value) {
    if (!value) {
      this.course = null;
    }
  }

  public String getCode() {
    return this.code;
  }

  public IsaExam setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getInstructor() {
    return this.instructor;
  }

  public IsaExam setInstructor(String instructor) {
    this.instructor = instructor;
    return this;
  }

  public void unsetInstructor() {
    this.instructor = null;
  }

  /** Returns true if field instructor is set (has been assigned a value) and false otherwise */
  public boolean isSetInstructor() {
    return this.instructor != null;
  }

  public void setInstructorIsSet(boolean value) {
    if (!value) {
      this.instructor = null;
    }
  }

  public String getRooms() {
    return this.rooms;
  }

  public IsaExam setRooms(String rooms) {
    this.rooms = rooms;
    return this;
  }

  public void unsetRooms() {
    this.rooms = null;
  }

  /** Returns true if field rooms is set (has been assigned a value) and false otherwise */
  public boolean isSetRooms() {
    return this.rooms != null;
  }

  public void setRoomsIsSet(boolean value) {
    if (!value) {
      this.rooms = null;
    }
  }

  public String getDateTime() {
    return this.dateTime;
  }

  public IsaExam setDateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  public void unsetDateTime() {
    this.dateTime = null;
  }

  /** Returns true if field dateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDateTime() {
    return this.dateTime != null;
  }

  public void setDateTimeIsSet(boolean value) {
    if (!value) {
      this.dateTime = null;
    }
  }

  public int getCredits() {
    return this.credits;
  }

  public IsaExam setCredits(int credits) {
    this.credits = credits;
    setCreditsIsSet(true);
    return this;
  }

  public void unsetCredits() {
    __isset_bit_vector.clear(__CREDITS_ISSET_ID);
  }

  /** Returns true if field credits is set (has been assigned a value) and false otherwise */
  public boolean isSetCredits() {
    return __isset_bit_vector.get(__CREDITS_ISSET_ID);
  }

  public void setCreditsIsSet(boolean value) {
    __isset_bit_vector.set(__CREDITS_ISSET_ID, value);
  }

  public String getGrade() {
    return this.grade;
  }

  public IsaExam setGrade(String grade) {
    this.grade = grade;
    return this;
  }

  public void unsetGrade() {
    this.grade = null;
  }

  /** Returns true if field grade is set (has been assigned a value) and false otherwise */
  public boolean isSetGrade() {
    return this.grade != null;
  }

  public void setGradeIsSet(boolean value) {
    if (!value) {
      this.grade = null;
    }
  }

  public String getSemester() {
    return this.semester;
  }

  public IsaExam setSemester(String semester) {
    this.semester = semester;
    return this;
  }

  public void unsetSemester() {
    this.semester = null;
  }

  /** Returns true if field semester is set (has been assigned a value) and false otherwise */
  public boolean isSetSemester() {
    return this.semester != null;
  }

  public void setSemesterIsSet(boolean value) {
    if (!value) {
      this.semester = null;
    }
  }

  public String getAcademicYear() {
    return this.academicYear;
  }

  public IsaExam setAcademicYear(String academicYear) {
    this.academicYear = academicYear;
    return this;
  }

  public void unsetAcademicYear() {
    this.academicYear = null;
  }

  /** Returns true if field academicYear is set (has been assigned a value) and false otherwise */
  public boolean isSetAcademicYear() {
    return this.academicYear != null;
  }

  public void setAcademicYearIsSet(boolean value) {
    if (!value) {
      this.academicYear = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COURSE:
      if (value == null) {
        unsetCourse();
      } else {
        setCourse((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case INSTRUCTOR:
      if (value == null) {
        unsetInstructor();
      } else {
        setInstructor((String)value);
      }
      break;

    case ROOMS:
      if (value == null) {
        unsetRooms();
      } else {
        setRooms((String)value);
      }
      break;

    case DATE_TIME:
      if (value == null) {
        unsetDateTime();
      } else {
        setDateTime((String)value);
      }
      break;

    case CREDITS:
      if (value == null) {
        unsetCredits();
      } else {
        setCredits((Integer)value);
      }
      break;

    case GRADE:
      if (value == null) {
        unsetGrade();
      } else {
        setGrade((String)value);
      }
      break;

    case SEMESTER:
      if (value == null) {
        unsetSemester();
      } else {
        setSemester((String)value);
      }
      break;

    case ACADEMIC_YEAR:
      if (value == null) {
        unsetAcademicYear();
      } else {
        setAcademicYear((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COURSE:
      return getCourse();

    case CODE:
      return getCode();

    case INSTRUCTOR:
      return getInstructor();

    case ROOMS:
      return getRooms();

    case DATE_TIME:
      return getDateTime();

    case CREDITS:
      return Integer.valueOf(getCredits());

    case GRADE:
      return getGrade();

    case SEMESTER:
      return getSemester();

    case ACADEMIC_YEAR:
      return getAcademicYear();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COURSE:
      return isSetCourse();
    case CODE:
      return isSetCode();
    case INSTRUCTOR:
      return isSetInstructor();
    case ROOMS:
      return isSetRooms();
    case DATE_TIME:
      return isSetDateTime();
    case CREDITS:
      return isSetCredits();
    case GRADE:
      return isSetGrade();
    case SEMESTER:
      return isSetSemester();
    case ACADEMIC_YEAR:
      return isSetAcademicYear();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IsaExam)
      return this.equals((IsaExam)that);
    return false;
  }

  public boolean equals(IsaExam that) {
    if (that == null)
      return false;

    boolean this_present_course = true && this.isSetCourse();
    boolean that_present_course = true && that.isSetCourse();
    if (this_present_course || that_present_course) {
      if (!(this_present_course && that_present_course))
        return false;
      if (!this.course.equals(that.course))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_instructor = true && this.isSetInstructor();
    boolean that_present_instructor = true && that.isSetInstructor();
    if (this_present_instructor || that_present_instructor) {
      if (!(this_present_instructor && that_present_instructor))
        return false;
      if (!this.instructor.equals(that.instructor))
        return false;
    }

    boolean this_present_rooms = true && this.isSetRooms();
    boolean that_present_rooms = true && that.isSetRooms();
    if (this_present_rooms || that_present_rooms) {
      if (!(this_present_rooms && that_present_rooms))
        return false;
      if (!this.rooms.equals(that.rooms))
        return false;
    }

    boolean this_present_dateTime = true && this.isSetDateTime();
    boolean that_present_dateTime = true && that.isSetDateTime();
    if (this_present_dateTime || that_present_dateTime) {
      if (!(this_present_dateTime && that_present_dateTime))
        return false;
      if (!this.dateTime.equals(that.dateTime))
        return false;
    }

    boolean this_present_credits = true;
    boolean that_present_credits = true;
    if (this_present_credits || that_present_credits) {
      if (!(this_present_credits && that_present_credits))
        return false;
      if (this.credits != that.credits)
        return false;
    }

    boolean this_present_grade = true && this.isSetGrade();
    boolean that_present_grade = true && that.isSetGrade();
    if (this_present_grade || that_present_grade) {
      if (!(this_present_grade && that_present_grade))
        return false;
      if (!this.grade.equals(that.grade))
        return false;
    }

    boolean this_present_semester = true && this.isSetSemester();
    boolean that_present_semester = true && that.isSetSemester();
    if (this_present_semester || that_present_semester) {
      if (!(this_present_semester && that_present_semester))
        return false;
      if (!this.semester.equals(that.semester))
        return false;
    }

    boolean this_present_academicYear = true && this.isSetAcademicYear();
    boolean that_present_academicYear = true && that.isSetAcademicYear();
    if (this_present_academicYear || that_present_academicYear) {
      if (!(this_present_academicYear && that_present_academicYear))
        return false;
      if (!this.academicYear.equals(that.academicYear))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_course = true && (isSetCourse());
    builder.append(present_course);
    if (present_course)
      builder.append(course);

    boolean present_code = true && (isSetCode());
    builder.append(present_code);
    if (present_code)
      builder.append(code);

    boolean present_instructor = true && (isSetInstructor());
    builder.append(present_instructor);
    if (present_instructor)
      builder.append(instructor);

    boolean present_rooms = true && (isSetRooms());
    builder.append(present_rooms);
    if (present_rooms)
      builder.append(rooms);

    boolean present_dateTime = true && (isSetDateTime());
    builder.append(present_dateTime);
    if (present_dateTime)
      builder.append(dateTime);

    boolean present_credits = true;
    builder.append(present_credits);
    if (present_credits)
      builder.append(credits);

    boolean present_grade = true && (isSetGrade());
    builder.append(present_grade);
    if (present_grade)
      builder.append(grade);

    boolean present_semester = true && (isSetSemester());
    builder.append(present_semester);
    if (present_semester)
      builder.append(semester);

    boolean present_academicYear = true && (isSetAcademicYear());
    builder.append(present_academicYear);
    if (present_academicYear)
      builder.append(academicYear);

    return builder.toHashCode();
  }

  public int compareTo(IsaExam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    IsaExam typedOther = (IsaExam)other;

    lastComparison = Boolean.valueOf(isSetCourse()).compareTo(typedOther.isSetCourse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.course, typedOther.course);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstructor()).compareTo(typedOther.isSetInstructor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstructor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instructor, typedOther.instructor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRooms()).compareTo(typedOther.isSetRooms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRooms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rooms, typedOther.rooms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateTime()).compareTo(typedOther.isSetDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTime, typedOther.dateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredits()).compareTo(typedOther.isSetCredits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credits, typedOther.credits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrade()).compareTo(typedOther.isSetGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grade, typedOther.grade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSemester()).compareTo(typedOther.isSetSemester());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSemester()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semester, typedOther.semester);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcademicYear()).compareTo(typedOther.isSetAcademicYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcademicYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.academicYear, typedOther.academicYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COURSE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.course = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CODE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.code = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // INSTRUCTOR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.instructor = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ROOMS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.rooms = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DATE_TIME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.dateTime = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CREDITS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.credits = iprot.readI32();
            setCreditsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // GRADE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.grade = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // SEMESTER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.semester = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // ACADEMIC_YEAR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.academicYear = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetCredits()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'credits' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.course != null) {
      oprot.writeFieldBegin(COURSE_FIELD_DESC);
      oprot.writeString(this.course);
      oprot.writeFieldEnd();
    }
    if (this.code != null) {
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeString(this.code);
      oprot.writeFieldEnd();
    }
    if (this.instructor != null) {
      oprot.writeFieldBegin(INSTRUCTOR_FIELD_DESC);
      oprot.writeString(this.instructor);
      oprot.writeFieldEnd();
    }
    if (this.rooms != null) {
      if (isSetRooms()) {
        oprot.writeFieldBegin(ROOMS_FIELD_DESC);
        oprot.writeString(this.rooms);
        oprot.writeFieldEnd();
      }
    }
    if (this.dateTime != null) {
      if (isSetDateTime()) {
        oprot.writeFieldBegin(DATE_TIME_FIELD_DESC);
        oprot.writeString(this.dateTime);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(CREDITS_FIELD_DESC);
    oprot.writeI32(this.credits);
    oprot.writeFieldEnd();
    if (this.grade != null) {
      if (isSetGrade()) {
        oprot.writeFieldBegin(GRADE_FIELD_DESC);
        oprot.writeString(this.grade);
        oprot.writeFieldEnd();
      }
    }
    if (this.semester != null) {
      oprot.writeFieldBegin(SEMESTER_FIELD_DESC);
      oprot.writeString(this.semester);
      oprot.writeFieldEnd();
    }
    if (this.academicYear != null) {
      oprot.writeFieldBegin(ACADEMIC_YEAR_FIELD_DESC);
      oprot.writeString(this.academicYear);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IsaExam(");
    boolean first = true;

    sb.append("course:");
    if (this.course == null) {
      sb.append("null");
    } else {
      sb.append(this.course);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instructor:");
    if (this.instructor == null) {
      sb.append("null");
    } else {
      sb.append(this.instructor);
    }
    first = false;
    if (isSetRooms()) {
      if (!first) sb.append(", ");
      sb.append("rooms:");
      if (this.rooms == null) {
        sb.append("null");
      } else {
        sb.append(this.rooms);
      }
      first = false;
    }
    if (isSetDateTime()) {
      if (!first) sb.append(", ");
      sb.append("dateTime:");
      if (this.dateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.dateTime);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("credits:");
    sb.append(this.credits);
    first = false;
    if (isSetGrade()) {
      if (!first) sb.append(", ");
      sb.append("grade:");
      if (this.grade == null) {
        sb.append("null");
      } else {
        sb.append(this.grade);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("semester:");
    if (this.semester == null) {
      sb.append("null");
    } else {
      sb.append(this.semester);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("academicYear:");
    if (this.academicYear == null) {
      sb.append("null");
    } else {
      sb.append(this.academicYear);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (course == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'course' was not present! Struct: " + toString());
    }
    if (code == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' was not present! Struct: " + toString());
    }
    if (instructor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'instructor' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'credits' because it's a primitive and you chose the non-beans generator.
    if (semester == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'semester' was not present! Struct: " + toString());
    }
    if (academicYear == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'academicYear' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

