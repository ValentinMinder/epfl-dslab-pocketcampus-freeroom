/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.isacademia.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Seance implements org.apache.thrift.TBase<Seance, Seance._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Seance");

  private static final org.apache.thrift.protocol.TField COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("course", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INSTRUCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("instructor", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WEEK_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("weekDay", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStart", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("room", org.apache.thrift.protocol.TType.STRING, (short)6);

  public String course; // required
  public String instructor; // required
  /**
   * 
   * @see SeanceType
   */
  public SeanceType type; // required
  public int weekDay; // required
  public int timeStart; // required
  public String room; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COURSE((short)1, "course"),
    INSTRUCTOR((short)2, "instructor"),
    /**
     * 
     * @see SeanceType
     */
    TYPE((short)3, "type"),
    WEEK_DAY((short)4, "weekDay"),
    TIME_START((short)5, "timeStart"),
    ROOM((short)6, "room");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COURSE
          return COURSE;
        case 2: // INSTRUCTOR
          return INSTRUCTOR;
        case 3: // TYPE
          return TYPE;
        case 4: // WEEK_DAY
          return WEEK_DAY;
        case 5: // TIME_START
          return TIME_START;
        case 6: // ROOM
          return ROOM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WEEKDAY_ISSET_ID = 0;
  private static final int __TIMESTART_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COURSE, new org.apache.thrift.meta_data.FieldMetaData("course", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTRUCTOR, new org.apache.thrift.meta_data.FieldMetaData("instructor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SeanceType.class)));
    tmpMap.put(_Fields.WEEK_DAY, new org.apache.thrift.meta_data.FieldMetaData("weekDay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_START, new org.apache.thrift.meta_data.FieldMetaData("timeStart", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROOM, new org.apache.thrift.meta_data.FieldMetaData("room", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Seance.class, metaDataMap);
  }

  public Seance() {
  }

  public Seance(
    String course,
    String instructor,
    SeanceType type,
    int weekDay,
    int timeStart,
    String room)
  {
    this();
    this.course = course;
    this.instructor = instructor;
    this.type = type;
    this.weekDay = weekDay;
    setWeekDayIsSet(true);
    this.timeStart = timeStart;
    setTimeStartIsSet(true);
    this.room = room;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Seance(Seance other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCourse()) {
      this.course = other.course;
    }
    if (other.isSetInstructor()) {
      this.instructor = other.instructor;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.weekDay = other.weekDay;
    this.timeStart = other.timeStart;
    if (other.isSetRoom()) {
      this.room = other.room;
    }
  }

  public Seance deepCopy() {
    return new Seance(this);
  }

  @Override
  public void clear() {
    this.course = null;
    this.instructor = null;
    this.type = null;
    setWeekDayIsSet(false);
    this.weekDay = 0;
    setTimeStartIsSet(false);
    this.timeStart = 0;
    this.room = null;
  }

  public String getCourse() {
    return this.course;
  }

  public Seance setCourse(String course) {
    this.course = course;
    return this;
  }

  public void unsetCourse() {
    this.course = null;
  }

  /** Returns true if field course is set (has been assigned a value) and false otherwise */
  public boolean isSetCourse() {
    return this.course != null;
  }

  public void setCourseIsSet(boolean value) {
    if (!value) {
      this.course = null;
    }
  }

  public String getInstructor() {
    return this.instructor;
  }

  public Seance setInstructor(String instructor) {
    this.instructor = instructor;
    return this;
  }

  public void unsetInstructor() {
    this.instructor = null;
  }

  /** Returns true if field instructor is set (has been assigned a value) and false otherwise */
  public boolean isSetInstructor() {
    return this.instructor != null;
  }

  public void setInstructorIsSet(boolean value) {
    if (!value) {
      this.instructor = null;
    }
  }

  /**
   * 
   * @see SeanceType
   */
  public SeanceType getType() {
    return this.type;
  }

  /**
   * 
   * @see SeanceType
   */
  public Seance setType(SeanceType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getWeekDay() {
    return this.weekDay;
  }

  public Seance setWeekDay(int weekDay) {
    this.weekDay = weekDay;
    setWeekDayIsSet(true);
    return this;
  }

  public void unsetWeekDay() {
    __isset_bit_vector.clear(__WEEKDAY_ISSET_ID);
  }

  /** Returns true if field weekDay is set (has been assigned a value) and false otherwise */
  public boolean isSetWeekDay() {
    return __isset_bit_vector.get(__WEEKDAY_ISSET_ID);
  }

  public void setWeekDayIsSet(boolean value) {
    __isset_bit_vector.set(__WEEKDAY_ISSET_ID, value);
  }

  public int getTimeStart() {
    return this.timeStart;
  }

  public Seance setTimeStart(int timeStart) {
    this.timeStart = timeStart;
    setTimeStartIsSet(true);
    return this;
  }

  public void unsetTimeStart() {
    __isset_bit_vector.clear(__TIMESTART_ISSET_ID);
  }

  /** Returns true if field timeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeStart() {
    return __isset_bit_vector.get(__TIMESTART_ISSET_ID);
  }

  public void setTimeStartIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTART_ISSET_ID, value);
  }

  public String getRoom() {
    return this.room;
  }

  public Seance setRoom(String room) {
    this.room = room;
    return this;
  }

  public void unsetRoom() {
    this.room = null;
  }

  /** Returns true if field room is set (has been assigned a value) and false otherwise */
  public boolean isSetRoom() {
    return this.room != null;
  }

  public void setRoomIsSet(boolean value) {
    if (!value) {
      this.room = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COURSE:
      if (value == null) {
        unsetCourse();
      } else {
        setCourse((String)value);
      }
      break;

    case INSTRUCTOR:
      if (value == null) {
        unsetInstructor();
      } else {
        setInstructor((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((SeanceType)value);
      }
      break;

    case WEEK_DAY:
      if (value == null) {
        unsetWeekDay();
      } else {
        setWeekDay((Integer)value);
      }
      break;

    case TIME_START:
      if (value == null) {
        unsetTimeStart();
      } else {
        setTimeStart((Integer)value);
      }
      break;

    case ROOM:
      if (value == null) {
        unsetRoom();
      } else {
        setRoom((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COURSE:
      return getCourse();

    case INSTRUCTOR:
      return getInstructor();

    case TYPE:
      return getType();

    case WEEK_DAY:
      return Integer.valueOf(getWeekDay());

    case TIME_START:
      return Integer.valueOf(getTimeStart());

    case ROOM:
      return getRoom();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COURSE:
      return isSetCourse();
    case INSTRUCTOR:
      return isSetInstructor();
    case TYPE:
      return isSetType();
    case WEEK_DAY:
      return isSetWeekDay();
    case TIME_START:
      return isSetTimeStart();
    case ROOM:
      return isSetRoom();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Seance)
      return this.equals((Seance)that);
    return false;
  }

  public boolean equals(Seance that) {
    if (that == null)
      return false;

    boolean this_present_course = true && this.isSetCourse();
    boolean that_present_course = true && that.isSetCourse();
    if (this_present_course || that_present_course) {
      if (!(this_present_course && that_present_course))
        return false;
      if (!this.course.equals(that.course))
        return false;
    }

    boolean this_present_instructor = true && this.isSetInstructor();
    boolean that_present_instructor = true && that.isSetInstructor();
    if (this_present_instructor || that_present_instructor) {
      if (!(this_present_instructor && that_present_instructor))
        return false;
      if (!this.instructor.equals(that.instructor))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_weekDay = true;
    boolean that_present_weekDay = true;
    if (this_present_weekDay || that_present_weekDay) {
      if (!(this_present_weekDay && that_present_weekDay))
        return false;
      if (this.weekDay != that.weekDay)
        return false;
    }

    boolean this_present_timeStart = true;
    boolean that_present_timeStart = true;
    if (this_present_timeStart || that_present_timeStart) {
      if (!(this_present_timeStart && that_present_timeStart))
        return false;
      if (this.timeStart != that.timeStart)
        return false;
    }

    boolean this_present_room = true && this.isSetRoom();
    boolean that_present_room = true && that.isSetRoom();
    if (this_present_room || that_present_room) {
      if (!(this_present_room && that_present_room))
        return false;
      if (!this.room.equals(that.room))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_course = true && (isSetCourse());
    builder.append(present_course);
    if (present_course)
      builder.append(course);

    boolean present_instructor = true && (isSetInstructor());
    builder.append(present_instructor);
    if (present_instructor)
      builder.append(instructor);

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type.getValue());

    boolean present_weekDay = true;
    builder.append(present_weekDay);
    if (present_weekDay)
      builder.append(weekDay);

    boolean present_timeStart = true;
    builder.append(present_timeStart);
    if (present_timeStart)
      builder.append(timeStart);

    boolean present_room = true && (isSetRoom());
    builder.append(present_room);
    if (present_room)
      builder.append(room);

    return builder.toHashCode();
  }

  public int compareTo(Seance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Seance typedOther = (Seance)other;

    lastComparison = Boolean.valueOf(isSetCourse()).compareTo(typedOther.isSetCourse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.course, typedOther.course);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstructor()).compareTo(typedOther.isSetInstructor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstructor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instructor, typedOther.instructor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeekDay()).compareTo(typedOther.isSetWeekDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeekDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weekDay, typedOther.weekDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeStart()).compareTo(typedOther.isSetTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStart, typedOther.timeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoom()).compareTo(typedOther.isSetRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.room, typedOther.room);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COURSE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.course = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // INSTRUCTOR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.instructor = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.type = SeanceType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // WEEK_DAY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.weekDay = iprot.readI32();
            setWeekDayIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TIME_START
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.timeStart = iprot.readI32();
            setTimeStartIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ROOM
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.room = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetWeekDay()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'weekDay' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetTimeStart()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeStart' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.course != null) {
      oprot.writeFieldBegin(COURSE_FIELD_DESC);
      oprot.writeString(this.course);
      oprot.writeFieldEnd();
    }
    if (this.instructor != null) {
      oprot.writeFieldBegin(INSTRUCTOR_FIELD_DESC);
      oprot.writeString(this.instructor);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(WEEK_DAY_FIELD_DESC);
    oprot.writeI32(this.weekDay);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TIME_START_FIELD_DESC);
    oprot.writeI32(this.timeStart);
    oprot.writeFieldEnd();
    if (this.room != null) {
      oprot.writeFieldBegin(ROOM_FIELD_DESC);
      oprot.writeString(this.room);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Seance(");
    boolean first = true;

    sb.append("course:");
    if (this.course == null) {
      sb.append("null");
    } else {
      sb.append(this.course);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instructor:");
    if (this.instructor == null) {
      sb.append("null");
    } else {
      sb.append(this.instructor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("weekDay:");
    sb.append(this.weekDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeStart:");
    sb.append(this.timeStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("room:");
    if (this.room == null) {
      sb.append("null");
    } else {
      sb.append(this.room);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (course == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'course' was not present! Struct: " + toString());
    }
    if (instructor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'instructor' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'weekDay' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timeStart' because it's a primitive and you chose the non-beans generator.
    if (room == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'room' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

