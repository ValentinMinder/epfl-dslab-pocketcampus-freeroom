/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.isacademia.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IsaSeance implements org.apache.thrift.TBase<IsaSeance, IsaSeance._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsaSeance");

  private static final org.apache.thrift.protocol.TField COURSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("courseName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SEANCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("seanceType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WEEK_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("weekDay", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SEANCE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("seanceDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SEANCE_ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("seanceRoom", org.apache.thrift.protocol.TType.STRING, (short)7);

  public String courseName; // required
  /**
   * 
   * @see SeanceType
   */
  public SeanceType seanceType; // required
  public int weekDay; // required
  public String startTime; // required
  public String endTime; // required
  public String seanceDate; // required
  public String seanceRoom; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COURSE_NAME((short)1, "courseName"),
    /**
     * 
     * @see SeanceType
     */
    SEANCE_TYPE((short)2, "seanceType"),
    WEEK_DAY((short)3, "weekDay"),
    START_TIME((short)4, "startTime"),
    END_TIME((short)5, "endTime"),
    SEANCE_DATE((short)6, "seanceDate"),
    SEANCE_ROOM((short)7, "seanceRoom");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COURSE_NAME
          return COURSE_NAME;
        case 2: // SEANCE_TYPE
          return SEANCE_TYPE;
        case 3: // WEEK_DAY
          return WEEK_DAY;
        case 4: // START_TIME
          return START_TIME;
        case 5: // END_TIME
          return END_TIME;
        case 6: // SEANCE_DATE
          return SEANCE_DATE;
        case 7: // SEANCE_ROOM
          return SEANCE_ROOM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WEEKDAY_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COURSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("courseName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEANCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("seanceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SeanceType.class)));
    tmpMap.put(_Fields.WEEK_DAY, new org.apache.thrift.meta_data.FieldMetaData("weekDay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEANCE_DATE, new org.apache.thrift.meta_data.FieldMetaData("seanceDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEANCE_ROOM, new org.apache.thrift.meta_data.FieldMetaData("seanceRoom", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsaSeance.class, metaDataMap);
  }

  public IsaSeance() {
  }

  public IsaSeance(
    String courseName,
    SeanceType seanceType,
    int weekDay,
    String startTime,
    String endTime,
    String seanceDate,
    String seanceRoom)
  {
    this();
    this.courseName = courseName;
    this.seanceType = seanceType;
    this.weekDay = weekDay;
    setWeekDayIsSet(true);
    this.startTime = startTime;
    this.endTime = endTime;
    this.seanceDate = seanceDate;
    this.seanceRoom = seanceRoom;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IsaSeance(IsaSeance other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCourseName()) {
      this.courseName = other.courseName;
    }
    if (other.isSetSeanceType()) {
      this.seanceType = other.seanceType;
    }
    this.weekDay = other.weekDay;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetSeanceDate()) {
      this.seanceDate = other.seanceDate;
    }
    if (other.isSetSeanceRoom()) {
      this.seanceRoom = other.seanceRoom;
    }
  }

  public IsaSeance deepCopy() {
    return new IsaSeance(this);
  }

  @Override
  public void clear() {
    this.courseName = null;
    this.seanceType = null;
    setWeekDayIsSet(false);
    this.weekDay = 0;
    this.startTime = null;
    this.endTime = null;
    this.seanceDate = null;
    this.seanceRoom = null;
  }

  public String getCourseName() {
    return this.courseName;
  }

  public IsaSeance setCourseName(String courseName) {
    this.courseName = courseName;
    return this;
  }

  public void unsetCourseName() {
    this.courseName = null;
  }

  /** Returns true if field courseName is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseName() {
    return this.courseName != null;
  }

  public void setCourseNameIsSet(boolean value) {
    if (!value) {
      this.courseName = null;
    }
  }

  /**
   * 
   * @see SeanceType
   */
  public SeanceType getSeanceType() {
    return this.seanceType;
  }

  /**
   * 
   * @see SeanceType
   */
  public IsaSeance setSeanceType(SeanceType seanceType) {
    this.seanceType = seanceType;
    return this;
  }

  public void unsetSeanceType() {
    this.seanceType = null;
  }

  /** Returns true if field seanceType is set (has been assigned a value) and false otherwise */
  public boolean isSetSeanceType() {
    return this.seanceType != null;
  }

  public void setSeanceTypeIsSet(boolean value) {
    if (!value) {
      this.seanceType = null;
    }
  }

  public int getWeekDay() {
    return this.weekDay;
  }

  public IsaSeance setWeekDay(int weekDay) {
    this.weekDay = weekDay;
    setWeekDayIsSet(true);
    return this;
  }

  public void unsetWeekDay() {
    __isset_bit_vector.clear(__WEEKDAY_ISSET_ID);
  }

  /** Returns true if field weekDay is set (has been assigned a value) and false otherwise */
  public boolean isSetWeekDay() {
    return __isset_bit_vector.get(__WEEKDAY_ISSET_ID);
  }

  public void setWeekDayIsSet(boolean value) {
    __isset_bit_vector.set(__WEEKDAY_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public IsaSeance setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public IsaSeance setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getSeanceDate() {
    return this.seanceDate;
  }

  public IsaSeance setSeanceDate(String seanceDate) {
    this.seanceDate = seanceDate;
    return this;
  }

  public void unsetSeanceDate() {
    this.seanceDate = null;
  }

  /** Returns true if field seanceDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSeanceDate() {
    return this.seanceDate != null;
  }

  public void setSeanceDateIsSet(boolean value) {
    if (!value) {
      this.seanceDate = null;
    }
  }

  public String getSeanceRoom() {
    return this.seanceRoom;
  }

  public IsaSeance setSeanceRoom(String seanceRoom) {
    this.seanceRoom = seanceRoom;
    return this;
  }

  public void unsetSeanceRoom() {
    this.seanceRoom = null;
  }

  /** Returns true if field seanceRoom is set (has been assigned a value) and false otherwise */
  public boolean isSetSeanceRoom() {
    return this.seanceRoom != null;
  }

  public void setSeanceRoomIsSet(boolean value) {
    if (!value) {
      this.seanceRoom = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COURSE_NAME:
      if (value == null) {
        unsetCourseName();
      } else {
        setCourseName((String)value);
      }
      break;

    case SEANCE_TYPE:
      if (value == null) {
        unsetSeanceType();
      } else {
        setSeanceType((SeanceType)value);
      }
      break;

    case WEEK_DAY:
      if (value == null) {
        unsetWeekDay();
      } else {
        setWeekDay((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case SEANCE_DATE:
      if (value == null) {
        unsetSeanceDate();
      } else {
        setSeanceDate((String)value);
      }
      break;

    case SEANCE_ROOM:
      if (value == null) {
        unsetSeanceRoom();
      } else {
        setSeanceRoom((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COURSE_NAME:
      return getCourseName();

    case SEANCE_TYPE:
      return getSeanceType();

    case WEEK_DAY:
      return Integer.valueOf(getWeekDay());

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case SEANCE_DATE:
      return getSeanceDate();

    case SEANCE_ROOM:
      return getSeanceRoom();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COURSE_NAME:
      return isSetCourseName();
    case SEANCE_TYPE:
      return isSetSeanceType();
    case WEEK_DAY:
      return isSetWeekDay();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case SEANCE_DATE:
      return isSetSeanceDate();
    case SEANCE_ROOM:
      return isSetSeanceRoom();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IsaSeance)
      return this.equals((IsaSeance)that);
    return false;
  }

  public boolean equals(IsaSeance that) {
    if (that == null)
      return false;

    boolean this_present_courseName = true && this.isSetCourseName();
    boolean that_present_courseName = true && that.isSetCourseName();
    if (this_present_courseName || that_present_courseName) {
      if (!(this_present_courseName && that_present_courseName))
        return false;
      if (!this.courseName.equals(that.courseName))
        return false;
    }

    boolean this_present_seanceType = true && this.isSetSeanceType();
    boolean that_present_seanceType = true && that.isSetSeanceType();
    if (this_present_seanceType || that_present_seanceType) {
      if (!(this_present_seanceType && that_present_seanceType))
        return false;
      if (!this.seanceType.equals(that.seanceType))
        return false;
    }

    boolean this_present_weekDay = true;
    boolean that_present_weekDay = true;
    if (this_present_weekDay || that_present_weekDay) {
      if (!(this_present_weekDay && that_present_weekDay))
        return false;
      if (this.weekDay != that.weekDay)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_seanceDate = true && this.isSetSeanceDate();
    boolean that_present_seanceDate = true && that.isSetSeanceDate();
    if (this_present_seanceDate || that_present_seanceDate) {
      if (!(this_present_seanceDate && that_present_seanceDate))
        return false;
      if (!this.seanceDate.equals(that.seanceDate))
        return false;
    }

    boolean this_present_seanceRoom = true && this.isSetSeanceRoom();
    boolean that_present_seanceRoom = true && that.isSetSeanceRoom();
    if (this_present_seanceRoom || that_present_seanceRoom) {
      if (!(this_present_seanceRoom && that_present_seanceRoom))
        return false;
      if (!this.seanceRoom.equals(that.seanceRoom))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_courseName = true && (isSetCourseName());
    builder.append(present_courseName);
    if (present_courseName)
      builder.append(courseName);

    boolean present_seanceType = true && (isSetSeanceType());
    builder.append(present_seanceType);
    if (present_seanceType)
      builder.append(seanceType.getValue());

    boolean present_weekDay = true;
    builder.append(present_weekDay);
    if (present_weekDay)
      builder.append(weekDay);

    boolean present_startTime = true && (isSetStartTime());
    builder.append(present_startTime);
    if (present_startTime)
      builder.append(startTime);

    boolean present_endTime = true && (isSetEndTime());
    builder.append(present_endTime);
    if (present_endTime)
      builder.append(endTime);

    boolean present_seanceDate = true && (isSetSeanceDate());
    builder.append(present_seanceDate);
    if (present_seanceDate)
      builder.append(seanceDate);

    boolean present_seanceRoom = true && (isSetSeanceRoom());
    builder.append(present_seanceRoom);
    if (present_seanceRoom)
      builder.append(seanceRoom);

    return builder.toHashCode();
  }

  public int compareTo(IsaSeance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    IsaSeance typedOther = (IsaSeance)other;

    lastComparison = Boolean.valueOf(isSetCourseName()).compareTo(typedOther.isSetCourseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseName, typedOther.courseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeanceType()).compareTo(typedOther.isSetSeanceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeanceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seanceType, typedOther.seanceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeekDay()).compareTo(typedOther.isSetWeekDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeekDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weekDay, typedOther.weekDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeanceDate()).compareTo(typedOther.isSetSeanceDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeanceDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seanceDate, typedOther.seanceDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeanceRoom()).compareTo(typedOther.isSetSeanceRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeanceRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seanceRoom, typedOther.seanceRoom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COURSE_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.courseName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SEANCE_TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.seanceType = SeanceType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // WEEK_DAY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.weekDay = iprot.readI32();
            setWeekDayIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // START_TIME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.startTime = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // END_TIME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.endTime = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SEANCE_DATE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.seanceDate = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SEANCE_ROOM
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.seanceRoom = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetWeekDay()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'weekDay' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.courseName != null) {
      oprot.writeFieldBegin(COURSE_NAME_FIELD_DESC);
      oprot.writeString(this.courseName);
      oprot.writeFieldEnd();
    }
    if (this.seanceType != null) {
      oprot.writeFieldBegin(SEANCE_TYPE_FIELD_DESC);
      oprot.writeI32(this.seanceType.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(WEEK_DAY_FIELD_DESC);
    oprot.writeI32(this.weekDay);
    oprot.writeFieldEnd();
    if (this.startTime != null) {
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeString(this.startTime);
      oprot.writeFieldEnd();
    }
    if (this.endTime != null) {
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeString(this.endTime);
      oprot.writeFieldEnd();
    }
    if (this.seanceDate != null) {
      oprot.writeFieldBegin(SEANCE_DATE_FIELD_DESC);
      oprot.writeString(this.seanceDate);
      oprot.writeFieldEnd();
    }
    if (this.seanceRoom != null) {
      oprot.writeFieldBegin(SEANCE_ROOM_FIELD_DESC);
      oprot.writeString(this.seanceRoom);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IsaSeance(");
    boolean first = true;

    sb.append("courseName:");
    if (this.courseName == null) {
      sb.append("null");
    } else {
      sb.append(this.courseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seanceType:");
    if (this.seanceType == null) {
      sb.append("null");
    } else {
      sb.append(this.seanceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("weekDay:");
    sb.append(this.weekDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seanceDate:");
    if (this.seanceDate == null) {
      sb.append("null");
    } else {
      sb.append(this.seanceDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seanceRoom:");
    if (this.seanceRoom == null) {
      sb.append("null");
    } else {
      sb.append(this.seanceRoom);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (courseName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'courseName' was not present! Struct: " + toString());
    }
    if (seanceType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'seanceType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'weekDay' because it's a primitive and you chose the non-beans generator.
    if (startTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not present! Struct: " + toString());
    }
    if (endTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' was not present! Struct: " + toString());
    }
    if (seanceDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'seanceDate' was not present! Struct: " + toString());
    }
    if (seanceRoom == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'seanceRoom' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

