/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.qaforum.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class addagru implements org.apache.thrift.TBase<addagru, addagru._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addagru");

  private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField O2_FIELD_DESC = new org.apache.thrift.protocol.TField("o2", org.apache.thrift.protocol.TType.I32, (short)2);

  public int o1; // required
  public int o2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    O1((short)1, "o1"),
    O2((short)2, "o2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // O1
          return O1;
        case 2: // O2
          return O2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __O1_ISSET_ID = 0;
  private static final int __O2_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.O2, new org.apache.thrift.meta_data.FieldMetaData("o2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addagru.class, metaDataMap);
  }

  public addagru() {
  }

  public addagru(
    int o1,
    int o2)
  {
    this();
    this.o1 = o1;
    setO1IsSet(true);
    this.o2 = o2;
    setO2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public addagru(addagru other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.o1 = other.o1;
    this.o2 = other.o2;
  }

  public addagru deepCopy() {
    return new addagru(this);
  }

  @Override
  public void clear() {
    setO1IsSet(false);
    this.o1 = 0;
    setO2IsSet(false);
    this.o2 = 0;
  }

  public int getO1() {
    return this.o1;
  }

  public addagru setO1(int o1) {
    this.o1 = o1;
    setO1IsSet(true);
    return this;
  }

  public void unsetO1() {
    __isset_bit_vector.clear(__O1_ISSET_ID);
  }

  /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
  public boolean isSetO1() {
    return __isset_bit_vector.get(__O1_ISSET_ID);
  }

  public void setO1IsSet(boolean value) {
    __isset_bit_vector.set(__O1_ISSET_ID, value);
  }

  public int getO2() {
    return this.o2;
  }

  public addagru setO2(int o2) {
    this.o2 = o2;
    setO2IsSet(true);
    return this;
  }

  public void unsetO2() {
    __isset_bit_vector.clear(__O2_ISSET_ID);
  }

  /** Returns true if field o2 is set (has been assigned a value) and false otherwise */
  public boolean isSetO2() {
    return __isset_bit_vector.get(__O2_ISSET_ID);
  }

  public void setO2IsSet(boolean value) {
    __isset_bit_vector.set(__O2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case O1:
      if (value == null) {
        unsetO1();
      } else {
        setO1((Integer)value);
      }
      break;

    case O2:
      if (value == null) {
        unsetO2();
      } else {
        setO2((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case O1:
      return Integer.valueOf(getO1());

    case O2:
      return Integer.valueOf(getO2());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case O1:
      return isSetO1();
    case O2:
      return isSetO2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof addagru)
      return this.equals((addagru)that);
    return false;
  }

  public boolean equals(addagru that) {
    if (that == null)
      return false;

    boolean this_present_o1 = true;
    boolean that_present_o1 = true;
    if (this_present_o1 || that_present_o1) {
      if (!(this_present_o1 && that_present_o1))
        return false;
      if (this.o1 != that.o1)
        return false;
    }

    boolean this_present_o2 = true;
    boolean that_present_o2 = true;
    if (this_present_o2 || that_present_o2) {
      if (!(this_present_o2 && that_present_o2))
        return false;
      if (this.o2 != that.o2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_o1 = true;
    builder.append(present_o1);
    if (present_o1)
      builder.append(o1);

    boolean present_o2 = true;
    builder.append(present_o2);
    if (present_o2)
      builder.append(o2);

    return builder.toHashCode();
  }

  public int compareTo(addagru other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    addagru typedOther = (addagru)other;

    lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetO1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetO2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o2, typedOther.o2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // O1
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.o1 = iprot.readI32();
            setO1IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // O2
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.o2 = iprot.readI32();
            setO2IsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetO1()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'o1' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetO2()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'o2' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(O1_FIELD_DESC);
    oprot.writeI32(this.o1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(O2_FIELD_DESC);
    oprot.writeI32(this.o2);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("addagru(");
    boolean first = true;

    sb.append("o1:");
    sb.append(this.o1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("o2:");
    sb.append(this.o2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'o1' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'o2' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

