/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.qaforum.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class s_session implements org.apache.thrift.TBase<s_session, s_session._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("s_session");

  private static final org.apache.thrift.protocol.TField SESSIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACCEPT_FIELD_DESC = new org.apache.thrift.protocol.TField("accept", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RESTTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("resttime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ASKTOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("asktopic", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ASKEXPIRY_FIELD_DESC = new org.apache.thrift.protocol.TField("askexpiry", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField INTRO_FIELD_DESC = new org.apache.thrift.protocol.TField("intro", org.apache.thrift.protocol.TType.I32, (short)8);

  public String sessionid; // required
  public int accept; // required
  public int resttime; // required
  public String language; // required
  public String topic; // required
  public int asktopic; // required
  public int askexpiry; // required
  public int intro; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSIONID((short)1, "sessionid"),
    ACCEPT((short)2, "accept"),
    RESTTIME((short)3, "resttime"),
    LANGUAGE((short)4, "language"),
    TOPIC((short)5, "topic"),
    ASKTOPIC((short)6, "asktopic"),
    ASKEXPIRY((short)7, "askexpiry"),
    INTRO((short)8, "intro");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSIONID
          return SESSIONID;
        case 2: // ACCEPT
          return ACCEPT;
        case 3: // RESTTIME
          return RESTTIME;
        case 4: // LANGUAGE
          return LANGUAGE;
        case 5: // TOPIC
          return TOPIC;
        case 6: // ASKTOPIC
          return ASKTOPIC;
        case 7: // ASKEXPIRY
          return ASKEXPIRY;
        case 8: // INTRO
          return INTRO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCEPT_ISSET_ID = 0;
  private static final int __RESTTIME_ISSET_ID = 1;
  private static final int __ASKTOPIC_ISSET_ID = 2;
  private static final int __ASKEXPIRY_ISSET_ID = 3;
  private static final int __INTRO_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSIONID, new org.apache.thrift.meta_data.FieldMetaData("sessionid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCEPT, new org.apache.thrift.meta_data.FieldMetaData("accept", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESTTIME, new org.apache.thrift.meta_data.FieldMetaData("resttime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASKTOPIC, new org.apache.thrift.meta_data.FieldMetaData("asktopic", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASKEXPIRY, new org.apache.thrift.meta_data.FieldMetaData("askexpiry", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTRO, new org.apache.thrift.meta_data.FieldMetaData("intro", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(s_session.class, metaDataMap);
  }

  public s_session() {
  }

  public s_session(
    String sessionid,
    int accept,
    int resttime,
    String language,
    String topic,
    int asktopic,
    int askexpiry,
    int intro)
  {
    this();
    this.sessionid = sessionid;
    this.accept = accept;
    setAcceptIsSet(true);
    this.resttime = resttime;
    setResttimeIsSet(true);
    this.language = language;
    this.topic = topic;
    this.asktopic = asktopic;
    setAsktopicIsSet(true);
    this.askexpiry = askexpiry;
    setAskexpiryIsSet(true);
    this.intro = intro;
    setIntroIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public s_session(s_session other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSessionid()) {
      this.sessionid = other.sessionid;
    }
    this.accept = other.accept;
    this.resttime = other.resttime;
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetTopic()) {
      this.topic = other.topic;
    }
    this.asktopic = other.asktopic;
    this.askexpiry = other.askexpiry;
    this.intro = other.intro;
  }

  public s_session deepCopy() {
    return new s_session(this);
  }

  @Override
  public void clear() {
    this.sessionid = null;
    setAcceptIsSet(false);
    this.accept = 0;
    setResttimeIsSet(false);
    this.resttime = 0;
    this.language = null;
    this.topic = null;
    setAsktopicIsSet(false);
    this.asktopic = 0;
    setAskexpiryIsSet(false);
    this.askexpiry = 0;
    setIntroIsSet(false);
    this.intro = 0;
  }

  public String getSessionid() {
    return this.sessionid;
  }

  public s_session setSessionid(String sessionid) {
    this.sessionid = sessionid;
    return this;
  }

  public void unsetSessionid() {
    this.sessionid = null;
  }

  /** Returns true if field sessionid is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionid() {
    return this.sessionid != null;
  }

  public void setSessionidIsSet(boolean value) {
    if (!value) {
      this.sessionid = null;
    }
  }

  public int getAccept() {
    return this.accept;
  }

  public s_session setAccept(int accept) {
    this.accept = accept;
    setAcceptIsSet(true);
    return this;
  }

  public void unsetAccept() {
    __isset_bit_vector.clear(__ACCEPT_ISSET_ID);
  }

  /** Returns true if field accept is set (has been assigned a value) and false otherwise */
  public boolean isSetAccept() {
    return __isset_bit_vector.get(__ACCEPT_ISSET_ID);
  }

  public void setAcceptIsSet(boolean value) {
    __isset_bit_vector.set(__ACCEPT_ISSET_ID, value);
  }

  public int getResttime() {
    return this.resttime;
  }

  public s_session setResttime(int resttime) {
    this.resttime = resttime;
    setResttimeIsSet(true);
    return this;
  }

  public void unsetResttime() {
    __isset_bit_vector.clear(__RESTTIME_ISSET_ID);
  }

  /** Returns true if field resttime is set (has been assigned a value) and false otherwise */
  public boolean isSetResttime() {
    return __isset_bit_vector.get(__RESTTIME_ISSET_ID);
  }

  public void setResttimeIsSet(boolean value) {
    __isset_bit_vector.set(__RESTTIME_ISSET_ID, value);
  }

  public String getLanguage() {
    return this.language;
  }

  public s_session setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getTopic() {
    return this.topic;
  }

  public s_session setTopic(String topic) {
    this.topic = topic;
    return this;
  }

  public void unsetTopic() {
    this.topic = null;
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return this.topic != null;
  }

  public void setTopicIsSet(boolean value) {
    if (!value) {
      this.topic = null;
    }
  }

  public int getAsktopic() {
    return this.asktopic;
  }

  public s_session setAsktopic(int asktopic) {
    this.asktopic = asktopic;
    setAsktopicIsSet(true);
    return this;
  }

  public void unsetAsktopic() {
    __isset_bit_vector.clear(__ASKTOPIC_ISSET_ID);
  }

  /** Returns true if field asktopic is set (has been assigned a value) and false otherwise */
  public boolean isSetAsktopic() {
    return __isset_bit_vector.get(__ASKTOPIC_ISSET_ID);
  }

  public void setAsktopicIsSet(boolean value) {
    __isset_bit_vector.set(__ASKTOPIC_ISSET_ID, value);
  }

  public int getAskexpiry() {
    return this.askexpiry;
  }

  public s_session setAskexpiry(int askexpiry) {
    this.askexpiry = askexpiry;
    setAskexpiryIsSet(true);
    return this;
  }

  public void unsetAskexpiry() {
    __isset_bit_vector.clear(__ASKEXPIRY_ISSET_ID);
  }

  /** Returns true if field askexpiry is set (has been assigned a value) and false otherwise */
  public boolean isSetAskexpiry() {
    return __isset_bit_vector.get(__ASKEXPIRY_ISSET_ID);
  }

  public void setAskexpiryIsSet(boolean value) {
    __isset_bit_vector.set(__ASKEXPIRY_ISSET_ID, value);
  }

  public int getIntro() {
    return this.intro;
  }

  public s_session setIntro(int intro) {
    this.intro = intro;
    setIntroIsSet(true);
    return this;
  }

  public void unsetIntro() {
    __isset_bit_vector.clear(__INTRO_ISSET_ID);
  }

  /** Returns true if field intro is set (has been assigned a value) and false otherwise */
  public boolean isSetIntro() {
    return __isset_bit_vector.get(__INTRO_ISSET_ID);
  }

  public void setIntroIsSet(boolean value) {
    __isset_bit_vector.set(__INTRO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSIONID:
      if (value == null) {
        unsetSessionid();
      } else {
        setSessionid((String)value);
      }
      break;

    case ACCEPT:
      if (value == null) {
        unsetAccept();
      } else {
        setAccept((Integer)value);
      }
      break;

    case RESTTIME:
      if (value == null) {
        unsetResttime();
      } else {
        setResttime((Integer)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((String)value);
      }
      break;

    case ASKTOPIC:
      if (value == null) {
        unsetAsktopic();
      } else {
        setAsktopic((Integer)value);
      }
      break;

    case ASKEXPIRY:
      if (value == null) {
        unsetAskexpiry();
      } else {
        setAskexpiry((Integer)value);
      }
      break;

    case INTRO:
      if (value == null) {
        unsetIntro();
      } else {
        setIntro((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSIONID:
      return getSessionid();

    case ACCEPT:
      return Integer.valueOf(getAccept());

    case RESTTIME:
      return Integer.valueOf(getResttime());

    case LANGUAGE:
      return getLanguage();

    case TOPIC:
      return getTopic();

    case ASKTOPIC:
      return Integer.valueOf(getAsktopic());

    case ASKEXPIRY:
      return Integer.valueOf(getAskexpiry());

    case INTRO:
      return Integer.valueOf(getIntro());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSIONID:
      return isSetSessionid();
    case ACCEPT:
      return isSetAccept();
    case RESTTIME:
      return isSetResttime();
    case LANGUAGE:
      return isSetLanguage();
    case TOPIC:
      return isSetTopic();
    case ASKTOPIC:
      return isSetAsktopic();
    case ASKEXPIRY:
      return isSetAskexpiry();
    case INTRO:
      return isSetIntro();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof s_session)
      return this.equals((s_session)that);
    return false;
  }

  public boolean equals(s_session that) {
    if (that == null)
      return false;

    boolean this_present_sessionid = true && this.isSetSessionid();
    boolean that_present_sessionid = true && that.isSetSessionid();
    if (this_present_sessionid || that_present_sessionid) {
      if (!(this_present_sessionid && that_present_sessionid))
        return false;
      if (!this.sessionid.equals(that.sessionid))
        return false;
    }

    boolean this_present_accept = true;
    boolean that_present_accept = true;
    if (this_present_accept || that_present_accept) {
      if (!(this_present_accept && that_present_accept))
        return false;
      if (this.accept != that.accept)
        return false;
    }

    boolean this_present_resttime = true;
    boolean that_present_resttime = true;
    if (this_present_resttime || that_present_resttime) {
      if (!(this_present_resttime && that_present_resttime))
        return false;
      if (this.resttime != that.resttime)
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_topic = true && this.isSetTopic();
    boolean that_present_topic = true && that.isSetTopic();
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (!this.topic.equals(that.topic))
        return false;
    }

    boolean this_present_asktopic = true;
    boolean that_present_asktopic = true;
    if (this_present_asktopic || that_present_asktopic) {
      if (!(this_present_asktopic && that_present_asktopic))
        return false;
      if (this.asktopic != that.asktopic)
        return false;
    }

    boolean this_present_askexpiry = true;
    boolean that_present_askexpiry = true;
    if (this_present_askexpiry || that_present_askexpiry) {
      if (!(this_present_askexpiry && that_present_askexpiry))
        return false;
      if (this.askexpiry != that.askexpiry)
        return false;
    }

    boolean this_present_intro = true;
    boolean that_present_intro = true;
    if (this_present_intro || that_present_intro) {
      if (!(this_present_intro && that_present_intro))
        return false;
      if (this.intro != that.intro)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_sessionid = true && (isSetSessionid());
    builder.append(present_sessionid);
    if (present_sessionid)
      builder.append(sessionid);

    boolean present_accept = true;
    builder.append(present_accept);
    if (present_accept)
      builder.append(accept);

    boolean present_resttime = true;
    builder.append(present_resttime);
    if (present_resttime)
      builder.append(resttime);

    boolean present_language = true && (isSetLanguage());
    builder.append(present_language);
    if (present_language)
      builder.append(language);

    boolean present_topic = true && (isSetTopic());
    builder.append(present_topic);
    if (present_topic)
      builder.append(topic);

    boolean present_asktopic = true;
    builder.append(present_asktopic);
    if (present_asktopic)
      builder.append(asktopic);

    boolean present_askexpiry = true;
    builder.append(present_askexpiry);
    if (present_askexpiry)
      builder.append(askexpiry);

    boolean present_intro = true;
    builder.append(present_intro);
    if (present_intro)
      builder.append(intro);

    return builder.toHashCode();
  }

  public int compareTo(s_session other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    s_session typedOther = (s_session)other;

    lastComparison = Boolean.valueOf(isSetSessionid()).compareTo(typedOther.isSetSessionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionid, typedOther.sessionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccept()).compareTo(typedOther.isSetAccept());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccept()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accept, typedOther.accept);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResttime()).compareTo(typedOther.isSetResttime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResttime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resttime, typedOther.resttime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(typedOther.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, typedOther.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAsktopic()).compareTo(typedOther.isSetAsktopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsktopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asktopic, typedOther.asktopic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskexpiry()).compareTo(typedOther.isSetAskexpiry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskexpiry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askexpiry, typedOther.askexpiry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntro()).compareTo(typedOther.isSetIntro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intro, typedOther.intro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SESSIONID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.sessionid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ACCEPT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.accept = iprot.readI32();
            setAcceptIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // RESTTIME
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.resttime = iprot.readI32();
            setResttimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LANGUAGE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.language = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TOPIC
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.topic = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ASKTOPIC
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.asktopic = iprot.readI32();
            setAsktopicIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // ASKEXPIRY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.askexpiry = iprot.readI32();
            setAskexpiryIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // INTRO
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.intro = iprot.readI32();
            setIntroIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetAccept()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accept' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetResttime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resttime' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetAsktopic()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'asktopic' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetAskexpiry()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'askexpiry' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetIntro()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'intro' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.sessionid != null) {
      oprot.writeFieldBegin(SESSIONID_FIELD_DESC);
      oprot.writeString(this.sessionid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ACCEPT_FIELD_DESC);
    oprot.writeI32(this.accept);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(RESTTIME_FIELD_DESC);
    oprot.writeI32(this.resttime);
    oprot.writeFieldEnd();
    if (this.language != null) {
      oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.topic != null) {
      oprot.writeFieldBegin(TOPIC_FIELD_DESC);
      oprot.writeString(this.topic);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ASKTOPIC_FIELD_DESC);
    oprot.writeI32(this.asktopic);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ASKEXPIRY_FIELD_DESC);
    oprot.writeI32(this.askexpiry);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(INTRO_FIELD_DESC);
    oprot.writeI32(this.intro);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("s_session(");
    boolean first = true;

    sb.append("sessionid:");
    if (this.sessionid == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accept:");
    sb.append(this.accept);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resttime:");
    sb.append(this.resttime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic:");
    if (this.topic == null) {
      sb.append("null");
    } else {
      sb.append(this.topic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("asktopic:");
    sb.append(this.asktopic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askexpiry:");
    sb.append(this.askexpiry);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intro:");
    sb.append(this.intro);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sessionid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'accept' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'resttime' because it's a primitive and you chose the non-beans generator.
    if (language == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'language' was not present! Struct: " + toString());
    }
    if (topic == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'topic' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'asktopic' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'askexpiry' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'intro' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

