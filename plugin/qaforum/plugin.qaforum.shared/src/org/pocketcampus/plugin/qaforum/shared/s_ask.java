/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.qaforum.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class s_ask implements org.apache.thrift.TBase<s_ask, s_ask._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("s_ask");

  private static final org.apache.thrift.protocol.TField SESSIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXPIRYTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expirytime", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField QUESID_FIELD_DESC = new org.apache.thrift.protocol.TField("quesid", org.apache.thrift.protocol.TType.I32, (short)6);

  public String sessionid; // required
  public String content; // required
  public int topic; // required
  public String tags; // required
  public int expirytime; // required
  public int quesid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSIONID((short)1, "sessionid"),
    CONTENT((short)2, "content"),
    TOPIC((short)3, "topic"),
    TAGS((short)4, "tags"),
    EXPIRYTIME((short)5, "expirytime"),
    QUESID((short)6, "quesid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSIONID
          return SESSIONID;
        case 2: // CONTENT
          return CONTENT;
        case 3: // TOPIC
          return TOPIC;
        case 4: // TAGS
          return TAGS;
        case 5: // EXPIRYTIME
          return EXPIRYTIME;
        case 6: // QUESID
          return QUESID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOPIC_ISSET_ID = 0;
  private static final int __EXPIRYTIME_ISSET_ID = 1;
  private static final int __QUESID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSIONID, new org.apache.thrift.meta_data.FieldMetaData("sessionid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRYTIME, new org.apache.thrift.meta_data.FieldMetaData("expirytime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESID, new org.apache.thrift.meta_data.FieldMetaData("quesid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(s_ask.class, metaDataMap);
  }

  public s_ask() {
  }

  public s_ask(
    String sessionid,
    String content,
    int topic,
    String tags,
    int expirytime,
    int quesid)
  {
    this();
    this.sessionid = sessionid;
    this.content = content;
    this.topic = topic;
    setTopicIsSet(true);
    this.tags = tags;
    this.expirytime = expirytime;
    setExpirytimeIsSet(true);
    this.quesid = quesid;
    setQuesidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public s_ask(s_ask other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSessionid()) {
      this.sessionid = other.sessionid;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.topic = other.topic;
    if (other.isSetTags()) {
      this.tags = other.tags;
    }
    this.expirytime = other.expirytime;
    this.quesid = other.quesid;
  }

  public s_ask deepCopy() {
    return new s_ask(this);
  }

  @Override
  public void clear() {
    this.sessionid = null;
    this.content = null;
    setTopicIsSet(false);
    this.topic = 0;
    this.tags = null;
    setExpirytimeIsSet(false);
    this.expirytime = 0;
    setQuesidIsSet(false);
    this.quesid = 0;
  }

  public String getSessionid() {
    return this.sessionid;
  }

  public s_ask setSessionid(String sessionid) {
    this.sessionid = sessionid;
    return this;
  }

  public void unsetSessionid() {
    this.sessionid = null;
  }

  /** Returns true if field sessionid is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionid() {
    return this.sessionid != null;
  }

  public void setSessionidIsSet(boolean value) {
    if (!value) {
      this.sessionid = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public s_ask setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getTopic() {
    return this.topic;
  }

  public s_ask setTopic(int topic) {
    this.topic = topic;
    setTopicIsSet(true);
    return this;
  }

  public void unsetTopic() {
    __isset_bit_vector.clear(__TOPIC_ISSET_ID);
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return __isset_bit_vector.get(__TOPIC_ISSET_ID);
  }

  public void setTopicIsSet(boolean value) {
    __isset_bit_vector.set(__TOPIC_ISSET_ID, value);
  }

  public String getTags() {
    return this.tags;
  }

  public s_ask setTags(String tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getExpirytime() {
    return this.expirytime;
  }

  public s_ask setExpirytime(int expirytime) {
    this.expirytime = expirytime;
    setExpirytimeIsSet(true);
    return this;
  }

  public void unsetExpirytime() {
    __isset_bit_vector.clear(__EXPIRYTIME_ISSET_ID);
  }

  /** Returns true if field expirytime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpirytime() {
    return __isset_bit_vector.get(__EXPIRYTIME_ISSET_ID);
  }

  public void setExpirytimeIsSet(boolean value) {
    __isset_bit_vector.set(__EXPIRYTIME_ISSET_ID, value);
  }

  public int getQuesid() {
    return this.quesid;
  }

  public s_ask setQuesid(int quesid) {
    this.quesid = quesid;
    setQuesidIsSet(true);
    return this;
  }

  public void unsetQuesid() {
    __isset_bit_vector.clear(__QUESID_ISSET_ID);
  }

  /** Returns true if field quesid is set (has been assigned a value) and false otherwise */
  public boolean isSetQuesid() {
    return __isset_bit_vector.get(__QUESID_ISSET_ID);
  }

  public void setQuesidIsSet(boolean value) {
    __isset_bit_vector.set(__QUESID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSIONID:
      if (value == null) {
        unsetSessionid();
      } else {
        setSessionid((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((Integer)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((String)value);
      }
      break;

    case EXPIRYTIME:
      if (value == null) {
        unsetExpirytime();
      } else {
        setExpirytime((Integer)value);
      }
      break;

    case QUESID:
      if (value == null) {
        unsetQuesid();
      } else {
        setQuesid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSIONID:
      return getSessionid();

    case CONTENT:
      return getContent();

    case TOPIC:
      return Integer.valueOf(getTopic());

    case TAGS:
      return getTags();

    case EXPIRYTIME:
      return Integer.valueOf(getExpirytime());

    case QUESID:
      return Integer.valueOf(getQuesid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSIONID:
      return isSetSessionid();
    case CONTENT:
      return isSetContent();
    case TOPIC:
      return isSetTopic();
    case TAGS:
      return isSetTags();
    case EXPIRYTIME:
      return isSetExpirytime();
    case QUESID:
      return isSetQuesid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof s_ask)
      return this.equals((s_ask)that);
    return false;
  }

  public boolean equals(s_ask that) {
    if (that == null)
      return false;

    boolean this_present_sessionid = true && this.isSetSessionid();
    boolean that_present_sessionid = true && that.isSetSessionid();
    if (this_present_sessionid || that_present_sessionid) {
      if (!(this_present_sessionid && that_present_sessionid))
        return false;
      if (!this.sessionid.equals(that.sessionid))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_topic = true;
    boolean that_present_topic = true;
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (this.topic != that.topic)
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_expirytime = true;
    boolean that_present_expirytime = true;
    if (this_present_expirytime || that_present_expirytime) {
      if (!(this_present_expirytime && that_present_expirytime))
        return false;
      if (this.expirytime != that.expirytime)
        return false;
    }

    boolean this_present_quesid = true;
    boolean that_present_quesid = true;
    if (this_present_quesid || that_present_quesid) {
      if (!(this_present_quesid && that_present_quesid))
        return false;
      if (this.quesid != that.quesid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_sessionid = true && (isSetSessionid());
    builder.append(present_sessionid);
    if (present_sessionid)
      builder.append(sessionid);

    boolean present_content = true && (isSetContent());
    builder.append(present_content);
    if (present_content)
      builder.append(content);

    boolean present_topic = true;
    builder.append(present_topic);
    if (present_topic)
      builder.append(topic);

    boolean present_tags = true && (isSetTags());
    builder.append(present_tags);
    if (present_tags)
      builder.append(tags);

    boolean present_expirytime = true;
    builder.append(present_expirytime);
    if (present_expirytime)
      builder.append(expirytime);

    boolean present_quesid = true;
    builder.append(present_quesid);
    if (present_quesid)
      builder.append(quesid);

    return builder.toHashCode();
  }

  public int compareTo(s_ask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    s_ask typedOther = (s_ask)other;

    lastComparison = Boolean.valueOf(isSetSessionid()).compareTo(typedOther.isSetSessionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionid, typedOther.sessionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(typedOther.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, typedOther.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(typedOther.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, typedOther.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpirytime()).compareTo(typedOther.isSetExpirytime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpirytime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expirytime, typedOther.expirytime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuesid()).compareTo(typedOther.isSetQuesid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuesid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quesid, typedOther.quesid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SESSIONID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.sessionid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CONTENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.content = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TOPIC
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.topic = iprot.readI32();
            setTopicIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TAGS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.tags = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // EXPIRYTIME
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.expirytime = iprot.readI32();
            setExpirytimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // QUESID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.quesid = iprot.readI32();
            setQuesidIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetTopic()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'topic' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetExpirytime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'expirytime' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetQuesid()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'quesid' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.sessionid != null) {
      oprot.writeFieldBegin(SESSIONID_FIELD_DESC);
      oprot.writeString(this.sessionid);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(CONTENT_FIELD_DESC);
      oprot.writeString(this.content);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TOPIC_FIELD_DESC);
    oprot.writeI32(this.topic);
    oprot.writeFieldEnd();
    if (this.tags != null) {
      oprot.writeFieldBegin(TAGS_FIELD_DESC);
      oprot.writeString(this.tags);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EXPIRYTIME_FIELD_DESC);
    oprot.writeI32(this.expirytime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QUESID_FIELD_DESC);
    oprot.writeI32(this.quesid);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("s_ask(");
    boolean first = true;

    sb.append("sessionid:");
    if (this.sessionid == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic:");
    sb.append(this.topic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expirytime:");
    sb.append(this.expirytime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quesid:");
    sb.append(this.quesid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sessionid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionid' was not present! Struct: " + toString());
    }
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'topic' because it's a primitive and you chose the non-beans generator.
    if (tags == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tags' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'expirytime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'quesid' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

