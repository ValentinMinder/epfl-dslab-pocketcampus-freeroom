/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.qaforum.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class s_feedback implements org.apache.thrift.TBase<s_feedback, s_feedback._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("s_feedback");

  private static final org.apache.thrift.protocol.TField SESSIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FORWARDID_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FEEDBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("feedback", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  public String sessionid; // required
  public int forwardid; // required
  public String feedback; // required
  public double rate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSIONID((short)1, "sessionid"),
    FORWARDID((short)2, "forwardid"),
    FEEDBACK((short)3, "feedback"),
    RATE((short)4, "rate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSIONID
          return SESSIONID;
        case 2: // FORWARDID
          return FORWARDID;
        case 3: // FEEDBACK
          return FEEDBACK;
        case 4: // RATE
          return RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FORWARDID_ISSET_ID = 0;
  private static final int __RATE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSIONID, new org.apache.thrift.meta_data.FieldMetaData("sessionid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORWARDID, new org.apache.thrift.meta_data.FieldMetaData("forwardid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEEDBACK, new org.apache.thrift.meta_data.FieldMetaData("feedback", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(s_feedback.class, metaDataMap);
  }

  public s_feedback() {
  }

  public s_feedback(
    String sessionid,
    int forwardid,
    String feedback,
    double rate)
  {
    this();
    this.sessionid = sessionid;
    this.forwardid = forwardid;
    setForwardidIsSet(true);
    this.feedback = feedback;
    this.rate = rate;
    setRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public s_feedback(s_feedback other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSessionid()) {
      this.sessionid = other.sessionid;
    }
    this.forwardid = other.forwardid;
    if (other.isSetFeedback()) {
      this.feedback = other.feedback;
    }
    this.rate = other.rate;
  }

  public s_feedback deepCopy() {
    return new s_feedback(this);
  }

  @Override
  public void clear() {
    this.sessionid = null;
    setForwardidIsSet(false);
    this.forwardid = 0;
    this.feedback = null;
    setRateIsSet(false);
    this.rate = 0.0;
  }

  public String getSessionid() {
    return this.sessionid;
  }

  public s_feedback setSessionid(String sessionid) {
    this.sessionid = sessionid;
    return this;
  }

  public void unsetSessionid() {
    this.sessionid = null;
  }

  /** Returns true if field sessionid is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionid() {
    return this.sessionid != null;
  }

  public void setSessionidIsSet(boolean value) {
    if (!value) {
      this.sessionid = null;
    }
  }

  public int getForwardid() {
    return this.forwardid;
  }

  public s_feedback setForwardid(int forwardid) {
    this.forwardid = forwardid;
    setForwardidIsSet(true);
    return this;
  }

  public void unsetForwardid() {
    __isset_bit_vector.clear(__FORWARDID_ISSET_ID);
  }

  /** Returns true if field forwardid is set (has been assigned a value) and false otherwise */
  public boolean isSetForwardid() {
    return __isset_bit_vector.get(__FORWARDID_ISSET_ID);
  }

  public void setForwardidIsSet(boolean value) {
    __isset_bit_vector.set(__FORWARDID_ISSET_ID, value);
  }

  public String getFeedback() {
    return this.feedback;
  }

  public s_feedback setFeedback(String feedback) {
    this.feedback = feedback;
    return this;
  }

  public void unsetFeedback() {
    this.feedback = null;
  }

  /** Returns true if field feedback is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedback() {
    return this.feedback != null;
  }

  public void setFeedbackIsSet(boolean value) {
    if (!value) {
      this.feedback = null;
    }
  }

  public double getRate() {
    return this.rate;
  }

  public s_feedback setRate(double rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bit_vector.clear(__RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return __isset_bit_vector.get(__RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bit_vector.set(__RATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSIONID:
      if (value == null) {
        unsetSessionid();
      } else {
        setSessionid((String)value);
      }
      break;

    case FORWARDID:
      if (value == null) {
        unsetForwardid();
      } else {
        setForwardid((Integer)value);
      }
      break;

    case FEEDBACK:
      if (value == null) {
        unsetFeedback();
      } else {
        setFeedback((String)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSIONID:
      return getSessionid();

    case FORWARDID:
      return Integer.valueOf(getForwardid());

    case FEEDBACK:
      return getFeedback();

    case RATE:
      return Double.valueOf(getRate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSIONID:
      return isSetSessionid();
    case FORWARDID:
      return isSetForwardid();
    case FEEDBACK:
      return isSetFeedback();
    case RATE:
      return isSetRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof s_feedback)
      return this.equals((s_feedback)that);
    return false;
  }

  public boolean equals(s_feedback that) {
    if (that == null)
      return false;

    boolean this_present_sessionid = true && this.isSetSessionid();
    boolean that_present_sessionid = true && that.isSetSessionid();
    if (this_present_sessionid || that_present_sessionid) {
      if (!(this_present_sessionid && that_present_sessionid))
        return false;
      if (!this.sessionid.equals(that.sessionid))
        return false;
    }

    boolean this_present_forwardid = true;
    boolean that_present_forwardid = true;
    if (this_present_forwardid || that_present_forwardid) {
      if (!(this_present_forwardid && that_present_forwardid))
        return false;
      if (this.forwardid != that.forwardid)
        return false;
    }

    boolean this_present_feedback = true && this.isSetFeedback();
    boolean that_present_feedback = true && that.isSetFeedback();
    if (this_present_feedback || that_present_feedback) {
      if (!(this_present_feedback && that_present_feedback))
        return false;
      if (!this.feedback.equals(that.feedback))
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_sessionid = true && (isSetSessionid());
    builder.append(present_sessionid);
    if (present_sessionid)
      builder.append(sessionid);

    boolean present_forwardid = true;
    builder.append(present_forwardid);
    if (present_forwardid)
      builder.append(forwardid);

    boolean present_feedback = true && (isSetFeedback());
    builder.append(present_feedback);
    if (present_feedback)
      builder.append(feedback);

    boolean present_rate = true;
    builder.append(present_rate);
    if (present_rate)
      builder.append(rate);

    return builder.toHashCode();
  }

  public int compareTo(s_feedback other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    s_feedback typedOther = (s_feedback)other;

    lastComparison = Boolean.valueOf(isSetSessionid()).compareTo(typedOther.isSetSessionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionid, typedOther.sessionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForwardid()).compareTo(typedOther.isSetForwardid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForwardid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardid, typedOther.forwardid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeedback()).compareTo(typedOther.isSetFeedback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedback, typedOther.feedback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(typedOther.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, typedOther.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SESSIONID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.sessionid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FORWARDID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.forwardid = iprot.readI32();
            setForwardidIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FEEDBACK
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.feedback = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // RATE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.rate = iprot.readDouble();
            setRateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetForwardid()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'forwardid' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetRate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rate' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.sessionid != null) {
      oprot.writeFieldBegin(SESSIONID_FIELD_DESC);
      oprot.writeString(this.sessionid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FORWARDID_FIELD_DESC);
    oprot.writeI32(this.forwardid);
    oprot.writeFieldEnd();
    if (this.feedback != null) {
      oprot.writeFieldBegin(FEEDBACK_FIELD_DESC);
      oprot.writeString(this.feedback);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RATE_FIELD_DESC);
    oprot.writeDouble(this.rate);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("s_feedback(");
    boolean first = true;

    sb.append("sessionid:");
    if (this.sessionid == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("forwardid:");
    sb.append(this.forwardid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feedback:");
    if (this.feedback == null) {
      sb.append("null");
    } else {
      sb.append(this.feedback);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sessionid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'forwardid' because it's a primitive and you chose the non-beans generator.
    if (feedback == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'feedback' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'rate' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

