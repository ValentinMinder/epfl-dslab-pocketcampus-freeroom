/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.qaforum.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class s_report implements org.apache.thrift.TBase<s_report, s_report._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("s_report");

  private static final org.apache.thrift.protocol.TField SESSIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FORWARDID_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)4);

  public String sessionid; // required
  public int forwardid; // required
  public int type; // required
  public String comment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSIONID((short)1, "sessionid"),
    FORWARDID((short)2, "forwardid"),
    TYPE((short)3, "type"),
    COMMENT((short)4, "comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSIONID
          return SESSIONID;
        case 2: // FORWARDID
          return FORWARDID;
        case 3: // TYPE
          return TYPE;
        case 4: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FORWARDID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSIONID, new org.apache.thrift.meta_data.FieldMetaData("sessionid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORWARDID, new org.apache.thrift.meta_data.FieldMetaData("forwardid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(s_report.class, metaDataMap);
  }

  public s_report() {
  }

  public s_report(
    String sessionid,
    int forwardid,
    int type,
    String comment)
  {
    this();
    this.sessionid = sessionid;
    this.forwardid = forwardid;
    setForwardidIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public s_report(s_report other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSessionid()) {
      this.sessionid = other.sessionid;
    }
    this.forwardid = other.forwardid;
    this.type = other.type;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  public s_report deepCopy() {
    return new s_report(this);
  }

  @Override
  public void clear() {
    this.sessionid = null;
    setForwardidIsSet(false);
    this.forwardid = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.comment = null;
  }

  public String getSessionid() {
    return this.sessionid;
  }

  public s_report setSessionid(String sessionid) {
    this.sessionid = sessionid;
    return this;
  }

  public void unsetSessionid() {
    this.sessionid = null;
  }

  /** Returns true if field sessionid is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionid() {
    return this.sessionid != null;
  }

  public void setSessionidIsSet(boolean value) {
    if (!value) {
      this.sessionid = null;
    }
  }

  public int getForwardid() {
    return this.forwardid;
  }

  public s_report setForwardid(int forwardid) {
    this.forwardid = forwardid;
    setForwardidIsSet(true);
    return this;
  }

  public void unsetForwardid() {
    __isset_bit_vector.clear(__FORWARDID_ISSET_ID);
  }

  /** Returns true if field forwardid is set (has been assigned a value) and false otherwise */
  public boolean isSetForwardid() {
    return __isset_bit_vector.get(__FORWARDID_ISSET_ID);
  }

  public void setForwardidIsSet(boolean value) {
    __isset_bit_vector.set(__FORWARDID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public s_report setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public String getComment() {
    return this.comment;
  }

  public s_report setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSIONID:
      if (value == null) {
        unsetSessionid();
      } else {
        setSessionid((String)value);
      }
      break;

    case FORWARDID:
      if (value == null) {
        unsetForwardid();
      } else {
        setForwardid((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSIONID:
      return getSessionid();

    case FORWARDID:
      return Integer.valueOf(getForwardid());

    case TYPE:
      return Integer.valueOf(getType());

    case COMMENT:
      return getComment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSIONID:
      return isSetSessionid();
    case FORWARDID:
      return isSetForwardid();
    case TYPE:
      return isSetType();
    case COMMENT:
      return isSetComment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof s_report)
      return this.equals((s_report)that);
    return false;
  }

  public boolean equals(s_report that) {
    if (that == null)
      return false;

    boolean this_present_sessionid = true && this.isSetSessionid();
    boolean that_present_sessionid = true && that.isSetSessionid();
    if (this_present_sessionid || that_present_sessionid) {
      if (!(this_present_sessionid && that_present_sessionid))
        return false;
      if (!this.sessionid.equals(that.sessionid))
        return false;
    }

    boolean this_present_forwardid = true;
    boolean that_present_forwardid = true;
    if (this_present_forwardid || that_present_forwardid) {
      if (!(this_present_forwardid && that_present_forwardid))
        return false;
      if (this.forwardid != that.forwardid)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_sessionid = true && (isSetSessionid());
    builder.append(present_sessionid);
    if (present_sessionid)
      builder.append(sessionid);

    boolean present_forwardid = true;
    builder.append(present_forwardid);
    if (present_forwardid)
      builder.append(forwardid);

    boolean present_type = true;
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_comment = true && (isSetComment());
    builder.append(present_comment);
    if (present_comment)
      builder.append(comment);

    return builder.toHashCode();
  }

  public int compareTo(s_report other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    s_report typedOther = (s_report)other;

    lastComparison = Boolean.valueOf(isSetSessionid()).compareTo(typedOther.isSetSessionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionid, typedOther.sessionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForwardid()).compareTo(typedOther.isSetForwardid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForwardid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardid, typedOther.forwardid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SESSIONID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.sessionid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FORWARDID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.forwardid = iprot.readI32();
            setForwardidIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.type = iprot.readI32();
            setTypeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COMMENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.comment = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetForwardid()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'forwardid' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.sessionid != null) {
      oprot.writeFieldBegin(SESSIONID_FIELD_DESC);
      oprot.writeString(this.sessionid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FORWARDID_FIELD_DESC);
    oprot.writeI32(this.forwardid);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.comment != null) {
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeString(this.comment);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("s_report(");
    boolean first = true;

    sb.append("sessionid:");
    if (this.sessionid == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("forwardid:");
    sb.append(this.forwardid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sessionid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'forwardid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    if (comment == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'comment' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

