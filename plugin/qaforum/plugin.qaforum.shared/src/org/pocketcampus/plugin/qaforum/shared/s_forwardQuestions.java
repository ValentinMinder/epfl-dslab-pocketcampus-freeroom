/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.qaforum.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class s_forwardQuestions implements org.apache.thrift.TBase<s_forwardQuestions, s_forwardQuestions._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("s_forwardQuestions");

  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUESTIONLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("questionlist", org.apache.thrift.protocol.TType.LIST, (short)2);

  public int number; // required
  public List<s_questionlist> questionlist; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMBER((short)1, "number"),
    QUESTIONLIST((short)2, "questionlist");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMBER
          return NUMBER;
        case 2: // QUESTIONLIST
          return QUESTIONLIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESTIONLIST, new org.apache.thrift.meta_data.FieldMetaData("questionlist", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, s_questionlist.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(s_forwardQuestions.class, metaDataMap);
  }

  public s_forwardQuestions() {
  }

  public s_forwardQuestions(
    int number,
    List<s_questionlist> questionlist)
  {
    this();
    this.number = number;
    setNumberIsSet(true);
    this.questionlist = questionlist;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public s_forwardQuestions(s_forwardQuestions other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.number = other.number;
    if (other.isSetQuestionlist()) {
      List<s_questionlist> __this__questionlist = new ArrayList<s_questionlist>();
      for (s_questionlist other_element : other.questionlist) {
        __this__questionlist.add(new s_questionlist(other_element));
      }
      this.questionlist = __this__questionlist;
    }
  }

  public s_forwardQuestions deepCopy() {
    return new s_forwardQuestions(this);
  }

  @Override
  public void clear() {
    setNumberIsSet(false);
    this.number = 0;
    this.questionlist = null;
  }

  public int getNumber() {
    return this.number;
  }

  public s_forwardQuestions setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
    return this;
  }

  public void unsetNumber() {
    __isset_bit_vector.clear(__NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return __isset_bit_vector.get(__NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bit_vector.set(__NUMBER_ISSET_ID, value);
  }

  public int getQuestionlistSize() {
    return (this.questionlist == null) ? 0 : this.questionlist.size();
  }

  public java.util.Iterator<s_questionlist> getQuestionlistIterator() {
    return (this.questionlist == null) ? null : this.questionlist.iterator();
  }

  public void addToQuestionlist(s_questionlist elem) {
    if (this.questionlist == null) {
      this.questionlist = new ArrayList<s_questionlist>();
    }
    this.questionlist.add(elem);
  }

  public List<s_questionlist> getQuestionlist() {
    return this.questionlist;
  }

  public s_forwardQuestions setQuestionlist(List<s_questionlist> questionlist) {
    this.questionlist = questionlist;
    return this;
  }

  public void unsetQuestionlist() {
    this.questionlist = null;
  }

  /** Returns true if field questionlist is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionlist() {
    return this.questionlist != null;
  }

  public void setQuestionlistIsSet(boolean value) {
    if (!value) {
      this.questionlist = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case QUESTIONLIST:
      if (value == null) {
        unsetQuestionlist();
      } else {
        setQuestionlist((List<s_questionlist>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER:
      return Integer.valueOf(getNumber());

    case QUESTIONLIST:
      return getQuestionlist();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUMBER:
      return isSetNumber();
    case QUESTIONLIST:
      return isSetQuestionlist();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof s_forwardQuestions)
      return this.equals((s_forwardQuestions)that);
    return false;
  }

  public boolean equals(s_forwardQuestions that) {
    if (that == null)
      return false;

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_questionlist = true && this.isSetQuestionlist();
    boolean that_present_questionlist = true && that.isSetQuestionlist();
    if (this_present_questionlist || that_present_questionlist) {
      if (!(this_present_questionlist && that_present_questionlist))
        return false;
      if (!this.questionlist.equals(that.questionlist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_number = true;
    builder.append(present_number);
    if (present_number)
      builder.append(number);

    boolean present_questionlist = true && (isSetQuestionlist());
    builder.append(present_questionlist);
    if (present_questionlist)
      builder.append(questionlist);

    return builder.toHashCode();
  }

  public int compareTo(s_forwardQuestions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    s_forwardQuestions typedOther = (s_forwardQuestions)other;

    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionlist()).compareTo(typedOther.isSetQuestionlist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionlist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionlist, typedOther.questionlist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NUMBER
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.number = iprot.readI32();
            setNumberIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // QUESTIONLIST
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.questionlist = new ArrayList<s_questionlist>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                s_questionlist _elem2; // required
                _elem2 = new s_questionlist();
                _elem2.read(iprot);
                this.questionlist.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetNumber()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'number' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NUMBER_FIELD_DESC);
    oprot.writeI32(this.number);
    oprot.writeFieldEnd();
    if (this.questionlist != null) {
      oprot.writeFieldBegin(QUESTIONLIST_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.questionlist.size()));
        for (s_questionlist _iter3 : this.questionlist)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("s_forwardQuestions(");
    boolean first = true;

    sb.append("number:");
    sb.append(this.number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionlist:");
    if (this.questionlist == null) {
      sb.append("null");
    } else {
      sb.append(this.questionlist);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'number' because it's a primitive and you chose the non-beans generator.
    if (questionlist == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'questionlist' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

