/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.food.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FoodRequest implements org.apache.thrift.TBase<FoodRequest, FoodRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FoodRequest");

  private static final org.apache.thrift.protocol.TField DEVICE_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceLanguage", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mealTime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEAL_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("mealDay", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)4);

  public String deviceLanguage; // required
  /**
   * 
   * @see MealTime
   */
  public MealTime mealTime; // required
  /**
   * 
   * @see MealDay
   */
  public MealDay mealDay; // required
  public String deviceId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_LANGUAGE((short)1, "deviceLanguage"),
    /**
     * 
     * @see MealTime
     */
    MEAL_TIME((short)2, "mealTime"),
    /**
     * 
     * @see MealDay
     */
    MEAL_DAY((short)3, "mealDay"),
    DEVICE_ID((short)4, "deviceId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_LANGUAGE
          return DEVICE_LANGUAGE;
        case 2: // MEAL_TIME
          return MEAL_TIME;
        case 3: // MEAL_DAY
          return MEAL_DAY;
        case 4: // DEVICE_ID
          return DEVICE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("deviceLanguage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("mealTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MealTime.class)));
    tmpMap.put(_Fields.MEAL_DAY, new org.apache.thrift.meta_data.FieldMetaData("mealDay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MealDay.class)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FoodRequest.class, metaDataMap);
  }

  public FoodRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FoodRequest(FoodRequest other) {
    if (other.isSetDeviceLanguage()) {
      this.deviceLanguage = other.deviceLanguage;
    }
    if (other.isSetMealTime()) {
      this.mealTime = other.mealTime;
    }
    if (other.isSetMealDay()) {
      this.mealDay = other.mealDay;
    }
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
  }

  public FoodRequest deepCopy() {
    return new FoodRequest(this);
  }

  @Override
  public void clear() {
    this.deviceLanguage = null;
    this.mealTime = null;
    this.mealDay = null;
    this.deviceId = null;
  }

  public String getDeviceLanguage() {
    return this.deviceLanguage;
  }

  public FoodRequest setDeviceLanguage(String deviceLanguage) {
    this.deviceLanguage = deviceLanguage;
    return this;
  }

  public void unsetDeviceLanguage() {
    this.deviceLanguage = null;
  }

  /** Returns true if field deviceLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceLanguage() {
    return this.deviceLanguage != null;
  }

  public void setDeviceLanguageIsSet(boolean value) {
    if (!value) {
      this.deviceLanguage = null;
    }
  }

  /**
   * 
   * @see MealTime
   */
  public MealTime getMealTime() {
    return this.mealTime;
  }

  /**
   * 
   * @see MealTime
   */
  public FoodRequest setMealTime(MealTime mealTime) {
    this.mealTime = mealTime;
    return this;
  }

  public void unsetMealTime() {
    this.mealTime = null;
  }

  /** Returns true if field mealTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMealTime() {
    return this.mealTime != null;
  }

  public void setMealTimeIsSet(boolean value) {
    if (!value) {
      this.mealTime = null;
    }
  }

  /**
   * 
   * @see MealDay
   */
  public MealDay getMealDay() {
    return this.mealDay;
  }

  /**
   * 
   * @see MealDay
   */
  public FoodRequest setMealDay(MealDay mealDay) {
    this.mealDay = mealDay;
    return this;
  }

  public void unsetMealDay() {
    this.mealDay = null;
  }

  /** Returns true if field mealDay is set (has been assigned a value) and false otherwise */
  public boolean isSetMealDay() {
    return this.mealDay != null;
  }

  public void setMealDayIsSet(boolean value) {
    if (!value) {
      this.mealDay = null;
    }
  }

  public String getDeviceId() {
    return this.deviceId;
  }

  public FoodRequest setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_LANGUAGE:
      if (value == null) {
        unsetDeviceLanguage();
      } else {
        setDeviceLanguage((String)value);
      }
      break;

    case MEAL_TIME:
      if (value == null) {
        unsetMealTime();
      } else {
        setMealTime((MealTime)value);
      }
      break;

    case MEAL_DAY:
      if (value == null) {
        unsetMealDay();
      } else {
        setMealDay((MealDay)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_LANGUAGE:
      return getDeviceLanguage();

    case MEAL_TIME:
      return getMealTime();

    case MEAL_DAY:
      return getMealDay();

    case DEVICE_ID:
      return getDeviceId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_LANGUAGE:
      return isSetDeviceLanguage();
    case MEAL_TIME:
      return isSetMealTime();
    case MEAL_DAY:
      return isSetMealDay();
    case DEVICE_ID:
      return isSetDeviceId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FoodRequest)
      return this.equals((FoodRequest)that);
    return false;
  }

  public boolean equals(FoodRequest that) {
    if (that == null)
      return false;

    boolean this_present_deviceLanguage = true && this.isSetDeviceLanguage();
    boolean that_present_deviceLanguage = true && that.isSetDeviceLanguage();
    if (this_present_deviceLanguage || that_present_deviceLanguage) {
      if (!(this_present_deviceLanguage && that_present_deviceLanguage))
        return false;
      if (!this.deviceLanguage.equals(that.deviceLanguage))
        return false;
    }

    boolean this_present_mealTime = true && this.isSetMealTime();
    boolean that_present_mealTime = true && that.isSetMealTime();
    if (this_present_mealTime || that_present_mealTime) {
      if (!(this_present_mealTime && that_present_mealTime))
        return false;
      if (!this.mealTime.equals(that.mealTime))
        return false;
    }

    boolean this_present_mealDay = true && this.isSetMealDay();
    boolean that_present_mealDay = true && that.isSetMealDay();
    if (this_present_mealDay || that_present_mealDay) {
      if (!(this_present_mealDay && that_present_mealDay))
        return false;
      if (!this.mealDay.equals(that.mealDay))
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_deviceLanguage = true && (isSetDeviceLanguage());
    builder.append(present_deviceLanguage);
    if (present_deviceLanguage)
      builder.append(deviceLanguage);

    boolean present_mealTime = true && (isSetMealTime());
    builder.append(present_mealTime);
    if (present_mealTime)
      builder.append(mealTime.getValue());

    boolean present_mealDay = true && (isSetMealDay());
    builder.append(present_mealDay);
    if (present_mealDay)
      builder.append(mealDay.getValue());

    boolean present_deviceId = true && (isSetDeviceId());
    builder.append(present_deviceId);
    if (present_deviceId)
      builder.append(deviceId);

    return builder.toHashCode();
  }

  public int compareTo(FoodRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FoodRequest typedOther = (FoodRequest)other;

    lastComparison = Boolean.valueOf(isSetDeviceLanguage()).compareTo(typedOther.isSetDeviceLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceLanguage, typedOther.deviceLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMealTime()).compareTo(typedOther.isSetMealTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMealTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mealTime, typedOther.mealTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMealDay()).compareTo(typedOther.isSetMealDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMealDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mealDay, typedOther.mealDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // DEVICE_LANGUAGE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.deviceLanguage = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MEAL_TIME
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.mealTime = MealTime.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MEAL_DAY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.mealDay = MealDay.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // DEVICE_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.deviceId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.deviceLanguage != null) {
      if (isSetDeviceLanguage()) {
        oprot.writeFieldBegin(DEVICE_LANGUAGE_FIELD_DESC);
        oprot.writeString(this.deviceLanguage);
        oprot.writeFieldEnd();
      }
    }
    if (this.mealTime != null) {
      if (isSetMealTime()) {
        oprot.writeFieldBegin(MEAL_TIME_FIELD_DESC);
        oprot.writeI32(this.mealTime.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.mealDay != null) {
      if (isSetMealDay()) {
        oprot.writeFieldBegin(MEAL_DAY_FIELD_DESC);
        oprot.writeI32(this.mealDay.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.deviceId != null) {
      if (isSetDeviceId()) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(this.deviceId);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FoodRequest(");
    boolean first = true;

    if (isSetDeviceLanguage()) {
      sb.append("deviceLanguage:");
      if (this.deviceLanguage == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceLanguage);
      }
      first = false;
    }
    if (isSetMealTime()) {
      if (!first) sb.append(", ");
      sb.append("mealTime:");
      if (this.mealTime == null) {
        sb.append("null");
      } else {
        sb.append(this.mealTime);
      }
      first = false;
    }
    if (isSetMealDay()) {
      if (!first) sb.append(", ");
      sb.append("mealDay:");
      if (this.mealDay == null) {
        sb.append("null");
      } else {
        sb.append(this.mealDay);
      }
      first = false;
    }
    if (isSetDeviceId()) {
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

