/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.food.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Sandwich implements org.apache.thrift.TBase<Sandwich, Sandwich._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sandwich");

  private static final org.apache.thrift.protocol.TField SANDWICH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sandwichId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RESTAURANT_FIELD_DESC = new org.apache.thrift.protocol.TField("restaurant", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

  public long sandwichId; // required
  public Restaurant restaurant; // required
  public String name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SANDWICH_ID((short)1, "sandwichId"),
    RESTAURANT((short)2, "restaurant"),
    NAME((short)3, "name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SANDWICH_ID
          return SANDWICH_ID;
        case 2: // RESTAURANT
          return RESTAURANT;
        case 3: // NAME
          return NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SANDWICHID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SANDWICH_ID, new org.apache.thrift.meta_data.FieldMetaData("sandwichId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.RESTAURANT, new org.apache.thrift.meta_data.FieldMetaData("restaurant", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Restaurant.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sandwich.class, metaDataMap);
  }

  public Sandwich() {
  }

  public Sandwich(
    long sandwichId,
    Restaurant restaurant,
    String name)
  {
    this();
    this.sandwichId = sandwichId;
    setSandwichIdIsSet(true);
    this.restaurant = restaurant;
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sandwich(Sandwich other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.sandwichId = other.sandwichId;
    if (other.isSetRestaurant()) {
      this.restaurant = new Restaurant(other.restaurant);
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
  }

  public Sandwich deepCopy() {
    return new Sandwich(this);
  }

  @Override
  public void clear() {
    setSandwichIdIsSet(false);
    this.sandwichId = 0;
    this.restaurant = null;
    this.name = null;
  }

  public long getSandwichId() {
    return this.sandwichId;
  }

  public Sandwich setSandwichId(long sandwichId) {
    this.sandwichId = sandwichId;
    setSandwichIdIsSet(true);
    return this;
  }

  public void unsetSandwichId() {
    __isset_bit_vector.clear(__SANDWICHID_ISSET_ID);
  }

  /** Returns true if field sandwichId is set (has been assigned a value) and false otherwise */
  public boolean isSetSandwichId() {
    return __isset_bit_vector.get(__SANDWICHID_ISSET_ID);
  }

  public void setSandwichIdIsSet(boolean value) {
    __isset_bit_vector.set(__SANDWICHID_ISSET_ID, value);
  }

  public Restaurant getRestaurant() {
    return this.restaurant;
  }

  public Sandwich setRestaurant(Restaurant restaurant) {
    this.restaurant = restaurant;
    return this;
  }

  public void unsetRestaurant() {
    this.restaurant = null;
  }

  /** Returns true if field restaurant is set (has been assigned a value) and false otherwise */
  public boolean isSetRestaurant() {
    return this.restaurant != null;
  }

  public void setRestaurantIsSet(boolean value) {
    if (!value) {
      this.restaurant = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Sandwich setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SANDWICH_ID:
      if (value == null) {
        unsetSandwichId();
      } else {
        setSandwichId((Long)value);
      }
      break;

    case RESTAURANT:
      if (value == null) {
        unsetRestaurant();
      } else {
        setRestaurant((Restaurant)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SANDWICH_ID:
      return Long.valueOf(getSandwichId());

    case RESTAURANT:
      return getRestaurant();

    case NAME:
      return getName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SANDWICH_ID:
      return isSetSandwichId();
    case RESTAURANT:
      return isSetRestaurant();
    case NAME:
      return isSetName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Sandwich)
      return this.equals((Sandwich)that);
    return false;
  }

  public boolean equals(Sandwich that) {
    if (that == null)
      return false;

    boolean this_present_sandwichId = true;
    boolean that_present_sandwichId = true;
    if (this_present_sandwichId || that_present_sandwichId) {
      if (!(this_present_sandwichId && that_present_sandwichId))
        return false;
      if (this.sandwichId != that.sandwichId)
        return false;
    }

    boolean this_present_restaurant = true && this.isSetRestaurant();
    boolean that_present_restaurant = true && that.isSetRestaurant();
    if (this_present_restaurant || that_present_restaurant) {
      if (!(this_present_restaurant && that_present_restaurant))
        return false;
      if (!this.restaurant.equals(that.restaurant))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_sandwichId = true;
    builder.append(present_sandwichId);
    if (present_sandwichId)
      builder.append(sandwichId);

    boolean present_restaurant = true && (isSetRestaurant());
    builder.append(present_restaurant);
    if (present_restaurant)
      builder.append(restaurant);

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    return builder.toHashCode();
  }

  public int compareTo(Sandwich other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Sandwich typedOther = (Sandwich)other;

    lastComparison = Boolean.valueOf(isSetSandwichId()).compareTo(typedOther.isSetSandwichId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSandwichId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sandwichId, typedOther.sandwichId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestaurant()).compareTo(typedOther.isSetRestaurant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestaurant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restaurant, typedOther.restaurant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SANDWICH_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.sandwichId = iprot.readI64();
            setSandwichIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RESTAURANT
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.restaurant = new Restaurant();
            this.restaurant.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetSandwichId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sandwichId' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SANDWICH_ID_FIELD_DESC);
    oprot.writeI64(this.sandwichId);
    oprot.writeFieldEnd();
    if (this.restaurant != null) {
      oprot.writeFieldBegin(RESTAURANT_FIELD_DESC);
      this.restaurant.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Sandwich(");
    boolean first = true;

    sb.append("sandwichId:");
    sb.append(this.sandwichId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("restaurant:");
    if (this.restaurant == null) {
      sb.append("null");
    } else {
      sb.append(this.restaurant);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sandwichId' because it's a primitive and you chose the non-beans generator.
    if (restaurant == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'restaurant' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

