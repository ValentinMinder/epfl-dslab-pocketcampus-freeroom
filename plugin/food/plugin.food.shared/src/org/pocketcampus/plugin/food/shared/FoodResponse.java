/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.food.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FoodResponse implements org.apache.thrift.TBase<FoodResponse, FoodResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FoodResponse");

  private static final org.apache.thrift.protocol.TField MATCHING_FOOD_FIELD_DESC = new org.apache.thrift.protocol.TField("matchingFood", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField USER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("userStatus", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEAL_TYPE_PICTURES_FIELD_DESC = new org.apache.thrift.protocol.TField("mealTypePictures", org.apache.thrift.protocol.TType.MAP, (short)3);

  private List<EpflRestaurant> matchingFood; // required
  private PriceTarget userStatus; // required
  private Map<MealType,String> mealTypePictures; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MATCHING_FOOD((short)1, "matchingFood"),
    /**
     * 
     * @see PriceTarget
     */
    USER_STATUS((short)2, "userStatus"),
    MEAL_TYPE_PICTURES((short)3, "mealTypePictures");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MATCHING_FOOD
          return MATCHING_FOOD;
        case 2: // USER_STATUS
          return USER_STATUS;
        case 3: // MEAL_TYPE_PICTURES
          return MEAL_TYPE_PICTURES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MATCHING_FOOD, new org.apache.thrift.meta_data.FieldMetaData("matchingFood", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EpflRestaurant.class))));
    tmpMap.put(_Fields.USER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("userStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PriceTarget.class)));
    tmpMap.put(_Fields.MEAL_TYPE_PICTURES, new org.apache.thrift.meta_data.FieldMetaData("mealTypePictures", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MealType.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FoodResponse.class, metaDataMap);
  }

  public FoodResponse() {
  }

  public FoodResponse(
    List<EpflRestaurant> matchingFood,
    Map<MealType,String> mealTypePictures)
  {
    this();
    this.matchingFood = matchingFood;
    this.mealTypePictures = mealTypePictures;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FoodResponse(FoodResponse other) {
    if (other.isSetMatchingFood()) {
      List<EpflRestaurant> __this__matchingFood = new ArrayList<EpflRestaurant>();
      for (EpflRestaurant other_element : other.matchingFood) {
        __this__matchingFood.add(new EpflRestaurant(other_element));
      }
      this.matchingFood = __this__matchingFood;
    }
    if (other.isSetUserStatus()) {
      this.userStatus = other.userStatus;
    }
    if (other.isSetMealTypePictures()) {
      Map<MealType,String> __this__mealTypePictures = new HashMap<MealType,String>();
      for (Map.Entry<MealType, String> other_element : other.mealTypePictures.entrySet()) {

        MealType other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        MealType __this__mealTypePictures_copy_key = other_element_key;

        String __this__mealTypePictures_copy_value = other_element_value;

        __this__mealTypePictures.put(__this__mealTypePictures_copy_key, __this__mealTypePictures_copy_value);
      }
      this.mealTypePictures = __this__mealTypePictures;
    }
  }

  public FoodResponse deepCopy() {
    return new FoodResponse(this);
  }

  @Override
  public void clear() {
    this.matchingFood = null;
    this.userStatus = null;
    this.mealTypePictures = null;
  }

  public int getMatchingFoodSize() {
    return (this.matchingFood == null) ? 0 : this.matchingFood.size();
  }

  public java.util.Iterator<EpflRestaurant> getMatchingFoodIterator() {
    return (this.matchingFood == null) ? null : this.matchingFood.iterator();
  }

  public void addToMatchingFood(EpflRestaurant elem) {
    if (this.matchingFood == null) {
      this.matchingFood = new ArrayList<EpflRestaurant>();
    }
    this.matchingFood.add(elem);
  }

  public List<EpflRestaurant> getMatchingFood() {
    return this.matchingFood;
  }

  public FoodResponse setMatchingFood(List<EpflRestaurant> matchingFood) {
    this.matchingFood = matchingFood;
    return this;
  }

  public void unsetMatchingFood() {
    this.matchingFood = null;
  }

  /** Returns true if field matchingFood is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchingFood() {
    return this.matchingFood != null;
  }

  public void setMatchingFoodIsSet(boolean value) {
    if (!value) {
      this.matchingFood = null;
    }
  }

  /**
   * 
   * @see PriceTarget
   */
  public PriceTarget getUserStatus() {
    return this.userStatus;
  }

  /**
   * 
   * @see PriceTarget
   */
  public FoodResponse setUserStatus(PriceTarget userStatus) {
    this.userStatus = userStatus;
    return this;
  }

  public void unsetUserStatus() {
    this.userStatus = null;
  }

  /** Returns true if field userStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetUserStatus() {
    return this.userStatus != null;
  }

  public void setUserStatusIsSet(boolean value) {
    if (!value) {
      this.userStatus = null;
    }
  }

  public int getMealTypePicturesSize() {
    return (this.mealTypePictures == null) ? 0 : this.mealTypePictures.size();
  }

  public void putToMealTypePictures(MealType key, String val) {
    if (this.mealTypePictures == null) {
      this.mealTypePictures = new HashMap<MealType,String>();
    }
    this.mealTypePictures.put(key, val);
  }

  public Map<MealType,String> getMealTypePictures() {
    return this.mealTypePictures;
  }

  public FoodResponse setMealTypePictures(Map<MealType,String> mealTypePictures) {
    this.mealTypePictures = mealTypePictures;
    return this;
  }

  public void unsetMealTypePictures() {
    this.mealTypePictures = null;
  }

  /** Returns true if field mealTypePictures is set (has been assigned a value) and false otherwise */
  public boolean isSetMealTypePictures() {
    return this.mealTypePictures != null;
  }

  public void setMealTypePicturesIsSet(boolean value) {
    if (!value) {
      this.mealTypePictures = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MATCHING_FOOD:
      if (value == null) {
        unsetMatchingFood();
      } else {
        setMatchingFood((List<EpflRestaurant>)value);
      }
      break;

    case USER_STATUS:
      if (value == null) {
        unsetUserStatus();
      } else {
        setUserStatus((PriceTarget)value);
      }
      break;

    case MEAL_TYPE_PICTURES:
      if (value == null) {
        unsetMealTypePictures();
      } else {
        setMealTypePictures((Map<MealType,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MATCHING_FOOD:
      return getMatchingFood();

    case USER_STATUS:
      return getUserStatus();

    case MEAL_TYPE_PICTURES:
      return getMealTypePictures();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MATCHING_FOOD:
      return isSetMatchingFood();
    case USER_STATUS:
      return isSetUserStatus();
    case MEAL_TYPE_PICTURES:
      return isSetMealTypePictures();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FoodResponse)
      return this.equals((FoodResponse)that);
    return false;
  }

  public boolean equals(FoodResponse that) {
    if (that == null)
      return false;

    boolean this_present_matchingFood = true && this.isSetMatchingFood();
    boolean that_present_matchingFood = true && that.isSetMatchingFood();
    if (this_present_matchingFood || that_present_matchingFood) {
      if (!(this_present_matchingFood && that_present_matchingFood))
        return false;
      if (!this.matchingFood.equals(that.matchingFood))
        return false;
    }

    boolean this_present_userStatus = true && this.isSetUserStatus();
    boolean that_present_userStatus = true && that.isSetUserStatus();
    if (this_present_userStatus || that_present_userStatus) {
      if (!(this_present_userStatus && that_present_userStatus))
        return false;
      if (!this.userStatus.equals(that.userStatus))
        return false;
    }

    boolean this_present_mealTypePictures = true && this.isSetMealTypePictures();
    boolean that_present_mealTypePictures = true && that.isSetMealTypePictures();
    if (this_present_mealTypePictures || that_present_mealTypePictures) {
      if (!(this_present_mealTypePictures && that_present_mealTypePictures))
        return false;
      if (!this.mealTypePictures.equals(that.mealTypePictures))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_matchingFood = true && (isSetMatchingFood());
    builder.append(present_matchingFood);
    if (present_matchingFood)
      builder.append(matchingFood);

    boolean present_userStatus = true && (isSetUserStatus());
    builder.append(present_userStatus);
    if (present_userStatus)
      builder.append(userStatus.getValue());

    boolean present_mealTypePictures = true && (isSetMealTypePictures());
    builder.append(present_mealTypePictures);
    if (present_mealTypePictures)
      builder.append(mealTypePictures);

    return builder.toHashCode();
  }

  public int compareTo(FoodResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FoodResponse typedOther = (FoodResponse)other;

    lastComparison = Boolean.valueOf(isSetMatchingFood()).compareTo(typedOther.isSetMatchingFood());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchingFood()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchingFood, typedOther.matchingFood);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserStatus()).compareTo(typedOther.isSetUserStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userStatus, typedOther.userStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMealTypePictures()).compareTo(typedOther.isSetMealTypePictures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMealTypePictures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mealTypePictures, typedOther.mealTypePictures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MATCHING_FOOD
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
              this.matchingFood = new ArrayList<EpflRestaurant>(_list13.size);
              for (int _i14 = 0; _i14 < _list13.size; ++_i14)
              {
                EpflRestaurant _elem15; // required
                _elem15 = new EpflRestaurant();
                _elem15.read(iprot);
                this.matchingFood.add(_elem15);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_STATUS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.userStatus = PriceTarget.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MEAL_TYPE_PICTURES
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
              this.mealTypePictures = new HashMap<MealType,String>(2*_map16.size);
              for (int _i17 = 0; _i17 < _map16.size; ++_i17)
              {
                MealType _key18; // required
                String _val19; // required
                _key18 = MealType.findByValue(iprot.readI32());
                _val19 = iprot.readString();
                this.mealTypePictures.put(_key18, _val19);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.matchingFood != null) {
      oprot.writeFieldBegin(MATCHING_FOOD_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.matchingFood.size()));
        for (EpflRestaurant _iter20 : this.matchingFood)
        {
          _iter20.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.userStatus != null) {
      if (isSetUserStatus()) {
        oprot.writeFieldBegin(USER_STATUS_FIELD_DESC);
        oprot.writeI32(this.userStatus.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.mealTypePictures != null) {
      oprot.writeFieldBegin(MEAL_TYPE_PICTURES_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, this.mealTypePictures.size()));
        for (Map.Entry<MealType, String> _iter21 : this.mealTypePictures.entrySet())
        {
          oprot.writeI32(_iter21.getKey().getValue());
          oprot.writeString(_iter21.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FoodResponse(");
    boolean first = true;

    sb.append("matchingFood:");
    if (this.matchingFood == null) {
      sb.append("null");
    } else {
      sb.append(this.matchingFood);
    }
    first = false;
    if (isSetUserStatus()) {
      if (!first) sb.append(", ");
      sb.append("userStatus:");
      if (this.userStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.userStatus);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("mealTypePictures:");
    if (this.mealTypePictures == null) {
      sb.append("null");
    } else {
      sb.append(this.mealTypePictures);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (matchingFood == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'matchingFood' was not present! Struct: " + toString());
    }
    if (mealTypePictures == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mealTypePictures' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

