/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.food.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class FoodResponse implements org.apache.thrift.TBase<FoodResponse, FoodResponse._Fields>, java.io.Serializable, Cloneable, Comparable<FoodResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FoodResponse");

  private static final org.apache.thrift.protocol.TField MENU_FIELD_DESC = new org.apache.thrift.protocol.TField("menu", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField USER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("userStatus", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEAL_TYPE_PICTURE_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("mealTypePictureUrls", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCode", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FoodResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FoodResponseTupleSchemeFactory());
  }

  private List<EpflRestaurant> menu; // optional
  private PriceTarget userStatus; // optional
  private Map<MealType,String> mealTypePictureUrls; // required
  private FoodStatusCode statusCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MENU((short)1, "menu"),
    /**
     * 
     * @see PriceTarget
     */
    USER_STATUS((short)2, "userStatus"),
    MEAL_TYPE_PICTURE_URLS((short)3, "mealTypePictureUrls"),
    /**
     * 
     * @see FoodStatusCode
     */
    STATUS_CODE((short)4, "statusCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MENU
          return MENU;
        case 2: // USER_STATUS
          return USER_STATUS;
        case 3: // MEAL_TYPE_PICTURE_URLS
          return MEAL_TYPE_PICTURE_URLS;
        case 4: // STATUS_CODE
          return STATUS_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.MENU,_Fields.USER_STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MENU, new org.apache.thrift.meta_data.FieldMetaData("menu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EpflRestaurant.class))));
    tmpMap.put(_Fields.USER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("userStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PriceTarget.class)));
    tmpMap.put(_Fields.MEAL_TYPE_PICTURE_URLS, new org.apache.thrift.meta_data.FieldMetaData("mealTypePictureUrls", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MealType.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("statusCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FoodStatusCode.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FoodResponse.class, metaDataMap);
  }

  public FoodResponse() {
  }

  public FoodResponse(
    Map<MealType,String> mealTypePictureUrls,
    FoodStatusCode statusCode)
  {
    this();
    this.mealTypePictureUrls = mealTypePictureUrls;
    this.statusCode = statusCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FoodResponse(FoodResponse other) {
    if (other.isSetMenu()) {
      List<EpflRestaurant> __this__menu = new ArrayList<EpflRestaurant>(other.menu.size());
      for (EpflRestaurant other_element : other.menu) {
        __this__menu.add(new EpflRestaurant(other_element));
      }
      this.menu = __this__menu;
    }
    if (other.isSetUserStatus()) {
      this.userStatus = other.userStatus;
    }
    if (other.isSetMealTypePictureUrls()) {
      Map<MealType,String> __this__mealTypePictureUrls = new HashMap<MealType,String>(other.mealTypePictureUrls.size());
      for (Map.Entry<MealType, String> other_element : other.mealTypePictureUrls.entrySet()) {

        MealType other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        MealType __this__mealTypePictureUrls_copy_key = other_element_key;

        String __this__mealTypePictureUrls_copy_value = other_element_value;

        __this__mealTypePictureUrls.put(__this__mealTypePictureUrls_copy_key, __this__mealTypePictureUrls_copy_value);
      }
      this.mealTypePictureUrls = __this__mealTypePictureUrls;
    }
    if (other.isSetStatusCode()) {
      this.statusCode = other.statusCode;
    }
  }

  public FoodResponse deepCopy() {
    return new FoodResponse(this);
  }

  @Override
  public void clear() {
    this.menu = null;
    this.userStatus = null;
    this.mealTypePictureUrls = null;
    this.statusCode = null;
  }

  public int getMenuSize() {
    return (this.menu == null) ? 0 : this.menu.size();
  }

  public java.util.Iterator<EpflRestaurant> getMenuIterator() {
    return (this.menu == null) ? null : this.menu.iterator();
  }

  public void addToMenu(EpflRestaurant elem) {
    if (this.menu == null) {
      this.menu = new ArrayList<EpflRestaurant>();
    }
    this.menu.add(elem);
  }

  public List<EpflRestaurant> getMenu() {
    return this.menu;
  }

  public FoodResponse setMenu(List<EpflRestaurant> menu) {
    this.menu = menu;
    return this;
  }

  public void unsetMenu() {
    this.menu = null;
  }

  /** Returns true if field menu is set (has been assigned a value) and false otherwise */
  public boolean isSetMenu() {
    return this.menu != null;
  }

  public void setMenuIsSet(boolean value) {
    if (!value) {
      this.menu = null;
    }
  }

  /**
   * 
   * @see PriceTarget
   */
  public PriceTarget getUserStatus() {
    return this.userStatus;
  }

  /**
   * 
   * @see PriceTarget
   */
  public FoodResponse setUserStatus(PriceTarget userStatus) {
    this.userStatus = userStatus;
    return this;
  }

  public void unsetUserStatus() {
    this.userStatus = null;
  }

  /** Returns true if field userStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetUserStatus() {
    return this.userStatus != null;
  }

  public void setUserStatusIsSet(boolean value) {
    if (!value) {
      this.userStatus = null;
    }
  }

  public int getMealTypePictureUrlsSize() {
    return (this.mealTypePictureUrls == null) ? 0 : this.mealTypePictureUrls.size();
  }

  public void putToMealTypePictureUrls(MealType key, String val) {
    if (this.mealTypePictureUrls == null) {
      this.mealTypePictureUrls = new HashMap<MealType,String>();
    }
    this.mealTypePictureUrls.put(key, val);
  }

  public Map<MealType,String> getMealTypePictureUrls() {
    return this.mealTypePictureUrls;
  }

  public FoodResponse setMealTypePictureUrls(Map<MealType,String> mealTypePictureUrls) {
    this.mealTypePictureUrls = mealTypePictureUrls;
    return this;
  }

  public void unsetMealTypePictureUrls() {
    this.mealTypePictureUrls = null;
  }

  /** Returns true if field mealTypePictureUrls is set (has been assigned a value) and false otherwise */
  public boolean isSetMealTypePictureUrls() {
    return this.mealTypePictureUrls != null;
  }

  public void setMealTypePictureUrlsIsSet(boolean value) {
    if (!value) {
      this.mealTypePictureUrls = null;
    }
  }

  /**
   * 
   * @see FoodStatusCode
   */
  public FoodStatusCode getStatusCode() {
    return this.statusCode;
  }

  /**
   * 
   * @see FoodStatusCode
   */
  public FoodResponse setStatusCode(FoodStatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  public void unsetStatusCode() {
    this.statusCode = null;
  }

  /** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusCode() {
    return this.statusCode != null;
  }

  public void setStatusCodeIsSet(boolean value) {
    if (!value) {
      this.statusCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MENU:
      if (value == null) {
        unsetMenu();
      } else {
        setMenu((List<EpflRestaurant>)value);
      }
      break;

    case USER_STATUS:
      if (value == null) {
        unsetUserStatus();
      } else {
        setUserStatus((PriceTarget)value);
      }
      break;

    case MEAL_TYPE_PICTURE_URLS:
      if (value == null) {
        unsetMealTypePictureUrls();
      } else {
        setMealTypePictureUrls((Map<MealType,String>)value);
      }
      break;

    case STATUS_CODE:
      if (value == null) {
        unsetStatusCode();
      } else {
        setStatusCode((FoodStatusCode)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MENU:
      return getMenu();

    case USER_STATUS:
      return getUserStatus();

    case MEAL_TYPE_PICTURE_URLS:
      return getMealTypePictureUrls();

    case STATUS_CODE:
      return getStatusCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MENU:
      return isSetMenu();
    case USER_STATUS:
      return isSetUserStatus();
    case MEAL_TYPE_PICTURE_URLS:
      return isSetMealTypePictureUrls();
    case STATUS_CODE:
      return isSetStatusCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FoodResponse)
      return this.equals((FoodResponse)that);
    return false;
  }

  public boolean equals(FoodResponse that) {
    if (that == null)
      return false;

    boolean this_present_menu = true && this.isSetMenu();
    boolean that_present_menu = true && that.isSetMenu();
    if (this_present_menu || that_present_menu) {
      if (!(this_present_menu && that_present_menu))
        return false;
      if (!this.menu.equals(that.menu))
        return false;
    }

    boolean this_present_userStatus = true && this.isSetUserStatus();
    boolean that_present_userStatus = true && that.isSetUserStatus();
    if (this_present_userStatus || that_present_userStatus) {
      if (!(this_present_userStatus && that_present_userStatus))
        return false;
      if (!this.userStatus.equals(that.userStatus))
        return false;
    }

    boolean this_present_mealTypePictureUrls = true && this.isSetMealTypePictureUrls();
    boolean that_present_mealTypePictureUrls = true && that.isSetMealTypePictureUrls();
    if (this_present_mealTypePictureUrls || that_present_mealTypePictureUrls) {
      if (!(this_present_mealTypePictureUrls && that_present_mealTypePictureUrls))
        return false;
      if (!this.mealTypePictureUrls.equals(that.mealTypePictureUrls))
        return false;
    }

    boolean this_present_statusCode = true && this.isSetStatusCode();
    boolean that_present_statusCode = true && that.isSetStatusCode();
    if (this_present_statusCode || that_present_statusCode) {
      if (!(this_present_statusCode && that_present_statusCode))
        return false;
      if (!this.statusCode.equals(that.statusCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_menu = true && (isSetMenu());
    list.add(present_menu);
    if (present_menu)
      list.add(menu);

    boolean present_userStatus = true && (isSetUserStatus());
    list.add(present_userStatus);
    if (present_userStatus)
      list.add(userStatus.getValue());

    boolean present_mealTypePictureUrls = true && (isSetMealTypePictureUrls());
    list.add(present_mealTypePictureUrls);
    if (present_mealTypePictureUrls)
      list.add(mealTypePictureUrls);

    boolean present_statusCode = true && (isSetStatusCode());
    list.add(present_statusCode);
    if (present_statusCode)
      list.add(statusCode.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(FoodResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMenu()).compareTo(other.isSetMenu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menu, other.menu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserStatus()).compareTo(other.isSetUserStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userStatus, other.userStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMealTypePictureUrls()).compareTo(other.isSetMealTypePictureUrls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMealTypePictureUrls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mealTypePictureUrls, other.mealTypePictureUrls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusCode()).compareTo(other.isSetStatusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCode, other.statusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FoodResponse(");
    boolean first = true;

    if (isSetMenu()) {
      sb.append("menu:");
      if (this.menu == null) {
        sb.append("null");
      } else {
        sb.append(this.menu);
      }
      first = false;
    }
    if (isSetUserStatus()) {
      if (!first) sb.append(", ");
      sb.append("userStatus:");
      if (this.userStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.userStatus);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("mealTypePictureUrls:");
    if (this.mealTypePictureUrls == null) {
      sb.append("null");
    } else {
      sb.append(this.mealTypePictureUrls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusCode:");
    if (this.statusCode == null) {
      sb.append("null");
    } else {
      sb.append(this.statusCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mealTypePictureUrls == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mealTypePictureUrls' was not present! Struct: " + toString());
    }
    if (statusCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusCode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FoodResponseStandardSchemeFactory implements SchemeFactory {
    public FoodResponseStandardScheme getScheme() {
      return new FoodResponseStandardScheme();
    }
  }

  private static class FoodResponseStandardScheme extends StandardScheme<FoodResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FoodResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MENU
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.menu = new ArrayList<EpflRestaurant>(_list26.size);
                EpflRestaurant _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new EpflRestaurant();
                  _elem27.read(iprot);
                  struct.menu.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setMenuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userStatus = org.pocketcampus.plugin.food.shared.PriceTarget.findByValue(iprot.readI32());
              struct.setUserStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEAL_TYPE_PICTURE_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map29 = iprot.readMapBegin();
                struct.mealTypePictureUrls = new HashMap<MealType,String>(2*_map29.size);
                MealType _key30;
                String _val31;
                for (int _i32 = 0; _i32 < _map29.size; ++_i32)
                {
                  _key30 = org.pocketcampus.plugin.food.shared.MealType.findByValue(iprot.readI32());
                  _val31 = iprot.readString();
                  struct.mealTypePictureUrls.put(_key30, _val31);
                }
                iprot.readMapEnd();
              }
              struct.setMealTypePictureUrlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusCode = org.pocketcampus.plugin.food.shared.FoodStatusCode.findByValue(iprot.readI32());
              struct.setStatusCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FoodResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.menu != null) {
        if (struct.isSetMenu()) {
          oprot.writeFieldBegin(MENU_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.menu.size()));
            for (EpflRestaurant _iter33 : struct.menu)
            {
              _iter33.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.userStatus != null) {
        if (struct.isSetUserStatus()) {
          oprot.writeFieldBegin(USER_STATUS_FIELD_DESC);
          oprot.writeI32(struct.userStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.mealTypePictureUrls != null) {
        oprot.writeFieldBegin(MEAL_TYPE_PICTURE_URLS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.mealTypePictureUrls.size()));
          for (Map.Entry<MealType, String> _iter34 : struct.mealTypePictureUrls.entrySet())
          {
            oprot.writeI32(_iter34.getKey().getValue());
            oprot.writeString(_iter34.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statusCode != null) {
        oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
        oprot.writeI32(struct.statusCode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FoodResponseTupleSchemeFactory implements SchemeFactory {
    public FoodResponseTupleScheme getScheme() {
      return new FoodResponseTupleScheme();
    }
  }

  private static class FoodResponseTupleScheme extends TupleScheme<FoodResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FoodResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.mealTypePictureUrls.size());
        for (Map.Entry<MealType, String> _iter35 : struct.mealTypePictureUrls.entrySet())
        {
          oprot.writeI32(_iter35.getKey().getValue());
          oprot.writeString(_iter35.getValue());
        }
      }
      oprot.writeI32(struct.statusCode.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetMenu()) {
        optionals.set(0);
      }
      if (struct.isSetUserStatus()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMenu()) {
        {
          oprot.writeI32(struct.menu.size());
          for (EpflRestaurant _iter36 : struct.menu)
          {
            _iter36.write(oprot);
          }
        }
      }
      if (struct.isSetUserStatus()) {
        oprot.writeI32(struct.userStatus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FoodResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map37 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.mealTypePictureUrls = new HashMap<MealType,String>(2*_map37.size);
        MealType _key38;
        String _val39;
        for (int _i40 = 0; _i40 < _map37.size; ++_i40)
        {
          _key38 = org.pocketcampus.plugin.food.shared.MealType.findByValue(iprot.readI32());
          _val39 = iprot.readString();
          struct.mealTypePictureUrls.put(_key38, _val39);
        }
      }
      struct.setMealTypePictureUrlsIsSet(true);
      struct.statusCode = org.pocketcampus.plugin.food.shared.FoodStatusCode.findByValue(iprot.readI32());
      struct.setStatusCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.menu = new ArrayList<EpflRestaurant>(_list41.size);
          EpflRestaurant _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = new EpflRestaurant();
            _elem42.read(iprot);
            struct.menu.add(_elem42);
          }
        }
        struct.setMenuIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userStatus = org.pocketcampus.plugin.food.shared.PriceTarget.findByValue(iprot.readI32());
        struct.setUserStatusIsSet(true);
      }
    }
  }

}

