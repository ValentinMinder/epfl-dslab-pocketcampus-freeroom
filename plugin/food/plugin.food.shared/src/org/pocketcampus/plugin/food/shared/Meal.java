/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.food.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class Meal implements org.apache.thrift.TBase<Meal, Meal._Fields>, java.io.Serializable, Cloneable, Comparable<Meal> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Meal");

  private static final org.apache.thrift.protocol.TField MEAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mealId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEAL_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mealDescription", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESTAURANT_FIELD_DESC = new org.apache.thrift.protocol.TField("restaurant", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("rating", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MealStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MealTupleSchemeFactory());
  }

  private long mealId; // required
  private String name; // required
  private String mealDescription; // required
  private Restaurant restaurant; // required
  private Rating rating; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEAL_ID((short)1, "mealId"),
    NAME((short)2, "name"),
    MEAL_DESCRIPTION((short)3, "mealDescription"),
    RESTAURANT((short)4, "restaurant"),
    RATING((short)5, "rating");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEAL_ID
          return MEAL_ID;
        case 2: // NAME
          return NAME;
        case 3: // MEAL_DESCRIPTION
          return MEAL_DESCRIPTION;
        case 4: // RESTAURANT
          return RESTAURANT;
        case 5: // RATING
          return RATING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEALID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEAL_ID, new org.apache.thrift.meta_data.FieldMetaData("mealId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEAL_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("mealDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESTAURANT, new org.apache.thrift.meta_data.FieldMetaData("restaurant", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Restaurant.class)));
    tmpMap.put(_Fields.RATING, new org.apache.thrift.meta_data.FieldMetaData("rating", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Rating.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Meal.class, metaDataMap);
  }

  public Meal() {
  }

  public Meal(
    long mealId,
    String name,
    String mealDescription,
    Restaurant restaurant,
    Rating rating)
  {
    this();
    this.mealId = mealId;
    setMealIdIsSet(true);
    this.name = name;
    this.mealDescription = mealDescription;
    this.restaurant = restaurant;
    this.rating = rating;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Meal(Meal other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mealId = other.mealId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMealDescription()) {
      this.mealDescription = other.mealDescription;
    }
    if (other.isSetRestaurant()) {
      this.restaurant = new Restaurant(other.restaurant);
    }
    if (other.isSetRating()) {
      this.rating = new Rating(other.rating);
    }
  }

  public Meal deepCopy() {
    return new Meal(this);
  }

  @Override
  public void clear() {
    setMealIdIsSet(false);
    this.mealId = 0;
    this.name = null;
    this.mealDescription = null;
    this.restaurant = null;
    this.rating = null;
  }

  public long getMealId() {
    return this.mealId;
  }

  public Meal setMealId(long mealId) {
    this.mealId = mealId;
    setMealIdIsSet(true);
    return this;
  }

  public void unsetMealId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEALID_ISSET_ID);
  }

  /** Returns true if field mealId is set (has been assigned a value) and false otherwise */
  public boolean isSetMealId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEALID_ISSET_ID);
  }

  public void setMealIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEALID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Meal setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getMealDescription() {
    return this.mealDescription;
  }

  public Meal setMealDescription(String mealDescription) {
    this.mealDescription = mealDescription;
    return this;
  }

  public void unsetMealDescription() {
    this.mealDescription = null;
  }

  /** Returns true if field mealDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetMealDescription() {
    return this.mealDescription != null;
  }

  public void setMealDescriptionIsSet(boolean value) {
    if (!value) {
      this.mealDescription = null;
    }
  }

  public Restaurant getRestaurant() {
    return this.restaurant;
  }

  public Meal setRestaurant(Restaurant restaurant) {
    this.restaurant = restaurant;
    return this;
  }

  public void unsetRestaurant() {
    this.restaurant = null;
  }

  /** Returns true if field restaurant is set (has been assigned a value) and false otherwise */
  public boolean isSetRestaurant() {
    return this.restaurant != null;
  }

  public void setRestaurantIsSet(boolean value) {
    if (!value) {
      this.restaurant = null;
    }
  }

  public Rating getRating() {
    return this.rating;
  }

  public Meal setRating(Rating rating) {
    this.rating = rating;
    return this;
  }

  public void unsetRating() {
    this.rating = null;
  }

  /** Returns true if field rating is set (has been assigned a value) and false otherwise */
  public boolean isSetRating() {
    return this.rating != null;
  }

  public void setRatingIsSet(boolean value) {
    if (!value) {
      this.rating = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEAL_ID:
      if (value == null) {
        unsetMealId();
      } else {
        setMealId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MEAL_DESCRIPTION:
      if (value == null) {
        unsetMealDescription();
      } else {
        setMealDescription((String)value);
      }
      break;

    case RESTAURANT:
      if (value == null) {
        unsetRestaurant();
      } else {
        setRestaurant((Restaurant)value);
      }
      break;

    case RATING:
      if (value == null) {
        unsetRating();
      } else {
        setRating((Rating)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEAL_ID:
      return Long.valueOf(getMealId());

    case NAME:
      return getName();

    case MEAL_DESCRIPTION:
      return getMealDescription();

    case RESTAURANT:
      return getRestaurant();

    case RATING:
      return getRating();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEAL_ID:
      return isSetMealId();
    case NAME:
      return isSetName();
    case MEAL_DESCRIPTION:
      return isSetMealDescription();
    case RESTAURANT:
      return isSetRestaurant();
    case RATING:
      return isSetRating();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Meal)
      return this.equals((Meal)that);
    return false;
  }

  public boolean equals(Meal that) {
    if (that == null)
      return false;

    boolean this_present_mealId = true;
    boolean that_present_mealId = true;
    if (this_present_mealId || that_present_mealId) {
      if (!(this_present_mealId && that_present_mealId))
        return false;
      if (this.mealId != that.mealId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_mealDescription = true && this.isSetMealDescription();
    boolean that_present_mealDescription = true && that.isSetMealDescription();
    if (this_present_mealDescription || that_present_mealDescription) {
      if (!(this_present_mealDescription && that_present_mealDescription))
        return false;
      if (!this.mealDescription.equals(that.mealDescription))
        return false;
    }

    boolean this_present_restaurant = true && this.isSetRestaurant();
    boolean that_present_restaurant = true && that.isSetRestaurant();
    if (this_present_restaurant || that_present_restaurant) {
      if (!(this_present_restaurant && that_present_restaurant))
        return false;
      if (!this.restaurant.equals(that.restaurant))
        return false;
    }

    boolean this_present_rating = true && this.isSetRating();
    boolean that_present_rating = true && that.isSetRating();
    if (this_present_rating || that_present_rating) {
      if (!(this_present_rating && that_present_rating))
        return false;
      if (!this.rating.equals(that.rating))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mealId = true;
    list.add(present_mealId);
    if (present_mealId)
      list.add(mealId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_mealDescription = true && (isSetMealDescription());
    list.add(present_mealDescription);
    if (present_mealDescription)
      list.add(mealDescription);

    boolean present_restaurant = true && (isSetRestaurant());
    list.add(present_restaurant);
    if (present_restaurant)
      list.add(restaurant);

    boolean present_rating = true && (isSetRating());
    list.add(present_rating);
    if (present_rating)
      list.add(rating);

    return list.hashCode();
  }

  @Override
  public int compareTo(Meal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMealId()).compareTo(other.isSetMealId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMealId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mealId, other.mealId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMealDescription()).compareTo(other.isSetMealDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMealDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mealDescription, other.mealDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestaurant()).compareTo(other.isSetRestaurant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestaurant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restaurant, other.restaurant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRating()).compareTo(other.isSetRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rating, other.rating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Meal(");
    boolean first = true;

    sb.append("mealId:");
    sb.append(this.mealId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mealDescription:");
    if (this.mealDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.mealDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("restaurant:");
    if (this.restaurant == null) {
      sb.append("null");
    } else {
      sb.append(this.restaurant);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rating:");
    if (this.rating == null) {
      sb.append("null");
    } else {
      sb.append(this.rating);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'mealId' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (mealDescription == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mealDescription' was not present! Struct: " + toString());
    }
    if (restaurant == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'restaurant' was not present! Struct: " + toString());
    }
    if (rating == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rating' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (restaurant != null) {
      restaurant.validate();
    }
    if (rating != null) {
      rating.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MealStandardSchemeFactory implements SchemeFactory {
    public MealStandardScheme getScheme() {
      return new MealStandardScheme();
    }
  }

  private static class MealStandardScheme extends StandardScheme<Meal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Meal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mealId = iprot.readI64();
              struct.setMealIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEAL_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mealDescription = iprot.readString();
              struct.setMealDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESTAURANT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.restaurant = new Restaurant();
              struct.restaurant.read(iprot);
              struct.setRestaurantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rating = new Rating();
              struct.rating.read(iprot);
              struct.setRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMealId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mealId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Meal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEAL_ID_FIELD_DESC);
      oprot.writeI64(struct.mealId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.mealDescription != null) {
        oprot.writeFieldBegin(MEAL_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.mealDescription);
        oprot.writeFieldEnd();
      }
      if (struct.restaurant != null) {
        oprot.writeFieldBegin(RESTAURANT_FIELD_DESC);
        struct.restaurant.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rating != null) {
        oprot.writeFieldBegin(RATING_FIELD_DESC);
        struct.rating.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MealTupleSchemeFactory implements SchemeFactory {
    public MealTupleScheme getScheme() {
      return new MealTupleScheme();
    }
  }

  private static class MealTupleScheme extends TupleScheme<Meal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Meal struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.mealId);
      oprot.writeString(struct.name);
      oprot.writeString(struct.mealDescription);
      struct.restaurant.write(oprot);
      struct.rating.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Meal struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mealId = iprot.readI64();
      struct.setMealIdIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.mealDescription = iprot.readString();
      struct.setMealDescriptionIsSet(true);
      struct.restaurant = new Restaurant();
      struct.restaurant.read(iprot);
      struct.setRestaurantIsSet(true);
      struct.rating = new Rating();
      struct.rating.read(iprot);
      struct.setRatingIsSet(true);
    }
  }

}

