/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.food.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Rating implements org.apache.thrift.TBase<Rating, Rating._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Rating");

  private static final org.apache.thrift.protocol.TField RATING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("ratingValue", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_VOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfVotes", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUM_OF_RATINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("sumOfRatings", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  public double ratingValue; // required
  public int numberOfVotes; // required
  public double sumOfRatings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RATING_VALUE((short)1, "ratingValue"),
    NUMBER_OF_VOTES((short)2, "numberOfVotes"),
    SUM_OF_RATINGS((short)3, "sumOfRatings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RATING_VALUE
          return RATING_VALUE;
        case 2: // NUMBER_OF_VOTES
          return NUMBER_OF_VOTES;
        case 3: // SUM_OF_RATINGS
          return SUM_OF_RATINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RATINGVALUE_ISSET_ID = 0;
  private static final int __NUMBEROFVOTES_ISSET_ID = 1;
  private static final int __SUMOFRATINGS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RATING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("ratingValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER_OF_VOTES, new org.apache.thrift.meta_data.FieldMetaData("numberOfVotes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUM_OF_RATINGS, new org.apache.thrift.meta_data.FieldMetaData("sumOfRatings", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Rating.class, metaDataMap);
  }

  public Rating() {
  }

  public Rating(
    double ratingValue,
    int numberOfVotes,
    double sumOfRatings)
  {
    this();
    this.ratingValue = ratingValue;
    setRatingValueIsSet(true);
    this.numberOfVotes = numberOfVotes;
    setNumberOfVotesIsSet(true);
    this.sumOfRatings = sumOfRatings;
    setSumOfRatingsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Rating(Rating other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.ratingValue = other.ratingValue;
    this.numberOfVotes = other.numberOfVotes;
    this.sumOfRatings = other.sumOfRatings;
  }

  public Rating deepCopy() {
    return new Rating(this);
  }

  @Override
  public void clear() {
    setRatingValueIsSet(false);
    this.ratingValue = 0.0;
    setNumberOfVotesIsSet(false);
    this.numberOfVotes = 0;
    setSumOfRatingsIsSet(false);
    this.sumOfRatings = 0.0;
  }

  public double getRatingValue() {
    return this.ratingValue;
  }

  public Rating setRatingValue(double ratingValue) {
    this.ratingValue = ratingValue;
    setRatingValueIsSet(true);
    return this;
  }

  public void unsetRatingValue() {
    __isset_bit_vector.clear(__RATINGVALUE_ISSET_ID);
  }

  /** Returns true if field ratingValue is set (has been assigned a value) and false otherwise */
  public boolean isSetRatingValue() {
    return __isset_bit_vector.get(__RATINGVALUE_ISSET_ID);
  }

  public void setRatingValueIsSet(boolean value) {
    __isset_bit_vector.set(__RATINGVALUE_ISSET_ID, value);
  }

  public int getNumberOfVotes() {
    return this.numberOfVotes;
  }

  public Rating setNumberOfVotes(int numberOfVotes) {
    this.numberOfVotes = numberOfVotes;
    setNumberOfVotesIsSet(true);
    return this;
  }

  public void unsetNumberOfVotes() {
    __isset_bit_vector.clear(__NUMBEROFVOTES_ISSET_ID);
  }

  /** Returns true if field numberOfVotes is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfVotes() {
    return __isset_bit_vector.get(__NUMBEROFVOTES_ISSET_ID);
  }

  public void setNumberOfVotesIsSet(boolean value) {
    __isset_bit_vector.set(__NUMBEROFVOTES_ISSET_ID, value);
  }

  public double getSumOfRatings() {
    return this.sumOfRatings;
  }

  public Rating setSumOfRatings(double sumOfRatings) {
    this.sumOfRatings = sumOfRatings;
    setSumOfRatingsIsSet(true);
    return this;
  }

  public void unsetSumOfRatings() {
    __isset_bit_vector.clear(__SUMOFRATINGS_ISSET_ID);
  }

  /** Returns true if field sumOfRatings is set (has been assigned a value) and false otherwise */
  public boolean isSetSumOfRatings() {
    return __isset_bit_vector.get(__SUMOFRATINGS_ISSET_ID);
  }

  public void setSumOfRatingsIsSet(boolean value) {
    __isset_bit_vector.set(__SUMOFRATINGS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RATING_VALUE:
      if (value == null) {
        unsetRatingValue();
      } else {
        setRatingValue((Double)value);
      }
      break;

    case NUMBER_OF_VOTES:
      if (value == null) {
        unsetNumberOfVotes();
      } else {
        setNumberOfVotes((Integer)value);
      }
      break;

    case SUM_OF_RATINGS:
      if (value == null) {
        unsetSumOfRatings();
      } else {
        setSumOfRatings((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RATING_VALUE:
      return Double.valueOf(getRatingValue());

    case NUMBER_OF_VOTES:
      return Integer.valueOf(getNumberOfVotes());

    case SUM_OF_RATINGS:
      return Double.valueOf(getSumOfRatings());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RATING_VALUE:
      return isSetRatingValue();
    case NUMBER_OF_VOTES:
      return isSetNumberOfVotes();
    case SUM_OF_RATINGS:
      return isSetSumOfRatings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Rating)
      return this.equals((Rating)that);
    return false;
  }

  public boolean equals(Rating that) {
    if (that == null)
      return false;

    boolean this_present_ratingValue = true;
    boolean that_present_ratingValue = true;
    if (this_present_ratingValue || that_present_ratingValue) {
      if (!(this_present_ratingValue && that_present_ratingValue))
        return false;
      if (this.ratingValue != that.ratingValue)
        return false;
    }

    boolean this_present_numberOfVotes = true;
    boolean that_present_numberOfVotes = true;
    if (this_present_numberOfVotes || that_present_numberOfVotes) {
      if (!(this_present_numberOfVotes && that_present_numberOfVotes))
        return false;
      if (this.numberOfVotes != that.numberOfVotes)
        return false;
    }

    boolean this_present_sumOfRatings = true;
    boolean that_present_sumOfRatings = true;
    if (this_present_sumOfRatings || that_present_sumOfRatings) {
      if (!(this_present_sumOfRatings && that_present_sumOfRatings))
        return false;
      if (this.sumOfRatings != that.sumOfRatings)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_ratingValue = true;
    builder.append(present_ratingValue);
    if (present_ratingValue)
      builder.append(ratingValue);

    boolean present_numberOfVotes = true;
    builder.append(present_numberOfVotes);
    if (present_numberOfVotes)
      builder.append(numberOfVotes);

    boolean present_sumOfRatings = true;
    builder.append(present_sumOfRatings);
    if (present_sumOfRatings)
      builder.append(sumOfRatings);

    return builder.toHashCode();
  }

  public int compareTo(Rating other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Rating typedOther = (Rating)other;

    lastComparison = Boolean.valueOf(isSetRatingValue()).compareTo(typedOther.isSetRatingValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatingValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratingValue, typedOther.ratingValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfVotes()).compareTo(typedOther.isSetNumberOfVotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfVotes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfVotes, typedOther.numberOfVotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSumOfRatings()).compareTo(typedOther.isSetSumOfRatings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSumOfRatings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sumOfRatings, typedOther.sumOfRatings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // RATING_VALUE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.ratingValue = iprot.readDouble();
            setRatingValueIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NUMBER_OF_VOTES
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.numberOfVotes = iprot.readI32();
            setNumberOfVotesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SUM_OF_RATINGS
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.sumOfRatings = iprot.readDouble();
            setSumOfRatingsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetRatingValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ratingValue' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetNumberOfVotes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfVotes' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetSumOfRatings()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sumOfRatings' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(RATING_VALUE_FIELD_DESC);
    oprot.writeDouble(this.ratingValue);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUMBER_OF_VOTES_FIELD_DESC);
    oprot.writeI32(this.numberOfVotes);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SUM_OF_RATINGS_FIELD_DESC);
    oprot.writeDouble(this.sumOfRatings);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Rating(");
    boolean first = true;

    sb.append("ratingValue:");
    sb.append(this.ratingValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfVotes:");
    sb.append(this.numberOfVotes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sumOfRatings:");
    sb.append(this.sumOfRatings);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ratingValue' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numberOfVotes' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sumOfRatings' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

