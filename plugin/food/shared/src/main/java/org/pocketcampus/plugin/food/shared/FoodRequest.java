/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.food.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-17")
public class FoodRequest implements org.apache.thrift.TBase<FoodRequest, FoodRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FoodRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FoodRequest");

  private static final org.apache.thrift.protocol.TField DEVICE_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceLanguage", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mealTime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEAL_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mealDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_GASPAR_FIELD_DESC = new org.apache.thrift.protocol.TField("userGaspar", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FoodRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FoodRequestTupleSchemeFactory());
  }

  private String deviceLanguage; // optional
  private MealTime mealTime; // optional
  private long mealDate; // optional
  private String deviceId; // optional
  private String userGaspar; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_LANGUAGE((short)1, "deviceLanguage"),
    /**
     * 
     * @see MealTime
     */
    MEAL_TIME((short)2, "mealTime"),
    MEAL_DATE((short)3, "mealDate"),
    DEVICE_ID((short)4, "deviceId"),
    USER_GASPAR((short)5, "userGaspar");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_LANGUAGE
          return DEVICE_LANGUAGE;
        case 2: // MEAL_TIME
          return MEAL_TIME;
        case 3: // MEAL_DATE
          return MEAL_DATE;
        case 4: // DEVICE_ID
          return DEVICE_ID;
        case 5: // USER_GASPAR
          return USER_GASPAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEALDATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEVICE_LANGUAGE,_Fields.MEAL_TIME,_Fields.MEAL_DATE,_Fields.DEVICE_ID,_Fields.USER_GASPAR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("deviceLanguage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("mealTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MealTime.class)));
    tmpMap.put(_Fields.MEAL_DATE, new org.apache.thrift.meta_data.FieldMetaData("mealDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_GASPAR, new org.apache.thrift.meta_data.FieldMetaData("userGaspar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FoodRequest.class, metaDataMap);
  }

  public FoodRequest() {
    this.deviceLanguage = "fr";

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FoodRequest(FoodRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviceLanguage()) {
      this.deviceLanguage = other.deviceLanguage;
    }
    if (other.isSetMealTime()) {
      this.mealTime = other.mealTime;
    }
    this.mealDate = other.mealDate;
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    if (other.isSetUserGaspar()) {
      this.userGaspar = other.userGaspar;
    }
  }

  public FoodRequest deepCopy() {
    return new FoodRequest(this);
  }

  @Override
  public void clear() {
    this.deviceLanguage = "fr";

    this.mealTime = null;
    setMealDateIsSet(false);
    this.mealDate = 0;
    this.deviceId = null;
    this.userGaspar = null;
  }

  public String getDeviceLanguage() {
    return this.deviceLanguage;
  }

  public FoodRequest setDeviceLanguage(String deviceLanguage) {
    this.deviceLanguage = deviceLanguage;
    return this;
  }

  public void unsetDeviceLanguage() {
    this.deviceLanguage = null;
  }

  /** Returns true if field deviceLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceLanguage() {
    return this.deviceLanguage != null;
  }

  public void setDeviceLanguageIsSet(boolean value) {
    if (!value) {
      this.deviceLanguage = null;
    }
  }

  /**
   * 
   * @see MealTime
   */
  public MealTime getMealTime() {
    return this.mealTime;
  }

  /**
   * 
   * @see MealTime
   */
  public FoodRequest setMealTime(MealTime mealTime) {
    this.mealTime = mealTime;
    return this;
  }

  public void unsetMealTime() {
    this.mealTime = null;
  }

  /** Returns true if field mealTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMealTime() {
    return this.mealTime != null;
  }

  public void setMealTimeIsSet(boolean value) {
    if (!value) {
      this.mealTime = null;
    }
  }

  public long getMealDate() {
    return this.mealDate;
  }

  public FoodRequest setMealDate(long mealDate) {
    this.mealDate = mealDate;
    setMealDateIsSet(true);
    return this;
  }

  public void unsetMealDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEALDATE_ISSET_ID);
  }

  /** Returns true if field mealDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMealDate() {
    return EncodingUtils.testBit(__isset_bitfield, __MEALDATE_ISSET_ID);
  }

  public void setMealDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEALDATE_ISSET_ID, value);
  }

  public String getDeviceId() {
    return this.deviceId;
  }

  public FoodRequest setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public String getUserGaspar() {
    return this.userGaspar;
  }

  public FoodRequest setUserGaspar(String userGaspar) {
    this.userGaspar = userGaspar;
    return this;
  }

  public void unsetUserGaspar() {
    this.userGaspar = null;
  }

  /** Returns true if field userGaspar is set (has been assigned a value) and false otherwise */
  public boolean isSetUserGaspar() {
    return this.userGaspar != null;
  }

  public void setUserGasparIsSet(boolean value) {
    if (!value) {
      this.userGaspar = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_LANGUAGE:
      if (value == null) {
        unsetDeviceLanguage();
      } else {
        setDeviceLanguage((String)value);
      }
      break;

    case MEAL_TIME:
      if (value == null) {
        unsetMealTime();
      } else {
        setMealTime((MealTime)value);
      }
      break;

    case MEAL_DATE:
      if (value == null) {
        unsetMealDate();
      } else {
        setMealDate((Long)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case USER_GASPAR:
      if (value == null) {
        unsetUserGaspar();
      } else {
        setUserGaspar((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_LANGUAGE:
      return getDeviceLanguage();

    case MEAL_TIME:
      return getMealTime();

    case MEAL_DATE:
      return Long.valueOf(getMealDate());

    case DEVICE_ID:
      return getDeviceId();

    case USER_GASPAR:
      return getUserGaspar();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_LANGUAGE:
      return isSetDeviceLanguage();
    case MEAL_TIME:
      return isSetMealTime();
    case MEAL_DATE:
      return isSetMealDate();
    case DEVICE_ID:
      return isSetDeviceId();
    case USER_GASPAR:
      return isSetUserGaspar();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FoodRequest)
      return this.equals((FoodRequest)that);
    return false;
  }

  public boolean equals(FoodRequest that) {
    if (that == null)
      return false;

    boolean this_present_deviceLanguage = true && this.isSetDeviceLanguage();
    boolean that_present_deviceLanguage = true && that.isSetDeviceLanguage();
    if (this_present_deviceLanguage || that_present_deviceLanguage) {
      if (!(this_present_deviceLanguage && that_present_deviceLanguage))
        return false;
      if (!this.deviceLanguage.equals(that.deviceLanguage))
        return false;
    }

    boolean this_present_mealTime = true && this.isSetMealTime();
    boolean that_present_mealTime = true && that.isSetMealTime();
    if (this_present_mealTime || that_present_mealTime) {
      if (!(this_present_mealTime && that_present_mealTime))
        return false;
      if (!this.mealTime.equals(that.mealTime))
        return false;
    }

    boolean this_present_mealDate = true && this.isSetMealDate();
    boolean that_present_mealDate = true && that.isSetMealDate();
    if (this_present_mealDate || that_present_mealDate) {
      if (!(this_present_mealDate && that_present_mealDate))
        return false;
      if (this.mealDate != that.mealDate)
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_userGaspar = true && this.isSetUserGaspar();
    boolean that_present_userGaspar = true && that.isSetUserGaspar();
    if (this_present_userGaspar || that_present_userGaspar) {
      if (!(this_present_userGaspar && that_present_userGaspar))
        return false;
      if (!this.userGaspar.equals(that.userGaspar))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_deviceLanguage = true && (isSetDeviceLanguage());
    list.add(present_deviceLanguage);
    if (present_deviceLanguage)
      list.add(deviceLanguage);

    boolean present_mealTime = true && (isSetMealTime());
    list.add(present_mealTime);
    if (present_mealTime)
      list.add(mealTime.getValue());

    boolean present_mealDate = true && (isSetMealDate());
    list.add(present_mealDate);
    if (present_mealDate)
      list.add(mealDate);

    boolean present_deviceId = true && (isSetDeviceId());
    list.add(present_deviceId);
    if (present_deviceId)
      list.add(deviceId);

    boolean present_userGaspar = true && (isSetUserGaspar());
    list.add(present_userGaspar);
    if (present_userGaspar)
      list.add(userGaspar);

    return list.hashCode();
  }

  @Override
  public int compareTo(FoodRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDeviceLanguage()).compareTo(other.isSetDeviceLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceLanguage, other.deviceLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMealTime()).compareTo(other.isSetMealTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMealTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mealTime, other.mealTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMealDate()).compareTo(other.isSetMealDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMealDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mealDate, other.mealDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserGaspar()).compareTo(other.isSetUserGaspar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserGaspar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userGaspar, other.userGaspar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FoodRequest(");
    boolean first = true;

    if (isSetDeviceLanguage()) {
      sb.append("deviceLanguage:");
      if (this.deviceLanguage == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceLanguage);
      }
      first = false;
    }
    if (isSetMealTime()) {
      if (!first) sb.append(", ");
      sb.append("mealTime:");
      if (this.mealTime == null) {
        sb.append("null");
      } else {
        sb.append(this.mealTime);
      }
      first = false;
    }
    if (isSetMealDate()) {
      if (!first) sb.append(", ");
      sb.append("mealDate:");
      sb.append(this.mealDate);
      first = false;
    }
    if (isSetDeviceId()) {
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
    }
    if (isSetUserGaspar()) {
      if (!first) sb.append(", ");
      sb.append("userGaspar:");
      if (this.userGaspar == null) {
        sb.append("null");
      } else {
        sb.append(this.userGaspar);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FoodRequestStandardSchemeFactory implements SchemeFactory {
    public FoodRequestStandardScheme getScheme() {
      return new FoodRequestStandardScheme();
    }
  }

  private static class FoodRequestStandardScheme extends StandardScheme<FoodRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FoodRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceLanguage = iprot.readString();
              struct.setDeviceLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mealTime = org.pocketcampus.plugin.food.shared.MealTime.findByValue(iprot.readI32());
              struct.setMealTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEAL_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mealDate = iprot.readI64();
              struct.setMealDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_GASPAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userGaspar = iprot.readString();
              struct.setUserGasparIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FoodRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceLanguage != null) {
        if (struct.isSetDeviceLanguage()) {
          oprot.writeFieldBegin(DEVICE_LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.deviceLanguage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mealTime != null) {
        if (struct.isSetMealTime()) {
          oprot.writeFieldBegin(MEAL_TIME_FIELD_DESC);
          oprot.writeI32(struct.mealTime.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMealDate()) {
        oprot.writeFieldBegin(MEAL_DATE_FIELD_DESC);
        oprot.writeI64(struct.mealDate);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        if (struct.isSetDeviceId()) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userGaspar != null) {
        if (struct.isSetUserGaspar()) {
          oprot.writeFieldBegin(USER_GASPAR_FIELD_DESC);
          oprot.writeString(struct.userGaspar);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FoodRequestTupleSchemeFactory implements SchemeFactory {
    public FoodRequestTupleScheme getScheme() {
      return new FoodRequestTupleScheme();
    }
  }

  private static class FoodRequestTupleScheme extends TupleScheme<FoodRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FoodRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDeviceLanguage()) {
        optionals.set(0);
      }
      if (struct.isSetMealTime()) {
        optionals.set(1);
      }
      if (struct.isSetMealDate()) {
        optionals.set(2);
      }
      if (struct.isSetDeviceId()) {
        optionals.set(3);
      }
      if (struct.isSetUserGaspar()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDeviceLanguage()) {
        oprot.writeString(struct.deviceLanguage);
      }
      if (struct.isSetMealTime()) {
        oprot.writeI32(struct.mealTime.getValue());
      }
      if (struct.isSetMealDate()) {
        oprot.writeI64(struct.mealDate);
      }
      if (struct.isSetDeviceId()) {
        oprot.writeString(struct.deviceId);
      }
      if (struct.isSetUserGaspar()) {
        oprot.writeString(struct.userGaspar);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FoodRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.deviceLanguage = iprot.readString();
        struct.setDeviceLanguageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mealTime = org.pocketcampus.plugin.food.shared.MealTime.findByValue(iprot.readI32());
        struct.setMealTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mealDate = iprot.readI64();
        struct.setMealDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deviceId = iprot.readString();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userGaspar = iprot.readString();
        struct.setUserGasparIsSet(true);
      }
    }
  }

}

