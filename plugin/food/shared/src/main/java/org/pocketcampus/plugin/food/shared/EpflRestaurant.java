/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.food.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-17")
public class EpflRestaurant implements org.apache.thrift.TBase<EpflRestaurant, EpflRestaurant._Fields>, java.io.Serializable, Cloneable, Comparable<EpflRestaurant> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EpflRestaurant");

  private static final org.apache.thrift.protocol.TField R_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField R_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("rName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField R_MEALS_FIELD_DESC = new org.apache.thrift.protocol.TField("rMeals", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField R_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("rLocation", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField R_RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("rRating", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField R_PICTURE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("rPictureUrl", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EpflRestaurantStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EpflRestaurantTupleSchemeFactory());
  }

  private long rId; // required
  private String rName; // required
  private List<EpflMeal> rMeals; // required
  private org.pocketcampus.plugin.map.shared.MapItem rLocation; // optional
  private EpflRating rRating; // required
  private String rPictureUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    R_ID((short)1, "rId"),
    R_NAME((short)2, "rName"),
    R_MEALS((short)3, "rMeals"),
    R_LOCATION((short)4, "rLocation"),
    R_RATING((short)5, "rRating"),
    R_PICTURE_URL((short)6, "rPictureUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // R_ID
          return R_ID;
        case 2: // R_NAME
          return R_NAME;
        case 3: // R_MEALS
          return R_MEALS;
        case 4: // R_LOCATION
          return R_LOCATION;
        case 5: // R_RATING
          return R_RATING;
        case 6: // R_PICTURE_URL
          return R_PICTURE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.R_LOCATION,_Fields.R_PICTURE_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.R_ID, new org.apache.thrift.meta_data.FieldMetaData("rId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.R_NAME, new org.apache.thrift.meta_data.FieldMetaData("rName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.R_MEALS, new org.apache.thrift.meta_data.FieldMetaData("rMeals", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EpflMeal.class))));
    tmpMap.put(_Fields.R_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("rLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.pocketcampus.plugin.map.shared.MapItem.class)));
    tmpMap.put(_Fields.R_RATING, new org.apache.thrift.meta_data.FieldMetaData("rRating", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EpflRating.class)));
    tmpMap.put(_Fields.R_PICTURE_URL, new org.apache.thrift.meta_data.FieldMetaData("rPictureUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EpflRestaurant.class, metaDataMap);
  }

  public EpflRestaurant() {
  }

  public EpflRestaurant(
    long rId,
    String rName,
    List<EpflMeal> rMeals,
    EpflRating rRating)
  {
    this();
    this.rId = rId;
    setRIdIsSet(true);
    this.rName = rName;
    this.rMeals = rMeals;
    this.rRating = rRating;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EpflRestaurant(EpflRestaurant other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rId = other.rId;
    if (other.isSetRName()) {
      this.rName = other.rName;
    }
    if (other.isSetRMeals()) {
      List<EpflMeal> __this__rMeals = new ArrayList<EpflMeal>(other.rMeals.size());
      for (EpflMeal other_element : other.rMeals) {
        __this__rMeals.add(new EpflMeal(other_element));
      }
      this.rMeals = __this__rMeals;
    }
    if (other.isSetRLocation()) {
      this.rLocation = new org.pocketcampus.plugin.map.shared.MapItem(other.rLocation);
    }
    if (other.isSetRRating()) {
      this.rRating = new EpflRating(other.rRating);
    }
    if (other.isSetRPictureUrl()) {
      this.rPictureUrl = other.rPictureUrl;
    }
  }

  public EpflRestaurant deepCopy() {
    return new EpflRestaurant(this);
  }

  @Override
  public void clear() {
    setRIdIsSet(false);
    this.rId = 0;
    this.rName = null;
    this.rMeals = null;
    this.rLocation = null;
    this.rRating = null;
    this.rPictureUrl = null;
  }

  public long getRId() {
    return this.rId;
  }

  public EpflRestaurant setRId(long rId) {
    this.rId = rId;
    setRIdIsSet(true);
    return this;
  }

  public void unsetRId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RID_ISSET_ID);
  }

  /** Returns true if field rId is set (has been assigned a value) and false otherwise */
  public boolean isSetRId() {
    return EncodingUtils.testBit(__isset_bitfield, __RID_ISSET_ID);
  }

  public void setRIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RID_ISSET_ID, value);
  }

  public String getRName() {
    return this.rName;
  }

  public EpflRestaurant setRName(String rName) {
    this.rName = rName;
    return this;
  }

  public void unsetRName() {
    this.rName = null;
  }

  /** Returns true if field rName is set (has been assigned a value) and false otherwise */
  public boolean isSetRName() {
    return this.rName != null;
  }

  public void setRNameIsSet(boolean value) {
    if (!value) {
      this.rName = null;
    }
  }

  public int getRMealsSize() {
    return (this.rMeals == null) ? 0 : this.rMeals.size();
  }

  public java.util.Iterator<EpflMeal> getRMealsIterator() {
    return (this.rMeals == null) ? null : this.rMeals.iterator();
  }

  public void addToRMeals(EpflMeal elem) {
    if (this.rMeals == null) {
      this.rMeals = new ArrayList<EpflMeal>();
    }
    this.rMeals.add(elem);
  }

  public List<EpflMeal> getRMeals() {
    return this.rMeals;
  }

  public EpflRestaurant setRMeals(List<EpflMeal> rMeals) {
    this.rMeals = rMeals;
    return this;
  }

  public void unsetRMeals() {
    this.rMeals = null;
  }

  /** Returns true if field rMeals is set (has been assigned a value) and false otherwise */
  public boolean isSetRMeals() {
    return this.rMeals != null;
  }

  public void setRMealsIsSet(boolean value) {
    if (!value) {
      this.rMeals = null;
    }
  }

  public org.pocketcampus.plugin.map.shared.MapItem getRLocation() {
    return this.rLocation;
  }

  public EpflRestaurant setRLocation(org.pocketcampus.plugin.map.shared.MapItem rLocation) {
    this.rLocation = rLocation;
    return this;
  }

  public void unsetRLocation() {
    this.rLocation = null;
  }

  /** Returns true if field rLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetRLocation() {
    return this.rLocation != null;
  }

  public void setRLocationIsSet(boolean value) {
    if (!value) {
      this.rLocation = null;
    }
  }

  public EpflRating getRRating() {
    return this.rRating;
  }

  public EpflRestaurant setRRating(EpflRating rRating) {
    this.rRating = rRating;
    return this;
  }

  public void unsetRRating() {
    this.rRating = null;
  }

  /** Returns true if field rRating is set (has been assigned a value) and false otherwise */
  public boolean isSetRRating() {
    return this.rRating != null;
  }

  public void setRRatingIsSet(boolean value) {
    if (!value) {
      this.rRating = null;
    }
  }

  public String getRPictureUrl() {
    return this.rPictureUrl;
  }

  public EpflRestaurant setRPictureUrl(String rPictureUrl) {
    this.rPictureUrl = rPictureUrl;
    return this;
  }

  public void unsetRPictureUrl() {
    this.rPictureUrl = null;
  }

  /** Returns true if field rPictureUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetRPictureUrl() {
    return this.rPictureUrl != null;
  }

  public void setRPictureUrlIsSet(boolean value) {
    if (!value) {
      this.rPictureUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case R_ID:
      if (value == null) {
        unsetRId();
      } else {
        setRId((Long)value);
      }
      break;

    case R_NAME:
      if (value == null) {
        unsetRName();
      } else {
        setRName((String)value);
      }
      break;

    case R_MEALS:
      if (value == null) {
        unsetRMeals();
      } else {
        setRMeals((List<EpflMeal>)value);
      }
      break;

    case R_LOCATION:
      if (value == null) {
        unsetRLocation();
      } else {
        setRLocation((org.pocketcampus.plugin.map.shared.MapItem)value);
      }
      break;

    case R_RATING:
      if (value == null) {
        unsetRRating();
      } else {
        setRRating((EpflRating)value);
      }
      break;

    case R_PICTURE_URL:
      if (value == null) {
        unsetRPictureUrl();
      } else {
        setRPictureUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case R_ID:
      return Long.valueOf(getRId());

    case R_NAME:
      return getRName();

    case R_MEALS:
      return getRMeals();

    case R_LOCATION:
      return getRLocation();

    case R_RATING:
      return getRRating();

    case R_PICTURE_URL:
      return getRPictureUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case R_ID:
      return isSetRId();
    case R_NAME:
      return isSetRName();
    case R_MEALS:
      return isSetRMeals();
    case R_LOCATION:
      return isSetRLocation();
    case R_RATING:
      return isSetRRating();
    case R_PICTURE_URL:
      return isSetRPictureUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EpflRestaurant)
      return this.equals((EpflRestaurant)that);
    return false;
  }

  public boolean equals(EpflRestaurant that) {
    if (that == null)
      return false;

    boolean this_present_rId = true;
    boolean that_present_rId = true;
    if (this_present_rId || that_present_rId) {
      if (!(this_present_rId && that_present_rId))
        return false;
      if (this.rId != that.rId)
        return false;
    }

    boolean this_present_rName = true && this.isSetRName();
    boolean that_present_rName = true && that.isSetRName();
    if (this_present_rName || that_present_rName) {
      if (!(this_present_rName && that_present_rName))
        return false;
      if (!this.rName.equals(that.rName))
        return false;
    }

    boolean this_present_rMeals = true && this.isSetRMeals();
    boolean that_present_rMeals = true && that.isSetRMeals();
    if (this_present_rMeals || that_present_rMeals) {
      if (!(this_present_rMeals && that_present_rMeals))
        return false;
      if (!this.rMeals.equals(that.rMeals))
        return false;
    }

    boolean this_present_rLocation = true && this.isSetRLocation();
    boolean that_present_rLocation = true && that.isSetRLocation();
    if (this_present_rLocation || that_present_rLocation) {
      if (!(this_present_rLocation && that_present_rLocation))
        return false;
      if (!this.rLocation.equals(that.rLocation))
        return false;
    }

    boolean this_present_rRating = true && this.isSetRRating();
    boolean that_present_rRating = true && that.isSetRRating();
    if (this_present_rRating || that_present_rRating) {
      if (!(this_present_rRating && that_present_rRating))
        return false;
      if (!this.rRating.equals(that.rRating))
        return false;
    }

    boolean this_present_rPictureUrl = true && this.isSetRPictureUrl();
    boolean that_present_rPictureUrl = true && that.isSetRPictureUrl();
    if (this_present_rPictureUrl || that_present_rPictureUrl) {
      if (!(this_present_rPictureUrl && that_present_rPictureUrl))
        return false;
      if (!this.rPictureUrl.equals(that.rPictureUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rId = true;
    list.add(present_rId);
    if (present_rId)
      list.add(rId);

    boolean present_rName = true && (isSetRName());
    list.add(present_rName);
    if (present_rName)
      list.add(rName);

    boolean present_rMeals = true && (isSetRMeals());
    list.add(present_rMeals);
    if (present_rMeals)
      list.add(rMeals);

    boolean present_rLocation = true && (isSetRLocation());
    list.add(present_rLocation);
    if (present_rLocation)
      list.add(rLocation);

    boolean present_rRating = true && (isSetRRating());
    list.add(present_rRating);
    if (present_rRating)
      list.add(rRating);

    boolean present_rPictureUrl = true && (isSetRPictureUrl());
    list.add(present_rPictureUrl);
    if (present_rPictureUrl)
      list.add(rPictureUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(EpflRestaurant other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRId()).compareTo(other.isSetRId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rId, other.rId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRName()).compareTo(other.isSetRName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rName, other.rName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRMeals()).compareTo(other.isSetRMeals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRMeals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rMeals, other.rMeals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRLocation()).compareTo(other.isSetRLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rLocation, other.rLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRRating()).compareTo(other.isSetRRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rRating, other.rRating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRPictureUrl()).compareTo(other.isSetRPictureUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRPictureUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rPictureUrl, other.rPictureUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EpflRestaurant(");
    boolean first = true;

    sb.append("rId:");
    sb.append(this.rId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rName:");
    if (this.rName == null) {
      sb.append("null");
    } else {
      sb.append(this.rName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rMeals:");
    if (this.rMeals == null) {
      sb.append("null");
    } else {
      sb.append(this.rMeals);
    }
    first = false;
    if (isSetRLocation()) {
      if (!first) sb.append(", ");
      sb.append("rLocation:");
      if (this.rLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.rLocation);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("rRating:");
    if (this.rRating == null) {
      sb.append("null");
    } else {
      sb.append(this.rRating);
    }
    first = false;
    if (isSetRPictureUrl()) {
      if (!first) sb.append(", ");
      sb.append("rPictureUrl:");
      if (this.rPictureUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.rPictureUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'rId' because it's a primitive and you chose the non-beans generator.
    if (rName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rName' was not present! Struct: " + toString());
    }
    if (rMeals == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rMeals' was not present! Struct: " + toString());
    }
    if (rRating == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rRating' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (rLocation != null) {
      rLocation.validate();
    }
    if (rRating != null) {
      rRating.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EpflRestaurantStandardSchemeFactory implements SchemeFactory {
    public EpflRestaurantStandardScheme getScheme() {
      return new EpflRestaurantStandardScheme();
    }
  }

  private static class EpflRestaurantStandardScheme extends StandardScheme<EpflRestaurant> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EpflRestaurant struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // R_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rId = iprot.readI64();
              struct.setRIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // R_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rName = iprot.readString();
              struct.setRNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // R_MEALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.rMeals = new ArrayList<EpflMeal>(_list18.size);
                EpflMeal _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new EpflMeal();
                  _elem19.read(iprot);
                  struct.rMeals.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setRMealsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // R_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rLocation = new org.pocketcampus.plugin.map.shared.MapItem();
              struct.rLocation.read(iprot);
              struct.setRLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // R_RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rRating = new EpflRating();
              struct.rRating.read(iprot);
              struct.setRRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // R_PICTURE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rPictureUrl = iprot.readString();
              struct.setRPictureUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EpflRestaurant struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(R_ID_FIELD_DESC);
      oprot.writeI64(struct.rId);
      oprot.writeFieldEnd();
      if (struct.rName != null) {
        oprot.writeFieldBegin(R_NAME_FIELD_DESC);
        oprot.writeString(struct.rName);
        oprot.writeFieldEnd();
      }
      if (struct.rMeals != null) {
        oprot.writeFieldBegin(R_MEALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rMeals.size()));
          for (EpflMeal _iter21 : struct.rMeals)
          {
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rLocation != null) {
        if (struct.isSetRLocation()) {
          oprot.writeFieldBegin(R_LOCATION_FIELD_DESC);
          struct.rLocation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rRating != null) {
        oprot.writeFieldBegin(R_RATING_FIELD_DESC);
        struct.rRating.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rPictureUrl != null) {
        if (struct.isSetRPictureUrl()) {
          oprot.writeFieldBegin(R_PICTURE_URL_FIELD_DESC);
          oprot.writeString(struct.rPictureUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EpflRestaurantTupleSchemeFactory implements SchemeFactory {
    public EpflRestaurantTupleScheme getScheme() {
      return new EpflRestaurantTupleScheme();
    }
  }

  private static class EpflRestaurantTupleScheme extends TupleScheme<EpflRestaurant> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EpflRestaurant struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.rId);
      oprot.writeString(struct.rName);
      {
        oprot.writeI32(struct.rMeals.size());
        for (EpflMeal _iter22 : struct.rMeals)
        {
          _iter22.write(oprot);
        }
      }
      struct.rRating.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetRLocation()) {
        optionals.set(0);
      }
      if (struct.isSetRPictureUrl()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRLocation()) {
        struct.rLocation.write(oprot);
      }
      if (struct.isSetRPictureUrl()) {
        oprot.writeString(struct.rPictureUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EpflRestaurant struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.rId = iprot.readI64();
      struct.setRIdIsSet(true);
      struct.rName = iprot.readString();
      struct.setRNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.rMeals = new ArrayList<EpflMeal>(_list23.size);
        EpflMeal _elem24;
        for (int _i25 = 0; _i25 < _list23.size; ++_i25)
        {
          _elem24 = new EpflMeal();
          _elem24.read(iprot);
          struct.rMeals.add(_elem24);
        }
      }
      struct.setRMealsIsSet(true);
      struct.rRating = new EpflRating();
      struct.rRating.read(iprot);
      struct.setRRatingIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.rLocation = new org.pocketcampus.plugin.map.shared.MapItem();
        struct.rLocation.read(iprot);
        struct.setRLocationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rPictureUrl = iprot.readString();
        struct.setRPictureUrlIsSet(true);
      }
    }
  }

}

