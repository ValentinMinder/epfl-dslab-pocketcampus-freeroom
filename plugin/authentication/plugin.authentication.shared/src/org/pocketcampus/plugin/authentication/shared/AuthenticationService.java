/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.authentication.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AuthenticationService {

  public interface Iface {

    public int startRefresh(TequilaSession aTequilaSession) throws org.apache.thrift.TException;

    public int stopRefresh(TequilaSession aTequilaSession) throws org.apache.thrift.TException;

    public TequilaKey getTequilaKeyForService(TypeOfService aService) throws org.apache.thrift.TException;

    public SessionId getSessionIdForService(TequilaKey aTequilaKey) throws org.apache.thrift.TException;

    public int logOutSession(SessionId aSessionId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void startRefresh(TequilaSession aTequilaSession, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startRefresh_call> resultHandler) throws org.apache.thrift.TException;

    public void stopRefresh(TequilaSession aTequilaSession, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopRefresh_call> resultHandler) throws org.apache.thrift.TException;

    public void getTequilaKeyForService(TypeOfService aService, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTequilaKeyForService_call> resultHandler) throws org.apache.thrift.TException;

    public void getSessionIdForService(TequilaKey aTequilaKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSessionIdForService_call> resultHandler) throws org.apache.thrift.TException;

    public void logOutSession(SessionId aSessionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.logOutSession_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int startRefresh(TequilaSession aTequilaSession) throws org.apache.thrift.TException
    {
      send_startRefresh(aTequilaSession);
      return recv_startRefresh();
    }

    public void send_startRefresh(TequilaSession aTequilaSession) throws org.apache.thrift.TException
    {
      startRefresh_args args = new startRefresh_args();
      args.setATequilaSession(aTequilaSession);
      sendBase("startRefresh", args);
    }

    public int recv_startRefresh() throws org.apache.thrift.TException
    {
      startRefresh_result result = new startRefresh_result();
      receiveBase(result, "startRefresh");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startRefresh failed: unknown result");
    }

    public int stopRefresh(TequilaSession aTequilaSession) throws org.apache.thrift.TException
    {
      send_stopRefresh(aTequilaSession);
      return recv_stopRefresh();
    }

    public void send_stopRefresh(TequilaSession aTequilaSession) throws org.apache.thrift.TException
    {
      stopRefresh_args args = new stopRefresh_args();
      args.setATequilaSession(aTequilaSession);
      sendBase("stopRefresh", args);
    }

    public int recv_stopRefresh() throws org.apache.thrift.TException
    {
      stopRefresh_result result = new stopRefresh_result();
      receiveBase(result, "stopRefresh");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopRefresh failed: unknown result");
    }

    public TequilaKey getTequilaKeyForService(TypeOfService aService) throws org.apache.thrift.TException
    {
      send_getTequilaKeyForService(aService);
      return recv_getTequilaKeyForService();
    }

    public void send_getTequilaKeyForService(TypeOfService aService) throws org.apache.thrift.TException
    {
      getTequilaKeyForService_args args = new getTequilaKeyForService_args();
      args.setAService(aService);
      sendBase("getTequilaKeyForService", args);
    }

    public TequilaKey recv_getTequilaKeyForService() throws org.apache.thrift.TException
    {
      getTequilaKeyForService_result result = new getTequilaKeyForService_result();
      receiveBase(result, "getTequilaKeyForService");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTequilaKeyForService failed: unknown result");
    }

    public SessionId getSessionIdForService(TequilaKey aTequilaKey) throws org.apache.thrift.TException
    {
      send_getSessionIdForService(aTequilaKey);
      return recv_getSessionIdForService();
    }

    public void send_getSessionIdForService(TequilaKey aTequilaKey) throws org.apache.thrift.TException
    {
      getSessionIdForService_args args = new getSessionIdForService_args();
      args.setATequilaKey(aTequilaKey);
      sendBase("getSessionIdForService", args);
    }

    public SessionId recv_getSessionIdForService() throws org.apache.thrift.TException
    {
      getSessionIdForService_result result = new getSessionIdForService_result();
      receiveBase(result, "getSessionIdForService");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSessionIdForService failed: unknown result");
    }

    public int logOutSession(SessionId aSessionId) throws org.apache.thrift.TException
    {
      send_logOutSession(aSessionId);
      return recv_logOutSession();
    }

    public void send_logOutSession(SessionId aSessionId) throws org.apache.thrift.TException
    {
      logOutSession_args args = new logOutSession_args();
      args.setASessionId(aSessionId);
      sendBase("logOutSession", args);
    }

    public int recv_logOutSession() throws org.apache.thrift.TException
    {
      logOutSession_result result = new logOutSession_result();
      receiveBase(result, "logOutSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "logOutSession failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void startRefresh(TequilaSession aTequilaSession, org.apache.thrift.async.AsyncMethodCallback<startRefresh_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startRefresh_call method_call = new startRefresh_call(aTequilaSession, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startRefresh_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TequilaSession aTequilaSession;
      public startRefresh_call(TequilaSession aTequilaSession, org.apache.thrift.async.AsyncMethodCallback<startRefresh_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aTequilaSession = aTequilaSession;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startRefresh", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startRefresh_args args = new startRefresh_args();
        args.setATequilaSession(aTequilaSession);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startRefresh();
      }
    }

    public void stopRefresh(TequilaSession aTequilaSession, org.apache.thrift.async.AsyncMethodCallback<stopRefresh_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopRefresh_call method_call = new stopRefresh_call(aTequilaSession, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopRefresh_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TequilaSession aTequilaSession;
      public stopRefresh_call(TequilaSession aTequilaSession, org.apache.thrift.async.AsyncMethodCallback<stopRefresh_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aTequilaSession = aTequilaSession;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopRefresh", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopRefresh_args args = new stopRefresh_args();
        args.setATequilaSession(aTequilaSession);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopRefresh();
      }
    }

    public void getTequilaKeyForService(TypeOfService aService, org.apache.thrift.async.AsyncMethodCallback<getTequilaKeyForService_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTequilaKeyForService_call method_call = new getTequilaKeyForService_call(aService, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTequilaKeyForService_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TypeOfService aService;
      public getTequilaKeyForService_call(TypeOfService aService, org.apache.thrift.async.AsyncMethodCallback<getTequilaKeyForService_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aService = aService;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTequilaKeyForService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTequilaKeyForService_args args = new getTequilaKeyForService_args();
        args.setAService(aService);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TequilaKey getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTequilaKeyForService();
      }
    }

    public void getSessionIdForService(TequilaKey aTequilaKey, org.apache.thrift.async.AsyncMethodCallback<getSessionIdForService_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSessionIdForService_call method_call = new getSessionIdForService_call(aTequilaKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSessionIdForService_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TequilaKey aTequilaKey;
      public getSessionIdForService_call(TequilaKey aTequilaKey, org.apache.thrift.async.AsyncMethodCallback<getSessionIdForService_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aTequilaKey = aTequilaKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSessionIdForService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSessionIdForService_args args = new getSessionIdForService_args();
        args.setATequilaKey(aTequilaKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SessionId getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSessionIdForService();
      }
    }

    public void logOutSession(SessionId aSessionId, org.apache.thrift.async.AsyncMethodCallback<logOutSession_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logOutSession_call method_call = new logOutSession_call(aSessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logOutSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SessionId aSessionId;
      public logOutSession_call(SessionId aSessionId, org.apache.thrift.async.AsyncMethodCallback<logOutSession_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aSessionId = aSessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logOutSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logOutSession_args args = new logOutSession_args();
        args.setASessionId(aSessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_logOutSession();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("startRefresh", new startRefresh());
      processMap.put("stopRefresh", new stopRefresh());
      processMap.put("getTequilaKeyForService", new getTequilaKeyForService());
      processMap.put("getSessionIdForService", new getSessionIdForService());
      processMap.put("logOutSession", new logOutSession());
      return processMap;
    }

    private static class startRefresh<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startRefresh_args> {
      public startRefresh() {
        super("startRefresh");
      }

      protected startRefresh_args getEmptyArgsInstance() {
        return new startRefresh_args();
      }

      protected startRefresh_result getResult(I iface, startRefresh_args args) throws org.apache.thrift.TException {
        startRefresh_result result = new startRefresh_result();
        result.success = iface.startRefresh(args.aTequilaSession);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class stopRefresh<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopRefresh_args> {
      public stopRefresh() {
        super("stopRefresh");
      }

      protected stopRefresh_args getEmptyArgsInstance() {
        return new stopRefresh_args();
      }

      protected stopRefresh_result getResult(I iface, stopRefresh_args args) throws org.apache.thrift.TException {
        stopRefresh_result result = new stopRefresh_result();
        result.success = iface.stopRefresh(args.aTequilaSession);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getTequilaKeyForService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTequilaKeyForService_args> {
      public getTequilaKeyForService() {
        super("getTequilaKeyForService");
      }

      protected getTequilaKeyForService_args getEmptyArgsInstance() {
        return new getTequilaKeyForService_args();
      }

      protected getTequilaKeyForService_result getResult(I iface, getTequilaKeyForService_args args) throws org.apache.thrift.TException {
        getTequilaKeyForService_result result = new getTequilaKeyForService_result();
        result.success = iface.getTequilaKeyForService(args.aService);
        return result;
      }
    }

    private static class getSessionIdForService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSessionIdForService_args> {
      public getSessionIdForService() {
        super("getSessionIdForService");
      }

      protected getSessionIdForService_args getEmptyArgsInstance() {
        return new getSessionIdForService_args();
      }

      protected getSessionIdForService_result getResult(I iface, getSessionIdForService_args args) throws org.apache.thrift.TException {
        getSessionIdForService_result result = new getSessionIdForService_result();
        result.success = iface.getSessionIdForService(args.aTequilaKey);
        return result;
      }
    }

    private static class logOutSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logOutSession_args> {
      public logOutSession() {
        super("logOutSession");
      }

      protected logOutSession_args getEmptyArgsInstance() {
        return new logOutSession_args();
      }

      protected logOutSession_result getResult(I iface, logOutSession_args args) throws org.apache.thrift.TException {
        logOutSession_result result = new logOutSession_result();
        result.success = iface.logOutSession(args.aSessionId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class startRefresh_args implements org.apache.thrift.TBase<startRefresh_args, startRefresh_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startRefresh_args");

    private static final org.apache.thrift.protocol.TField A_TEQUILA_SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("aTequilaSession", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public TequilaSession aTequilaSession; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_TEQUILA_SESSION((short)1, "aTequilaSession");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_TEQUILA_SESSION
            return A_TEQUILA_SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_TEQUILA_SESSION, new org.apache.thrift.meta_data.FieldMetaData("aTequilaSession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TequilaSession.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startRefresh_args.class, metaDataMap);
    }

    public startRefresh_args() {
    }

    public startRefresh_args(
      TequilaSession aTequilaSession)
    {
      this();
      this.aTequilaSession = aTequilaSession;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startRefresh_args(startRefresh_args other) {
      if (other.isSetATequilaSession()) {
        this.aTequilaSession = new TequilaSession(other.aTequilaSession);
      }
    }

    public startRefresh_args deepCopy() {
      return new startRefresh_args(this);
    }

    @Override
    public void clear() {
      this.aTequilaSession = null;
    }

    public TequilaSession getATequilaSession() {
      return this.aTequilaSession;
    }

    public startRefresh_args setATequilaSession(TequilaSession aTequilaSession) {
      this.aTequilaSession = aTequilaSession;
      return this;
    }

    public void unsetATequilaSession() {
      this.aTequilaSession = null;
    }

    /** Returns true if field aTequilaSession is set (has been assigned a value) and false otherwise */
    public boolean isSetATequilaSession() {
      return this.aTequilaSession != null;
    }

    public void setATequilaSessionIsSet(boolean value) {
      if (!value) {
        this.aTequilaSession = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_TEQUILA_SESSION:
        if (value == null) {
          unsetATequilaSession();
        } else {
          setATequilaSession((TequilaSession)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_TEQUILA_SESSION:
        return getATequilaSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_TEQUILA_SESSION:
        return isSetATequilaSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startRefresh_args)
        return this.equals((startRefresh_args)that);
      return false;
    }

    public boolean equals(startRefresh_args that) {
      if (that == null)
        return false;

      boolean this_present_aTequilaSession = true && this.isSetATequilaSession();
      boolean that_present_aTequilaSession = true && that.isSetATequilaSession();
      if (this_present_aTequilaSession || that_present_aTequilaSession) {
        if (!(this_present_aTequilaSession && that_present_aTequilaSession))
          return false;
        if (!this.aTequilaSession.equals(that.aTequilaSession))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_aTequilaSession = true && (isSetATequilaSession());
      builder.append(present_aTequilaSession);
      if (present_aTequilaSession)
        builder.append(aTequilaSession);

      return builder.toHashCode();
    }

    public int compareTo(startRefresh_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startRefresh_args typedOther = (startRefresh_args)other;

      lastComparison = Boolean.valueOf(isSetATequilaSession()).compareTo(typedOther.isSetATequilaSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetATequilaSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aTequilaSession, typedOther.aTequilaSession);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // A_TEQUILA_SESSION
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.aTequilaSession = new TequilaSession();
              this.aTequilaSession.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.aTequilaSession != null) {
        oprot.writeFieldBegin(A_TEQUILA_SESSION_FIELD_DESC);
        this.aTequilaSession.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startRefresh_args(");
      boolean first = true;

      sb.append("aTequilaSession:");
      if (this.aTequilaSession == null) {
        sb.append("null");
      } else {
        sb.append(this.aTequilaSession);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class startRefresh_result implements org.apache.thrift.TBase<startRefresh_result, startRefresh_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startRefresh_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startRefresh_result.class, metaDataMap);
    }

    public startRefresh_result() {
    }

    public startRefresh_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startRefresh_result(startRefresh_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public startRefresh_result deepCopy() {
      return new startRefresh_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public startRefresh_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startRefresh_result)
        return this.equals((startRefresh_result)that);
      return false;
    }

    public boolean equals(startRefresh_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(startRefresh_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startRefresh_result typedOther = (startRefresh_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startRefresh_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class stopRefresh_args implements org.apache.thrift.TBase<stopRefresh_args, stopRefresh_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopRefresh_args");

    private static final org.apache.thrift.protocol.TField A_TEQUILA_SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("aTequilaSession", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public TequilaSession aTequilaSession; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_TEQUILA_SESSION((short)1, "aTequilaSession");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_TEQUILA_SESSION
            return A_TEQUILA_SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_TEQUILA_SESSION, new org.apache.thrift.meta_data.FieldMetaData("aTequilaSession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TequilaSession.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopRefresh_args.class, metaDataMap);
    }

    public stopRefresh_args() {
    }

    public stopRefresh_args(
      TequilaSession aTequilaSession)
    {
      this();
      this.aTequilaSession = aTequilaSession;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopRefresh_args(stopRefresh_args other) {
      if (other.isSetATequilaSession()) {
        this.aTequilaSession = new TequilaSession(other.aTequilaSession);
      }
    }

    public stopRefresh_args deepCopy() {
      return new stopRefresh_args(this);
    }

    @Override
    public void clear() {
      this.aTequilaSession = null;
    }

    public TequilaSession getATequilaSession() {
      return this.aTequilaSession;
    }

    public stopRefresh_args setATequilaSession(TequilaSession aTequilaSession) {
      this.aTequilaSession = aTequilaSession;
      return this;
    }

    public void unsetATequilaSession() {
      this.aTequilaSession = null;
    }

    /** Returns true if field aTequilaSession is set (has been assigned a value) and false otherwise */
    public boolean isSetATequilaSession() {
      return this.aTequilaSession != null;
    }

    public void setATequilaSessionIsSet(boolean value) {
      if (!value) {
        this.aTequilaSession = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_TEQUILA_SESSION:
        if (value == null) {
          unsetATequilaSession();
        } else {
          setATequilaSession((TequilaSession)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_TEQUILA_SESSION:
        return getATequilaSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_TEQUILA_SESSION:
        return isSetATequilaSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopRefresh_args)
        return this.equals((stopRefresh_args)that);
      return false;
    }

    public boolean equals(stopRefresh_args that) {
      if (that == null)
        return false;

      boolean this_present_aTequilaSession = true && this.isSetATequilaSession();
      boolean that_present_aTequilaSession = true && that.isSetATequilaSession();
      if (this_present_aTequilaSession || that_present_aTequilaSession) {
        if (!(this_present_aTequilaSession && that_present_aTequilaSession))
          return false;
        if (!this.aTequilaSession.equals(that.aTequilaSession))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_aTequilaSession = true && (isSetATequilaSession());
      builder.append(present_aTequilaSession);
      if (present_aTequilaSession)
        builder.append(aTequilaSession);

      return builder.toHashCode();
    }

    public int compareTo(stopRefresh_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopRefresh_args typedOther = (stopRefresh_args)other;

      lastComparison = Boolean.valueOf(isSetATequilaSession()).compareTo(typedOther.isSetATequilaSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetATequilaSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aTequilaSession, typedOther.aTequilaSession);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // A_TEQUILA_SESSION
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.aTequilaSession = new TequilaSession();
              this.aTequilaSession.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.aTequilaSession != null) {
        oprot.writeFieldBegin(A_TEQUILA_SESSION_FIELD_DESC);
        this.aTequilaSession.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopRefresh_args(");
      boolean first = true;

      sb.append("aTequilaSession:");
      if (this.aTequilaSession == null) {
        sb.append("null");
      } else {
        sb.append(this.aTequilaSession);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class stopRefresh_result implements org.apache.thrift.TBase<stopRefresh_result, stopRefresh_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopRefresh_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopRefresh_result.class, metaDataMap);
    }

    public stopRefresh_result() {
    }

    public stopRefresh_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopRefresh_result(stopRefresh_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public stopRefresh_result deepCopy() {
      return new stopRefresh_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public stopRefresh_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopRefresh_result)
        return this.equals((stopRefresh_result)that);
      return false;
    }

    public boolean equals(stopRefresh_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(stopRefresh_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopRefresh_result typedOther = (stopRefresh_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopRefresh_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTequilaKeyForService_args implements org.apache.thrift.TBase<getTequilaKeyForService_args, getTequilaKeyForService_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTequilaKeyForService_args");

    private static final org.apache.thrift.protocol.TField A_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("aService", org.apache.thrift.protocol.TType.I32, (short)1);

    /**
     * 
     * @see TypeOfService
     */
    public TypeOfService aService; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TypeOfService
       */
      A_SERVICE((short)1, "aService");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_SERVICE
            return A_SERVICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("aService", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TypeOfService.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTequilaKeyForService_args.class, metaDataMap);
    }

    public getTequilaKeyForService_args() {
    }

    public getTequilaKeyForService_args(
      TypeOfService aService)
    {
      this();
      this.aService = aService;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTequilaKeyForService_args(getTequilaKeyForService_args other) {
      if (other.isSetAService()) {
        this.aService = other.aService;
      }
    }

    public getTequilaKeyForService_args deepCopy() {
      return new getTequilaKeyForService_args(this);
    }

    @Override
    public void clear() {
      this.aService = null;
    }

    /**
     * 
     * @see TypeOfService
     */
    public TypeOfService getAService() {
      return this.aService;
    }

    /**
     * 
     * @see TypeOfService
     */
    public getTequilaKeyForService_args setAService(TypeOfService aService) {
      this.aService = aService;
      return this;
    }

    public void unsetAService() {
      this.aService = null;
    }

    /** Returns true if field aService is set (has been assigned a value) and false otherwise */
    public boolean isSetAService() {
      return this.aService != null;
    }

    public void setAServiceIsSet(boolean value) {
      if (!value) {
        this.aService = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_SERVICE:
        if (value == null) {
          unsetAService();
        } else {
          setAService((TypeOfService)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_SERVICE:
        return getAService();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_SERVICE:
        return isSetAService();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTequilaKeyForService_args)
        return this.equals((getTequilaKeyForService_args)that);
      return false;
    }

    public boolean equals(getTequilaKeyForService_args that) {
      if (that == null)
        return false;

      boolean this_present_aService = true && this.isSetAService();
      boolean that_present_aService = true && that.isSetAService();
      if (this_present_aService || that_present_aService) {
        if (!(this_present_aService && that_present_aService))
          return false;
        if (!this.aService.equals(that.aService))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_aService = true && (isSetAService());
      builder.append(present_aService);
      if (present_aService)
        builder.append(aService.getValue());

      return builder.toHashCode();
    }

    public int compareTo(getTequilaKeyForService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTequilaKeyForService_args typedOther = (getTequilaKeyForService_args)other;

      lastComparison = Boolean.valueOf(isSetAService()).compareTo(typedOther.isSetAService());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAService()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aService, typedOther.aService);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // A_SERVICE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.aService = TypeOfService.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.aService != null) {
        oprot.writeFieldBegin(A_SERVICE_FIELD_DESC);
        oprot.writeI32(this.aService.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTequilaKeyForService_args(");
      boolean first = true;

      sb.append("aService:");
      if (this.aService == null) {
        sb.append("null");
      } else {
        sb.append(this.aService);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getTequilaKeyForService_result implements org.apache.thrift.TBase<getTequilaKeyForService_result, getTequilaKeyForService_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTequilaKeyForService_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public TequilaKey success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TequilaKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTequilaKeyForService_result.class, metaDataMap);
    }

    public getTequilaKeyForService_result() {
    }

    public getTequilaKeyForService_result(
      TequilaKey success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTequilaKeyForService_result(getTequilaKeyForService_result other) {
      if (other.isSetSuccess()) {
        this.success = new TequilaKey(other.success);
      }
    }

    public getTequilaKeyForService_result deepCopy() {
      return new getTequilaKeyForService_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TequilaKey getSuccess() {
      return this.success;
    }

    public getTequilaKeyForService_result setSuccess(TequilaKey success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TequilaKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTequilaKeyForService_result)
        return this.equals((getTequilaKeyForService_result)that);
      return false;
    }

    public boolean equals(getTequilaKeyForService_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getTequilaKeyForService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTequilaKeyForService_result typedOther = (getTequilaKeyForService_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new TequilaKey();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTequilaKeyForService_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getSessionIdForService_args implements org.apache.thrift.TBase<getSessionIdForService_args, getSessionIdForService_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSessionIdForService_args");

    private static final org.apache.thrift.protocol.TField A_TEQUILA_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("aTequilaKey", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public TequilaKey aTequilaKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_TEQUILA_KEY((short)1, "aTequilaKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_TEQUILA_KEY
            return A_TEQUILA_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_TEQUILA_KEY, new org.apache.thrift.meta_data.FieldMetaData("aTequilaKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TequilaKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSessionIdForService_args.class, metaDataMap);
    }

    public getSessionIdForService_args() {
    }

    public getSessionIdForService_args(
      TequilaKey aTequilaKey)
    {
      this();
      this.aTequilaKey = aTequilaKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSessionIdForService_args(getSessionIdForService_args other) {
      if (other.isSetATequilaKey()) {
        this.aTequilaKey = new TequilaKey(other.aTequilaKey);
      }
    }

    public getSessionIdForService_args deepCopy() {
      return new getSessionIdForService_args(this);
    }

    @Override
    public void clear() {
      this.aTequilaKey = null;
    }

    public TequilaKey getATequilaKey() {
      return this.aTequilaKey;
    }

    public getSessionIdForService_args setATequilaKey(TequilaKey aTequilaKey) {
      this.aTequilaKey = aTequilaKey;
      return this;
    }

    public void unsetATequilaKey() {
      this.aTequilaKey = null;
    }

    /** Returns true if field aTequilaKey is set (has been assigned a value) and false otherwise */
    public boolean isSetATequilaKey() {
      return this.aTequilaKey != null;
    }

    public void setATequilaKeyIsSet(boolean value) {
      if (!value) {
        this.aTequilaKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_TEQUILA_KEY:
        if (value == null) {
          unsetATequilaKey();
        } else {
          setATequilaKey((TequilaKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_TEQUILA_KEY:
        return getATequilaKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_TEQUILA_KEY:
        return isSetATequilaKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSessionIdForService_args)
        return this.equals((getSessionIdForService_args)that);
      return false;
    }

    public boolean equals(getSessionIdForService_args that) {
      if (that == null)
        return false;

      boolean this_present_aTequilaKey = true && this.isSetATequilaKey();
      boolean that_present_aTequilaKey = true && that.isSetATequilaKey();
      if (this_present_aTequilaKey || that_present_aTequilaKey) {
        if (!(this_present_aTequilaKey && that_present_aTequilaKey))
          return false;
        if (!this.aTequilaKey.equals(that.aTequilaKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_aTequilaKey = true && (isSetATequilaKey());
      builder.append(present_aTequilaKey);
      if (present_aTequilaKey)
        builder.append(aTequilaKey);

      return builder.toHashCode();
    }

    public int compareTo(getSessionIdForService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSessionIdForService_args typedOther = (getSessionIdForService_args)other;

      lastComparison = Boolean.valueOf(isSetATequilaKey()).compareTo(typedOther.isSetATequilaKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetATequilaKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aTequilaKey, typedOther.aTequilaKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // A_TEQUILA_KEY
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.aTequilaKey = new TequilaKey();
              this.aTequilaKey.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.aTequilaKey != null) {
        oprot.writeFieldBegin(A_TEQUILA_KEY_FIELD_DESC);
        this.aTequilaKey.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSessionIdForService_args(");
      boolean first = true;

      sb.append("aTequilaKey:");
      if (this.aTequilaKey == null) {
        sb.append("null");
      } else {
        sb.append(this.aTequilaKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getSessionIdForService_result implements org.apache.thrift.TBase<getSessionIdForService_result, getSessionIdForService_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSessionIdForService_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public SessionId success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSessionIdForService_result.class, metaDataMap);
    }

    public getSessionIdForService_result() {
    }

    public getSessionIdForService_result(
      SessionId success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSessionIdForService_result(getSessionIdForService_result other) {
      if (other.isSetSuccess()) {
        this.success = new SessionId(other.success);
      }
    }

    public getSessionIdForService_result deepCopy() {
      return new getSessionIdForService_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SessionId getSuccess() {
      return this.success;
    }

    public getSessionIdForService_result setSuccess(SessionId success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SessionId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSessionIdForService_result)
        return this.equals((getSessionIdForService_result)that);
      return false;
    }

    public boolean equals(getSessionIdForService_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getSessionIdForService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSessionIdForService_result typedOther = (getSessionIdForService_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new SessionId();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSessionIdForService_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class logOutSession_args implements org.apache.thrift.TBase<logOutSession_args, logOutSession_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logOutSession_args");

    private static final org.apache.thrift.protocol.TField A_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("aSessionId", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public SessionId aSessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_SESSION_ID((short)1, "aSessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_SESSION_ID
            return A_SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("aSessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logOutSession_args.class, metaDataMap);
    }

    public logOutSession_args() {
    }

    public logOutSession_args(
      SessionId aSessionId)
    {
      this();
      this.aSessionId = aSessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logOutSession_args(logOutSession_args other) {
      if (other.isSetASessionId()) {
        this.aSessionId = new SessionId(other.aSessionId);
      }
    }

    public logOutSession_args deepCopy() {
      return new logOutSession_args(this);
    }

    @Override
    public void clear() {
      this.aSessionId = null;
    }

    public SessionId getASessionId() {
      return this.aSessionId;
    }

    public logOutSession_args setASessionId(SessionId aSessionId) {
      this.aSessionId = aSessionId;
      return this;
    }

    public void unsetASessionId() {
      this.aSessionId = null;
    }

    /** Returns true if field aSessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetASessionId() {
      return this.aSessionId != null;
    }

    public void setASessionIdIsSet(boolean value) {
      if (!value) {
        this.aSessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_SESSION_ID:
        if (value == null) {
          unsetASessionId();
        } else {
          setASessionId((SessionId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_SESSION_ID:
        return getASessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_SESSION_ID:
        return isSetASessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logOutSession_args)
        return this.equals((logOutSession_args)that);
      return false;
    }

    public boolean equals(logOutSession_args that) {
      if (that == null)
        return false;

      boolean this_present_aSessionId = true && this.isSetASessionId();
      boolean that_present_aSessionId = true && that.isSetASessionId();
      if (this_present_aSessionId || that_present_aSessionId) {
        if (!(this_present_aSessionId && that_present_aSessionId))
          return false;
        if (!this.aSessionId.equals(that.aSessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_aSessionId = true && (isSetASessionId());
      builder.append(present_aSessionId);
      if (present_aSessionId)
        builder.append(aSessionId);

      return builder.toHashCode();
    }

    public int compareTo(logOutSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      logOutSession_args typedOther = (logOutSession_args)other;

      lastComparison = Boolean.valueOf(isSetASessionId()).compareTo(typedOther.isSetASessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetASessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aSessionId, typedOther.aSessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // A_SESSION_ID
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.aSessionId = new SessionId();
              this.aSessionId.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.aSessionId != null) {
        oprot.writeFieldBegin(A_SESSION_ID_FIELD_DESC);
        this.aSessionId.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logOutSession_args(");
      boolean first = true;

      sb.append("aSessionId:");
      if (this.aSessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.aSessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class logOutSession_result implements org.apache.thrift.TBase<logOutSession_result, logOutSession_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logOutSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logOutSession_result.class, metaDataMap);
    }

    public logOutSession_result() {
    }

    public logOutSession_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logOutSession_result(logOutSession_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public logOutSession_result deepCopy() {
      return new logOutSession_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public logOutSession_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logOutSession_result)
        return this.equals((logOutSession_result)that);
      return false;
    }

    public boolean equals(logOutSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(logOutSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      logOutSession_result typedOther = (logOutSession_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logOutSession_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
