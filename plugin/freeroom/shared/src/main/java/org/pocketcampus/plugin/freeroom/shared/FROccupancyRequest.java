/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class FROccupancyRequest implements org.apache.thrift.TBase<FROccupancyRequest, FROccupancyRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FROccupancyRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FROccupancyRequest");

  private static final org.apache.thrift.protocol.TField PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("period", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ONLY_FREE_ROOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("onlyFreeRooms", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField UID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("uidList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField USER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("userGroup", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField USER_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("userLanguage", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FROccupancyRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FROccupancyRequestTupleSchemeFactory());
  }

  private FRPeriod period; // required
  private boolean onlyFreeRooms; // required
  private List<String> uidList; // required
  private int userGroup; // required
  private String userLanguage; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PERIOD((short)1, "period"),
    ONLY_FREE_ROOMS((short)2, "onlyFreeRooms"),
    UID_LIST((short)3, "uidList"),
    USER_GROUP((short)4, "userGroup"),
    USER_LANGUAGE((short)5, "userLanguage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PERIOD
          return PERIOD;
        case 2: // ONLY_FREE_ROOMS
          return ONLY_FREE_ROOMS;
        case 3: // UID_LIST
          return UID_LIST;
        case 4: // USER_GROUP
          return USER_GROUP;
        case 5: // USER_LANGUAGE
          return USER_LANGUAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ONLYFREEROOMS_ISSET_ID = 0;
  private static final int __USERGROUP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_LANGUAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PERIOD, new org.apache.thrift.meta_data.FieldMetaData("period", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRPeriod.class)));
    tmpMap.put(_Fields.ONLY_FREE_ROOMS, new org.apache.thrift.meta_data.FieldMetaData("onlyFreeRooms", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UID_LIST, new org.apache.thrift.meta_data.FieldMetaData("uidList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("userGroup", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("userLanguage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FROccupancyRequest.class, metaDataMap);
  }

  public FROccupancyRequest() {
  }

  public FROccupancyRequest(
    FRPeriod period,
    boolean onlyFreeRooms,
    List<String> uidList,
    int userGroup)
  {
    this();
    this.period = period;
    this.onlyFreeRooms = onlyFreeRooms;
    setOnlyFreeRoomsIsSet(true);
    this.uidList = uidList;
    this.userGroup = userGroup;
    setUserGroupIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FROccupancyRequest(FROccupancyRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPeriod()) {
      this.period = new FRPeriod(other.period);
    }
    this.onlyFreeRooms = other.onlyFreeRooms;
    if (other.isSetUidList()) {
      List<String> __this__uidList = new ArrayList<String>(other.uidList);
      this.uidList = __this__uidList;
    }
    this.userGroup = other.userGroup;
    if (other.isSetUserLanguage()) {
      this.userLanguage = other.userLanguage;
    }
  }

  public FROccupancyRequest deepCopy() {
    return new FROccupancyRequest(this);
  }

  @Override
  public void clear() {
    this.period = null;
    setOnlyFreeRoomsIsSet(false);
    this.onlyFreeRooms = false;
    this.uidList = null;
    setUserGroupIsSet(false);
    this.userGroup = 0;
    this.userLanguage = null;
  }

  public FRPeriod getPeriod() {
    return this.period;
  }

  public FROccupancyRequest setPeriod(FRPeriod period) {
    this.period = period;
    return this;
  }

  public void unsetPeriod() {
    this.period = null;
  }

  /** Returns true if field period is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriod() {
    return this.period != null;
  }

  public void setPeriodIsSet(boolean value) {
    if (!value) {
      this.period = null;
    }
  }

  public boolean isOnlyFreeRooms() {
    return this.onlyFreeRooms;
  }

  public FROccupancyRequest setOnlyFreeRooms(boolean onlyFreeRooms) {
    this.onlyFreeRooms = onlyFreeRooms;
    setOnlyFreeRoomsIsSet(true);
    return this;
  }

  public void unsetOnlyFreeRooms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLYFREEROOMS_ISSET_ID);
  }

  /** Returns true if field onlyFreeRooms is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlyFreeRooms() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLYFREEROOMS_ISSET_ID);
  }

  public void setOnlyFreeRoomsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLYFREEROOMS_ISSET_ID, value);
  }

  public int getUidListSize() {
    return (this.uidList == null) ? 0 : this.uidList.size();
  }

  public java.util.Iterator<String> getUidListIterator() {
    return (this.uidList == null) ? null : this.uidList.iterator();
  }

  public void addToUidList(String elem) {
    if (this.uidList == null) {
      this.uidList = new ArrayList<String>();
    }
    this.uidList.add(elem);
  }

  public List<String> getUidList() {
    return this.uidList;
  }

  public FROccupancyRequest setUidList(List<String> uidList) {
    this.uidList = uidList;
    return this;
  }

  public void unsetUidList() {
    this.uidList = null;
  }

  /** Returns true if field uidList is set (has been assigned a value) and false otherwise */
  public boolean isSetUidList() {
    return this.uidList != null;
  }

  public void setUidListIsSet(boolean value) {
    if (!value) {
      this.uidList = null;
    }
  }

  public int getUserGroup() {
    return this.userGroup;
  }

  public FROccupancyRequest setUserGroup(int userGroup) {
    this.userGroup = userGroup;
    setUserGroupIsSet(true);
    return this;
  }

  public void unsetUserGroup() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERGROUP_ISSET_ID);
  }

  /** Returns true if field userGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetUserGroup() {
    return EncodingUtils.testBit(__isset_bitfield, __USERGROUP_ISSET_ID);
  }

  public void setUserGroupIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERGROUP_ISSET_ID, value);
  }

  public String getUserLanguage() {
    return this.userLanguage;
  }

  public FROccupancyRequest setUserLanguage(String userLanguage) {
    this.userLanguage = userLanguage;
    return this;
  }

  public void unsetUserLanguage() {
    this.userLanguage = null;
  }

  /** Returns true if field userLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLanguage() {
    return this.userLanguage != null;
  }

  public void setUserLanguageIsSet(boolean value) {
    if (!value) {
      this.userLanguage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PERIOD:
      if (value == null) {
        unsetPeriod();
      } else {
        setPeriod((FRPeriod)value);
      }
      break;

    case ONLY_FREE_ROOMS:
      if (value == null) {
        unsetOnlyFreeRooms();
      } else {
        setOnlyFreeRooms((Boolean)value);
      }
      break;

    case UID_LIST:
      if (value == null) {
        unsetUidList();
      } else {
        setUidList((List<String>)value);
      }
      break;

    case USER_GROUP:
      if (value == null) {
        unsetUserGroup();
      } else {
        setUserGroup((Integer)value);
      }
      break;

    case USER_LANGUAGE:
      if (value == null) {
        unsetUserLanguage();
      } else {
        setUserLanguage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PERIOD:
      return getPeriod();

    case ONLY_FREE_ROOMS:
      return Boolean.valueOf(isOnlyFreeRooms());

    case UID_LIST:
      return getUidList();

    case USER_GROUP:
      return Integer.valueOf(getUserGroup());

    case USER_LANGUAGE:
      return getUserLanguage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PERIOD:
      return isSetPeriod();
    case ONLY_FREE_ROOMS:
      return isSetOnlyFreeRooms();
    case UID_LIST:
      return isSetUidList();
    case USER_GROUP:
      return isSetUserGroup();
    case USER_LANGUAGE:
      return isSetUserLanguage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FROccupancyRequest)
      return this.equals((FROccupancyRequest)that);
    return false;
  }

  public boolean equals(FROccupancyRequest that) {
    if (that == null)
      return false;

    boolean this_present_period = true && this.isSetPeriod();
    boolean that_present_period = true && that.isSetPeriod();
    if (this_present_period || that_present_period) {
      if (!(this_present_period && that_present_period))
        return false;
      if (!this.period.equals(that.period))
        return false;
    }

    boolean this_present_onlyFreeRooms = true;
    boolean that_present_onlyFreeRooms = true;
    if (this_present_onlyFreeRooms || that_present_onlyFreeRooms) {
      if (!(this_present_onlyFreeRooms && that_present_onlyFreeRooms))
        return false;
      if (this.onlyFreeRooms != that.onlyFreeRooms)
        return false;
    }

    boolean this_present_uidList = true && this.isSetUidList();
    boolean that_present_uidList = true && that.isSetUidList();
    if (this_present_uidList || that_present_uidList) {
      if (!(this_present_uidList && that_present_uidList))
        return false;
      if (!this.uidList.equals(that.uidList))
        return false;
    }

    boolean this_present_userGroup = true;
    boolean that_present_userGroup = true;
    if (this_present_userGroup || that_present_userGroup) {
      if (!(this_present_userGroup && that_present_userGroup))
        return false;
      if (this.userGroup != that.userGroup)
        return false;
    }

    boolean this_present_userLanguage = true && this.isSetUserLanguage();
    boolean that_present_userLanguage = true && that.isSetUserLanguage();
    if (this_present_userLanguage || that_present_userLanguage) {
      if (!(this_present_userLanguage && that_present_userLanguage))
        return false;
      if (!this.userLanguage.equals(that.userLanguage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_period = true && (isSetPeriod());
    list.add(present_period);
    if (present_period)
      list.add(period);

    boolean present_onlyFreeRooms = true;
    list.add(present_onlyFreeRooms);
    if (present_onlyFreeRooms)
      list.add(onlyFreeRooms);

    boolean present_uidList = true && (isSetUidList());
    list.add(present_uidList);
    if (present_uidList)
      list.add(uidList);

    boolean present_userGroup = true;
    list.add(present_userGroup);
    if (present_userGroup)
      list.add(userGroup);

    boolean present_userLanguage = true && (isSetUserLanguage());
    list.add(present_userLanguage);
    if (present_userLanguage)
      list.add(userLanguage);

    return list.hashCode();
  }

  @Override
  public int compareTo(FROccupancyRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPeriod()).compareTo(other.isSetPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.period, other.period);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlyFreeRooms()).compareTo(other.isSetOnlyFreeRooms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlyFreeRooms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlyFreeRooms, other.onlyFreeRooms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUidList()).compareTo(other.isSetUidList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUidList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidList, other.uidList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserGroup()).compareTo(other.isSetUserGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userGroup, other.userGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLanguage()).compareTo(other.isSetUserLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLanguage, other.userLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FROccupancyRequest(");
    boolean first = true;

    sb.append("period:");
    if (this.period == null) {
      sb.append("null");
    } else {
      sb.append(this.period);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("onlyFreeRooms:");
    sb.append(this.onlyFreeRooms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uidList:");
    if (this.uidList == null) {
      sb.append("null");
    } else {
      sb.append(this.uidList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userGroup:");
    sb.append(this.userGroup);
    first = false;
    if (isSetUserLanguage()) {
      if (!first) sb.append(", ");
      sb.append("userLanguage:");
      if (this.userLanguage == null) {
        sb.append("null");
      } else {
        sb.append(this.userLanguage);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (period == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'period' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'onlyFreeRooms' because it's a primitive and you chose the non-beans generator.
    if (uidList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uidList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'userGroup' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (period != null) {
      period.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FROccupancyRequestStandardSchemeFactory implements SchemeFactory {
    public FROccupancyRequestStandardScheme getScheme() {
      return new FROccupancyRequestStandardScheme();
    }
  }

  private static class FROccupancyRequestStandardScheme extends StandardScheme<FROccupancyRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FROccupancyRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.period = new FRPeriod();
              struct.period.read(iprot);
              struct.setPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ONLY_FREE_ROOMS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.onlyFreeRooms = iprot.readBool();
              struct.setOnlyFreeRoomsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.uidList = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.uidList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setUidListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userGroup = iprot.readI32();
              struct.setUserGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userLanguage = iprot.readString();
              struct.setUserLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOnlyFreeRooms()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'onlyFreeRooms' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUserGroup()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userGroup' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FROccupancyRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.period != null) {
        oprot.writeFieldBegin(PERIOD_FIELD_DESC);
        struct.period.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ONLY_FREE_ROOMS_FIELD_DESC);
      oprot.writeBool(struct.onlyFreeRooms);
      oprot.writeFieldEnd();
      if (struct.uidList != null) {
        oprot.writeFieldBegin(UID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uidList.size()));
          for (String _iter11 : struct.uidList)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_GROUP_FIELD_DESC);
      oprot.writeI32(struct.userGroup);
      oprot.writeFieldEnd();
      if (struct.userLanguage != null) {
        if (struct.isSetUserLanguage()) {
          oprot.writeFieldBegin(USER_LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.userLanguage);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FROccupancyRequestTupleSchemeFactory implements SchemeFactory {
    public FROccupancyRequestTupleScheme getScheme() {
      return new FROccupancyRequestTupleScheme();
    }
  }

  private static class FROccupancyRequestTupleScheme extends TupleScheme<FROccupancyRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FROccupancyRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.period.write(oprot);
      oprot.writeBool(struct.onlyFreeRooms);
      {
        oprot.writeI32(struct.uidList.size());
        for (String _iter12 : struct.uidList)
        {
          oprot.writeString(_iter12);
        }
      }
      oprot.writeI32(struct.userGroup);
      BitSet optionals = new BitSet();
      if (struct.isSetUserLanguage()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetUserLanguage()) {
        oprot.writeString(struct.userLanguage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FROccupancyRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.period = new FRPeriod();
      struct.period.read(iprot);
      struct.setPeriodIsSet(true);
      struct.onlyFreeRooms = iprot.readBool();
      struct.setOnlyFreeRoomsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.uidList = new ArrayList<String>(_list13.size);
        String _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = iprot.readString();
          struct.uidList.add(_elem14);
        }
      }
      struct.setUidListIsSet(true);
      struct.userGroup = iprot.readI32();
      struct.setUserGroupIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.userLanguage = iprot.readString();
        struct.setUserLanguageIsSet(true);
      }
    }
  }

}

