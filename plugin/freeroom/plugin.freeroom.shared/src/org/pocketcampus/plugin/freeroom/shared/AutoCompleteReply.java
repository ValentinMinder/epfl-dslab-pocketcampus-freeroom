/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AutoCompleteReply implements org.apache.thrift.TBase<AutoCompleteReply, AutoCompleteReply._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AutoCompleteReply");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statusComment", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LIST_FRROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("listFRRoom", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField LIST_ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("listRoom", org.apache.thrift.protocol.TType.MAP, (short)4);

  private int status; // required
  private String statusComment; // required
  private List<FRRoom> listFRRoom; // required
  private Map<String,List<FRRoom>> listRoom; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    STATUS_COMMENT((short)2, "statusComment"),
    LIST_FRROOM((short)3, "listFRRoom"),
    LIST_ROOM((short)4, "listRoom");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // STATUS_COMMENT
          return STATUS_COMMENT;
        case 3: // LIST_FRROOM
          return LIST_FRROOM;
        case 4: // LIST_ROOM
          return LIST_ROOM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("statusComment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIST_FRROOM, new org.apache.thrift.meta_data.FieldMetaData("listFRRoom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRRoom.class))));
    tmpMap.put(_Fields.LIST_ROOM, new org.apache.thrift.meta_data.FieldMetaData("listRoom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRRoom.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AutoCompleteReply.class, metaDataMap);
  }

  public AutoCompleteReply() {
  }

  public AutoCompleteReply(
    int status,
    String statusComment)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
    this.statusComment = statusComment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AutoCompleteReply(AutoCompleteReply other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.status = other.status;
    if (other.isSetStatusComment()) {
      this.statusComment = other.statusComment;
    }
    if (other.isSetListFRRoom()) {
      List<FRRoom> __this__listFRRoom = new ArrayList<FRRoom>();
      for (FRRoom other_element : other.listFRRoom) {
        __this__listFRRoom.add(new FRRoom(other_element));
      }
      this.listFRRoom = __this__listFRRoom;
    }
    if (other.isSetListRoom()) {
      Map<String,List<FRRoom>> __this__listRoom = new HashMap<String,List<FRRoom>>();
      for (Map.Entry<String, List<FRRoom>> other_element : other.listRoom.entrySet()) {

        String other_element_key = other_element.getKey();
        List<FRRoom> other_element_value = other_element.getValue();

        String __this__listRoom_copy_key = other_element_key;

        List<FRRoom> __this__listRoom_copy_value = new ArrayList<FRRoom>();
        for (FRRoom other_element_value_element : other_element_value) {
          __this__listRoom_copy_value.add(new FRRoom(other_element_value_element));
        }

        __this__listRoom.put(__this__listRoom_copy_key, __this__listRoom_copy_value);
      }
      this.listRoom = __this__listRoom;
    }
  }

  public AutoCompleteReply deepCopy() {
    return new AutoCompleteReply(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.statusComment = null;
    this.listFRRoom = null;
    this.listRoom = null;
  }

  public int getStatus() {
    return this.status;
  }

  public AutoCompleteReply setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public String getStatusComment() {
    return this.statusComment;
  }

  public AutoCompleteReply setStatusComment(String statusComment) {
    this.statusComment = statusComment;
    return this;
  }

  public void unsetStatusComment() {
    this.statusComment = null;
  }

  /** Returns true if field statusComment is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusComment() {
    return this.statusComment != null;
  }

  public void setStatusCommentIsSet(boolean value) {
    if (!value) {
      this.statusComment = null;
    }
  }

  public int getListFRRoomSize() {
    return (this.listFRRoom == null) ? 0 : this.listFRRoom.size();
  }

  public java.util.Iterator<FRRoom> getListFRRoomIterator() {
    return (this.listFRRoom == null) ? null : this.listFRRoom.iterator();
  }

  public void addToListFRRoom(FRRoom elem) {
    if (this.listFRRoom == null) {
      this.listFRRoom = new ArrayList<FRRoom>();
    }
    this.listFRRoom.add(elem);
  }

  public List<FRRoom> getListFRRoom() {
    return this.listFRRoom;
  }

  public AutoCompleteReply setListFRRoom(List<FRRoom> listFRRoom) {
    this.listFRRoom = listFRRoom;
    return this;
  }

  public void unsetListFRRoom() {
    this.listFRRoom = null;
  }

  /** Returns true if field listFRRoom is set (has been assigned a value) and false otherwise */
  public boolean isSetListFRRoom() {
    return this.listFRRoom != null;
  }

  public void setListFRRoomIsSet(boolean value) {
    if (!value) {
      this.listFRRoom = null;
    }
  }

  public int getListRoomSize() {
    return (this.listRoom == null) ? 0 : this.listRoom.size();
  }

  public void putToListRoom(String key, List<FRRoom> val) {
    if (this.listRoom == null) {
      this.listRoom = new HashMap<String,List<FRRoom>>();
    }
    this.listRoom.put(key, val);
  }

  public Map<String,List<FRRoom>> getListRoom() {
    return this.listRoom;
  }

  public AutoCompleteReply setListRoom(Map<String,List<FRRoom>> listRoom) {
    this.listRoom = listRoom;
    return this;
  }

  public void unsetListRoom() {
    this.listRoom = null;
  }

  /** Returns true if field listRoom is set (has been assigned a value) and false otherwise */
  public boolean isSetListRoom() {
    return this.listRoom != null;
  }

  public void setListRoomIsSet(boolean value) {
    if (!value) {
      this.listRoom = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case STATUS_COMMENT:
      if (value == null) {
        unsetStatusComment();
      } else {
        setStatusComment((String)value);
      }
      break;

    case LIST_FRROOM:
      if (value == null) {
        unsetListFRRoom();
      } else {
        setListFRRoom((List<FRRoom>)value);
      }
      break;

    case LIST_ROOM:
      if (value == null) {
        unsetListRoom();
      } else {
        setListRoom((Map<String,List<FRRoom>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Integer.valueOf(getStatus());

    case STATUS_COMMENT:
      return getStatusComment();

    case LIST_FRROOM:
      return getListFRRoom();

    case LIST_ROOM:
      return getListRoom();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case STATUS_COMMENT:
      return isSetStatusComment();
    case LIST_FRROOM:
      return isSetListFRRoom();
    case LIST_ROOM:
      return isSetListRoom();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AutoCompleteReply)
      return this.equals((AutoCompleteReply)that);
    return false;
  }

  public boolean equals(AutoCompleteReply that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_statusComment = true && this.isSetStatusComment();
    boolean that_present_statusComment = true && that.isSetStatusComment();
    if (this_present_statusComment || that_present_statusComment) {
      if (!(this_present_statusComment && that_present_statusComment))
        return false;
      if (!this.statusComment.equals(that.statusComment))
        return false;
    }

    boolean this_present_listFRRoom = true && this.isSetListFRRoom();
    boolean that_present_listFRRoom = true && that.isSetListFRRoom();
    if (this_present_listFRRoom || that_present_listFRRoom) {
      if (!(this_present_listFRRoom && that_present_listFRRoom))
        return false;
      if (!this.listFRRoom.equals(that.listFRRoom))
        return false;
    }

    boolean this_present_listRoom = true && this.isSetListRoom();
    boolean that_present_listRoom = true && that.isSetListRoom();
    if (this_present_listRoom || that_present_listRoom) {
      if (!(this_present_listRoom && that_present_listRoom))
        return false;
      if (!this.listRoom.equals(that.listRoom))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_statusComment = true && (isSetStatusComment());
    builder.append(present_statusComment);
    if (present_statusComment)
      builder.append(statusComment);

    boolean present_listFRRoom = true && (isSetListFRRoom());
    builder.append(present_listFRRoom);
    if (present_listFRRoom)
      builder.append(listFRRoom);

    boolean present_listRoom = true && (isSetListRoom());
    builder.append(present_listRoom);
    if (present_listRoom)
      builder.append(listRoom);

    return builder.toHashCode();
  }

  public int compareTo(AutoCompleteReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AutoCompleteReply typedOther = (AutoCompleteReply)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusComment()).compareTo(typedOther.isSetStatusComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusComment, typedOther.statusComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListFRRoom()).compareTo(typedOther.isSetListFRRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListFRRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listFRRoom, typedOther.listFRRoom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListRoom()).compareTo(typedOther.isSetListRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listRoom, typedOther.listRoom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // STATUS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STATUS_COMMENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.statusComment = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LIST_FRROOM
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
              this.listFRRoom = new ArrayList<FRRoom>(_list21.size);
              for (int _i22 = 0; _i22 < _list21.size; ++_i22)
              {
                FRRoom _elem23; // required
                _elem23 = new FRRoom();
                _elem23.read(iprot);
                this.listFRRoom.add(_elem23);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LIST_ROOM
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
              this.listRoom = new HashMap<String,List<FRRoom>>(2*_map24.size);
              for (int _i25 = 0; _i25 < _map24.size; ++_i25)
              {
                String _key26; // required
                List<FRRoom> _val27; // required
                _key26 = iprot.readString();
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  _val27 = new ArrayList<FRRoom>(_list28.size);
                  for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                  {
                    FRRoom _elem30; // required
                    _elem30 = new FRRoom();
                    _elem30.read(iprot);
                    _val27.add(_elem30);
                  }
                  iprot.readListEnd();
                }
                this.listRoom.put(_key26, _val27);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    if (this.statusComment != null) {
      oprot.writeFieldBegin(STATUS_COMMENT_FIELD_DESC);
      oprot.writeString(this.statusComment);
      oprot.writeFieldEnd();
    }
    if (this.listFRRoom != null) {
      if (isSetListFRRoom()) {
        oprot.writeFieldBegin(LIST_FRROOM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.listFRRoom.size()));
          for (FRRoom _iter31 : this.listFRRoom)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.listRoom != null) {
      if (isSetListRoom()) {
        oprot.writeFieldBegin(LIST_ROOM_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, this.listRoom.size()));
          for (Map.Entry<String, List<FRRoom>> _iter32 : this.listRoom.entrySet())
          {
            oprot.writeString(_iter32.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter32.getValue().size()));
              for (FRRoom _iter33 : _iter32.getValue())
              {
                _iter33.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AutoCompleteReply(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusComment:");
    if (this.statusComment == null) {
      sb.append("null");
    } else {
      sb.append(this.statusComment);
    }
    first = false;
    if (isSetListFRRoom()) {
      if (!first) sb.append(", ");
      sb.append("listFRRoom:");
      if (this.listFRRoom == null) {
        sb.append("null");
      } else {
        sb.append(this.listFRRoom);
      }
      first = false;
    }
    if (isSetListRoom()) {
      if (!first) sb.append(", ");
      sb.append("listRoom:");
      if (this.listRoom == null) {
        sb.append("null");
      } else {
        sb.append(this.listRoom);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (statusComment == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusComment' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

