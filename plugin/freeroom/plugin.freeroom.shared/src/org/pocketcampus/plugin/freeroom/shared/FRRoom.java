/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-8")
public class FRRoom implements org.apache.thrift.TBase<FRRoom, FRRoom._Fields>, java.io.Serializable, Cloneable, Comparable<FRRoom> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FRRoom");

  private static final org.apache.thrift.protocol.TField DOOR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("doorCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DOOR_CODE_WITHOUT_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("doorCodeWithoutSpace", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("capacity", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SITE_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("site_label", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SURFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("surface", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BUILDING_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("building_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("zone", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UNITLABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("unitlabel", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("site_id", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("floor", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UNITNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("unitname", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SITE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("site_name", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UNITID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitid", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField BUILDING_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("building_label", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CF_FIELD_DESC = new org.apache.thrift.protocol.TField("cf", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ADMINUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("adminuse", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField EWAID_FIELD_DESC = new org.apache.thrift.protocol.TField("EWAid", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField DOOR_CODE_ALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("doorCodeAlias", org.apache.thrift.protocol.TType.STRING, (short)34);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FRRoomStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FRRoomTupleSchemeFactory());
  }

  private String doorCode; // required
  private String uid; // required
  private String doorCodeWithoutSpace; // optional
  private int capacity; // optional
  private String site_label; // optional
  private double surface; // optional
  private String building_name; // optional
  private String zone; // optional
  private String unitlabel; // optional
  private int site_id; // optional
  private int floor; // optional
  private String unitname; // optional
  private String site_name; // optional
  private int unitid; // optional
  private String building_label; // optional
  private String cf; // optional
  private String adminuse; // optional
  private String EWAid; // optional
  private String type; // optional
  private String doorCodeAlias; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOOR_CODE((short)1, "doorCode"),
    UID((short)2, "uid"),
    DOOR_CODE_WITHOUT_SPACE((short)3, "doorCodeWithoutSpace"),
    CAPACITY((short)4, "capacity"),
    SITE_LABEL((short)5, "site_label"),
    SURFACE((short)6, "surface"),
    BUILDING_NAME((short)7, "building_name"),
    ZONE((short)8, "zone"),
    UNITLABEL((short)9, "unitlabel"),
    SITE_ID((short)10, "site_id"),
    FLOOR((short)11, "floor"),
    UNITNAME((short)12, "unitname"),
    SITE_NAME((short)13, "site_name"),
    UNITID((short)14, "unitid"),
    BUILDING_LABEL((short)15, "building_label"),
    CF((short)16, "cf"),
    ADMINUSE((short)17, "adminuse"),
    EWAID((short)31, "EWAid"),
    TYPE((short)32, "type"),
    DOOR_CODE_ALIAS((short)34, "doorCodeAlias");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOOR_CODE
          return DOOR_CODE;
        case 2: // UID
          return UID;
        case 3: // DOOR_CODE_WITHOUT_SPACE
          return DOOR_CODE_WITHOUT_SPACE;
        case 4: // CAPACITY
          return CAPACITY;
        case 5: // SITE_LABEL
          return SITE_LABEL;
        case 6: // SURFACE
          return SURFACE;
        case 7: // BUILDING_NAME
          return BUILDING_NAME;
        case 8: // ZONE
          return ZONE;
        case 9: // UNITLABEL
          return UNITLABEL;
        case 10: // SITE_ID
          return SITE_ID;
        case 11: // FLOOR
          return FLOOR;
        case 12: // UNITNAME
          return UNITNAME;
        case 13: // SITE_NAME
          return SITE_NAME;
        case 14: // UNITID
          return UNITID;
        case 15: // BUILDING_LABEL
          return BUILDING_LABEL;
        case 16: // CF
          return CF;
        case 17: // ADMINUSE
          return ADMINUSE;
        case 31: // EWAID
          return EWAID;
        case 32: // TYPE
          return TYPE;
        case 34: // DOOR_CODE_ALIAS
          return DOOR_CODE_ALIAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CAPACITY_ISSET_ID = 0;
  private static final int __SURFACE_ISSET_ID = 1;
  private static final int __SITE_ID_ISSET_ID = 2;
  private static final int __FLOOR_ISSET_ID = 3;
  private static final int __UNITID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOOR_CODE_WITHOUT_SPACE,_Fields.CAPACITY,_Fields.SITE_LABEL,_Fields.SURFACE,_Fields.BUILDING_NAME,_Fields.ZONE,_Fields.UNITLABEL,_Fields.SITE_ID,_Fields.FLOOR,_Fields.UNITNAME,_Fields.SITE_NAME,_Fields.UNITID,_Fields.BUILDING_LABEL,_Fields.CF,_Fields.ADMINUSE,_Fields.EWAID,_Fields.TYPE,_Fields.DOOR_CODE_ALIAS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOOR_CODE, new org.apache.thrift.meta_data.FieldMetaData("doorCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOOR_CODE_WITHOUT_SPACE, new org.apache.thrift.meta_data.FieldMetaData("doorCodeWithoutSpace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("capacity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SITE_LABEL, new org.apache.thrift.meta_data.FieldMetaData("site_label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SURFACE, new org.apache.thrift.meta_data.FieldMetaData("surface", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUILDING_NAME, new org.apache.thrift.meta_data.FieldMetaData("building_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZONE, new org.apache.thrift.meta_data.FieldMetaData("zone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNITLABEL, new org.apache.thrift.meta_data.FieldMetaData("unitlabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("site_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLOOR, new org.apache.thrift.meta_data.FieldMetaData("floor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNITNAME, new org.apache.thrift.meta_data.FieldMetaData("unitname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_NAME, new org.apache.thrift.meta_data.FieldMetaData("site_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNITID, new org.apache.thrift.meta_data.FieldMetaData("unitid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUILDING_LABEL, new org.apache.thrift.meta_data.FieldMetaData("building_label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CF, new org.apache.thrift.meta_data.FieldMetaData("cf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADMINUSE, new org.apache.thrift.meta_data.FieldMetaData("adminuse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EWAID, new org.apache.thrift.meta_data.FieldMetaData("EWAid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOOR_CODE_ALIAS, new org.apache.thrift.meta_data.FieldMetaData("doorCodeAlias", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FRRoom.class, metaDataMap);
  }

  public FRRoom() {
  }

  public FRRoom(
    String doorCode,
    String uid)
  {
    this();
    this.doorCode = doorCode;
    this.uid = uid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FRRoom(FRRoom other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDoorCode()) {
      this.doorCode = other.doorCode;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetDoorCodeWithoutSpace()) {
      this.doorCodeWithoutSpace = other.doorCodeWithoutSpace;
    }
    this.capacity = other.capacity;
    if (other.isSetSite_label()) {
      this.site_label = other.site_label;
    }
    this.surface = other.surface;
    if (other.isSetBuilding_name()) {
      this.building_name = other.building_name;
    }
    if (other.isSetZone()) {
      this.zone = other.zone;
    }
    if (other.isSetUnitlabel()) {
      this.unitlabel = other.unitlabel;
    }
    this.site_id = other.site_id;
    this.floor = other.floor;
    if (other.isSetUnitname()) {
      this.unitname = other.unitname;
    }
    if (other.isSetSite_name()) {
      this.site_name = other.site_name;
    }
    this.unitid = other.unitid;
    if (other.isSetBuilding_label()) {
      this.building_label = other.building_label;
    }
    if (other.isSetCf()) {
      this.cf = other.cf;
    }
    if (other.isSetAdminuse()) {
      this.adminuse = other.adminuse;
    }
    if (other.isSetEWAid()) {
      this.EWAid = other.EWAid;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDoorCodeAlias()) {
      this.doorCodeAlias = other.doorCodeAlias;
    }
  }

  public FRRoom deepCopy() {
    return new FRRoom(this);
  }

  @Override
  public void clear() {
    this.doorCode = null;
    this.uid = null;
    this.doorCodeWithoutSpace = null;
    setCapacityIsSet(false);
    this.capacity = 0;
    this.site_label = null;
    setSurfaceIsSet(false);
    this.surface = 0.0;
    this.building_name = null;
    this.zone = null;
    this.unitlabel = null;
    setSite_idIsSet(false);
    this.site_id = 0;
    setFloorIsSet(false);
    this.floor = 0;
    this.unitname = null;
    this.site_name = null;
    setUnitidIsSet(false);
    this.unitid = 0;
    this.building_label = null;
    this.cf = null;
    this.adminuse = null;
    this.EWAid = null;
    this.type = null;
    this.doorCodeAlias = null;
  }

  public String getDoorCode() {
    return this.doorCode;
  }

  public FRRoom setDoorCode(String doorCode) {
    this.doorCode = doorCode;
    return this;
  }

  public void unsetDoorCode() {
    this.doorCode = null;
  }

  /** Returns true if field doorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDoorCode() {
    return this.doorCode != null;
  }

  public void setDoorCodeIsSet(boolean value) {
    if (!value) {
      this.doorCode = null;
    }
  }

  public String getUid() {
    return this.uid;
  }

  public FRRoom setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getDoorCodeWithoutSpace() {
    return this.doorCodeWithoutSpace;
  }

  public FRRoom setDoorCodeWithoutSpace(String doorCodeWithoutSpace) {
    this.doorCodeWithoutSpace = doorCodeWithoutSpace;
    return this;
  }

  public void unsetDoorCodeWithoutSpace() {
    this.doorCodeWithoutSpace = null;
  }

  /** Returns true if field doorCodeWithoutSpace is set (has been assigned a value) and false otherwise */
  public boolean isSetDoorCodeWithoutSpace() {
    return this.doorCodeWithoutSpace != null;
  }

  public void setDoorCodeWithoutSpaceIsSet(boolean value) {
    if (!value) {
      this.doorCodeWithoutSpace = null;
    }
  }

  public int getCapacity() {
    return this.capacity;
  }

  public FRRoom setCapacity(int capacity) {
    this.capacity = capacity;
    setCapacityIsSet(true);
    return this;
  }

  public void unsetCapacity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAPACITY_ISSET_ID);
  }

  /** Returns true if field capacity is set (has been assigned a value) and false otherwise */
  public boolean isSetCapacity() {
    return EncodingUtils.testBit(__isset_bitfield, __CAPACITY_ISSET_ID);
  }

  public void setCapacityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAPACITY_ISSET_ID, value);
  }

  public String getSite_label() {
    return this.site_label;
  }

  public FRRoom setSite_label(String site_label) {
    this.site_label = site_label;
    return this;
  }

  public void unsetSite_label() {
    this.site_label = null;
  }

  /** Returns true if field site_label is set (has been assigned a value) and false otherwise */
  public boolean isSetSite_label() {
    return this.site_label != null;
  }

  public void setSite_labelIsSet(boolean value) {
    if (!value) {
      this.site_label = null;
    }
  }

  public double getSurface() {
    return this.surface;
  }

  public FRRoom setSurface(double surface) {
    this.surface = surface;
    setSurfaceIsSet(true);
    return this;
  }

  public void unsetSurface() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SURFACE_ISSET_ID);
  }

  /** Returns true if field surface is set (has been assigned a value) and false otherwise */
  public boolean isSetSurface() {
    return EncodingUtils.testBit(__isset_bitfield, __SURFACE_ISSET_ID);
  }

  public void setSurfaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SURFACE_ISSET_ID, value);
  }

  public String getBuilding_name() {
    return this.building_name;
  }

  public FRRoom setBuilding_name(String building_name) {
    this.building_name = building_name;
    return this;
  }

  public void unsetBuilding_name() {
    this.building_name = null;
  }

  /** Returns true if field building_name is set (has been assigned a value) and false otherwise */
  public boolean isSetBuilding_name() {
    return this.building_name != null;
  }

  public void setBuilding_nameIsSet(boolean value) {
    if (!value) {
      this.building_name = null;
    }
  }

  public String getZone() {
    return this.zone;
  }

  public FRRoom setZone(String zone) {
    this.zone = zone;
    return this;
  }

  public void unsetZone() {
    this.zone = null;
  }

  /** Returns true if field zone is set (has been assigned a value) and false otherwise */
  public boolean isSetZone() {
    return this.zone != null;
  }

  public void setZoneIsSet(boolean value) {
    if (!value) {
      this.zone = null;
    }
  }

  public String getUnitlabel() {
    return this.unitlabel;
  }

  public FRRoom setUnitlabel(String unitlabel) {
    this.unitlabel = unitlabel;
    return this;
  }

  public void unsetUnitlabel() {
    this.unitlabel = null;
  }

  /** Returns true if field unitlabel is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitlabel() {
    return this.unitlabel != null;
  }

  public void setUnitlabelIsSet(boolean value) {
    if (!value) {
      this.unitlabel = null;
    }
  }

  public int getSite_id() {
    return this.site_id;
  }

  public FRRoom setSite_id(int site_id) {
    this.site_id = site_id;
    setSite_idIsSet(true);
    return this;
  }

  public void unsetSite_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SITE_ID_ISSET_ID);
  }

  /** Returns true if field site_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSite_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SITE_ID_ISSET_ID);
  }

  public void setSite_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SITE_ID_ISSET_ID, value);
  }

  public int getFloor() {
    return this.floor;
  }

  public FRRoom setFloor(int floor) {
    this.floor = floor;
    setFloorIsSet(true);
    return this;
  }

  public void unsetFloor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOOR_ISSET_ID);
  }

  /** Returns true if field floor is set (has been assigned a value) and false otherwise */
  public boolean isSetFloor() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOOR_ISSET_ID);
  }

  public void setFloorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOOR_ISSET_ID, value);
  }

  public String getUnitname() {
    return this.unitname;
  }

  public FRRoom setUnitname(String unitname) {
    this.unitname = unitname;
    return this;
  }

  public void unsetUnitname() {
    this.unitname = null;
  }

  /** Returns true if field unitname is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitname() {
    return this.unitname != null;
  }

  public void setUnitnameIsSet(boolean value) {
    if (!value) {
      this.unitname = null;
    }
  }

  public String getSite_name() {
    return this.site_name;
  }

  public FRRoom setSite_name(String site_name) {
    this.site_name = site_name;
    return this;
  }

  public void unsetSite_name() {
    this.site_name = null;
  }

  /** Returns true if field site_name is set (has been assigned a value) and false otherwise */
  public boolean isSetSite_name() {
    return this.site_name != null;
  }

  public void setSite_nameIsSet(boolean value) {
    if (!value) {
      this.site_name = null;
    }
  }

  public int getUnitid() {
    return this.unitid;
  }

  public FRRoom setUnitid(int unitid) {
    this.unitid = unitid;
    setUnitidIsSet(true);
    return this;
  }

  public void unsetUnitid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNITID_ISSET_ID);
  }

  /** Returns true if field unitid is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitid() {
    return EncodingUtils.testBit(__isset_bitfield, __UNITID_ISSET_ID);
  }

  public void setUnitidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNITID_ISSET_ID, value);
  }

  public String getBuilding_label() {
    return this.building_label;
  }

  public FRRoom setBuilding_label(String building_label) {
    this.building_label = building_label;
    return this;
  }

  public void unsetBuilding_label() {
    this.building_label = null;
  }

  /** Returns true if field building_label is set (has been assigned a value) and false otherwise */
  public boolean isSetBuilding_label() {
    return this.building_label != null;
  }

  public void setBuilding_labelIsSet(boolean value) {
    if (!value) {
      this.building_label = null;
    }
  }

  public String getCf() {
    return this.cf;
  }

  public FRRoom setCf(String cf) {
    this.cf = cf;
    return this;
  }

  public void unsetCf() {
    this.cf = null;
  }

  /** Returns true if field cf is set (has been assigned a value) and false otherwise */
  public boolean isSetCf() {
    return this.cf != null;
  }

  public void setCfIsSet(boolean value) {
    if (!value) {
      this.cf = null;
    }
  }

  public String getAdminuse() {
    return this.adminuse;
  }

  public FRRoom setAdminuse(String adminuse) {
    this.adminuse = adminuse;
    return this;
  }

  public void unsetAdminuse() {
    this.adminuse = null;
  }

  /** Returns true if field adminuse is set (has been assigned a value) and false otherwise */
  public boolean isSetAdminuse() {
    return this.adminuse != null;
  }

  public void setAdminuseIsSet(boolean value) {
    if (!value) {
      this.adminuse = null;
    }
  }

  public String getEWAid() {
    return this.EWAid;
  }

  public FRRoom setEWAid(String EWAid) {
    this.EWAid = EWAid;
    return this;
  }

  public void unsetEWAid() {
    this.EWAid = null;
  }

  /** Returns true if field EWAid is set (has been assigned a value) and false otherwise */
  public boolean isSetEWAid() {
    return this.EWAid != null;
  }

  public void setEWAidIsSet(boolean value) {
    if (!value) {
      this.EWAid = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public FRRoom setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getDoorCodeAlias() {
    return this.doorCodeAlias;
  }

  public FRRoom setDoorCodeAlias(String doorCodeAlias) {
    this.doorCodeAlias = doorCodeAlias;
    return this;
  }

  public void unsetDoorCodeAlias() {
    this.doorCodeAlias = null;
  }

  /** Returns true if field doorCodeAlias is set (has been assigned a value) and false otherwise */
  public boolean isSetDoorCodeAlias() {
    return this.doorCodeAlias != null;
  }

  public void setDoorCodeAliasIsSet(boolean value) {
    if (!value) {
      this.doorCodeAlias = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DOOR_CODE:
      if (value == null) {
        unsetDoorCode();
      } else {
        setDoorCode((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case DOOR_CODE_WITHOUT_SPACE:
      if (value == null) {
        unsetDoorCodeWithoutSpace();
      } else {
        setDoorCodeWithoutSpace((String)value);
      }
      break;

    case CAPACITY:
      if (value == null) {
        unsetCapacity();
      } else {
        setCapacity((Integer)value);
      }
      break;

    case SITE_LABEL:
      if (value == null) {
        unsetSite_label();
      } else {
        setSite_label((String)value);
      }
      break;

    case SURFACE:
      if (value == null) {
        unsetSurface();
      } else {
        setSurface((Double)value);
      }
      break;

    case BUILDING_NAME:
      if (value == null) {
        unsetBuilding_name();
      } else {
        setBuilding_name((String)value);
      }
      break;

    case ZONE:
      if (value == null) {
        unsetZone();
      } else {
        setZone((String)value);
      }
      break;

    case UNITLABEL:
      if (value == null) {
        unsetUnitlabel();
      } else {
        setUnitlabel((String)value);
      }
      break;

    case SITE_ID:
      if (value == null) {
        unsetSite_id();
      } else {
        setSite_id((Integer)value);
      }
      break;

    case FLOOR:
      if (value == null) {
        unsetFloor();
      } else {
        setFloor((Integer)value);
      }
      break;

    case UNITNAME:
      if (value == null) {
        unsetUnitname();
      } else {
        setUnitname((String)value);
      }
      break;

    case SITE_NAME:
      if (value == null) {
        unsetSite_name();
      } else {
        setSite_name((String)value);
      }
      break;

    case UNITID:
      if (value == null) {
        unsetUnitid();
      } else {
        setUnitid((Integer)value);
      }
      break;

    case BUILDING_LABEL:
      if (value == null) {
        unsetBuilding_label();
      } else {
        setBuilding_label((String)value);
      }
      break;

    case CF:
      if (value == null) {
        unsetCf();
      } else {
        setCf((String)value);
      }
      break;

    case ADMINUSE:
      if (value == null) {
        unsetAdminuse();
      } else {
        setAdminuse((String)value);
      }
      break;

    case EWAID:
      if (value == null) {
        unsetEWAid();
      } else {
        setEWAid((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case DOOR_CODE_ALIAS:
      if (value == null) {
        unsetDoorCodeAlias();
      } else {
        setDoorCodeAlias((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOOR_CODE:
      return getDoorCode();

    case UID:
      return getUid();

    case DOOR_CODE_WITHOUT_SPACE:
      return getDoorCodeWithoutSpace();

    case CAPACITY:
      return Integer.valueOf(getCapacity());

    case SITE_LABEL:
      return getSite_label();

    case SURFACE:
      return Double.valueOf(getSurface());

    case BUILDING_NAME:
      return getBuilding_name();

    case ZONE:
      return getZone();

    case UNITLABEL:
      return getUnitlabel();

    case SITE_ID:
      return Integer.valueOf(getSite_id());

    case FLOOR:
      return Integer.valueOf(getFloor());

    case UNITNAME:
      return getUnitname();

    case SITE_NAME:
      return getSite_name();

    case UNITID:
      return Integer.valueOf(getUnitid());

    case BUILDING_LABEL:
      return getBuilding_label();

    case CF:
      return getCf();

    case ADMINUSE:
      return getAdminuse();

    case EWAID:
      return getEWAid();

    case TYPE:
      return getType();

    case DOOR_CODE_ALIAS:
      return getDoorCodeAlias();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOOR_CODE:
      return isSetDoorCode();
    case UID:
      return isSetUid();
    case DOOR_CODE_WITHOUT_SPACE:
      return isSetDoorCodeWithoutSpace();
    case CAPACITY:
      return isSetCapacity();
    case SITE_LABEL:
      return isSetSite_label();
    case SURFACE:
      return isSetSurface();
    case BUILDING_NAME:
      return isSetBuilding_name();
    case ZONE:
      return isSetZone();
    case UNITLABEL:
      return isSetUnitlabel();
    case SITE_ID:
      return isSetSite_id();
    case FLOOR:
      return isSetFloor();
    case UNITNAME:
      return isSetUnitname();
    case SITE_NAME:
      return isSetSite_name();
    case UNITID:
      return isSetUnitid();
    case BUILDING_LABEL:
      return isSetBuilding_label();
    case CF:
      return isSetCf();
    case ADMINUSE:
      return isSetAdminuse();
    case EWAID:
      return isSetEWAid();
    case TYPE:
      return isSetType();
    case DOOR_CODE_ALIAS:
      return isSetDoorCodeAlias();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FRRoom)
      return this.equals((FRRoom)that);
    return false;
  }

  public boolean equals(FRRoom that) {
    if (that == null)
      return false;

    boolean this_present_doorCode = true && this.isSetDoorCode();
    boolean that_present_doorCode = true && that.isSetDoorCode();
    if (this_present_doorCode || that_present_doorCode) {
      if (!(this_present_doorCode && that_present_doorCode))
        return false;
      if (!this.doorCode.equals(that.doorCode))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_doorCodeWithoutSpace = true && this.isSetDoorCodeWithoutSpace();
    boolean that_present_doorCodeWithoutSpace = true && that.isSetDoorCodeWithoutSpace();
    if (this_present_doorCodeWithoutSpace || that_present_doorCodeWithoutSpace) {
      if (!(this_present_doorCodeWithoutSpace && that_present_doorCodeWithoutSpace))
        return false;
      if (!this.doorCodeWithoutSpace.equals(that.doorCodeWithoutSpace))
        return false;
    }

    boolean this_present_capacity = true && this.isSetCapacity();
    boolean that_present_capacity = true && that.isSetCapacity();
    if (this_present_capacity || that_present_capacity) {
      if (!(this_present_capacity && that_present_capacity))
        return false;
      if (this.capacity != that.capacity)
        return false;
    }

    boolean this_present_site_label = true && this.isSetSite_label();
    boolean that_present_site_label = true && that.isSetSite_label();
    if (this_present_site_label || that_present_site_label) {
      if (!(this_present_site_label && that_present_site_label))
        return false;
      if (!this.site_label.equals(that.site_label))
        return false;
    }

    boolean this_present_surface = true && this.isSetSurface();
    boolean that_present_surface = true && that.isSetSurface();
    if (this_present_surface || that_present_surface) {
      if (!(this_present_surface && that_present_surface))
        return false;
      if (this.surface != that.surface)
        return false;
    }

    boolean this_present_building_name = true && this.isSetBuilding_name();
    boolean that_present_building_name = true && that.isSetBuilding_name();
    if (this_present_building_name || that_present_building_name) {
      if (!(this_present_building_name && that_present_building_name))
        return false;
      if (!this.building_name.equals(that.building_name))
        return false;
    }

    boolean this_present_zone = true && this.isSetZone();
    boolean that_present_zone = true && that.isSetZone();
    if (this_present_zone || that_present_zone) {
      if (!(this_present_zone && that_present_zone))
        return false;
      if (!this.zone.equals(that.zone))
        return false;
    }

    boolean this_present_unitlabel = true && this.isSetUnitlabel();
    boolean that_present_unitlabel = true && that.isSetUnitlabel();
    if (this_present_unitlabel || that_present_unitlabel) {
      if (!(this_present_unitlabel && that_present_unitlabel))
        return false;
      if (!this.unitlabel.equals(that.unitlabel))
        return false;
    }

    boolean this_present_site_id = true && this.isSetSite_id();
    boolean that_present_site_id = true && that.isSetSite_id();
    if (this_present_site_id || that_present_site_id) {
      if (!(this_present_site_id && that_present_site_id))
        return false;
      if (this.site_id != that.site_id)
        return false;
    }

    boolean this_present_floor = true && this.isSetFloor();
    boolean that_present_floor = true && that.isSetFloor();
    if (this_present_floor || that_present_floor) {
      if (!(this_present_floor && that_present_floor))
        return false;
      if (this.floor != that.floor)
        return false;
    }

    boolean this_present_unitname = true && this.isSetUnitname();
    boolean that_present_unitname = true && that.isSetUnitname();
    if (this_present_unitname || that_present_unitname) {
      if (!(this_present_unitname && that_present_unitname))
        return false;
      if (!this.unitname.equals(that.unitname))
        return false;
    }

    boolean this_present_site_name = true && this.isSetSite_name();
    boolean that_present_site_name = true && that.isSetSite_name();
    if (this_present_site_name || that_present_site_name) {
      if (!(this_present_site_name && that_present_site_name))
        return false;
      if (!this.site_name.equals(that.site_name))
        return false;
    }

    boolean this_present_unitid = true && this.isSetUnitid();
    boolean that_present_unitid = true && that.isSetUnitid();
    if (this_present_unitid || that_present_unitid) {
      if (!(this_present_unitid && that_present_unitid))
        return false;
      if (this.unitid != that.unitid)
        return false;
    }

    boolean this_present_building_label = true && this.isSetBuilding_label();
    boolean that_present_building_label = true && that.isSetBuilding_label();
    if (this_present_building_label || that_present_building_label) {
      if (!(this_present_building_label && that_present_building_label))
        return false;
      if (!this.building_label.equals(that.building_label))
        return false;
    }

    boolean this_present_cf = true && this.isSetCf();
    boolean that_present_cf = true && that.isSetCf();
    if (this_present_cf || that_present_cf) {
      if (!(this_present_cf && that_present_cf))
        return false;
      if (!this.cf.equals(that.cf))
        return false;
    }

    boolean this_present_adminuse = true && this.isSetAdminuse();
    boolean that_present_adminuse = true && that.isSetAdminuse();
    if (this_present_adminuse || that_present_adminuse) {
      if (!(this_present_adminuse && that_present_adminuse))
        return false;
      if (!this.adminuse.equals(that.adminuse))
        return false;
    }

    boolean this_present_EWAid = true && this.isSetEWAid();
    boolean that_present_EWAid = true && that.isSetEWAid();
    if (this_present_EWAid || that_present_EWAid) {
      if (!(this_present_EWAid && that_present_EWAid))
        return false;
      if (!this.EWAid.equals(that.EWAid))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_doorCodeAlias = true && this.isSetDoorCodeAlias();
    boolean that_present_doorCodeAlias = true && that.isSetDoorCodeAlias();
    if (this_present_doorCodeAlias || that_present_doorCodeAlias) {
      if (!(this_present_doorCodeAlias && that_present_doorCodeAlias))
        return false;
      if (!this.doorCodeAlias.equals(that.doorCodeAlias))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_doorCode = true && (isSetDoorCode());
    list.add(present_doorCode);
    if (present_doorCode)
      list.add(doorCode);

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_doorCodeWithoutSpace = true && (isSetDoorCodeWithoutSpace());
    list.add(present_doorCodeWithoutSpace);
    if (present_doorCodeWithoutSpace)
      list.add(doorCodeWithoutSpace);

    boolean present_capacity = true && (isSetCapacity());
    list.add(present_capacity);
    if (present_capacity)
      list.add(capacity);

    boolean present_site_label = true && (isSetSite_label());
    list.add(present_site_label);
    if (present_site_label)
      list.add(site_label);

    boolean present_surface = true && (isSetSurface());
    list.add(present_surface);
    if (present_surface)
      list.add(surface);

    boolean present_building_name = true && (isSetBuilding_name());
    list.add(present_building_name);
    if (present_building_name)
      list.add(building_name);

    boolean present_zone = true && (isSetZone());
    list.add(present_zone);
    if (present_zone)
      list.add(zone);

    boolean present_unitlabel = true && (isSetUnitlabel());
    list.add(present_unitlabel);
    if (present_unitlabel)
      list.add(unitlabel);

    boolean present_site_id = true && (isSetSite_id());
    list.add(present_site_id);
    if (present_site_id)
      list.add(site_id);

    boolean present_floor = true && (isSetFloor());
    list.add(present_floor);
    if (present_floor)
      list.add(floor);

    boolean present_unitname = true && (isSetUnitname());
    list.add(present_unitname);
    if (present_unitname)
      list.add(unitname);

    boolean present_site_name = true && (isSetSite_name());
    list.add(present_site_name);
    if (present_site_name)
      list.add(site_name);

    boolean present_unitid = true && (isSetUnitid());
    list.add(present_unitid);
    if (present_unitid)
      list.add(unitid);

    boolean present_building_label = true && (isSetBuilding_label());
    list.add(present_building_label);
    if (present_building_label)
      list.add(building_label);

    boolean present_cf = true && (isSetCf());
    list.add(present_cf);
    if (present_cf)
      list.add(cf);

    boolean present_adminuse = true && (isSetAdminuse());
    list.add(present_adminuse);
    if (present_adminuse)
      list.add(adminuse);

    boolean present_EWAid = true && (isSetEWAid());
    list.add(present_EWAid);
    if (present_EWAid)
      list.add(EWAid);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_doorCodeAlias = true && (isSetDoorCodeAlias());
    list.add(present_doorCodeAlias);
    if (present_doorCodeAlias)
      list.add(doorCodeAlias);

    return list.hashCode();
  }

  @Override
  public int compareTo(FRRoom other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDoorCode()).compareTo(other.isSetDoorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doorCode, other.doorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoorCodeWithoutSpace()).compareTo(other.isSetDoorCodeWithoutSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoorCodeWithoutSpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doorCodeWithoutSpace, other.doorCodeWithoutSpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCapacity()).compareTo(other.isSetCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacity, other.capacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSite_label()).compareTo(other.isSetSite_label());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSite_label()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.site_label, other.site_label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurface()).compareTo(other.isSetSurface());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurface()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surface, other.surface);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuilding_name()).compareTo(other.isSetBuilding_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuilding_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.building_name, other.building_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZone()).compareTo(other.isSetZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zone, other.zone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitlabel()).compareTo(other.isSetUnitlabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitlabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitlabel, other.unitlabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSite_id()).compareTo(other.isSetSite_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSite_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.site_id, other.site_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloor()).compareTo(other.isSetFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floor, other.floor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitname()).compareTo(other.isSetUnitname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitname, other.unitname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSite_name()).compareTo(other.isSetSite_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSite_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.site_name, other.site_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitid()).compareTo(other.isSetUnitid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitid, other.unitid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuilding_label()).compareTo(other.isSetBuilding_label());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuilding_label()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.building_label, other.building_label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCf()).compareTo(other.isSetCf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf, other.cf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdminuse()).compareTo(other.isSetAdminuse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdminuse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminuse, other.adminuse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEWAid()).compareTo(other.isSetEWAid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEWAid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EWAid, other.EWAid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoorCodeAlias()).compareTo(other.isSetDoorCodeAlias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoorCodeAlias()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doorCodeAlias, other.doorCodeAlias);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FRRoom(");
    boolean first = true;

    sb.append("doorCode:");
    if (this.doorCode == null) {
      sb.append("null");
    } else {
      sb.append(this.doorCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (isSetDoorCodeWithoutSpace()) {
      if (!first) sb.append(", ");
      sb.append("doorCodeWithoutSpace:");
      if (this.doorCodeWithoutSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.doorCodeWithoutSpace);
      }
      first = false;
    }
    if (isSetCapacity()) {
      if (!first) sb.append(", ");
      sb.append("capacity:");
      sb.append(this.capacity);
      first = false;
    }
    if (isSetSite_label()) {
      if (!first) sb.append(", ");
      sb.append("site_label:");
      if (this.site_label == null) {
        sb.append("null");
      } else {
        sb.append(this.site_label);
      }
      first = false;
    }
    if (isSetSurface()) {
      if (!first) sb.append(", ");
      sb.append("surface:");
      sb.append(this.surface);
      first = false;
    }
    if (isSetBuilding_name()) {
      if (!first) sb.append(", ");
      sb.append("building_name:");
      if (this.building_name == null) {
        sb.append("null");
      } else {
        sb.append(this.building_name);
      }
      first = false;
    }
    if (isSetZone()) {
      if (!first) sb.append(", ");
      sb.append("zone:");
      if (this.zone == null) {
        sb.append("null");
      } else {
        sb.append(this.zone);
      }
      first = false;
    }
    if (isSetUnitlabel()) {
      if (!first) sb.append(", ");
      sb.append("unitlabel:");
      if (this.unitlabel == null) {
        sb.append("null");
      } else {
        sb.append(this.unitlabel);
      }
      first = false;
    }
    if (isSetSite_id()) {
      if (!first) sb.append(", ");
      sb.append("site_id:");
      sb.append(this.site_id);
      first = false;
    }
    if (isSetFloor()) {
      if (!first) sb.append(", ");
      sb.append("floor:");
      sb.append(this.floor);
      first = false;
    }
    if (isSetUnitname()) {
      if (!first) sb.append(", ");
      sb.append("unitname:");
      if (this.unitname == null) {
        sb.append("null");
      } else {
        sb.append(this.unitname);
      }
      first = false;
    }
    if (isSetSite_name()) {
      if (!first) sb.append(", ");
      sb.append("site_name:");
      if (this.site_name == null) {
        sb.append("null");
      } else {
        sb.append(this.site_name);
      }
      first = false;
    }
    if (isSetUnitid()) {
      if (!first) sb.append(", ");
      sb.append("unitid:");
      sb.append(this.unitid);
      first = false;
    }
    if (isSetBuilding_label()) {
      if (!first) sb.append(", ");
      sb.append("building_label:");
      if (this.building_label == null) {
        sb.append("null");
      } else {
        sb.append(this.building_label);
      }
      first = false;
    }
    if (isSetCf()) {
      if (!first) sb.append(", ");
      sb.append("cf:");
      if (this.cf == null) {
        sb.append("null");
      } else {
        sb.append(this.cf);
      }
      first = false;
    }
    if (isSetAdminuse()) {
      if (!first) sb.append(", ");
      sb.append("adminuse:");
      if (this.adminuse == null) {
        sb.append("null");
      } else {
        sb.append(this.adminuse);
      }
      first = false;
    }
    if (isSetEWAid()) {
      if (!first) sb.append(", ");
      sb.append("EWAid:");
      if (this.EWAid == null) {
        sb.append("null");
      } else {
        sb.append(this.EWAid);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetDoorCodeAlias()) {
      if (!first) sb.append(", ");
      sb.append("doorCodeAlias:");
      if (this.doorCodeAlias == null) {
        sb.append("null");
      } else {
        sb.append(this.doorCodeAlias);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (doorCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'doorCode' was not present! Struct: " + toString());
    }
    if (uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FRRoomStandardSchemeFactory implements SchemeFactory {
    public FRRoomStandardScheme getScheme() {
      return new FRRoomStandardScheme();
    }
  }

  private static class FRRoomStandardScheme extends StandardScheme<FRRoom> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FRRoom struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOOR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doorCode = iprot.readString();
              struct.setDoorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOOR_CODE_WITHOUT_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doorCodeWithoutSpace = iprot.readString();
              struct.setDoorCodeWithoutSpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.capacity = iprot.readI32();
              struct.setCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SITE_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.site_label = iprot.readString();
              struct.setSite_labelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SURFACE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.surface = iprot.readDouble();
              struct.setSurfaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUILDING_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.building_name = iprot.readString();
              struct.setBuilding_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zone = iprot.readString();
              struct.setZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UNITLABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitlabel = iprot.readString();
              struct.setUnitlabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.site_id = iprot.readI32();
              struct.setSite_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.floor = iprot.readI32();
              struct.setFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UNITNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitname = iprot.readString();
              struct.setUnitnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SITE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.site_name = iprot.readString();
              struct.setSite_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UNITID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unitid = iprot.readI32();
              struct.setUnitidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BUILDING_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.building_label = iprot.readString();
              struct.setBuilding_labelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cf = iprot.readString();
              struct.setCfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ADMINUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adminuse = iprot.readString();
              struct.setAdminuseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // EWAID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.EWAid = iprot.readString();
              struct.setEWAidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // DOOR_CODE_ALIAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doorCodeAlias = iprot.readString();
              struct.setDoorCodeAliasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FRRoom struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.doorCode != null) {
        oprot.writeFieldBegin(DOOR_CODE_FIELD_DESC);
        oprot.writeString(struct.doorCode);
        oprot.writeFieldEnd();
      }
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.doorCodeWithoutSpace != null) {
        if (struct.isSetDoorCodeWithoutSpace()) {
          oprot.writeFieldBegin(DOOR_CODE_WITHOUT_SPACE_FIELD_DESC);
          oprot.writeString(struct.doorCodeWithoutSpace);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCapacity()) {
        oprot.writeFieldBegin(CAPACITY_FIELD_DESC);
        oprot.writeI32(struct.capacity);
        oprot.writeFieldEnd();
      }
      if (struct.site_label != null) {
        if (struct.isSetSite_label()) {
          oprot.writeFieldBegin(SITE_LABEL_FIELD_DESC);
          oprot.writeString(struct.site_label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSurface()) {
        oprot.writeFieldBegin(SURFACE_FIELD_DESC);
        oprot.writeDouble(struct.surface);
        oprot.writeFieldEnd();
      }
      if (struct.building_name != null) {
        if (struct.isSetBuilding_name()) {
          oprot.writeFieldBegin(BUILDING_NAME_FIELD_DESC);
          oprot.writeString(struct.building_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.zone != null) {
        if (struct.isSetZone()) {
          oprot.writeFieldBegin(ZONE_FIELD_DESC);
          oprot.writeString(struct.zone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unitlabel != null) {
        if (struct.isSetUnitlabel()) {
          oprot.writeFieldBegin(UNITLABEL_FIELD_DESC);
          oprot.writeString(struct.unitlabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSite_id()) {
        oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
        oprot.writeI32(struct.site_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFloor()) {
        oprot.writeFieldBegin(FLOOR_FIELD_DESC);
        oprot.writeI32(struct.floor);
        oprot.writeFieldEnd();
      }
      if (struct.unitname != null) {
        if (struct.isSetUnitname()) {
          oprot.writeFieldBegin(UNITNAME_FIELD_DESC);
          oprot.writeString(struct.unitname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.site_name != null) {
        if (struct.isSetSite_name()) {
          oprot.writeFieldBegin(SITE_NAME_FIELD_DESC);
          oprot.writeString(struct.site_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUnitid()) {
        oprot.writeFieldBegin(UNITID_FIELD_DESC);
        oprot.writeI32(struct.unitid);
        oprot.writeFieldEnd();
      }
      if (struct.building_label != null) {
        if (struct.isSetBuilding_label()) {
          oprot.writeFieldBegin(BUILDING_LABEL_FIELD_DESC);
          oprot.writeString(struct.building_label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cf != null) {
        if (struct.isSetCf()) {
          oprot.writeFieldBegin(CF_FIELD_DESC);
          oprot.writeString(struct.cf);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adminuse != null) {
        if (struct.isSetAdminuse()) {
          oprot.writeFieldBegin(ADMINUSE_FIELD_DESC);
          oprot.writeString(struct.adminuse);
          oprot.writeFieldEnd();
        }
      }
      if (struct.EWAid != null) {
        if (struct.isSetEWAid()) {
          oprot.writeFieldBegin(EWAID_FIELD_DESC);
          oprot.writeString(struct.EWAid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.doorCodeAlias != null) {
        if (struct.isSetDoorCodeAlias()) {
          oprot.writeFieldBegin(DOOR_CODE_ALIAS_FIELD_DESC);
          oprot.writeString(struct.doorCodeAlias);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FRRoomTupleSchemeFactory implements SchemeFactory {
    public FRRoomTupleScheme getScheme() {
      return new FRRoomTupleScheme();
    }
  }

  private static class FRRoomTupleScheme extends TupleScheme<FRRoom> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FRRoom struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.doorCode);
      oprot.writeString(struct.uid);
      BitSet optionals = new BitSet();
      if (struct.isSetDoorCodeWithoutSpace()) {
        optionals.set(0);
      }
      if (struct.isSetCapacity()) {
        optionals.set(1);
      }
      if (struct.isSetSite_label()) {
        optionals.set(2);
      }
      if (struct.isSetSurface()) {
        optionals.set(3);
      }
      if (struct.isSetBuilding_name()) {
        optionals.set(4);
      }
      if (struct.isSetZone()) {
        optionals.set(5);
      }
      if (struct.isSetUnitlabel()) {
        optionals.set(6);
      }
      if (struct.isSetSite_id()) {
        optionals.set(7);
      }
      if (struct.isSetFloor()) {
        optionals.set(8);
      }
      if (struct.isSetUnitname()) {
        optionals.set(9);
      }
      if (struct.isSetSite_name()) {
        optionals.set(10);
      }
      if (struct.isSetUnitid()) {
        optionals.set(11);
      }
      if (struct.isSetBuilding_label()) {
        optionals.set(12);
      }
      if (struct.isSetCf()) {
        optionals.set(13);
      }
      if (struct.isSetAdminuse()) {
        optionals.set(14);
      }
      if (struct.isSetEWAid()) {
        optionals.set(15);
      }
      if (struct.isSetType()) {
        optionals.set(16);
      }
      if (struct.isSetDoorCodeAlias()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetDoorCodeWithoutSpace()) {
        oprot.writeString(struct.doorCodeWithoutSpace);
      }
      if (struct.isSetCapacity()) {
        oprot.writeI32(struct.capacity);
      }
      if (struct.isSetSite_label()) {
        oprot.writeString(struct.site_label);
      }
      if (struct.isSetSurface()) {
        oprot.writeDouble(struct.surface);
      }
      if (struct.isSetBuilding_name()) {
        oprot.writeString(struct.building_name);
      }
      if (struct.isSetZone()) {
        oprot.writeString(struct.zone);
      }
      if (struct.isSetUnitlabel()) {
        oprot.writeString(struct.unitlabel);
      }
      if (struct.isSetSite_id()) {
        oprot.writeI32(struct.site_id);
      }
      if (struct.isSetFloor()) {
        oprot.writeI32(struct.floor);
      }
      if (struct.isSetUnitname()) {
        oprot.writeString(struct.unitname);
      }
      if (struct.isSetSite_name()) {
        oprot.writeString(struct.site_name);
      }
      if (struct.isSetUnitid()) {
        oprot.writeI32(struct.unitid);
      }
      if (struct.isSetBuilding_label()) {
        oprot.writeString(struct.building_label);
      }
      if (struct.isSetCf()) {
        oprot.writeString(struct.cf);
      }
      if (struct.isSetAdminuse()) {
        oprot.writeString(struct.adminuse);
      }
      if (struct.isSetEWAid()) {
        oprot.writeString(struct.EWAid);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetDoorCodeAlias()) {
        oprot.writeString(struct.doorCodeAlias);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FRRoom struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.doorCode = iprot.readString();
      struct.setDoorCodeIsSet(true);
      struct.uid = iprot.readString();
      struct.setUidIsSet(true);
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.doorCodeWithoutSpace = iprot.readString();
        struct.setDoorCodeWithoutSpaceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.capacity = iprot.readI32();
        struct.setCapacityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.site_label = iprot.readString();
        struct.setSite_labelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.surface = iprot.readDouble();
        struct.setSurfaceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.building_name = iprot.readString();
        struct.setBuilding_nameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.zone = iprot.readString();
        struct.setZoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.unitlabel = iprot.readString();
        struct.setUnitlabelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.site_id = iprot.readI32();
        struct.setSite_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.floor = iprot.readI32();
        struct.setFloorIsSet(true);
      }
      if (incoming.get(9)) {
        struct.unitname = iprot.readString();
        struct.setUnitnameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.site_name = iprot.readString();
        struct.setSite_nameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.unitid = iprot.readI32();
        struct.setUnitidIsSet(true);
      }
      if (incoming.get(12)) {
        struct.building_label = iprot.readString();
        struct.setBuilding_labelIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cf = iprot.readString();
        struct.setCfIsSet(true);
      }
      if (incoming.get(14)) {
        struct.adminuse = iprot.readString();
        struct.setAdminuseIsSet(true);
      }
      if (incoming.get(15)) {
        struct.EWAid = iprot.readString();
        struct.setEWAidIsSet(true);
      }
      if (incoming.get(16)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.doorCodeAlias = iprot.readString();
        struct.setDoorCodeAliasIsSet(true);
      }
    }
  }

}

