/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FRPeriod implements org.apache.thrift.TBase<FRPeriod, FRPeriod._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FRPeriod");

  private static final org.apache.thrift.protocol.TField TIME_STAMP_START_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStampStart", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_END_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStampEnd", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RECURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("recurrent", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField FIRST_OCCURANCY_FIELD_DESC = new org.apache.thrift.protocol.TField("firstOccurancy", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("step", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_OCCURANCY_FIELD_DESC = new org.apache.thrift.protocol.TField("lastOccurancy", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  private FRTimeStamp timeStampStart; // required
  private FRTimeStamp timeStampEnd; // required
  private boolean recurrent; // required
  private FRTimeStamp firstOccurancy; // required
  private int step; // required
  private FRTimeStamp lastOccurancy; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_STAMP_START((short)1, "timeStampStart"),
    TIME_STAMP_END((short)2, "timeStampEnd"),
    RECURRENT((short)10, "recurrent"),
    FIRST_OCCURANCY((short)11, "firstOccurancy"),
    STEP((short)12, "step"),
    LAST_OCCURANCY((short)13, "lastOccurancy");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_STAMP_START
          return TIME_STAMP_START;
        case 2: // TIME_STAMP_END
          return TIME_STAMP_END;
        case 10: // RECURRENT
          return RECURRENT;
        case 11: // FIRST_OCCURANCY
          return FIRST_OCCURANCY;
        case 12: // STEP
          return STEP;
        case 13: // LAST_OCCURANCY
          return LAST_OCCURANCY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECURRENT_ISSET_ID = 0;
  private static final int __STEP_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_STAMP_START, new org.apache.thrift.meta_data.FieldMetaData("timeStampStart", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRTimeStamp.class)));
    tmpMap.put(_Fields.TIME_STAMP_END, new org.apache.thrift.meta_data.FieldMetaData("timeStampEnd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRTimeStamp.class)));
    tmpMap.put(_Fields.RECURRENT, new org.apache.thrift.meta_data.FieldMetaData("recurrent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIRST_OCCURANCY, new org.apache.thrift.meta_data.FieldMetaData("firstOccurancy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRTimeStamp.class)));
    tmpMap.put(_Fields.STEP, new org.apache.thrift.meta_data.FieldMetaData("step", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_OCCURANCY, new org.apache.thrift.meta_data.FieldMetaData("lastOccurancy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRTimeStamp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FRPeriod.class, metaDataMap);
  }

  public FRPeriod() {
  }

  public FRPeriod(
    FRTimeStamp timeStampStart,
    FRTimeStamp timeStampEnd,
    boolean recurrent)
  {
    this();
    this.timeStampStart = timeStampStart;
    this.timeStampEnd = timeStampEnd;
    this.recurrent = recurrent;
    setRecurrentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FRPeriod(FRPeriod other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTimeStampStart()) {
      this.timeStampStart = new FRTimeStamp(other.timeStampStart);
    }
    if (other.isSetTimeStampEnd()) {
      this.timeStampEnd = new FRTimeStamp(other.timeStampEnd);
    }
    this.recurrent = other.recurrent;
    if (other.isSetFirstOccurancy()) {
      this.firstOccurancy = new FRTimeStamp(other.firstOccurancy);
    }
    this.step = other.step;
    if (other.isSetLastOccurancy()) {
      this.lastOccurancy = new FRTimeStamp(other.lastOccurancy);
    }
  }

  public FRPeriod deepCopy() {
    return new FRPeriod(this);
  }

  @Override
  public void clear() {
    this.timeStampStart = null;
    this.timeStampEnd = null;
    setRecurrentIsSet(false);
    this.recurrent = false;
    this.firstOccurancy = null;
    setStepIsSet(false);
    this.step = 0;
    this.lastOccurancy = null;
  }

  public FRTimeStamp getTimeStampStart() {
    return this.timeStampStart;
  }

  public FRPeriod setTimeStampStart(FRTimeStamp timeStampStart) {
    this.timeStampStart = timeStampStart;
    return this;
  }

  public void unsetTimeStampStart() {
    this.timeStampStart = null;
  }

  /** Returns true if field timeStampStart is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeStampStart() {
    return this.timeStampStart != null;
  }

  public void setTimeStampStartIsSet(boolean value) {
    if (!value) {
      this.timeStampStart = null;
    }
  }

  public FRTimeStamp getTimeStampEnd() {
    return this.timeStampEnd;
  }

  public FRPeriod setTimeStampEnd(FRTimeStamp timeStampEnd) {
    this.timeStampEnd = timeStampEnd;
    return this;
  }

  public void unsetTimeStampEnd() {
    this.timeStampEnd = null;
  }

  /** Returns true if field timeStampEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeStampEnd() {
    return this.timeStampEnd != null;
  }

  public void setTimeStampEndIsSet(boolean value) {
    if (!value) {
      this.timeStampEnd = null;
    }
  }

  public boolean isRecurrent() {
    return this.recurrent;
  }

  public FRPeriod setRecurrent(boolean recurrent) {
    this.recurrent = recurrent;
    setRecurrentIsSet(true);
    return this;
  }

  public void unsetRecurrent() {
    __isset_bit_vector.clear(__RECURRENT_ISSET_ID);
  }

  /** Returns true if field recurrent is set (has been assigned a value) and false otherwise */
  public boolean isSetRecurrent() {
    return __isset_bit_vector.get(__RECURRENT_ISSET_ID);
  }

  public void setRecurrentIsSet(boolean value) {
    __isset_bit_vector.set(__RECURRENT_ISSET_ID, value);
  }

  public FRTimeStamp getFirstOccurancy() {
    return this.firstOccurancy;
  }

  public FRPeriod setFirstOccurancy(FRTimeStamp firstOccurancy) {
    this.firstOccurancy = firstOccurancy;
    return this;
  }

  public void unsetFirstOccurancy() {
    this.firstOccurancy = null;
  }

  /** Returns true if field firstOccurancy is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstOccurancy() {
    return this.firstOccurancy != null;
  }

  public void setFirstOccurancyIsSet(boolean value) {
    if (!value) {
      this.firstOccurancy = null;
    }
  }

  public int getStep() {
    return this.step;
  }

  public FRPeriod setStep(int step) {
    this.step = step;
    setStepIsSet(true);
    return this;
  }

  public void unsetStep() {
    __isset_bit_vector.clear(__STEP_ISSET_ID);
  }

  /** Returns true if field step is set (has been assigned a value) and false otherwise */
  public boolean isSetStep() {
    return __isset_bit_vector.get(__STEP_ISSET_ID);
  }

  public void setStepIsSet(boolean value) {
    __isset_bit_vector.set(__STEP_ISSET_ID, value);
  }

  public FRTimeStamp getLastOccurancy() {
    return this.lastOccurancy;
  }

  public FRPeriod setLastOccurancy(FRTimeStamp lastOccurancy) {
    this.lastOccurancy = lastOccurancy;
    return this;
  }

  public void unsetLastOccurancy() {
    this.lastOccurancy = null;
  }

  /** Returns true if field lastOccurancy is set (has been assigned a value) and false otherwise */
  public boolean isSetLastOccurancy() {
    return this.lastOccurancy != null;
  }

  public void setLastOccurancyIsSet(boolean value) {
    if (!value) {
      this.lastOccurancy = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME_STAMP_START:
      if (value == null) {
        unsetTimeStampStart();
      } else {
        setTimeStampStart((FRTimeStamp)value);
      }
      break;

    case TIME_STAMP_END:
      if (value == null) {
        unsetTimeStampEnd();
      } else {
        setTimeStampEnd((FRTimeStamp)value);
      }
      break;

    case RECURRENT:
      if (value == null) {
        unsetRecurrent();
      } else {
        setRecurrent((Boolean)value);
      }
      break;

    case FIRST_OCCURANCY:
      if (value == null) {
        unsetFirstOccurancy();
      } else {
        setFirstOccurancy((FRTimeStamp)value);
      }
      break;

    case STEP:
      if (value == null) {
        unsetStep();
      } else {
        setStep((Integer)value);
      }
      break;

    case LAST_OCCURANCY:
      if (value == null) {
        unsetLastOccurancy();
      } else {
        setLastOccurancy((FRTimeStamp)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_STAMP_START:
      return getTimeStampStart();

    case TIME_STAMP_END:
      return getTimeStampEnd();

    case RECURRENT:
      return Boolean.valueOf(isRecurrent());

    case FIRST_OCCURANCY:
      return getFirstOccurancy();

    case STEP:
      return Integer.valueOf(getStep());

    case LAST_OCCURANCY:
      return getLastOccurancy();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME_STAMP_START:
      return isSetTimeStampStart();
    case TIME_STAMP_END:
      return isSetTimeStampEnd();
    case RECURRENT:
      return isSetRecurrent();
    case FIRST_OCCURANCY:
      return isSetFirstOccurancy();
    case STEP:
      return isSetStep();
    case LAST_OCCURANCY:
      return isSetLastOccurancy();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FRPeriod)
      return this.equals((FRPeriod)that);
    return false;
  }

  public boolean equals(FRPeriod that) {
    if (that == null)
      return false;

    boolean this_present_timeStampStart = true && this.isSetTimeStampStart();
    boolean that_present_timeStampStart = true && that.isSetTimeStampStart();
    if (this_present_timeStampStart || that_present_timeStampStart) {
      if (!(this_present_timeStampStart && that_present_timeStampStart))
        return false;
      if (!this.timeStampStart.equals(that.timeStampStart))
        return false;
    }

    boolean this_present_timeStampEnd = true && this.isSetTimeStampEnd();
    boolean that_present_timeStampEnd = true && that.isSetTimeStampEnd();
    if (this_present_timeStampEnd || that_present_timeStampEnd) {
      if (!(this_present_timeStampEnd && that_present_timeStampEnd))
        return false;
      if (!this.timeStampEnd.equals(that.timeStampEnd))
        return false;
    }

    boolean this_present_recurrent = true;
    boolean that_present_recurrent = true;
    if (this_present_recurrent || that_present_recurrent) {
      if (!(this_present_recurrent && that_present_recurrent))
        return false;
      if (this.recurrent != that.recurrent)
        return false;
    }

    boolean this_present_firstOccurancy = true && this.isSetFirstOccurancy();
    boolean that_present_firstOccurancy = true && that.isSetFirstOccurancy();
    if (this_present_firstOccurancy || that_present_firstOccurancy) {
      if (!(this_present_firstOccurancy && that_present_firstOccurancy))
        return false;
      if (!this.firstOccurancy.equals(that.firstOccurancy))
        return false;
    }

    boolean this_present_step = true && this.isSetStep();
    boolean that_present_step = true && that.isSetStep();
    if (this_present_step || that_present_step) {
      if (!(this_present_step && that_present_step))
        return false;
      if (this.step != that.step)
        return false;
    }

    boolean this_present_lastOccurancy = true && this.isSetLastOccurancy();
    boolean that_present_lastOccurancy = true && that.isSetLastOccurancy();
    if (this_present_lastOccurancy || that_present_lastOccurancy) {
      if (!(this_present_lastOccurancy && that_present_lastOccurancy))
        return false;
      if (!this.lastOccurancy.equals(that.lastOccurancy))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_timeStampStart = true && (isSetTimeStampStart());
    builder.append(present_timeStampStart);
    if (present_timeStampStart)
      builder.append(timeStampStart);

    boolean present_timeStampEnd = true && (isSetTimeStampEnd());
    builder.append(present_timeStampEnd);
    if (present_timeStampEnd)
      builder.append(timeStampEnd);

    boolean present_recurrent = true;
    builder.append(present_recurrent);
    if (present_recurrent)
      builder.append(recurrent);

    boolean present_firstOccurancy = true && (isSetFirstOccurancy());
    builder.append(present_firstOccurancy);
    if (present_firstOccurancy)
      builder.append(firstOccurancy);

    boolean present_step = true && (isSetStep());
    builder.append(present_step);
    if (present_step)
      builder.append(step);

    boolean present_lastOccurancy = true && (isSetLastOccurancy());
    builder.append(present_lastOccurancy);
    if (present_lastOccurancy)
      builder.append(lastOccurancy);

    return builder.toHashCode();
  }

  public int compareTo(FRPeriod other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FRPeriod typedOther = (FRPeriod)other;

    lastComparison = Boolean.valueOf(isSetTimeStampStart()).compareTo(typedOther.isSetTimeStampStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeStampStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStampStart, typedOther.timeStampStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeStampEnd()).compareTo(typedOther.isSetTimeStampEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeStampEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStampEnd, typedOther.timeStampEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecurrent()).compareTo(typedOther.isSetRecurrent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecurrent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recurrent, typedOther.recurrent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstOccurancy()).compareTo(typedOther.isSetFirstOccurancy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstOccurancy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstOccurancy, typedOther.firstOccurancy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStep()).compareTo(typedOther.isSetStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step, typedOther.step);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastOccurancy()).compareTo(typedOther.isSetLastOccurancy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastOccurancy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastOccurancy, typedOther.lastOccurancy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TIME_STAMP_START
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.timeStampStart = new FRTimeStamp();
            this.timeStampStart.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TIME_STAMP_END
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.timeStampEnd = new FRTimeStamp();
            this.timeStampEnd.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // RECURRENT
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.recurrent = iprot.readBool();
            setRecurrentIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // FIRST_OCCURANCY
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.firstOccurancy = new FRTimeStamp();
            this.firstOccurancy.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // STEP
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.step = iprot.readI32();
            setStepIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // LAST_OCCURANCY
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.lastOccurancy = new FRTimeStamp();
            this.lastOccurancy.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetRecurrent()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recurrent' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.timeStampStart != null) {
      oprot.writeFieldBegin(TIME_STAMP_START_FIELD_DESC);
      this.timeStampStart.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.timeStampEnd != null) {
      oprot.writeFieldBegin(TIME_STAMP_END_FIELD_DESC);
      this.timeStampEnd.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RECURRENT_FIELD_DESC);
    oprot.writeBool(this.recurrent);
    oprot.writeFieldEnd();
    if (this.firstOccurancy != null) {
      if (isSetFirstOccurancy()) {
        oprot.writeFieldBegin(FIRST_OCCURANCY_FIELD_DESC);
        this.firstOccurancy.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetStep()) {
      oprot.writeFieldBegin(STEP_FIELD_DESC);
      oprot.writeI32(this.step);
      oprot.writeFieldEnd();
    }
    if (this.lastOccurancy != null) {
      if (isSetLastOccurancy()) {
        oprot.writeFieldBegin(LAST_OCCURANCY_FIELD_DESC);
        this.lastOccurancy.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FRPeriod(");
    boolean first = true;

    sb.append("timeStampStart:");
    if (this.timeStampStart == null) {
      sb.append("null");
    } else {
      sb.append(this.timeStampStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeStampEnd:");
    if (this.timeStampEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.timeStampEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recurrent:");
    sb.append(this.recurrent);
    first = false;
    if (isSetFirstOccurancy()) {
      if (!first) sb.append(", ");
      sb.append("firstOccurancy:");
      if (this.firstOccurancy == null) {
        sb.append("null");
      } else {
        sb.append(this.firstOccurancy);
      }
      first = false;
    }
    if (isSetStep()) {
      if (!first) sb.append(", ");
      sb.append("step:");
      sb.append(this.step);
      first = false;
    }
    if (isSetLastOccurancy()) {
      if (!first) sb.append(", ");
      sb.append("lastOccurancy:");
      if (this.lastOccurancy == null) {
        sb.append("null");
      } else {
        sb.append(this.lastOccurancy);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (timeStampStart == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeStampStart' was not present! Struct: " + toString());
    }
    if (timeStampEnd == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeStampEnd' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'recurrent' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

