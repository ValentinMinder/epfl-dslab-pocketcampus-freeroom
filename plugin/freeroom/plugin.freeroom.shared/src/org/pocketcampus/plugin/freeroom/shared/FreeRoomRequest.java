/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FreeRoomRequest implements org.apache.thrift.TBase<FreeRoomRequest, FreeRoomRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FreeRoomRequest");

  private static final org.apache.thrift.protocol.TField PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("period", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FORBIDDEN_ROOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("forbiddenRooms", org.apache.thrift.protocol.TType.SET, (short)2);

  private FRPeriod period; // required
  private Set<FRRoom> forbiddenRooms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PERIOD((short)1, "period"),
    FORBIDDEN_ROOMS((short)2, "forbiddenRooms");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PERIOD
          return PERIOD;
        case 2: // FORBIDDEN_ROOMS
          return FORBIDDEN_ROOMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PERIOD, new org.apache.thrift.meta_data.FieldMetaData("period", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRPeriod.class)));
    tmpMap.put(_Fields.FORBIDDEN_ROOMS, new org.apache.thrift.meta_data.FieldMetaData("forbiddenRooms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRRoom.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FreeRoomRequest.class, metaDataMap);
  }

  public FreeRoomRequest() {
  }

  public FreeRoomRequest(
    FRPeriod period)
  {
    this();
    this.period = period;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FreeRoomRequest(FreeRoomRequest other) {
    if (other.isSetPeriod()) {
      this.period = new FRPeriod(other.period);
    }
    if (other.isSetForbiddenRooms()) {
      Set<FRRoom> __this__forbiddenRooms = new HashSet<FRRoom>();
      for (FRRoom other_element : other.forbiddenRooms) {
        __this__forbiddenRooms.add(new FRRoom(other_element));
      }
      this.forbiddenRooms = __this__forbiddenRooms;
    }
  }

  public FreeRoomRequest deepCopy() {
    return new FreeRoomRequest(this);
  }

  @Override
  public void clear() {
    this.period = null;
    this.forbiddenRooms = null;
  }

  public FRPeriod getPeriod() {
    return this.period;
  }

  public FreeRoomRequest setPeriod(FRPeriod period) {
    this.period = period;
    return this;
  }

  public void unsetPeriod() {
    this.period = null;
  }

  /** Returns true if field period is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriod() {
    return this.period != null;
  }

  public void setPeriodIsSet(boolean value) {
    if (!value) {
      this.period = null;
    }
  }

  public int getForbiddenRoomsSize() {
    return (this.forbiddenRooms == null) ? 0 : this.forbiddenRooms.size();
  }

  public java.util.Iterator<FRRoom> getForbiddenRoomsIterator() {
    return (this.forbiddenRooms == null) ? null : this.forbiddenRooms.iterator();
  }

  public void addToForbiddenRooms(FRRoom elem) {
    if (this.forbiddenRooms == null) {
      this.forbiddenRooms = new HashSet<FRRoom>();
    }
    this.forbiddenRooms.add(elem);
  }

  public Set<FRRoom> getForbiddenRooms() {
    return this.forbiddenRooms;
  }

  public FreeRoomRequest setForbiddenRooms(Set<FRRoom> forbiddenRooms) {
    this.forbiddenRooms = forbiddenRooms;
    return this;
  }

  public void unsetForbiddenRooms() {
    this.forbiddenRooms = null;
  }

  /** Returns true if field forbiddenRooms is set (has been assigned a value) and false otherwise */
  public boolean isSetForbiddenRooms() {
    return this.forbiddenRooms != null;
  }

  public void setForbiddenRoomsIsSet(boolean value) {
    if (!value) {
      this.forbiddenRooms = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PERIOD:
      if (value == null) {
        unsetPeriod();
      } else {
        setPeriod((FRPeriod)value);
      }
      break;

    case FORBIDDEN_ROOMS:
      if (value == null) {
        unsetForbiddenRooms();
      } else {
        setForbiddenRooms((Set<FRRoom>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PERIOD:
      return getPeriod();

    case FORBIDDEN_ROOMS:
      return getForbiddenRooms();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PERIOD:
      return isSetPeriod();
    case FORBIDDEN_ROOMS:
      return isSetForbiddenRooms();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FreeRoomRequest)
      return this.equals((FreeRoomRequest)that);
    return false;
  }

  public boolean equals(FreeRoomRequest that) {
    if (that == null)
      return false;

    boolean this_present_period = true && this.isSetPeriod();
    boolean that_present_period = true && that.isSetPeriod();
    if (this_present_period || that_present_period) {
      if (!(this_present_period && that_present_period))
        return false;
      if (!this.period.equals(that.period))
        return false;
    }

    boolean this_present_forbiddenRooms = true && this.isSetForbiddenRooms();
    boolean that_present_forbiddenRooms = true && that.isSetForbiddenRooms();
    if (this_present_forbiddenRooms || that_present_forbiddenRooms) {
      if (!(this_present_forbiddenRooms && that_present_forbiddenRooms))
        return false;
      if (!this.forbiddenRooms.equals(that.forbiddenRooms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_period = true && (isSetPeriod());
    builder.append(present_period);
    if (present_period)
      builder.append(period);

    boolean present_forbiddenRooms = true && (isSetForbiddenRooms());
    builder.append(present_forbiddenRooms);
    if (present_forbiddenRooms)
      builder.append(forbiddenRooms);

    return builder.toHashCode();
  }

  public int compareTo(FreeRoomRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FreeRoomRequest typedOther = (FreeRoomRequest)other;

    lastComparison = Boolean.valueOf(isSetPeriod()).compareTo(typedOther.isSetPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.period, typedOther.period);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForbiddenRooms()).compareTo(typedOther.isSetForbiddenRooms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForbiddenRooms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forbiddenRooms, typedOther.forbiddenRooms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PERIOD
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.period = new FRPeriod();
            this.period.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FORBIDDEN_ROOMS
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set4 = iprot.readSetBegin();
              this.forbiddenRooms = new HashSet<FRRoom>(2*_set4.size);
              for (int _i5 = 0; _i5 < _set4.size; ++_i5)
              {
                FRRoom _elem6; // required
                _elem6 = new FRRoom();
                _elem6.read(iprot);
                this.forbiddenRooms.add(_elem6);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.period != null) {
      oprot.writeFieldBegin(PERIOD_FIELD_DESC);
      this.period.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.forbiddenRooms != null) {
      if (isSetForbiddenRooms()) {
        oprot.writeFieldBegin(FORBIDDEN_ROOMS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, this.forbiddenRooms.size()));
          for (FRRoom _iter7 : this.forbiddenRooms)
          {
            _iter7.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FreeRoomRequest(");
    boolean first = true;

    sb.append("period:");
    if (this.period == null) {
      sb.append("null");
    } else {
      sb.append(this.period);
    }
    first = false;
    if (isSetForbiddenRooms()) {
      if (!first) sb.append(", ");
      sb.append("forbiddenRooms:");
      if (this.forbiddenRooms == null) {
        sb.append("null");
      } else {
        sb.append(this.forbiddenRooms);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (period == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'period' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

