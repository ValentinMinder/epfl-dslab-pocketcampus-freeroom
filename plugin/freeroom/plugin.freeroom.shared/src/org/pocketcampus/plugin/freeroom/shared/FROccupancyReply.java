/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-8")
public class FROccupancyReply implements org.apache.thrift.TBase<FROccupancyReply, FROccupancyReply._Fields>, java.io.Serializable, Cloneable, Comparable<FROccupancyReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FROccupancyReply");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statusComment", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OCCUPANCY_OF_ROOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("occupancyOfRooms", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField OVERALL_TREATED_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("overallTreatedPeriod", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FROccupancyReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FROccupancyReplyTupleSchemeFactory());
  }

  private FRStatusCode status; // required
  private String statusComment; // optional
  private Map<String,List<FRRoomOccupancy>> occupancyOfRooms; // optional
  private FRPeriod overallTreatedPeriod; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FRStatusCode
     */
    STATUS((short)1, "status"),
    STATUS_COMMENT((short)2, "statusComment"),
    OCCUPANCY_OF_ROOMS((short)3, "occupancyOfRooms"),
    OVERALL_TREATED_PERIOD((short)4, "overallTreatedPeriod");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // STATUS_COMMENT
          return STATUS_COMMENT;
        case 3: // OCCUPANCY_OF_ROOMS
          return OCCUPANCY_OF_ROOMS;
        case 4: // OVERALL_TREATED_PERIOD
          return OVERALL_TREATED_PERIOD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STATUS_COMMENT,_Fields.OCCUPANCY_OF_ROOMS,_Fields.OVERALL_TREATED_PERIOD};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FRStatusCode.class)));
    tmpMap.put(_Fields.STATUS_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("statusComment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCUPANCY_OF_ROOMS, new org.apache.thrift.meta_data.FieldMetaData("occupancyOfRooms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRRoomOccupancy.class)))));
    tmpMap.put(_Fields.OVERALL_TREATED_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("overallTreatedPeriod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRPeriod.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FROccupancyReply.class, metaDataMap);
  }

  public FROccupancyReply() {
  }

  public FROccupancyReply(
    FRStatusCode status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FROccupancyReply(FROccupancyReply other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetStatusComment()) {
      this.statusComment = other.statusComment;
    }
    if (other.isSetOccupancyOfRooms()) {
      Map<String,List<FRRoomOccupancy>> __this__occupancyOfRooms = new HashMap<String,List<FRRoomOccupancy>>(other.occupancyOfRooms.size());
      for (Map.Entry<String, List<FRRoomOccupancy>> other_element : other.occupancyOfRooms.entrySet()) {

        String other_element_key = other_element.getKey();
        List<FRRoomOccupancy> other_element_value = other_element.getValue();

        String __this__occupancyOfRooms_copy_key = other_element_key;

        List<FRRoomOccupancy> __this__occupancyOfRooms_copy_value = new ArrayList<FRRoomOccupancy>(other_element_value.size());
        for (FRRoomOccupancy other_element_value_element : other_element_value) {
          __this__occupancyOfRooms_copy_value.add(new FRRoomOccupancy(other_element_value_element));
        }

        __this__occupancyOfRooms.put(__this__occupancyOfRooms_copy_key, __this__occupancyOfRooms_copy_value);
      }
      this.occupancyOfRooms = __this__occupancyOfRooms;
    }
    if (other.isSetOverallTreatedPeriod()) {
      this.overallTreatedPeriod = new FRPeriod(other.overallTreatedPeriod);
    }
  }

  public FROccupancyReply deepCopy() {
    return new FROccupancyReply(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.statusComment = null;
    this.occupancyOfRooms = null;
    this.overallTreatedPeriod = null;
  }

  /**
   * 
   * @see FRStatusCode
   */
  public FRStatusCode getStatus() {
    return this.status;
  }

  /**
   * 
   * @see FRStatusCode
   */
  public FROccupancyReply setStatus(FRStatusCode status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getStatusComment() {
    return this.statusComment;
  }

  public FROccupancyReply setStatusComment(String statusComment) {
    this.statusComment = statusComment;
    return this;
  }

  public void unsetStatusComment() {
    this.statusComment = null;
  }

  /** Returns true if field statusComment is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusComment() {
    return this.statusComment != null;
  }

  public void setStatusCommentIsSet(boolean value) {
    if (!value) {
      this.statusComment = null;
    }
  }

  public int getOccupancyOfRoomsSize() {
    return (this.occupancyOfRooms == null) ? 0 : this.occupancyOfRooms.size();
  }

  public void putToOccupancyOfRooms(String key, List<FRRoomOccupancy> val) {
    if (this.occupancyOfRooms == null) {
      this.occupancyOfRooms = new HashMap<String,List<FRRoomOccupancy>>();
    }
    this.occupancyOfRooms.put(key, val);
  }

  public Map<String,List<FRRoomOccupancy>> getOccupancyOfRooms() {
    return this.occupancyOfRooms;
  }

  public FROccupancyReply setOccupancyOfRooms(Map<String,List<FRRoomOccupancy>> occupancyOfRooms) {
    this.occupancyOfRooms = occupancyOfRooms;
    return this;
  }

  public void unsetOccupancyOfRooms() {
    this.occupancyOfRooms = null;
  }

  /** Returns true if field occupancyOfRooms is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupancyOfRooms() {
    return this.occupancyOfRooms != null;
  }

  public void setOccupancyOfRoomsIsSet(boolean value) {
    if (!value) {
      this.occupancyOfRooms = null;
    }
  }

  public FRPeriod getOverallTreatedPeriod() {
    return this.overallTreatedPeriod;
  }

  public FROccupancyReply setOverallTreatedPeriod(FRPeriod overallTreatedPeriod) {
    this.overallTreatedPeriod = overallTreatedPeriod;
    return this;
  }

  public void unsetOverallTreatedPeriod() {
    this.overallTreatedPeriod = null;
  }

  /** Returns true if field overallTreatedPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetOverallTreatedPeriod() {
    return this.overallTreatedPeriod != null;
  }

  public void setOverallTreatedPeriodIsSet(boolean value) {
    if (!value) {
      this.overallTreatedPeriod = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((FRStatusCode)value);
      }
      break;

    case STATUS_COMMENT:
      if (value == null) {
        unsetStatusComment();
      } else {
        setStatusComment((String)value);
      }
      break;

    case OCCUPANCY_OF_ROOMS:
      if (value == null) {
        unsetOccupancyOfRooms();
      } else {
        setOccupancyOfRooms((Map<String,List<FRRoomOccupancy>>)value);
      }
      break;

    case OVERALL_TREATED_PERIOD:
      if (value == null) {
        unsetOverallTreatedPeriod();
      } else {
        setOverallTreatedPeriod((FRPeriod)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case STATUS_COMMENT:
      return getStatusComment();

    case OCCUPANCY_OF_ROOMS:
      return getOccupancyOfRooms();

    case OVERALL_TREATED_PERIOD:
      return getOverallTreatedPeriod();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case STATUS_COMMENT:
      return isSetStatusComment();
    case OCCUPANCY_OF_ROOMS:
      return isSetOccupancyOfRooms();
    case OVERALL_TREATED_PERIOD:
      return isSetOverallTreatedPeriod();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FROccupancyReply)
      return this.equals((FROccupancyReply)that);
    return false;
  }

  public boolean equals(FROccupancyReply that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_statusComment = true && this.isSetStatusComment();
    boolean that_present_statusComment = true && that.isSetStatusComment();
    if (this_present_statusComment || that_present_statusComment) {
      if (!(this_present_statusComment && that_present_statusComment))
        return false;
      if (!this.statusComment.equals(that.statusComment))
        return false;
    }

    boolean this_present_occupancyOfRooms = true && this.isSetOccupancyOfRooms();
    boolean that_present_occupancyOfRooms = true && that.isSetOccupancyOfRooms();
    if (this_present_occupancyOfRooms || that_present_occupancyOfRooms) {
      if (!(this_present_occupancyOfRooms && that_present_occupancyOfRooms))
        return false;
      if (!this.occupancyOfRooms.equals(that.occupancyOfRooms))
        return false;
    }

    boolean this_present_overallTreatedPeriod = true && this.isSetOverallTreatedPeriod();
    boolean that_present_overallTreatedPeriod = true && that.isSetOverallTreatedPeriod();
    if (this_present_overallTreatedPeriod || that_present_overallTreatedPeriod) {
      if (!(this_present_overallTreatedPeriod && that_present_overallTreatedPeriod))
        return false;
      if (!this.overallTreatedPeriod.equals(that.overallTreatedPeriod))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_statusComment = true && (isSetStatusComment());
    list.add(present_statusComment);
    if (present_statusComment)
      list.add(statusComment);

    boolean present_occupancyOfRooms = true && (isSetOccupancyOfRooms());
    list.add(present_occupancyOfRooms);
    if (present_occupancyOfRooms)
      list.add(occupancyOfRooms);

    boolean present_overallTreatedPeriod = true && (isSetOverallTreatedPeriod());
    list.add(present_overallTreatedPeriod);
    if (present_overallTreatedPeriod)
      list.add(overallTreatedPeriod);

    return list.hashCode();
  }

  @Override
  public int compareTo(FROccupancyReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusComment()).compareTo(other.isSetStatusComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusComment, other.statusComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupancyOfRooms()).compareTo(other.isSetOccupancyOfRooms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupancyOfRooms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupancyOfRooms, other.occupancyOfRooms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverallTreatedPeriod()).compareTo(other.isSetOverallTreatedPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverallTreatedPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overallTreatedPeriod, other.overallTreatedPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FROccupancyReply(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetStatusComment()) {
      if (!first) sb.append(", ");
      sb.append("statusComment:");
      if (this.statusComment == null) {
        sb.append("null");
      } else {
        sb.append(this.statusComment);
      }
      first = false;
    }
    if (isSetOccupancyOfRooms()) {
      if (!first) sb.append(", ");
      sb.append("occupancyOfRooms:");
      if (this.occupancyOfRooms == null) {
        sb.append("null");
      } else {
        sb.append(this.occupancyOfRooms);
      }
      first = false;
    }
    if (isSetOverallTreatedPeriod()) {
      if (!first) sb.append(", ");
      sb.append("overallTreatedPeriod:");
      if (this.overallTreatedPeriod == null) {
        sb.append("null");
      } else {
        sb.append(this.overallTreatedPeriod);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (overallTreatedPeriod != null) {
      overallTreatedPeriod.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FROccupancyReplyStandardSchemeFactory implements SchemeFactory {
    public FROccupancyReplyStandardScheme getScheme() {
      return new FROccupancyReplyStandardScheme();
    }
  }

  private static class FROccupancyReplyStandardScheme extends StandardScheme<FROccupancyReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FROccupancyReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = org.pocketcampus.plugin.freeroom.shared.FRStatusCode.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusComment = iprot.readString();
              struct.setStatusCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OCCUPANCY_OF_ROOMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.occupancyOfRooms = new HashMap<String,List<FRRoomOccupancy>>(2*_map16.size);
                String _key17;
                List<FRRoomOccupancy> _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                    _val18 = new ArrayList<FRRoomOccupancy>(_list20.size);
                    FRRoomOccupancy _elem21;
                    for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                    {
                      _elem21 = new FRRoomOccupancy();
                      _elem21.read(iprot);
                      _val18.add(_elem21);
                    }
                    iprot.readListEnd();
                  }
                  struct.occupancyOfRooms.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setOccupancyOfRoomsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OVERALL_TREATED_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.overallTreatedPeriod = new FRPeriod();
              struct.overallTreatedPeriod.read(iprot);
              struct.setOverallTreatedPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FROccupancyReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.statusComment != null) {
        if (struct.isSetStatusComment()) {
          oprot.writeFieldBegin(STATUS_COMMENT_FIELD_DESC);
          oprot.writeString(struct.statusComment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.occupancyOfRooms != null) {
        if (struct.isSetOccupancyOfRooms()) {
          oprot.writeFieldBegin(OCCUPANCY_OF_ROOMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.occupancyOfRooms.size()));
            for (Map.Entry<String, List<FRRoomOccupancy>> _iter23 : struct.occupancyOfRooms.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter23.getValue().size()));
                for (FRRoomOccupancy _iter24 : _iter23.getValue())
                {
                  _iter24.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.overallTreatedPeriod != null) {
        if (struct.isSetOverallTreatedPeriod()) {
          oprot.writeFieldBegin(OVERALL_TREATED_PERIOD_FIELD_DESC);
          struct.overallTreatedPeriod.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FROccupancyReplyTupleSchemeFactory implements SchemeFactory {
    public FROccupancyReplyTupleScheme getScheme() {
      return new FROccupancyReplyTupleScheme();
    }
  }

  private static class FROccupancyReplyTupleScheme extends TupleScheme<FROccupancyReply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FROccupancyReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetStatusComment()) {
        optionals.set(0);
      }
      if (struct.isSetOccupancyOfRooms()) {
        optionals.set(1);
      }
      if (struct.isSetOverallTreatedPeriod()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatusComment()) {
        oprot.writeString(struct.statusComment);
      }
      if (struct.isSetOccupancyOfRooms()) {
        {
          oprot.writeI32(struct.occupancyOfRooms.size());
          for (Map.Entry<String, List<FRRoomOccupancy>> _iter25 : struct.occupancyOfRooms.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            {
              oprot.writeI32(_iter25.getValue().size());
              for (FRRoomOccupancy _iter26 : _iter25.getValue())
              {
                _iter26.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetOverallTreatedPeriod()) {
        struct.overallTreatedPeriod.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FROccupancyReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = org.pocketcampus.plugin.freeroom.shared.FRStatusCode.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.statusComment = iprot.readString();
        struct.setStatusCommentIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.occupancyOfRooms = new HashMap<String,List<FRRoomOccupancy>>(2*_map27.size);
          String _key28;
          List<FRRoomOccupancy> _val29;
          for (int _i30 = 0; _i30 < _map27.size; ++_i30)
          {
            _key28 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val29 = new ArrayList<FRRoomOccupancy>(_list31.size);
              FRRoomOccupancy _elem32;
              for (int _i33 = 0; _i33 < _list31.size; ++_i33)
              {
                _elem32 = new FRRoomOccupancy();
                _elem32.read(iprot);
                _val29.add(_elem32);
              }
            }
            struct.occupancyOfRooms.put(_key28, _val29);
          }
        }
        struct.setOccupancyOfRoomsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.overallTreatedPeriod = new FRPeriod();
        struct.overallTreatedPeriod.read(iprot);
        struct.setOverallTreatedPeriodIsSet(true);
      }
    }
  }

}

