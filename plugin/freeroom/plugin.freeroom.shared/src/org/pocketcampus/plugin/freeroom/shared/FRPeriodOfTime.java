/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FRPeriodOfTime implements org.apache.thrift.TBase<FRPeriodOfTime, FRPeriodOfTime._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FRPeriodOfTime");

  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField START_HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("startHour", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField END_HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("endHour", org.apache.thrift.protocol.TType.I32, (short)3);

  private FRDay day; // required
  private int startHour; // required
  private int endHour; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FRDay
     */
    DAY((short)1, "day"),
    START_HOUR((short)2, "startHour"),
    END_HOUR((short)3, "endHour");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DAY
          return DAY;
        case 2: // START_HOUR
          return START_HOUR;
        case 3: // END_HOUR
          return END_HOUR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTHOUR_ISSET_ID = 0;
  private static final int __ENDHOUR_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FRDay.class)));
    tmpMap.put(_Fields.START_HOUR, new org.apache.thrift.meta_data.FieldMetaData("startHour", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_HOUR, new org.apache.thrift.meta_data.FieldMetaData("endHour", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FRPeriodOfTime.class, metaDataMap);
  }

  public FRPeriodOfTime() {
  }

  public FRPeriodOfTime(
    FRDay day,
    int startHour,
    int endHour)
  {
    this();
    this.day = day;
    this.startHour = startHour;
    setStartHourIsSet(true);
    this.endHour = endHour;
    setEndHourIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FRPeriodOfTime(FRPeriodOfTime other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetDay()) {
      this.day = other.day;
    }
    this.startHour = other.startHour;
    this.endHour = other.endHour;
  }

  public FRPeriodOfTime deepCopy() {
    return new FRPeriodOfTime(this);
  }

  @Override
  public void clear() {
    this.day = null;
    setStartHourIsSet(false);
    this.startHour = 0;
    setEndHourIsSet(false);
    this.endHour = 0;
  }

  /**
   * 
   * @see FRDay
   */
  public FRDay getDay() {
    return this.day;
  }

  /**
   * 
   * @see FRDay
   */
  public FRPeriodOfTime setDay(FRDay day) {
    this.day = day;
    return this;
  }

  public void unsetDay() {
    this.day = null;
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return this.day != null;
  }

  public void setDayIsSet(boolean value) {
    if (!value) {
      this.day = null;
    }
  }

  public int getStartHour() {
    return this.startHour;
  }

  public FRPeriodOfTime setStartHour(int startHour) {
    this.startHour = startHour;
    setStartHourIsSet(true);
    return this;
  }

  public void unsetStartHour() {
    __isset_bit_vector.clear(__STARTHOUR_ISSET_ID);
  }

  /** Returns true if field startHour is set (has been assigned a value) and false otherwise */
  public boolean isSetStartHour() {
    return __isset_bit_vector.get(__STARTHOUR_ISSET_ID);
  }

  public void setStartHourIsSet(boolean value) {
    __isset_bit_vector.set(__STARTHOUR_ISSET_ID, value);
  }

  public int getEndHour() {
    return this.endHour;
  }

  public FRPeriodOfTime setEndHour(int endHour) {
    this.endHour = endHour;
    setEndHourIsSet(true);
    return this;
  }

  public void unsetEndHour() {
    __isset_bit_vector.clear(__ENDHOUR_ISSET_ID);
  }

  /** Returns true if field endHour is set (has been assigned a value) and false otherwise */
  public boolean isSetEndHour() {
    return __isset_bit_vector.get(__ENDHOUR_ISSET_ID);
  }

  public void setEndHourIsSet(boolean value) {
    __isset_bit_vector.set(__ENDHOUR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((FRDay)value);
      }
      break;

    case START_HOUR:
      if (value == null) {
        unsetStartHour();
      } else {
        setStartHour((Integer)value);
      }
      break;

    case END_HOUR:
      if (value == null) {
        unsetEndHour();
      } else {
        setEndHour((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DAY:
      return getDay();

    case START_HOUR:
      return Integer.valueOf(getStartHour());

    case END_HOUR:
      return Integer.valueOf(getEndHour());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DAY:
      return isSetDay();
    case START_HOUR:
      return isSetStartHour();
    case END_HOUR:
      return isSetEndHour();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FRPeriodOfTime)
      return this.equals((FRPeriodOfTime)that);
    return false;
  }

  public boolean equals(FRPeriodOfTime that) {
    if (that == null)
      return false;

    boolean this_present_day = true && this.isSetDay();
    boolean that_present_day = true && that.isSetDay();
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }

    boolean this_present_startHour = true;
    boolean that_present_startHour = true;
    if (this_present_startHour || that_present_startHour) {
      if (!(this_present_startHour && that_present_startHour))
        return false;
      if (this.startHour != that.startHour)
        return false;
    }

    boolean this_present_endHour = true;
    boolean that_present_endHour = true;
    if (this_present_endHour || that_present_endHour) {
      if (!(this_present_endHour && that_present_endHour))
        return false;
      if (this.endHour != that.endHour)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_day = true && (isSetDay());
    builder.append(present_day);
    if (present_day)
      builder.append(day.getValue());

    boolean present_startHour = true;
    builder.append(present_startHour);
    if (present_startHour)
      builder.append(startHour);

    boolean present_endHour = true;
    builder.append(present_endHour);
    if (present_endHour)
      builder.append(endHour);

    return builder.toHashCode();
  }

  public int compareTo(FRPeriodOfTime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FRPeriodOfTime typedOther = (FRPeriodOfTime)other;

    lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, typedOther.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartHour()).compareTo(typedOther.isSetStartHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startHour, typedOther.startHour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndHour()).compareTo(typedOther.isSetEndHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endHour, typedOther.endHour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // DAY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.day = FRDay.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // START_HOUR
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.startHour = iprot.readI32();
            setStartHourIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // END_HOUR
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.endHour = iprot.readI32();
            setEndHourIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetStartHour()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startHour' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetEndHour()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endHour' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.day != null) {
      oprot.writeFieldBegin(DAY_FIELD_DESC);
      oprot.writeI32(this.day.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(START_HOUR_FIELD_DESC);
    oprot.writeI32(this.startHour);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_HOUR_FIELD_DESC);
    oprot.writeI32(this.endHour);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FRPeriodOfTime(");
    boolean first = true;

    sb.append("day:");
    if (this.day == null) {
      sb.append("null");
    } else {
      sb.append(this.day);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startHour:");
    sb.append(this.startHour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endHour:");
    sb.append(this.endHour);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (day == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'day' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'startHour' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endHour' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

