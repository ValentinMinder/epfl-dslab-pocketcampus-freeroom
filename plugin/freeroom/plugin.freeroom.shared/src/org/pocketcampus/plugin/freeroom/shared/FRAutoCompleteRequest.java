/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-8")
public class FRAutoCompleteRequest implements org.apache.thrift.TBase<FRAutoCompleteRequest, FRAutoCompleteRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FRAutoCompleteRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FRAutoCompleteRequest");

  private static final org.apache.thrift.protocol.TField CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("constraint", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FORBIDDEN_ROOMS_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("forbiddenRoomsUID", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField USER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("userGroup", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXACT_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("exactString", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField USER_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("userLanguage", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FRAutoCompleteRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FRAutoCompleteRequestTupleSchemeFactory());
  }

  private String constraint; // required
  private Set<String> forbiddenRoomsUID; // optional
  private int userGroup; // required
  private boolean exactString; // optional
  private String userLanguage; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONSTRAINT((short)1, "constraint"),
    FORBIDDEN_ROOMS_UID((short)2, "forbiddenRoomsUID"),
    USER_GROUP((short)3, "userGroup"),
    EXACT_STRING((short)4, "exactString"),
    USER_LANGUAGE((short)5, "userLanguage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONSTRAINT
          return CONSTRAINT;
        case 2: // FORBIDDEN_ROOMS_UID
          return FORBIDDEN_ROOMS_UID;
        case 3: // USER_GROUP
          return USER_GROUP;
        case 4: // EXACT_STRING
          return EXACT_STRING;
        case 5: // USER_LANGUAGE
          return USER_LANGUAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERGROUP_ISSET_ID = 0;
  private static final int __EXACTSTRING_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FORBIDDEN_ROOMS_UID,_Fields.EXACT_STRING,_Fields.USER_LANGUAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("constraint", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORBIDDEN_ROOMS_UID, new org.apache.thrift.meta_data.FieldMetaData("forbiddenRoomsUID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("userGroup", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXACT_STRING, new org.apache.thrift.meta_data.FieldMetaData("exactString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USER_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("userLanguage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FRAutoCompleteRequest.class, metaDataMap);
  }

  public FRAutoCompleteRequest() {
  }

  public FRAutoCompleteRequest(
    String constraint,
    int userGroup)
  {
    this();
    this.constraint = constraint;
    this.userGroup = userGroup;
    setUserGroupIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FRAutoCompleteRequest(FRAutoCompleteRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConstraint()) {
      this.constraint = other.constraint;
    }
    if (other.isSetForbiddenRoomsUID()) {
      Set<String> __this__forbiddenRoomsUID = new HashSet<String>(other.forbiddenRoomsUID);
      this.forbiddenRoomsUID = __this__forbiddenRoomsUID;
    }
    this.userGroup = other.userGroup;
    this.exactString = other.exactString;
    if (other.isSetUserLanguage()) {
      this.userLanguage = other.userLanguage;
    }
  }

  public FRAutoCompleteRequest deepCopy() {
    return new FRAutoCompleteRequest(this);
  }

  @Override
  public void clear() {
    this.constraint = null;
    this.forbiddenRoomsUID = null;
    setUserGroupIsSet(false);
    this.userGroup = 0;
    setExactStringIsSet(false);
    this.exactString = false;
    this.userLanguage = null;
  }

  public String getConstraint() {
    return this.constraint;
  }

  public FRAutoCompleteRequest setConstraint(String constraint) {
    this.constraint = constraint;
    return this;
  }

  public void unsetConstraint() {
    this.constraint = null;
  }

  /** Returns true if field constraint is set (has been assigned a value) and false otherwise */
  public boolean isSetConstraint() {
    return this.constraint != null;
  }

  public void setConstraintIsSet(boolean value) {
    if (!value) {
      this.constraint = null;
    }
  }

  public int getForbiddenRoomsUIDSize() {
    return (this.forbiddenRoomsUID == null) ? 0 : this.forbiddenRoomsUID.size();
  }

  public java.util.Iterator<String> getForbiddenRoomsUIDIterator() {
    return (this.forbiddenRoomsUID == null) ? null : this.forbiddenRoomsUID.iterator();
  }

  public void addToForbiddenRoomsUID(String elem) {
    if (this.forbiddenRoomsUID == null) {
      this.forbiddenRoomsUID = new HashSet<String>();
    }
    this.forbiddenRoomsUID.add(elem);
  }

  public Set<String> getForbiddenRoomsUID() {
    return this.forbiddenRoomsUID;
  }

  public FRAutoCompleteRequest setForbiddenRoomsUID(Set<String> forbiddenRoomsUID) {
    this.forbiddenRoomsUID = forbiddenRoomsUID;
    return this;
  }

  public void unsetForbiddenRoomsUID() {
    this.forbiddenRoomsUID = null;
  }

  /** Returns true if field forbiddenRoomsUID is set (has been assigned a value) and false otherwise */
  public boolean isSetForbiddenRoomsUID() {
    return this.forbiddenRoomsUID != null;
  }

  public void setForbiddenRoomsUIDIsSet(boolean value) {
    if (!value) {
      this.forbiddenRoomsUID = null;
    }
  }

  public int getUserGroup() {
    return this.userGroup;
  }

  public FRAutoCompleteRequest setUserGroup(int userGroup) {
    this.userGroup = userGroup;
    setUserGroupIsSet(true);
    return this;
  }

  public void unsetUserGroup() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERGROUP_ISSET_ID);
  }

  /** Returns true if field userGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetUserGroup() {
    return EncodingUtils.testBit(__isset_bitfield, __USERGROUP_ISSET_ID);
  }

  public void setUserGroupIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERGROUP_ISSET_ID, value);
  }

  public boolean isExactString() {
    return this.exactString;
  }

  public FRAutoCompleteRequest setExactString(boolean exactString) {
    this.exactString = exactString;
    setExactStringIsSet(true);
    return this;
  }

  public void unsetExactString() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXACTSTRING_ISSET_ID);
  }

  /** Returns true if field exactString is set (has been assigned a value) and false otherwise */
  public boolean isSetExactString() {
    return EncodingUtils.testBit(__isset_bitfield, __EXACTSTRING_ISSET_ID);
  }

  public void setExactStringIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXACTSTRING_ISSET_ID, value);
  }

  public String getUserLanguage() {
    return this.userLanguage;
  }

  public FRAutoCompleteRequest setUserLanguage(String userLanguage) {
    this.userLanguage = userLanguage;
    return this;
  }

  public void unsetUserLanguage() {
    this.userLanguage = null;
  }

  /** Returns true if field userLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLanguage() {
    return this.userLanguage != null;
  }

  public void setUserLanguageIsSet(boolean value) {
    if (!value) {
      this.userLanguage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONSTRAINT:
      if (value == null) {
        unsetConstraint();
      } else {
        setConstraint((String)value);
      }
      break;

    case FORBIDDEN_ROOMS_UID:
      if (value == null) {
        unsetForbiddenRoomsUID();
      } else {
        setForbiddenRoomsUID((Set<String>)value);
      }
      break;

    case USER_GROUP:
      if (value == null) {
        unsetUserGroup();
      } else {
        setUserGroup((Integer)value);
      }
      break;

    case EXACT_STRING:
      if (value == null) {
        unsetExactString();
      } else {
        setExactString((Boolean)value);
      }
      break;

    case USER_LANGUAGE:
      if (value == null) {
        unsetUserLanguage();
      } else {
        setUserLanguage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONSTRAINT:
      return getConstraint();

    case FORBIDDEN_ROOMS_UID:
      return getForbiddenRoomsUID();

    case USER_GROUP:
      return Integer.valueOf(getUserGroup());

    case EXACT_STRING:
      return Boolean.valueOf(isExactString());

    case USER_LANGUAGE:
      return getUserLanguage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONSTRAINT:
      return isSetConstraint();
    case FORBIDDEN_ROOMS_UID:
      return isSetForbiddenRoomsUID();
    case USER_GROUP:
      return isSetUserGroup();
    case EXACT_STRING:
      return isSetExactString();
    case USER_LANGUAGE:
      return isSetUserLanguage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FRAutoCompleteRequest)
      return this.equals((FRAutoCompleteRequest)that);
    return false;
  }

  public boolean equals(FRAutoCompleteRequest that) {
    if (that == null)
      return false;

    boolean this_present_constraint = true && this.isSetConstraint();
    boolean that_present_constraint = true && that.isSetConstraint();
    if (this_present_constraint || that_present_constraint) {
      if (!(this_present_constraint && that_present_constraint))
        return false;
      if (!this.constraint.equals(that.constraint))
        return false;
    }

    boolean this_present_forbiddenRoomsUID = true && this.isSetForbiddenRoomsUID();
    boolean that_present_forbiddenRoomsUID = true && that.isSetForbiddenRoomsUID();
    if (this_present_forbiddenRoomsUID || that_present_forbiddenRoomsUID) {
      if (!(this_present_forbiddenRoomsUID && that_present_forbiddenRoomsUID))
        return false;
      if (!this.forbiddenRoomsUID.equals(that.forbiddenRoomsUID))
        return false;
    }

    boolean this_present_userGroup = true;
    boolean that_present_userGroup = true;
    if (this_present_userGroup || that_present_userGroup) {
      if (!(this_present_userGroup && that_present_userGroup))
        return false;
      if (this.userGroup != that.userGroup)
        return false;
    }

    boolean this_present_exactString = true && this.isSetExactString();
    boolean that_present_exactString = true && that.isSetExactString();
    if (this_present_exactString || that_present_exactString) {
      if (!(this_present_exactString && that_present_exactString))
        return false;
      if (this.exactString != that.exactString)
        return false;
    }

    boolean this_present_userLanguage = true && this.isSetUserLanguage();
    boolean that_present_userLanguage = true && that.isSetUserLanguage();
    if (this_present_userLanguage || that_present_userLanguage) {
      if (!(this_present_userLanguage && that_present_userLanguage))
        return false;
      if (!this.userLanguage.equals(that.userLanguage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_constraint = true && (isSetConstraint());
    list.add(present_constraint);
    if (present_constraint)
      list.add(constraint);

    boolean present_forbiddenRoomsUID = true && (isSetForbiddenRoomsUID());
    list.add(present_forbiddenRoomsUID);
    if (present_forbiddenRoomsUID)
      list.add(forbiddenRoomsUID);

    boolean present_userGroup = true;
    list.add(present_userGroup);
    if (present_userGroup)
      list.add(userGroup);

    boolean present_exactString = true && (isSetExactString());
    list.add(present_exactString);
    if (present_exactString)
      list.add(exactString);

    boolean present_userLanguage = true && (isSetUserLanguage());
    list.add(present_userLanguage);
    if (present_userLanguage)
      list.add(userLanguage);

    return list.hashCode();
  }

  @Override
  public int compareTo(FRAutoCompleteRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConstraint()).compareTo(other.isSetConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraint, other.constraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForbiddenRoomsUID()).compareTo(other.isSetForbiddenRoomsUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForbiddenRoomsUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forbiddenRoomsUID, other.forbiddenRoomsUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserGroup()).compareTo(other.isSetUserGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userGroup, other.userGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExactString()).compareTo(other.isSetExactString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExactString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exactString, other.exactString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLanguage()).compareTo(other.isSetUserLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLanguage, other.userLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FRAutoCompleteRequest(");
    boolean first = true;

    sb.append("constraint:");
    if (this.constraint == null) {
      sb.append("null");
    } else {
      sb.append(this.constraint);
    }
    first = false;
    if (isSetForbiddenRoomsUID()) {
      if (!first) sb.append(", ");
      sb.append("forbiddenRoomsUID:");
      if (this.forbiddenRoomsUID == null) {
        sb.append("null");
      } else {
        sb.append(this.forbiddenRoomsUID);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("userGroup:");
    sb.append(this.userGroup);
    first = false;
    if (isSetExactString()) {
      if (!first) sb.append(", ");
      sb.append("exactString:");
      sb.append(this.exactString);
      first = false;
    }
    if (isSetUserLanguage()) {
      if (!first) sb.append(", ");
      sb.append("userLanguage:");
      if (this.userLanguage == null) {
        sb.append("null");
      } else {
        sb.append(this.userLanguage);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (constraint == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'constraint' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'userGroup' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FRAutoCompleteRequestStandardSchemeFactory implements SchemeFactory {
    public FRAutoCompleteRequestStandardScheme getScheme() {
      return new FRAutoCompleteRequestStandardScheme();
    }
  }

  private static class FRAutoCompleteRequestStandardScheme extends StandardScheme<FRAutoCompleteRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FRAutoCompleteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.constraint = iprot.readString();
              struct.setConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORBIDDEN_ROOMS_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set34 = iprot.readSetBegin();
                struct.forbiddenRoomsUID = new HashSet<String>(2*_set34.size);
                String _elem35;
                for (int _i36 = 0; _i36 < _set34.size; ++_i36)
                {
                  _elem35 = iprot.readString();
                  struct.forbiddenRoomsUID.add(_elem35);
                }
                iprot.readSetEnd();
              }
              struct.setForbiddenRoomsUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userGroup = iprot.readI32();
              struct.setUserGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXACT_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.exactString = iprot.readBool();
              struct.setExactStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userLanguage = iprot.readString();
              struct.setUserLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserGroup()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userGroup' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FRAutoCompleteRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.constraint != null) {
        oprot.writeFieldBegin(CONSTRAINT_FIELD_DESC);
        oprot.writeString(struct.constraint);
        oprot.writeFieldEnd();
      }
      if (struct.forbiddenRoomsUID != null) {
        if (struct.isSetForbiddenRoomsUID()) {
          oprot.writeFieldBegin(FORBIDDEN_ROOMS_UID_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.forbiddenRoomsUID.size()));
            for (String _iter37 : struct.forbiddenRoomsUID)
            {
              oprot.writeString(_iter37);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(USER_GROUP_FIELD_DESC);
      oprot.writeI32(struct.userGroup);
      oprot.writeFieldEnd();
      if (struct.isSetExactString()) {
        oprot.writeFieldBegin(EXACT_STRING_FIELD_DESC);
        oprot.writeBool(struct.exactString);
        oprot.writeFieldEnd();
      }
      if (struct.userLanguage != null) {
        if (struct.isSetUserLanguage()) {
          oprot.writeFieldBegin(USER_LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.userLanguage);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FRAutoCompleteRequestTupleSchemeFactory implements SchemeFactory {
    public FRAutoCompleteRequestTupleScheme getScheme() {
      return new FRAutoCompleteRequestTupleScheme();
    }
  }

  private static class FRAutoCompleteRequestTupleScheme extends TupleScheme<FRAutoCompleteRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FRAutoCompleteRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.constraint);
      oprot.writeI32(struct.userGroup);
      BitSet optionals = new BitSet();
      if (struct.isSetForbiddenRoomsUID()) {
        optionals.set(0);
      }
      if (struct.isSetExactString()) {
        optionals.set(1);
      }
      if (struct.isSetUserLanguage()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetForbiddenRoomsUID()) {
        {
          oprot.writeI32(struct.forbiddenRoomsUID.size());
          for (String _iter38 : struct.forbiddenRoomsUID)
          {
            oprot.writeString(_iter38);
          }
        }
      }
      if (struct.isSetExactString()) {
        oprot.writeBool(struct.exactString);
      }
      if (struct.isSetUserLanguage()) {
        oprot.writeString(struct.userLanguage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FRAutoCompleteRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.constraint = iprot.readString();
      struct.setConstraintIsSet(true);
      struct.userGroup = iprot.readI32();
      struct.setUserGroupIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set39 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.forbiddenRoomsUID = new HashSet<String>(2*_set39.size);
          String _elem40;
          for (int _i41 = 0; _i41 < _set39.size; ++_i41)
          {
            _elem40 = iprot.readString();
            struct.forbiddenRoomsUID.add(_elem40);
          }
        }
        struct.setForbiddenRoomsUIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exactString = iprot.readBool();
        struct.setExactStringIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userLanguage = iprot.readString();
        struct.setUserLanguageIsSet(true);
      }
    }
  }

}

