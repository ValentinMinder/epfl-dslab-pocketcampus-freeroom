/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-8")
public class FRRoomOccupancy implements org.apache.thrift.TBase<FRRoomOccupancy, FRRoomOccupancy._Fields>, java.io.Serializable, Cloneable, Comparable<FRRoomOccupancy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FRRoomOccupancy");

  private static final org.apache.thrift.protocol.TField ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("room", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField OCCUPANCY_FIELD_DESC = new org.apache.thrift.protocol.TField("occupancy", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IS_OCCUPIED_AT_LEAST_ONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("isOccupiedAtLeastOnce", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_FREE_AT_LEAST_ONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("isFreeAtLeastOnce", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField TREATED_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("treatedPeriod", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField RATIO_WORST_CASE_PROBABLE_OCCUPANCY_FIELD_DESC = new org.apache.thrift.protocol.TField("ratioWorstCaseProbableOccupancy", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FRRoomOccupancyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FRRoomOccupancyTupleSchemeFactory());
  }

  private FRRoom room; // required
  private List<FRPeriodOccupation> occupancy; // required
  private boolean isOccupiedAtLeastOnce; // required
  private boolean isFreeAtLeastOnce; // required
  private FRPeriod treatedPeriod; // required
  private double ratioWorstCaseProbableOccupancy; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROOM((short)1, "room"),
    OCCUPANCY((short)2, "occupancy"),
    IS_OCCUPIED_AT_LEAST_ONCE((short)3, "isOccupiedAtLeastOnce"),
    IS_FREE_AT_LEAST_ONCE((short)4, "isFreeAtLeastOnce"),
    TREATED_PERIOD((short)5, "treatedPeriod"),
    RATIO_WORST_CASE_PROBABLE_OCCUPANCY((short)6, "ratioWorstCaseProbableOccupancy");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROOM
          return ROOM;
        case 2: // OCCUPANCY
          return OCCUPANCY;
        case 3: // IS_OCCUPIED_AT_LEAST_ONCE
          return IS_OCCUPIED_AT_LEAST_ONCE;
        case 4: // IS_FREE_AT_LEAST_ONCE
          return IS_FREE_AT_LEAST_ONCE;
        case 5: // TREATED_PERIOD
          return TREATED_PERIOD;
        case 6: // RATIO_WORST_CASE_PROBABLE_OCCUPANCY
          return RATIO_WORST_CASE_PROBABLE_OCCUPANCY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISOCCUPIEDATLEASTONCE_ISSET_ID = 0;
  private static final int __ISFREEATLEASTONCE_ISSET_ID = 1;
  private static final int __RATIOWORSTCASEPROBABLEOCCUPANCY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RATIO_WORST_CASE_PROBABLE_OCCUPANCY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROOM, new org.apache.thrift.meta_data.FieldMetaData("room", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRRoom.class)));
    tmpMap.put(_Fields.OCCUPANCY, new org.apache.thrift.meta_data.FieldMetaData("occupancy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRPeriodOccupation.class))));
    tmpMap.put(_Fields.IS_OCCUPIED_AT_LEAST_ONCE, new org.apache.thrift.meta_data.FieldMetaData("isOccupiedAtLeastOnce", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FREE_AT_LEAST_ONCE, new org.apache.thrift.meta_data.FieldMetaData("isFreeAtLeastOnce", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TREATED_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("treatedPeriod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRPeriod.class)));
    tmpMap.put(_Fields.RATIO_WORST_CASE_PROBABLE_OCCUPANCY, new org.apache.thrift.meta_data.FieldMetaData("ratioWorstCaseProbableOccupancy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FRRoomOccupancy.class, metaDataMap);
  }

  public FRRoomOccupancy() {
  }

  public FRRoomOccupancy(
    FRRoom room,
    List<FRPeriodOccupation> occupancy,
    boolean isOccupiedAtLeastOnce,
    boolean isFreeAtLeastOnce,
    FRPeriod treatedPeriod)
  {
    this();
    this.room = room;
    this.occupancy = occupancy;
    this.isOccupiedAtLeastOnce = isOccupiedAtLeastOnce;
    setIsOccupiedAtLeastOnceIsSet(true);
    this.isFreeAtLeastOnce = isFreeAtLeastOnce;
    setIsFreeAtLeastOnceIsSet(true);
    this.treatedPeriod = treatedPeriod;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FRRoomOccupancy(FRRoomOccupancy other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRoom()) {
      this.room = new FRRoom(other.room);
    }
    if (other.isSetOccupancy()) {
      List<FRPeriodOccupation> __this__occupancy = new ArrayList<FRPeriodOccupation>(other.occupancy.size());
      for (FRPeriodOccupation other_element : other.occupancy) {
        __this__occupancy.add(new FRPeriodOccupation(other_element));
      }
      this.occupancy = __this__occupancy;
    }
    this.isOccupiedAtLeastOnce = other.isOccupiedAtLeastOnce;
    this.isFreeAtLeastOnce = other.isFreeAtLeastOnce;
    if (other.isSetTreatedPeriod()) {
      this.treatedPeriod = new FRPeriod(other.treatedPeriod);
    }
    this.ratioWorstCaseProbableOccupancy = other.ratioWorstCaseProbableOccupancy;
  }

  public FRRoomOccupancy deepCopy() {
    return new FRRoomOccupancy(this);
  }

  @Override
  public void clear() {
    this.room = null;
    this.occupancy = null;
    setIsOccupiedAtLeastOnceIsSet(false);
    this.isOccupiedAtLeastOnce = false;
    setIsFreeAtLeastOnceIsSet(false);
    this.isFreeAtLeastOnce = false;
    this.treatedPeriod = null;
    setRatioWorstCaseProbableOccupancyIsSet(false);
    this.ratioWorstCaseProbableOccupancy = 0.0;
  }

  public FRRoom getRoom() {
    return this.room;
  }

  public FRRoomOccupancy setRoom(FRRoom room) {
    this.room = room;
    return this;
  }

  public void unsetRoom() {
    this.room = null;
  }

  /** Returns true if field room is set (has been assigned a value) and false otherwise */
  public boolean isSetRoom() {
    return this.room != null;
  }

  public void setRoomIsSet(boolean value) {
    if (!value) {
      this.room = null;
    }
  }

  public int getOccupancySize() {
    return (this.occupancy == null) ? 0 : this.occupancy.size();
  }

  public java.util.Iterator<FRPeriodOccupation> getOccupancyIterator() {
    return (this.occupancy == null) ? null : this.occupancy.iterator();
  }

  public void addToOccupancy(FRPeriodOccupation elem) {
    if (this.occupancy == null) {
      this.occupancy = new ArrayList<FRPeriodOccupation>();
    }
    this.occupancy.add(elem);
  }

  public List<FRPeriodOccupation> getOccupancy() {
    return this.occupancy;
  }

  public FRRoomOccupancy setOccupancy(List<FRPeriodOccupation> occupancy) {
    this.occupancy = occupancy;
    return this;
  }

  public void unsetOccupancy() {
    this.occupancy = null;
  }

  /** Returns true if field occupancy is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupancy() {
    return this.occupancy != null;
  }

  public void setOccupancyIsSet(boolean value) {
    if (!value) {
      this.occupancy = null;
    }
  }

  public boolean isIsOccupiedAtLeastOnce() {
    return this.isOccupiedAtLeastOnce;
  }

  public FRRoomOccupancy setIsOccupiedAtLeastOnce(boolean isOccupiedAtLeastOnce) {
    this.isOccupiedAtLeastOnce = isOccupiedAtLeastOnce;
    setIsOccupiedAtLeastOnceIsSet(true);
    return this;
  }

  public void unsetIsOccupiedAtLeastOnce() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOCCUPIEDATLEASTONCE_ISSET_ID);
  }

  /** Returns true if field isOccupiedAtLeastOnce is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOccupiedAtLeastOnce() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOCCUPIEDATLEASTONCE_ISSET_ID);
  }

  public void setIsOccupiedAtLeastOnceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOCCUPIEDATLEASTONCE_ISSET_ID, value);
  }

  public boolean isIsFreeAtLeastOnce() {
    return this.isFreeAtLeastOnce;
  }

  public FRRoomOccupancy setIsFreeAtLeastOnce(boolean isFreeAtLeastOnce) {
    this.isFreeAtLeastOnce = isFreeAtLeastOnce;
    setIsFreeAtLeastOnceIsSet(true);
    return this;
  }

  public void unsetIsFreeAtLeastOnce() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFREEATLEASTONCE_ISSET_ID);
  }

  /** Returns true if field isFreeAtLeastOnce is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFreeAtLeastOnce() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFREEATLEASTONCE_ISSET_ID);
  }

  public void setIsFreeAtLeastOnceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFREEATLEASTONCE_ISSET_ID, value);
  }

  public FRPeriod getTreatedPeriod() {
    return this.treatedPeriod;
  }

  public FRRoomOccupancy setTreatedPeriod(FRPeriod treatedPeriod) {
    this.treatedPeriod = treatedPeriod;
    return this;
  }

  public void unsetTreatedPeriod() {
    this.treatedPeriod = null;
  }

  /** Returns true if field treatedPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetTreatedPeriod() {
    return this.treatedPeriod != null;
  }

  public void setTreatedPeriodIsSet(boolean value) {
    if (!value) {
      this.treatedPeriod = null;
    }
  }

  public double getRatioWorstCaseProbableOccupancy() {
    return this.ratioWorstCaseProbableOccupancy;
  }

  public FRRoomOccupancy setRatioWorstCaseProbableOccupancy(double ratioWorstCaseProbableOccupancy) {
    this.ratioWorstCaseProbableOccupancy = ratioWorstCaseProbableOccupancy;
    setRatioWorstCaseProbableOccupancyIsSet(true);
    return this;
  }

  public void unsetRatioWorstCaseProbableOccupancy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATIOWORSTCASEPROBABLEOCCUPANCY_ISSET_ID);
  }

  /** Returns true if field ratioWorstCaseProbableOccupancy is set (has been assigned a value) and false otherwise */
  public boolean isSetRatioWorstCaseProbableOccupancy() {
    return EncodingUtils.testBit(__isset_bitfield, __RATIOWORSTCASEPROBABLEOCCUPANCY_ISSET_ID);
  }

  public void setRatioWorstCaseProbableOccupancyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATIOWORSTCASEPROBABLEOCCUPANCY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROOM:
      if (value == null) {
        unsetRoom();
      } else {
        setRoom((FRRoom)value);
      }
      break;

    case OCCUPANCY:
      if (value == null) {
        unsetOccupancy();
      } else {
        setOccupancy((List<FRPeriodOccupation>)value);
      }
      break;

    case IS_OCCUPIED_AT_LEAST_ONCE:
      if (value == null) {
        unsetIsOccupiedAtLeastOnce();
      } else {
        setIsOccupiedAtLeastOnce((Boolean)value);
      }
      break;

    case IS_FREE_AT_LEAST_ONCE:
      if (value == null) {
        unsetIsFreeAtLeastOnce();
      } else {
        setIsFreeAtLeastOnce((Boolean)value);
      }
      break;

    case TREATED_PERIOD:
      if (value == null) {
        unsetTreatedPeriod();
      } else {
        setTreatedPeriod((FRPeriod)value);
      }
      break;

    case RATIO_WORST_CASE_PROBABLE_OCCUPANCY:
      if (value == null) {
        unsetRatioWorstCaseProbableOccupancy();
      } else {
        setRatioWorstCaseProbableOccupancy((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROOM:
      return getRoom();

    case OCCUPANCY:
      return getOccupancy();

    case IS_OCCUPIED_AT_LEAST_ONCE:
      return Boolean.valueOf(isIsOccupiedAtLeastOnce());

    case IS_FREE_AT_LEAST_ONCE:
      return Boolean.valueOf(isIsFreeAtLeastOnce());

    case TREATED_PERIOD:
      return getTreatedPeriod();

    case RATIO_WORST_CASE_PROBABLE_OCCUPANCY:
      return Double.valueOf(getRatioWorstCaseProbableOccupancy());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROOM:
      return isSetRoom();
    case OCCUPANCY:
      return isSetOccupancy();
    case IS_OCCUPIED_AT_LEAST_ONCE:
      return isSetIsOccupiedAtLeastOnce();
    case IS_FREE_AT_LEAST_ONCE:
      return isSetIsFreeAtLeastOnce();
    case TREATED_PERIOD:
      return isSetTreatedPeriod();
    case RATIO_WORST_CASE_PROBABLE_OCCUPANCY:
      return isSetRatioWorstCaseProbableOccupancy();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FRRoomOccupancy)
      return this.equals((FRRoomOccupancy)that);
    return false;
  }

  public boolean equals(FRRoomOccupancy that) {
    if (that == null)
      return false;

    boolean this_present_room = true && this.isSetRoom();
    boolean that_present_room = true && that.isSetRoom();
    if (this_present_room || that_present_room) {
      if (!(this_present_room && that_present_room))
        return false;
      if (!this.room.equals(that.room))
        return false;
    }

    boolean this_present_occupancy = true && this.isSetOccupancy();
    boolean that_present_occupancy = true && that.isSetOccupancy();
    if (this_present_occupancy || that_present_occupancy) {
      if (!(this_present_occupancy && that_present_occupancy))
        return false;
      if (!this.occupancy.equals(that.occupancy))
        return false;
    }

    boolean this_present_isOccupiedAtLeastOnce = true;
    boolean that_present_isOccupiedAtLeastOnce = true;
    if (this_present_isOccupiedAtLeastOnce || that_present_isOccupiedAtLeastOnce) {
      if (!(this_present_isOccupiedAtLeastOnce && that_present_isOccupiedAtLeastOnce))
        return false;
      if (this.isOccupiedAtLeastOnce != that.isOccupiedAtLeastOnce)
        return false;
    }

    boolean this_present_isFreeAtLeastOnce = true;
    boolean that_present_isFreeAtLeastOnce = true;
    if (this_present_isFreeAtLeastOnce || that_present_isFreeAtLeastOnce) {
      if (!(this_present_isFreeAtLeastOnce && that_present_isFreeAtLeastOnce))
        return false;
      if (this.isFreeAtLeastOnce != that.isFreeAtLeastOnce)
        return false;
    }

    boolean this_present_treatedPeriod = true && this.isSetTreatedPeriod();
    boolean that_present_treatedPeriod = true && that.isSetTreatedPeriod();
    if (this_present_treatedPeriod || that_present_treatedPeriod) {
      if (!(this_present_treatedPeriod && that_present_treatedPeriod))
        return false;
      if (!this.treatedPeriod.equals(that.treatedPeriod))
        return false;
    }

    boolean this_present_ratioWorstCaseProbableOccupancy = true && this.isSetRatioWorstCaseProbableOccupancy();
    boolean that_present_ratioWorstCaseProbableOccupancy = true && that.isSetRatioWorstCaseProbableOccupancy();
    if (this_present_ratioWorstCaseProbableOccupancy || that_present_ratioWorstCaseProbableOccupancy) {
      if (!(this_present_ratioWorstCaseProbableOccupancy && that_present_ratioWorstCaseProbableOccupancy))
        return false;
      if (this.ratioWorstCaseProbableOccupancy != that.ratioWorstCaseProbableOccupancy)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_room = true && (isSetRoom());
    list.add(present_room);
    if (present_room)
      list.add(room);

    boolean present_occupancy = true && (isSetOccupancy());
    list.add(present_occupancy);
    if (present_occupancy)
      list.add(occupancy);

    boolean present_isOccupiedAtLeastOnce = true;
    list.add(present_isOccupiedAtLeastOnce);
    if (present_isOccupiedAtLeastOnce)
      list.add(isOccupiedAtLeastOnce);

    boolean present_isFreeAtLeastOnce = true;
    list.add(present_isFreeAtLeastOnce);
    if (present_isFreeAtLeastOnce)
      list.add(isFreeAtLeastOnce);

    boolean present_treatedPeriod = true && (isSetTreatedPeriod());
    list.add(present_treatedPeriod);
    if (present_treatedPeriod)
      list.add(treatedPeriod);

    boolean present_ratioWorstCaseProbableOccupancy = true && (isSetRatioWorstCaseProbableOccupancy());
    list.add(present_ratioWorstCaseProbableOccupancy);
    if (present_ratioWorstCaseProbableOccupancy)
      list.add(ratioWorstCaseProbableOccupancy);

    return list.hashCode();
  }

  @Override
  public int compareTo(FRRoomOccupancy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRoom()).compareTo(other.isSetRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.room, other.room);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupancy()).compareTo(other.isSetOccupancy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupancy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupancy, other.occupancy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOccupiedAtLeastOnce()).compareTo(other.isSetIsOccupiedAtLeastOnce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOccupiedAtLeastOnce()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOccupiedAtLeastOnce, other.isOccupiedAtLeastOnce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFreeAtLeastOnce()).compareTo(other.isSetIsFreeAtLeastOnce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFreeAtLeastOnce()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFreeAtLeastOnce, other.isFreeAtLeastOnce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreatedPeriod()).compareTo(other.isSetTreatedPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreatedPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treatedPeriod, other.treatedPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatioWorstCaseProbableOccupancy()).compareTo(other.isSetRatioWorstCaseProbableOccupancy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatioWorstCaseProbableOccupancy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratioWorstCaseProbableOccupancy, other.ratioWorstCaseProbableOccupancy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FRRoomOccupancy(");
    boolean first = true;

    sb.append("room:");
    if (this.room == null) {
      sb.append("null");
    } else {
      sb.append(this.room);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occupancy:");
    if (this.occupancy == null) {
      sb.append("null");
    } else {
      sb.append(this.occupancy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOccupiedAtLeastOnce:");
    sb.append(this.isOccupiedAtLeastOnce);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFreeAtLeastOnce:");
    sb.append(this.isFreeAtLeastOnce);
    first = false;
    if (!first) sb.append(", ");
    sb.append("treatedPeriod:");
    if (this.treatedPeriod == null) {
      sb.append("null");
    } else {
      sb.append(this.treatedPeriod);
    }
    first = false;
    if (isSetRatioWorstCaseProbableOccupancy()) {
      if (!first) sb.append(", ");
      sb.append("ratioWorstCaseProbableOccupancy:");
      sb.append(this.ratioWorstCaseProbableOccupancy);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (room == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'room' was not present! Struct: " + toString());
    }
    if (occupancy == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'occupancy' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isOccupiedAtLeastOnce' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isFreeAtLeastOnce' because it's a primitive and you chose the non-beans generator.
    if (treatedPeriod == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'treatedPeriod' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (room != null) {
      room.validate();
    }
    if (treatedPeriod != null) {
      treatedPeriod.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FRRoomOccupancyStandardSchemeFactory implements SchemeFactory {
    public FRRoomOccupancyStandardScheme getScheme() {
      return new FRRoomOccupancyStandardScheme();
    }
  }

  private static class FRRoomOccupancyStandardScheme extends StandardScheme<FRRoomOccupancy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FRRoomOccupancy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.room = new FRRoom();
              struct.room.read(iprot);
              struct.setRoomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OCCUPANCY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.occupancy = new ArrayList<FRPeriodOccupation>(_list0.size);
                FRPeriodOccupation _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new FRPeriodOccupation();
                  _elem1.read(iprot);
                  struct.occupancy.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOccupancyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_OCCUPIED_AT_LEAST_ONCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOccupiedAtLeastOnce = iprot.readBool();
              struct.setIsOccupiedAtLeastOnceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_FREE_AT_LEAST_ONCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFreeAtLeastOnce = iprot.readBool();
              struct.setIsFreeAtLeastOnceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TREATED_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.treatedPeriod = new FRPeriod();
              struct.treatedPeriod.read(iprot);
              struct.setTreatedPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RATIO_WORST_CASE_PROBABLE_OCCUPANCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ratioWorstCaseProbableOccupancy = iprot.readDouble();
              struct.setRatioWorstCaseProbableOccupancyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsOccupiedAtLeastOnce()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isOccupiedAtLeastOnce' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsFreeAtLeastOnce()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isFreeAtLeastOnce' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FRRoomOccupancy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.room != null) {
        oprot.writeFieldBegin(ROOM_FIELD_DESC);
        struct.room.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.occupancy != null) {
        oprot.writeFieldBegin(OCCUPANCY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.occupancy.size()));
          for (FRPeriodOccupation _iter3 : struct.occupancy)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_OCCUPIED_AT_LEAST_ONCE_FIELD_DESC);
      oprot.writeBool(struct.isOccupiedAtLeastOnce);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FREE_AT_LEAST_ONCE_FIELD_DESC);
      oprot.writeBool(struct.isFreeAtLeastOnce);
      oprot.writeFieldEnd();
      if (struct.treatedPeriod != null) {
        oprot.writeFieldBegin(TREATED_PERIOD_FIELD_DESC);
        struct.treatedPeriod.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRatioWorstCaseProbableOccupancy()) {
        oprot.writeFieldBegin(RATIO_WORST_CASE_PROBABLE_OCCUPANCY_FIELD_DESC);
        oprot.writeDouble(struct.ratioWorstCaseProbableOccupancy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FRRoomOccupancyTupleSchemeFactory implements SchemeFactory {
    public FRRoomOccupancyTupleScheme getScheme() {
      return new FRRoomOccupancyTupleScheme();
    }
  }

  private static class FRRoomOccupancyTupleScheme extends TupleScheme<FRRoomOccupancy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FRRoomOccupancy struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.room.write(oprot);
      {
        oprot.writeI32(struct.occupancy.size());
        for (FRPeriodOccupation _iter4 : struct.occupancy)
        {
          _iter4.write(oprot);
        }
      }
      oprot.writeBool(struct.isOccupiedAtLeastOnce);
      oprot.writeBool(struct.isFreeAtLeastOnce);
      struct.treatedPeriod.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetRatioWorstCaseProbableOccupancy()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRatioWorstCaseProbableOccupancy()) {
        oprot.writeDouble(struct.ratioWorstCaseProbableOccupancy);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FRRoomOccupancy struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.room = new FRRoom();
      struct.room.read(iprot);
      struct.setRoomIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.occupancy = new ArrayList<FRPeriodOccupation>(_list5.size);
        FRPeriodOccupation _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new FRPeriodOccupation();
          _elem6.read(iprot);
          struct.occupancy.add(_elem6);
        }
      }
      struct.setOccupancyIsSet(true);
      struct.isOccupiedAtLeastOnce = iprot.readBool();
      struct.setIsOccupiedAtLeastOnceIsSet(true);
      struct.isFreeAtLeastOnce = iprot.readBool();
      struct.setIsFreeAtLeastOnceIsSet(true);
      struct.treatedPeriod = new FRPeriod();
      struct.treatedPeriod.read(iprot);
      struct.setTreatedPeriodIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.ratioWorstCaseProbableOccupancy = iprot.readDouble();
        struct.setRatioWorstCaseProbableOccupancyIsSet(true);
      }
    }
  }

}

