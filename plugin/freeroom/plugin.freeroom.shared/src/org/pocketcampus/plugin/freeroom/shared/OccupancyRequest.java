/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OccupancyRequest implements org.apache.thrift.TBase<OccupancyRequest, OccupancyRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OccupancyRequest");

  private static final org.apache.thrift.protocol.TField UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("uids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("period", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private List<String> uids; // required
  private FRPeriod period; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UIDS((short)1, "uids"),
    PERIOD((short)2, "period");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UIDS
          return UIDS;
        case 2: // PERIOD
          return PERIOD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UIDS, new org.apache.thrift.meta_data.FieldMetaData("uids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PERIOD, new org.apache.thrift.meta_data.FieldMetaData("period", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRPeriod.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OccupancyRequest.class, metaDataMap);
  }

  public OccupancyRequest() {
  }

  public OccupancyRequest(
    List<String> uids,
    FRPeriod period)
  {
    this();
    this.uids = uids;
    this.period = period;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OccupancyRequest(OccupancyRequest other) {
    if (other.isSetUids()) {
      List<String> __this__uids = new ArrayList<String>();
      for (String other_element : other.uids) {
        __this__uids.add(other_element);
      }
      this.uids = __this__uids;
    }
    if (other.isSetPeriod()) {
      this.period = new FRPeriod(other.period);
    }
  }

  public OccupancyRequest deepCopy() {
    return new OccupancyRequest(this);
  }

  @Override
  public void clear() {
    this.uids = null;
    this.period = null;
  }

  public int getUidsSize() {
    return (this.uids == null) ? 0 : this.uids.size();
  }

  public java.util.Iterator<String> getUidsIterator() {
    return (this.uids == null) ? null : this.uids.iterator();
  }

  public void addToUids(String elem) {
    if (this.uids == null) {
      this.uids = new ArrayList<String>();
    }
    this.uids.add(elem);
  }

  public List<String> getUids() {
    return this.uids;
  }

  public OccupancyRequest setUids(List<String> uids) {
    this.uids = uids;
    return this;
  }

  public void unsetUids() {
    this.uids = null;
  }

  /** Returns true if field uids is set (has been assigned a value) and false otherwise */
  public boolean isSetUids() {
    return this.uids != null;
  }

  public void setUidsIsSet(boolean value) {
    if (!value) {
      this.uids = null;
    }
  }

  public FRPeriod getPeriod() {
    return this.period;
  }

  public OccupancyRequest setPeriod(FRPeriod period) {
    this.period = period;
    return this;
  }

  public void unsetPeriod() {
    this.period = null;
  }

  /** Returns true if field period is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriod() {
    return this.period != null;
  }

  public void setPeriodIsSet(boolean value) {
    if (!value) {
      this.period = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UIDS:
      if (value == null) {
        unsetUids();
      } else {
        setUids((List<String>)value);
      }
      break;

    case PERIOD:
      if (value == null) {
        unsetPeriod();
      } else {
        setPeriod((FRPeriod)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UIDS:
      return getUids();

    case PERIOD:
      return getPeriod();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UIDS:
      return isSetUids();
    case PERIOD:
      return isSetPeriod();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OccupancyRequest)
      return this.equals((OccupancyRequest)that);
    return false;
  }

  public boolean equals(OccupancyRequest that) {
    if (that == null)
      return false;

    boolean this_present_uids = true && this.isSetUids();
    boolean that_present_uids = true && that.isSetUids();
    if (this_present_uids || that_present_uids) {
      if (!(this_present_uids && that_present_uids))
        return false;
      if (!this.uids.equals(that.uids))
        return false;
    }

    boolean this_present_period = true && this.isSetPeriod();
    boolean that_present_period = true && that.isSetPeriod();
    if (this_present_period || that_present_period) {
      if (!(this_present_period && that_present_period))
        return false;
      if (!this.period.equals(that.period))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_uids = true && (isSetUids());
    builder.append(present_uids);
    if (present_uids)
      builder.append(uids);

    boolean present_period = true && (isSetPeriod());
    builder.append(present_period);
    if (present_period)
      builder.append(period);

    return builder.toHashCode();
  }

  public int compareTo(OccupancyRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OccupancyRequest typedOther = (OccupancyRequest)other;

    lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uids, typedOther.uids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeriod()).compareTo(typedOther.isSetPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.period, typedOther.period);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // UIDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
              this.uids = new ArrayList<String>(_list12.size);
              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
              {
                String _elem14; // required
                _elem14 = iprot.readString();
                this.uids.add(_elem14);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PERIOD
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.period = new FRPeriod();
            this.period.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.uids != null) {
      oprot.writeFieldBegin(UIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.uids.size()));
        for (String _iter15 : this.uids)
        {
          oprot.writeString(_iter15);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.period != null) {
      oprot.writeFieldBegin(PERIOD_FIELD_DESC);
      this.period.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OccupancyRequest(");
    boolean first = true;

    sb.append("uids:");
    if (this.uids == null) {
      sb.append("null");
    } else {
      sb.append(this.uids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("period:");
    if (this.period == null) {
      sb.append("null");
    } else {
      sb.append(this.period);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uids' was not present! Struct: " + toString());
    }
    if (period == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'period' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

