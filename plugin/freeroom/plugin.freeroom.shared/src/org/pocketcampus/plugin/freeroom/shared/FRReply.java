/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FRReply implements org.apache.thrift.TBase<FRReply, FRReply._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FRReply");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statusComment", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OCCUPANCY_OF_ROOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("occupancyOfRooms", org.apache.thrift.protocol.TType.MAP, (short)3);

  private int status; // required
  private String statusComment; // required
  private Map<String,List<Occupancy>> occupancyOfRooms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    STATUS_COMMENT((short)2, "statusComment"),
    OCCUPANCY_OF_ROOMS((short)3, "occupancyOfRooms");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // STATUS_COMMENT
          return STATUS_COMMENT;
        case 3: // OCCUPANCY_OF_ROOMS
          return OCCUPANCY_OF_ROOMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("statusComment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCUPANCY_OF_ROOMS, new org.apache.thrift.meta_data.FieldMetaData("occupancyOfRooms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Occupancy.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FRReply.class, metaDataMap);
  }

  public FRReply() {
  }

  public FRReply(
    int status,
    String statusComment)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
    this.statusComment = statusComment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FRReply(FRReply other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.status = other.status;
    if (other.isSetStatusComment()) {
      this.statusComment = other.statusComment;
    }
    if (other.isSetOccupancyOfRooms()) {
      Map<String,List<Occupancy>> __this__occupancyOfRooms = new HashMap<String,List<Occupancy>>();
      for (Map.Entry<String, List<Occupancy>> other_element : other.occupancyOfRooms.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Occupancy> other_element_value = other_element.getValue();

        String __this__occupancyOfRooms_copy_key = other_element_key;

        List<Occupancy> __this__occupancyOfRooms_copy_value = new ArrayList<Occupancy>();
        for (Occupancy other_element_value_element : other_element_value) {
          __this__occupancyOfRooms_copy_value.add(new Occupancy(other_element_value_element));
        }

        __this__occupancyOfRooms.put(__this__occupancyOfRooms_copy_key, __this__occupancyOfRooms_copy_value);
      }
      this.occupancyOfRooms = __this__occupancyOfRooms;
    }
  }

  public FRReply deepCopy() {
    return new FRReply(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.statusComment = null;
    this.occupancyOfRooms = null;
  }

  public int getStatus() {
    return this.status;
  }

  public FRReply setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public String getStatusComment() {
    return this.statusComment;
  }

  public FRReply setStatusComment(String statusComment) {
    this.statusComment = statusComment;
    return this;
  }

  public void unsetStatusComment() {
    this.statusComment = null;
  }

  /** Returns true if field statusComment is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusComment() {
    return this.statusComment != null;
  }

  public void setStatusCommentIsSet(boolean value) {
    if (!value) {
      this.statusComment = null;
    }
  }

  public int getOccupancyOfRoomsSize() {
    return (this.occupancyOfRooms == null) ? 0 : this.occupancyOfRooms.size();
  }

  public void putToOccupancyOfRooms(String key, List<Occupancy> val) {
    if (this.occupancyOfRooms == null) {
      this.occupancyOfRooms = new HashMap<String,List<Occupancy>>();
    }
    this.occupancyOfRooms.put(key, val);
  }

  public Map<String,List<Occupancy>> getOccupancyOfRooms() {
    return this.occupancyOfRooms;
  }

  public FRReply setOccupancyOfRooms(Map<String,List<Occupancy>> occupancyOfRooms) {
    this.occupancyOfRooms = occupancyOfRooms;
    return this;
  }

  public void unsetOccupancyOfRooms() {
    this.occupancyOfRooms = null;
  }

  /** Returns true if field occupancyOfRooms is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupancyOfRooms() {
    return this.occupancyOfRooms != null;
  }

  public void setOccupancyOfRoomsIsSet(boolean value) {
    if (!value) {
      this.occupancyOfRooms = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case STATUS_COMMENT:
      if (value == null) {
        unsetStatusComment();
      } else {
        setStatusComment((String)value);
      }
      break;

    case OCCUPANCY_OF_ROOMS:
      if (value == null) {
        unsetOccupancyOfRooms();
      } else {
        setOccupancyOfRooms((Map<String,List<Occupancy>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Integer.valueOf(getStatus());

    case STATUS_COMMENT:
      return getStatusComment();

    case OCCUPANCY_OF_ROOMS:
      return getOccupancyOfRooms();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case STATUS_COMMENT:
      return isSetStatusComment();
    case OCCUPANCY_OF_ROOMS:
      return isSetOccupancyOfRooms();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FRReply)
      return this.equals((FRReply)that);
    return false;
  }

  public boolean equals(FRReply that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_statusComment = true && this.isSetStatusComment();
    boolean that_present_statusComment = true && that.isSetStatusComment();
    if (this_present_statusComment || that_present_statusComment) {
      if (!(this_present_statusComment && that_present_statusComment))
        return false;
      if (!this.statusComment.equals(that.statusComment))
        return false;
    }

    boolean this_present_occupancyOfRooms = true && this.isSetOccupancyOfRooms();
    boolean that_present_occupancyOfRooms = true && that.isSetOccupancyOfRooms();
    if (this_present_occupancyOfRooms || that_present_occupancyOfRooms) {
      if (!(this_present_occupancyOfRooms && that_present_occupancyOfRooms))
        return false;
      if (!this.occupancyOfRooms.equals(that.occupancyOfRooms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_statusComment = true && (isSetStatusComment());
    builder.append(present_statusComment);
    if (present_statusComment)
      builder.append(statusComment);

    boolean present_occupancyOfRooms = true && (isSetOccupancyOfRooms());
    builder.append(present_occupancyOfRooms);
    if (present_occupancyOfRooms)
      builder.append(occupancyOfRooms);

    return builder.toHashCode();
  }

  public int compareTo(FRReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FRReply typedOther = (FRReply)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusComment()).compareTo(typedOther.isSetStatusComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusComment, typedOther.statusComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupancyOfRooms()).compareTo(typedOther.isSetOccupancyOfRooms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupancyOfRooms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupancyOfRooms, typedOther.occupancyOfRooms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // STATUS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STATUS_COMMENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.statusComment = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // OCCUPANCY_OF_ROOMS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
              this.occupancyOfRooms = new HashMap<String,List<Occupancy>>(2*_map20.size);
              for (int _i21 = 0; _i21 < _map20.size; ++_i21)
              {
                String _key22; // required
                List<Occupancy> _val23; // required
                _key22 = iprot.readString();
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  _val23 = new ArrayList<Occupancy>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Occupancy _elem26; // required
                    _elem26 = new Occupancy();
                    _elem26.read(iprot);
                    _val23.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                this.occupancyOfRooms.put(_key22, _val23);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    if (this.statusComment != null) {
      oprot.writeFieldBegin(STATUS_COMMENT_FIELD_DESC);
      oprot.writeString(this.statusComment);
      oprot.writeFieldEnd();
    }
    if (this.occupancyOfRooms != null) {
      if (isSetOccupancyOfRooms()) {
        oprot.writeFieldBegin(OCCUPANCY_OF_ROOMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, this.occupancyOfRooms.size()));
          for (Map.Entry<String, List<Occupancy>> _iter27 : this.occupancyOfRooms.entrySet())
          {
            oprot.writeString(_iter27.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter27.getValue().size()));
              for (Occupancy _iter28 : _iter27.getValue())
              {
                _iter28.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FRReply(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusComment:");
    if (this.statusComment == null) {
      sb.append("null");
    } else {
      sb.append(this.statusComment);
    }
    first = false;
    if (isSetOccupancyOfRooms()) {
      if (!first) sb.append(", ");
      sb.append("occupancyOfRooms:");
      if (this.occupancyOfRooms == null) {
        sb.append("null");
      } else {
        sb.append(this.occupancyOfRooms);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (statusComment == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusComment' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

