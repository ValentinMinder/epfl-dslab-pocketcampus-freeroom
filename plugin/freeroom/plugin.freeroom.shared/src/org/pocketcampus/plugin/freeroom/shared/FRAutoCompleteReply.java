/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.freeroom.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-8")
public class FRAutoCompleteReply implements org.apache.thrift.TBase<FRAutoCompleteReply, FRAutoCompleteReply._Fields>, java.io.Serializable, Cloneable, Comparable<FRAutoCompleteReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FRAutoCompleteReply");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statusComment", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LIST_ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("listRoom", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FRAutoCompleteReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FRAutoCompleteReplyTupleSchemeFactory());
  }

  private FRStatusCode status; // required
  private String statusComment; // optional
  private Map<String,List<FRRoom>> listRoom; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FRStatusCode
     */
    STATUS((short)1, "status"),
    STATUS_COMMENT((short)2, "statusComment"),
    LIST_ROOM((short)4, "listRoom");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // STATUS_COMMENT
          return STATUS_COMMENT;
        case 4: // LIST_ROOM
          return LIST_ROOM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STATUS_COMMENT,_Fields.LIST_ROOM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FRStatusCode.class)));
    tmpMap.put(_Fields.STATUS_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("statusComment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIST_ROOM, new org.apache.thrift.meta_data.FieldMetaData("listRoom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FRRoom.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FRAutoCompleteReply.class, metaDataMap);
  }

  public FRAutoCompleteReply() {
  }

  public FRAutoCompleteReply(
    FRStatusCode status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FRAutoCompleteReply(FRAutoCompleteReply other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetStatusComment()) {
      this.statusComment = other.statusComment;
    }
    if (other.isSetListRoom()) {
      Map<String,List<FRRoom>> __this__listRoom = new HashMap<String,List<FRRoom>>(other.listRoom.size());
      for (Map.Entry<String, List<FRRoom>> other_element : other.listRoom.entrySet()) {

        String other_element_key = other_element.getKey();
        List<FRRoom> other_element_value = other_element.getValue();

        String __this__listRoom_copy_key = other_element_key;

        List<FRRoom> __this__listRoom_copy_value = new ArrayList<FRRoom>(other_element_value.size());
        for (FRRoom other_element_value_element : other_element_value) {
          __this__listRoom_copy_value.add(new FRRoom(other_element_value_element));
        }

        __this__listRoom.put(__this__listRoom_copy_key, __this__listRoom_copy_value);
      }
      this.listRoom = __this__listRoom;
    }
  }

  public FRAutoCompleteReply deepCopy() {
    return new FRAutoCompleteReply(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.statusComment = null;
    this.listRoom = null;
  }

  /**
   * 
   * @see FRStatusCode
   */
  public FRStatusCode getStatus() {
    return this.status;
  }

  /**
   * 
   * @see FRStatusCode
   */
  public FRAutoCompleteReply setStatus(FRStatusCode status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getStatusComment() {
    return this.statusComment;
  }

  public FRAutoCompleteReply setStatusComment(String statusComment) {
    this.statusComment = statusComment;
    return this;
  }

  public void unsetStatusComment() {
    this.statusComment = null;
  }

  /** Returns true if field statusComment is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusComment() {
    return this.statusComment != null;
  }

  public void setStatusCommentIsSet(boolean value) {
    if (!value) {
      this.statusComment = null;
    }
  }

  public int getListRoomSize() {
    return (this.listRoom == null) ? 0 : this.listRoom.size();
  }

  public void putToListRoom(String key, List<FRRoom> val) {
    if (this.listRoom == null) {
      this.listRoom = new HashMap<String,List<FRRoom>>();
    }
    this.listRoom.put(key, val);
  }

  public Map<String,List<FRRoom>> getListRoom() {
    return this.listRoom;
  }

  public FRAutoCompleteReply setListRoom(Map<String,List<FRRoom>> listRoom) {
    this.listRoom = listRoom;
    return this;
  }

  public void unsetListRoom() {
    this.listRoom = null;
  }

  /** Returns true if field listRoom is set (has been assigned a value) and false otherwise */
  public boolean isSetListRoom() {
    return this.listRoom != null;
  }

  public void setListRoomIsSet(boolean value) {
    if (!value) {
      this.listRoom = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((FRStatusCode)value);
      }
      break;

    case STATUS_COMMENT:
      if (value == null) {
        unsetStatusComment();
      } else {
        setStatusComment((String)value);
      }
      break;

    case LIST_ROOM:
      if (value == null) {
        unsetListRoom();
      } else {
        setListRoom((Map<String,List<FRRoom>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case STATUS_COMMENT:
      return getStatusComment();

    case LIST_ROOM:
      return getListRoom();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case STATUS_COMMENT:
      return isSetStatusComment();
    case LIST_ROOM:
      return isSetListRoom();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FRAutoCompleteReply)
      return this.equals((FRAutoCompleteReply)that);
    return false;
  }

  public boolean equals(FRAutoCompleteReply that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_statusComment = true && this.isSetStatusComment();
    boolean that_present_statusComment = true && that.isSetStatusComment();
    if (this_present_statusComment || that_present_statusComment) {
      if (!(this_present_statusComment && that_present_statusComment))
        return false;
      if (!this.statusComment.equals(that.statusComment))
        return false;
    }

    boolean this_present_listRoom = true && this.isSetListRoom();
    boolean that_present_listRoom = true && that.isSetListRoom();
    if (this_present_listRoom || that_present_listRoom) {
      if (!(this_present_listRoom && that_present_listRoom))
        return false;
      if (!this.listRoom.equals(that.listRoom))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_statusComment = true && (isSetStatusComment());
    list.add(present_statusComment);
    if (present_statusComment)
      list.add(statusComment);

    boolean present_listRoom = true && (isSetListRoom());
    list.add(present_listRoom);
    if (present_listRoom)
      list.add(listRoom);

    return list.hashCode();
  }

  @Override
  public int compareTo(FRAutoCompleteReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusComment()).compareTo(other.isSetStatusComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusComment, other.statusComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListRoom()).compareTo(other.isSetListRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listRoom, other.listRoom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FRAutoCompleteReply(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetStatusComment()) {
      if (!first) sb.append(", ");
      sb.append("statusComment:");
      if (this.statusComment == null) {
        sb.append("null");
      } else {
        sb.append(this.statusComment);
      }
      first = false;
    }
    if (isSetListRoom()) {
      if (!first) sb.append(", ");
      sb.append("listRoom:");
      if (this.listRoom == null) {
        sb.append("null");
      } else {
        sb.append(this.listRoom);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FRAutoCompleteReplyStandardSchemeFactory implements SchemeFactory {
    public FRAutoCompleteReplyStandardScheme getScheme() {
      return new FRAutoCompleteReplyStandardScheme();
    }
  }

  private static class FRAutoCompleteReplyStandardScheme extends StandardScheme<FRAutoCompleteReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FRAutoCompleteReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = org.pocketcampus.plugin.freeroom.shared.FRStatusCode.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusComment = iprot.readString();
              struct.setStatusCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIST_ROOM
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                struct.listRoom = new HashMap<String,List<FRRoom>>(2*_map42.size);
                String _key43;
                List<FRRoom> _val44;
                for (int _i45 = 0; _i45 < _map42.size; ++_i45)
                {
                  _key43 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                    _val44 = new ArrayList<FRRoom>(_list46.size);
                    FRRoom _elem47;
                    for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                    {
                      _elem47 = new FRRoom();
                      _elem47.read(iprot);
                      _val44.add(_elem47);
                    }
                    iprot.readListEnd();
                  }
                  struct.listRoom.put(_key43, _val44);
                }
                iprot.readMapEnd();
              }
              struct.setListRoomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FRAutoCompleteReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.statusComment != null) {
        if (struct.isSetStatusComment()) {
          oprot.writeFieldBegin(STATUS_COMMENT_FIELD_DESC);
          oprot.writeString(struct.statusComment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.listRoom != null) {
        if (struct.isSetListRoom()) {
          oprot.writeFieldBegin(LIST_ROOM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.listRoom.size()));
            for (Map.Entry<String, List<FRRoom>> _iter49 : struct.listRoom.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter49.getValue().size()));
                for (FRRoom _iter50 : _iter49.getValue())
                {
                  _iter50.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FRAutoCompleteReplyTupleSchemeFactory implements SchemeFactory {
    public FRAutoCompleteReplyTupleScheme getScheme() {
      return new FRAutoCompleteReplyTupleScheme();
    }
  }

  private static class FRAutoCompleteReplyTupleScheme extends TupleScheme<FRAutoCompleteReply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FRAutoCompleteReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetStatusComment()) {
        optionals.set(0);
      }
      if (struct.isSetListRoom()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStatusComment()) {
        oprot.writeString(struct.statusComment);
      }
      if (struct.isSetListRoom()) {
        {
          oprot.writeI32(struct.listRoom.size());
          for (Map.Entry<String, List<FRRoom>> _iter51 : struct.listRoom.entrySet())
          {
            oprot.writeString(_iter51.getKey());
            {
              oprot.writeI32(_iter51.getValue().size());
              for (FRRoom _iter52 : _iter51.getValue())
              {
                _iter52.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FRAutoCompleteReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = org.pocketcampus.plugin.freeroom.shared.FRStatusCode.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.statusComment = iprot.readString();
        struct.setStatusCommentIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map53 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.listRoom = new HashMap<String,List<FRRoom>>(2*_map53.size);
          String _key54;
          List<FRRoom> _val55;
          for (int _i56 = 0; _i56 < _map53.size; ++_i56)
          {
            _key54 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val55 = new ArrayList<FRRoom>(_list57.size);
              FRRoom _elem58;
              for (int _i59 = 0; _i59 < _list57.size; ++_i59)
              {
                _elem58 = new FRRoom();
                _elem58.read(iprot);
                _val55.add(_elem58);
              }
            }
            struct.listRoom.put(_key54, _val55);
          }
        }
        struct.setListRoomIsSet(true);
      }
    }
  }

}

