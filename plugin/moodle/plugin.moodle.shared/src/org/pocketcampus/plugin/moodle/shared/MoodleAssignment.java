/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.moodle.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MoodleAssignment implements org.apache.thrift.TBase<MoodleAssignment, MoodleAssignment._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MoodleAssignment");

  private static final org.apache.thrift.protocol.TField I_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("iId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField I_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("iTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField I_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("iDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField I_COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("iCourse", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField I_POSTING_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("iPostingDate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField I_DUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("iDueDate", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField I_GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("iGrade", org.apache.thrift.protocol.TType.STRING, (short)7);

  public int iId; // required
  public String iTitle; // required
  public String iDesc; // required
  public MoodleCourse iCourse; // required
  public long iPostingDate; // required
  public long iDueDate; // required
  public String iGrade; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_ID((short)1, "iId"),
    I_TITLE((short)2, "iTitle"),
    I_DESC((short)3, "iDesc"),
    I_COURSE((short)4, "iCourse"),
    I_POSTING_DATE((short)5, "iPostingDate"),
    I_DUE_DATE((short)6, "iDueDate"),
    I_GRADE((short)7, "iGrade");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_ID
          return I_ID;
        case 2: // I_TITLE
          return I_TITLE;
        case 3: // I_DESC
          return I_DESC;
        case 4: // I_COURSE
          return I_COURSE;
        case 5: // I_POSTING_DATE
          return I_POSTING_DATE;
        case 6: // I_DUE_DATE
          return I_DUE_DATE;
        case 7: // I_GRADE
          return I_GRADE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IID_ISSET_ID = 0;
  private static final int __IPOSTINGDATE_ISSET_ID = 1;
  private static final int __IDUEDATE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_ID, new org.apache.thrift.meta_data.FieldMetaData("iId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I_TITLE, new org.apache.thrift.meta_data.FieldMetaData("iTitle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_DESC, new org.apache.thrift.meta_data.FieldMetaData("iDesc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_COURSE, new org.apache.thrift.meta_data.FieldMetaData("iCourse", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MoodleCourse.class)));
    tmpMap.put(_Fields.I_POSTING_DATE, new org.apache.thrift.meta_data.FieldMetaData("iPostingDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_DUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("iDueDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_GRADE, new org.apache.thrift.meta_data.FieldMetaData("iGrade", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MoodleAssignment.class, metaDataMap);
  }

  public MoodleAssignment() {
  }

  public MoodleAssignment(
    int iId,
    String iTitle,
    String iDesc,
    MoodleCourse iCourse,
    long iDueDate)
  {
    this();
    this.iId = iId;
    setIIdIsSet(true);
    this.iTitle = iTitle;
    this.iDesc = iDesc;
    this.iCourse = iCourse;
    this.iDueDate = iDueDate;
    setIDueDateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MoodleAssignment(MoodleAssignment other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.iId = other.iId;
    if (other.isSetITitle()) {
      this.iTitle = other.iTitle;
    }
    if (other.isSetIDesc()) {
      this.iDesc = other.iDesc;
    }
    if (other.isSetICourse()) {
      this.iCourse = new MoodleCourse(other.iCourse);
    }
    this.iPostingDate = other.iPostingDate;
    this.iDueDate = other.iDueDate;
    if (other.isSetIGrade()) {
      this.iGrade = other.iGrade;
    }
  }

  public MoodleAssignment deepCopy() {
    return new MoodleAssignment(this);
  }

  @Override
  public void clear() {
    setIIdIsSet(false);
    this.iId = 0;
    this.iTitle = null;
    this.iDesc = null;
    this.iCourse = null;
    setIPostingDateIsSet(false);
    this.iPostingDate = 0;
    setIDueDateIsSet(false);
    this.iDueDate = 0;
    this.iGrade = null;
  }

  public int getIId() {
    return this.iId;
  }

  public MoodleAssignment setIId(int iId) {
    this.iId = iId;
    setIIdIsSet(true);
    return this;
  }

  public void unsetIId() {
    __isset_bit_vector.clear(__IID_ISSET_ID);
  }

  /** Returns true if field iId is set (has been assigned a value) and false otherwise */
  public boolean isSetIId() {
    return __isset_bit_vector.get(__IID_ISSET_ID);
  }

  public void setIIdIsSet(boolean value) {
    __isset_bit_vector.set(__IID_ISSET_ID, value);
  }

  public String getITitle() {
    return this.iTitle;
  }

  public MoodleAssignment setITitle(String iTitle) {
    this.iTitle = iTitle;
    return this;
  }

  public void unsetITitle() {
    this.iTitle = null;
  }

  /** Returns true if field iTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetITitle() {
    return this.iTitle != null;
  }

  public void setITitleIsSet(boolean value) {
    if (!value) {
      this.iTitle = null;
    }
  }

  public String getIDesc() {
    return this.iDesc;
  }

  public MoodleAssignment setIDesc(String iDesc) {
    this.iDesc = iDesc;
    return this;
  }

  public void unsetIDesc() {
    this.iDesc = null;
  }

  /** Returns true if field iDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetIDesc() {
    return this.iDesc != null;
  }

  public void setIDescIsSet(boolean value) {
    if (!value) {
      this.iDesc = null;
    }
  }

  public MoodleCourse getICourse() {
    return this.iCourse;
  }

  public MoodleAssignment setICourse(MoodleCourse iCourse) {
    this.iCourse = iCourse;
    return this;
  }

  public void unsetICourse() {
    this.iCourse = null;
  }

  /** Returns true if field iCourse is set (has been assigned a value) and false otherwise */
  public boolean isSetICourse() {
    return this.iCourse != null;
  }

  public void setICourseIsSet(boolean value) {
    if (!value) {
      this.iCourse = null;
    }
  }

  public long getIPostingDate() {
    return this.iPostingDate;
  }

  public MoodleAssignment setIPostingDate(long iPostingDate) {
    this.iPostingDate = iPostingDate;
    setIPostingDateIsSet(true);
    return this;
  }

  public void unsetIPostingDate() {
    __isset_bit_vector.clear(__IPOSTINGDATE_ISSET_ID);
  }

  /** Returns true if field iPostingDate is set (has been assigned a value) and false otherwise */
  public boolean isSetIPostingDate() {
    return __isset_bit_vector.get(__IPOSTINGDATE_ISSET_ID);
  }

  public void setIPostingDateIsSet(boolean value) {
    __isset_bit_vector.set(__IPOSTINGDATE_ISSET_ID, value);
  }

  public long getIDueDate() {
    return this.iDueDate;
  }

  public MoodleAssignment setIDueDate(long iDueDate) {
    this.iDueDate = iDueDate;
    setIDueDateIsSet(true);
    return this;
  }

  public void unsetIDueDate() {
    __isset_bit_vector.clear(__IDUEDATE_ISSET_ID);
  }

  /** Returns true if field iDueDate is set (has been assigned a value) and false otherwise */
  public boolean isSetIDueDate() {
    return __isset_bit_vector.get(__IDUEDATE_ISSET_ID);
  }

  public void setIDueDateIsSet(boolean value) {
    __isset_bit_vector.set(__IDUEDATE_ISSET_ID, value);
  }

  public String getIGrade() {
    return this.iGrade;
  }

  public MoodleAssignment setIGrade(String iGrade) {
    this.iGrade = iGrade;
    return this;
  }

  public void unsetIGrade() {
    this.iGrade = null;
  }

  /** Returns true if field iGrade is set (has been assigned a value) and false otherwise */
  public boolean isSetIGrade() {
    return this.iGrade != null;
  }

  public void setIGradeIsSet(boolean value) {
    if (!value) {
      this.iGrade = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_ID:
      if (value == null) {
        unsetIId();
      } else {
        setIId((Integer)value);
      }
      break;

    case I_TITLE:
      if (value == null) {
        unsetITitle();
      } else {
        setITitle((String)value);
      }
      break;

    case I_DESC:
      if (value == null) {
        unsetIDesc();
      } else {
        setIDesc((String)value);
      }
      break;

    case I_COURSE:
      if (value == null) {
        unsetICourse();
      } else {
        setICourse((MoodleCourse)value);
      }
      break;

    case I_POSTING_DATE:
      if (value == null) {
        unsetIPostingDate();
      } else {
        setIPostingDate((Long)value);
      }
      break;

    case I_DUE_DATE:
      if (value == null) {
        unsetIDueDate();
      } else {
        setIDueDate((Long)value);
      }
      break;

    case I_GRADE:
      if (value == null) {
        unsetIGrade();
      } else {
        setIGrade((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_ID:
      return Integer.valueOf(getIId());

    case I_TITLE:
      return getITitle();

    case I_DESC:
      return getIDesc();

    case I_COURSE:
      return getICourse();

    case I_POSTING_DATE:
      return Long.valueOf(getIPostingDate());

    case I_DUE_DATE:
      return Long.valueOf(getIDueDate());

    case I_GRADE:
      return getIGrade();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_ID:
      return isSetIId();
    case I_TITLE:
      return isSetITitle();
    case I_DESC:
      return isSetIDesc();
    case I_COURSE:
      return isSetICourse();
    case I_POSTING_DATE:
      return isSetIPostingDate();
    case I_DUE_DATE:
      return isSetIDueDate();
    case I_GRADE:
      return isSetIGrade();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MoodleAssignment)
      return this.equals((MoodleAssignment)that);
    return false;
  }

  public boolean equals(MoodleAssignment that) {
    if (that == null)
      return false;

    boolean this_present_iId = true;
    boolean that_present_iId = true;
    if (this_present_iId || that_present_iId) {
      if (!(this_present_iId && that_present_iId))
        return false;
      if (this.iId != that.iId)
        return false;
    }

    boolean this_present_iTitle = true && this.isSetITitle();
    boolean that_present_iTitle = true && that.isSetITitle();
    if (this_present_iTitle || that_present_iTitle) {
      if (!(this_present_iTitle && that_present_iTitle))
        return false;
      if (!this.iTitle.equals(that.iTitle))
        return false;
    }

    boolean this_present_iDesc = true && this.isSetIDesc();
    boolean that_present_iDesc = true && that.isSetIDesc();
    if (this_present_iDesc || that_present_iDesc) {
      if (!(this_present_iDesc && that_present_iDesc))
        return false;
      if (!this.iDesc.equals(that.iDesc))
        return false;
    }

    boolean this_present_iCourse = true && this.isSetICourse();
    boolean that_present_iCourse = true && that.isSetICourse();
    if (this_present_iCourse || that_present_iCourse) {
      if (!(this_present_iCourse && that_present_iCourse))
        return false;
      if (!this.iCourse.equals(that.iCourse))
        return false;
    }

    boolean this_present_iPostingDate = true && this.isSetIPostingDate();
    boolean that_present_iPostingDate = true && that.isSetIPostingDate();
    if (this_present_iPostingDate || that_present_iPostingDate) {
      if (!(this_present_iPostingDate && that_present_iPostingDate))
        return false;
      if (this.iPostingDate != that.iPostingDate)
        return false;
    }

    boolean this_present_iDueDate = true;
    boolean that_present_iDueDate = true;
    if (this_present_iDueDate || that_present_iDueDate) {
      if (!(this_present_iDueDate && that_present_iDueDate))
        return false;
      if (this.iDueDate != that.iDueDate)
        return false;
    }

    boolean this_present_iGrade = true && this.isSetIGrade();
    boolean that_present_iGrade = true && that.isSetIGrade();
    if (this_present_iGrade || that_present_iGrade) {
      if (!(this_present_iGrade && that_present_iGrade))
        return false;
      if (!this.iGrade.equals(that.iGrade))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_iId = true;
    builder.append(present_iId);
    if (present_iId)
      builder.append(iId);

    boolean present_iTitle = true && (isSetITitle());
    builder.append(present_iTitle);
    if (present_iTitle)
      builder.append(iTitle);

    boolean present_iDesc = true && (isSetIDesc());
    builder.append(present_iDesc);
    if (present_iDesc)
      builder.append(iDesc);

    boolean present_iCourse = true && (isSetICourse());
    builder.append(present_iCourse);
    if (present_iCourse)
      builder.append(iCourse);

    boolean present_iPostingDate = true && (isSetIPostingDate());
    builder.append(present_iPostingDate);
    if (present_iPostingDate)
      builder.append(iPostingDate);

    boolean present_iDueDate = true;
    builder.append(present_iDueDate);
    if (present_iDueDate)
      builder.append(iDueDate);

    boolean present_iGrade = true && (isSetIGrade());
    builder.append(present_iGrade);
    if (present_iGrade)
      builder.append(iGrade);

    return builder.toHashCode();
  }

  public int compareTo(MoodleAssignment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MoodleAssignment typedOther = (MoodleAssignment)other;

    lastComparison = Boolean.valueOf(isSetIId()).compareTo(typedOther.isSetIId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iId, typedOther.iId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetITitle()).compareTo(typedOther.isSetITitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetITitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iTitle, typedOther.iTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDesc()).compareTo(typedOther.isSetIDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iDesc, typedOther.iDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetICourse()).compareTo(typedOther.isSetICourse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetICourse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iCourse, typedOther.iCourse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIPostingDate()).compareTo(typedOther.isSetIPostingDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIPostingDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iPostingDate, typedOther.iPostingDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDueDate()).compareTo(typedOther.isSetIDueDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDueDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iDueDate, typedOther.iDueDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIGrade()).compareTo(typedOther.isSetIGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iGrade, typedOther.iGrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // I_ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.iId = iprot.readI32();
            setIIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // I_TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.iTitle = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // I_DESC
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.iDesc = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // I_COURSE
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.iCourse = new MoodleCourse();
            this.iCourse.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // I_POSTING_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.iPostingDate = iprot.readI64();
            setIPostingDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // I_DUE_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.iDueDate = iprot.readI64();
            setIDueDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // I_GRADE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.iGrade = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetIId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iId' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetIDueDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iDueDate' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(I_ID_FIELD_DESC);
    oprot.writeI32(this.iId);
    oprot.writeFieldEnd();
    if (this.iTitle != null) {
      oprot.writeFieldBegin(I_TITLE_FIELD_DESC);
      oprot.writeString(this.iTitle);
      oprot.writeFieldEnd();
    }
    if (this.iDesc != null) {
      oprot.writeFieldBegin(I_DESC_FIELD_DESC);
      oprot.writeString(this.iDesc);
      oprot.writeFieldEnd();
    }
    if (this.iCourse != null) {
      oprot.writeFieldBegin(I_COURSE_FIELD_DESC);
      this.iCourse.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetIPostingDate()) {
      oprot.writeFieldBegin(I_POSTING_DATE_FIELD_DESC);
      oprot.writeI64(this.iPostingDate);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(I_DUE_DATE_FIELD_DESC);
    oprot.writeI64(this.iDueDate);
    oprot.writeFieldEnd();
    if (this.iGrade != null) {
      if (isSetIGrade()) {
        oprot.writeFieldBegin(I_GRADE_FIELD_DESC);
        oprot.writeString(this.iGrade);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MoodleAssignment(");
    boolean first = true;

    sb.append("iId:");
    sb.append(this.iId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iTitle:");
    if (this.iTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.iTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iDesc:");
    if (this.iDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.iDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iCourse:");
    if (this.iCourse == null) {
      sb.append("null");
    } else {
      sb.append(this.iCourse);
    }
    first = false;
    if (isSetIPostingDate()) {
      if (!first) sb.append(", ");
      sb.append("iPostingDate:");
      sb.append(this.iPostingDate);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("iDueDate:");
    sb.append(this.iDueDate);
    first = false;
    if (isSetIGrade()) {
      if (!first) sb.append(", ");
      sb.append("iGrade:");
      if (this.iGrade == null) {
        sb.append("null");
      } else {
        sb.append(this.iGrade);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'iId' because it's a primitive and you chose the non-beans generator.
    if (iTitle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iTitle' was not present! Struct: " + toString());
    }
    if (iDesc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iDesc' was not present! Struct: " + toString());
    }
    if (iCourse == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iCourse' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'iDueDate' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

