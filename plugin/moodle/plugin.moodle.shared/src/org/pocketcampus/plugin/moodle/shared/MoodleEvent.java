/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.moodle.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MoodleEvent implements org.apache.thrift.TBase<MoodleEvent, MoodleEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MoodleEvent");

  private static final org.apache.thrift.protocol.TField I_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("iId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField I_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("iTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField I_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("iDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField I_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("iType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField I_ASSIGNMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("iAssignment", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField I_USER_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("iUserEvent", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  public int iId; // required
  public String iTitle; // required
  public long iDate; // required
  /**
   * 
   * @see MoodleEventType
   */
  public MoodleEventType iType; // required
  public MoodleAssignment iAssignment; // required
  public MoodleUserEvent iUserEvent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_ID((short)1, "iId"),
    I_TITLE((short)2, "iTitle"),
    I_DATE((short)3, "iDate"),
    /**
     * 
     * @see MoodleEventType
     */
    I_TYPE((short)4, "iType"),
    I_ASSIGNMENT((short)5, "iAssignment"),
    I_USER_EVENT((short)6, "iUserEvent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_ID
          return I_ID;
        case 2: // I_TITLE
          return I_TITLE;
        case 3: // I_DATE
          return I_DATE;
        case 4: // I_TYPE
          return I_TYPE;
        case 5: // I_ASSIGNMENT
          return I_ASSIGNMENT;
        case 6: // I_USER_EVENT
          return I_USER_EVENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IID_ISSET_ID = 0;
  private static final int __IDATE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_ID, new org.apache.thrift.meta_data.FieldMetaData("iId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I_TITLE, new org.apache.thrift.meta_data.FieldMetaData("iTitle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_DATE, new org.apache.thrift.meta_data.FieldMetaData("iDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_TYPE, new org.apache.thrift.meta_data.FieldMetaData("iType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MoodleEventType.class)));
    tmpMap.put(_Fields.I_ASSIGNMENT, new org.apache.thrift.meta_data.FieldMetaData("iAssignment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MoodleAssignment.class)));
    tmpMap.put(_Fields.I_USER_EVENT, new org.apache.thrift.meta_data.FieldMetaData("iUserEvent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MoodleUserEvent.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MoodleEvent.class, metaDataMap);
  }

  public MoodleEvent() {
  }

  public MoodleEvent(
    int iId,
    String iTitle,
    long iDate,
    MoodleEventType iType)
  {
    this();
    this.iId = iId;
    setIIdIsSet(true);
    this.iTitle = iTitle;
    this.iDate = iDate;
    setIDateIsSet(true);
    this.iType = iType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MoodleEvent(MoodleEvent other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.iId = other.iId;
    if (other.isSetITitle()) {
      this.iTitle = other.iTitle;
    }
    this.iDate = other.iDate;
    if (other.isSetIType()) {
      this.iType = other.iType;
    }
    if (other.isSetIAssignment()) {
      this.iAssignment = new MoodleAssignment(other.iAssignment);
    }
    if (other.isSetIUserEvent()) {
      this.iUserEvent = new MoodleUserEvent(other.iUserEvent);
    }
  }

  public MoodleEvent deepCopy() {
    return new MoodleEvent(this);
  }

  @Override
  public void clear() {
    setIIdIsSet(false);
    this.iId = 0;
    this.iTitle = null;
    setIDateIsSet(false);
    this.iDate = 0;
    this.iType = null;
    this.iAssignment = null;
    this.iUserEvent = null;
  }

  public int getIId() {
    return this.iId;
  }

  public MoodleEvent setIId(int iId) {
    this.iId = iId;
    setIIdIsSet(true);
    return this;
  }

  public void unsetIId() {
    __isset_bit_vector.clear(__IID_ISSET_ID);
  }

  /** Returns true if field iId is set (has been assigned a value) and false otherwise */
  public boolean isSetIId() {
    return __isset_bit_vector.get(__IID_ISSET_ID);
  }

  public void setIIdIsSet(boolean value) {
    __isset_bit_vector.set(__IID_ISSET_ID, value);
  }

  public String getITitle() {
    return this.iTitle;
  }

  public MoodleEvent setITitle(String iTitle) {
    this.iTitle = iTitle;
    return this;
  }

  public void unsetITitle() {
    this.iTitle = null;
  }

  /** Returns true if field iTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetITitle() {
    return this.iTitle != null;
  }

  public void setITitleIsSet(boolean value) {
    if (!value) {
      this.iTitle = null;
    }
  }

  public long getIDate() {
    return this.iDate;
  }

  public MoodleEvent setIDate(long iDate) {
    this.iDate = iDate;
    setIDateIsSet(true);
    return this;
  }

  public void unsetIDate() {
    __isset_bit_vector.clear(__IDATE_ISSET_ID);
  }

  /** Returns true if field iDate is set (has been assigned a value) and false otherwise */
  public boolean isSetIDate() {
    return __isset_bit_vector.get(__IDATE_ISSET_ID);
  }

  public void setIDateIsSet(boolean value) {
    __isset_bit_vector.set(__IDATE_ISSET_ID, value);
  }

  /**
   * 
   * @see MoodleEventType
   */
  public MoodleEventType getIType() {
    return this.iType;
  }

  /**
   * 
   * @see MoodleEventType
   */
  public MoodleEvent setIType(MoodleEventType iType) {
    this.iType = iType;
    return this;
  }

  public void unsetIType() {
    this.iType = null;
  }

  /** Returns true if field iType is set (has been assigned a value) and false otherwise */
  public boolean isSetIType() {
    return this.iType != null;
  }

  public void setITypeIsSet(boolean value) {
    if (!value) {
      this.iType = null;
    }
  }

  public MoodleAssignment getIAssignment() {
    return this.iAssignment;
  }

  public MoodleEvent setIAssignment(MoodleAssignment iAssignment) {
    this.iAssignment = iAssignment;
    return this;
  }

  public void unsetIAssignment() {
    this.iAssignment = null;
  }

  /** Returns true if field iAssignment is set (has been assigned a value) and false otherwise */
  public boolean isSetIAssignment() {
    return this.iAssignment != null;
  }

  public void setIAssignmentIsSet(boolean value) {
    if (!value) {
      this.iAssignment = null;
    }
  }

  public MoodleUserEvent getIUserEvent() {
    return this.iUserEvent;
  }

  public MoodleEvent setIUserEvent(MoodleUserEvent iUserEvent) {
    this.iUserEvent = iUserEvent;
    return this;
  }

  public void unsetIUserEvent() {
    this.iUserEvent = null;
  }

  /** Returns true if field iUserEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetIUserEvent() {
    return this.iUserEvent != null;
  }

  public void setIUserEventIsSet(boolean value) {
    if (!value) {
      this.iUserEvent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_ID:
      if (value == null) {
        unsetIId();
      } else {
        setIId((Integer)value);
      }
      break;

    case I_TITLE:
      if (value == null) {
        unsetITitle();
      } else {
        setITitle((String)value);
      }
      break;

    case I_DATE:
      if (value == null) {
        unsetIDate();
      } else {
        setIDate((Long)value);
      }
      break;

    case I_TYPE:
      if (value == null) {
        unsetIType();
      } else {
        setIType((MoodleEventType)value);
      }
      break;

    case I_ASSIGNMENT:
      if (value == null) {
        unsetIAssignment();
      } else {
        setIAssignment((MoodleAssignment)value);
      }
      break;

    case I_USER_EVENT:
      if (value == null) {
        unsetIUserEvent();
      } else {
        setIUserEvent((MoodleUserEvent)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_ID:
      return Integer.valueOf(getIId());

    case I_TITLE:
      return getITitle();

    case I_DATE:
      return Long.valueOf(getIDate());

    case I_TYPE:
      return getIType();

    case I_ASSIGNMENT:
      return getIAssignment();

    case I_USER_EVENT:
      return getIUserEvent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_ID:
      return isSetIId();
    case I_TITLE:
      return isSetITitle();
    case I_DATE:
      return isSetIDate();
    case I_TYPE:
      return isSetIType();
    case I_ASSIGNMENT:
      return isSetIAssignment();
    case I_USER_EVENT:
      return isSetIUserEvent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MoodleEvent)
      return this.equals((MoodleEvent)that);
    return false;
  }

  public boolean equals(MoodleEvent that) {
    if (that == null)
      return false;

    boolean this_present_iId = true;
    boolean that_present_iId = true;
    if (this_present_iId || that_present_iId) {
      if (!(this_present_iId && that_present_iId))
        return false;
      if (this.iId != that.iId)
        return false;
    }

    boolean this_present_iTitle = true && this.isSetITitle();
    boolean that_present_iTitle = true && that.isSetITitle();
    if (this_present_iTitle || that_present_iTitle) {
      if (!(this_present_iTitle && that_present_iTitle))
        return false;
      if (!this.iTitle.equals(that.iTitle))
        return false;
    }

    boolean this_present_iDate = true;
    boolean that_present_iDate = true;
    if (this_present_iDate || that_present_iDate) {
      if (!(this_present_iDate && that_present_iDate))
        return false;
      if (this.iDate != that.iDate)
        return false;
    }

    boolean this_present_iType = true && this.isSetIType();
    boolean that_present_iType = true && that.isSetIType();
    if (this_present_iType || that_present_iType) {
      if (!(this_present_iType && that_present_iType))
        return false;
      if (!this.iType.equals(that.iType))
        return false;
    }

    boolean this_present_iAssignment = true && this.isSetIAssignment();
    boolean that_present_iAssignment = true && that.isSetIAssignment();
    if (this_present_iAssignment || that_present_iAssignment) {
      if (!(this_present_iAssignment && that_present_iAssignment))
        return false;
      if (!this.iAssignment.equals(that.iAssignment))
        return false;
    }

    boolean this_present_iUserEvent = true && this.isSetIUserEvent();
    boolean that_present_iUserEvent = true && that.isSetIUserEvent();
    if (this_present_iUserEvent || that_present_iUserEvent) {
      if (!(this_present_iUserEvent && that_present_iUserEvent))
        return false;
      if (!this.iUserEvent.equals(that.iUserEvent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_iId = true;
    builder.append(present_iId);
    if (present_iId)
      builder.append(iId);

    boolean present_iTitle = true && (isSetITitle());
    builder.append(present_iTitle);
    if (present_iTitle)
      builder.append(iTitle);

    boolean present_iDate = true;
    builder.append(present_iDate);
    if (present_iDate)
      builder.append(iDate);

    boolean present_iType = true && (isSetIType());
    builder.append(present_iType);
    if (present_iType)
      builder.append(iType.getValue());

    boolean present_iAssignment = true && (isSetIAssignment());
    builder.append(present_iAssignment);
    if (present_iAssignment)
      builder.append(iAssignment);

    boolean present_iUserEvent = true && (isSetIUserEvent());
    builder.append(present_iUserEvent);
    if (present_iUserEvent)
      builder.append(iUserEvent);

    return builder.toHashCode();
  }

  public int compareTo(MoodleEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MoodleEvent typedOther = (MoodleEvent)other;

    lastComparison = Boolean.valueOf(isSetIId()).compareTo(typedOther.isSetIId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iId, typedOther.iId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetITitle()).compareTo(typedOther.isSetITitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetITitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iTitle, typedOther.iTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIDate()).compareTo(typedOther.isSetIDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iDate, typedOther.iDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIType()).compareTo(typedOther.isSetIType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iType, typedOther.iType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIAssignment()).compareTo(typedOther.isSetIAssignment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIAssignment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iAssignment, typedOther.iAssignment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIUserEvent()).compareTo(typedOther.isSetIUserEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIUserEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iUserEvent, typedOther.iUserEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // I_ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.iId = iprot.readI32();
            setIIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // I_TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.iTitle = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // I_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.iDate = iprot.readI64();
            setIDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // I_TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.iType = MoodleEventType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // I_ASSIGNMENT
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.iAssignment = new MoodleAssignment();
            this.iAssignment.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // I_USER_EVENT
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.iUserEvent = new MoodleUserEvent();
            this.iUserEvent.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetIId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iId' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetIDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iDate' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(I_ID_FIELD_DESC);
    oprot.writeI32(this.iId);
    oprot.writeFieldEnd();
    if (this.iTitle != null) {
      oprot.writeFieldBegin(I_TITLE_FIELD_DESC);
      oprot.writeString(this.iTitle);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(I_DATE_FIELD_DESC);
    oprot.writeI64(this.iDate);
    oprot.writeFieldEnd();
    if (this.iType != null) {
      oprot.writeFieldBegin(I_TYPE_FIELD_DESC);
      oprot.writeI32(this.iType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.iAssignment != null) {
      if (isSetIAssignment()) {
        oprot.writeFieldBegin(I_ASSIGNMENT_FIELD_DESC);
        this.iAssignment.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.iUserEvent != null) {
      if (isSetIUserEvent()) {
        oprot.writeFieldBegin(I_USER_EVENT_FIELD_DESC);
        this.iUserEvent.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MoodleEvent(");
    boolean first = true;

    sb.append("iId:");
    sb.append(this.iId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iTitle:");
    if (this.iTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.iTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iDate:");
    sb.append(this.iDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iType:");
    if (this.iType == null) {
      sb.append("null");
    } else {
      sb.append(this.iType);
    }
    first = false;
    if (isSetIAssignment()) {
      if (!first) sb.append(", ");
      sb.append("iAssignment:");
      if (this.iAssignment == null) {
        sb.append("null");
      } else {
        sb.append(this.iAssignment);
      }
      first = false;
    }
    if (isSetIUserEvent()) {
      if (!first) sb.append(", ");
      sb.append("iUserEvent:");
      if (this.iUserEvent == null) {
        sb.append("null");
      } else {
        sb.append(this.iUserEvent);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'iId' because it's a primitive and you chose the non-beans generator.
    if (iTitle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iTitle' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'iDate' because it's a primitive and you chose the non-beans generator.
    if (iType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iType' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

