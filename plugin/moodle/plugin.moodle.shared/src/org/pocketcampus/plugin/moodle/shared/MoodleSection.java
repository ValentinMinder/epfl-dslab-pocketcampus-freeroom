/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.moodle.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class MoodleSection implements org.apache.thrift.TBase<MoodleSection, MoodleSection._Fields>, java.io.Serializable, Cloneable, Comparable<MoodleSection> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MoodleSection");

  private static final org.apache.thrift.protocol.TField I_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("iResources", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField I_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("iText", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField I_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("iStartDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField I_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("iEndDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField I_CURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("iCurrent", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MoodleSectionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MoodleSectionTupleSchemeFactory());
  }

  private List<MoodleResource> iResources; // required
  private String iText; // required
  private long iStartDate; // optional
  private long iEndDate; // optional
  private boolean iCurrent; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_RESOURCES((short)1, "iResources"),
    I_TEXT((short)2, "iText"),
    I_START_DATE((short)3, "iStartDate"),
    I_END_DATE((short)4, "iEndDate"),
    I_CURRENT((short)5, "iCurrent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_RESOURCES
          return I_RESOURCES;
        case 2: // I_TEXT
          return I_TEXT;
        case 3: // I_START_DATE
          return I_START_DATE;
        case 4: // I_END_DATE
          return I_END_DATE;
        case 5: // I_CURRENT
          return I_CURRENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISTARTDATE_ISSET_ID = 0;
  private static final int __IENDDATE_ISSET_ID = 1;
  private static final int __ICURRENT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.I_START_DATE,_Fields.I_END_DATE,_Fields.I_CURRENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("iResources", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MoodleResource.class))));
    tmpMap.put(_Fields.I_TEXT, new org.apache.thrift.meta_data.FieldMetaData("iText", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("iStartDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("iEndDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.I_CURRENT, new org.apache.thrift.meta_data.FieldMetaData("iCurrent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MoodleSection.class, metaDataMap);
  }

  public MoodleSection() {
  }

  public MoodleSection(
    List<MoodleResource> iResources,
    String iText)
  {
    this();
    this.iResources = iResources;
    this.iText = iText;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MoodleSection(MoodleSection other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIResources()) {
      List<MoodleResource> __this__iResources = new ArrayList<MoodleResource>(other.iResources.size());
      for (MoodleResource other_element : other.iResources) {
        __this__iResources.add(new MoodleResource(other_element));
      }
      this.iResources = __this__iResources;
    }
    if (other.isSetIText()) {
      this.iText = other.iText;
    }
    this.iStartDate = other.iStartDate;
    this.iEndDate = other.iEndDate;
    this.iCurrent = other.iCurrent;
  }

  public MoodleSection deepCopy() {
    return new MoodleSection(this);
  }

  @Override
  public void clear() {
    this.iResources = null;
    this.iText = null;
    setIStartDateIsSet(false);
    this.iStartDate = 0;
    setIEndDateIsSet(false);
    this.iEndDate = 0;
    setICurrentIsSet(false);
    this.iCurrent = false;
  }

  public int getIResourcesSize() {
    return (this.iResources == null) ? 0 : this.iResources.size();
  }

  public java.util.Iterator<MoodleResource> getIResourcesIterator() {
    return (this.iResources == null) ? null : this.iResources.iterator();
  }

  public void addToIResources(MoodleResource elem) {
    if (this.iResources == null) {
      this.iResources = new ArrayList<MoodleResource>();
    }
    this.iResources.add(elem);
  }

  public List<MoodleResource> getIResources() {
    return this.iResources;
  }

  public MoodleSection setIResources(List<MoodleResource> iResources) {
    this.iResources = iResources;
    return this;
  }

  public void unsetIResources() {
    this.iResources = null;
  }

  /** Returns true if field iResources is set (has been assigned a value) and false otherwise */
  public boolean isSetIResources() {
    return this.iResources != null;
  }

  public void setIResourcesIsSet(boolean value) {
    if (!value) {
      this.iResources = null;
    }
  }

  public String getIText() {
    return this.iText;
  }

  public MoodleSection setIText(String iText) {
    this.iText = iText;
    return this;
  }

  public void unsetIText() {
    this.iText = null;
  }

  /** Returns true if field iText is set (has been assigned a value) and false otherwise */
  public boolean isSetIText() {
    return this.iText != null;
  }

  public void setITextIsSet(boolean value) {
    if (!value) {
      this.iText = null;
    }
  }

  public long getIStartDate() {
    return this.iStartDate;
  }

  public MoodleSection setIStartDate(long iStartDate) {
    this.iStartDate = iStartDate;
    setIStartDateIsSet(true);
    return this;
  }

  public void unsetIStartDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTARTDATE_ISSET_ID);
  }

  /** Returns true if field iStartDate is set (has been assigned a value) and false otherwise */
  public boolean isSetIStartDate() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTARTDATE_ISSET_ID);
  }

  public void setIStartDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTARTDATE_ISSET_ID, value);
  }

  public long getIEndDate() {
    return this.iEndDate;
  }

  public MoodleSection setIEndDate(long iEndDate) {
    this.iEndDate = iEndDate;
    setIEndDateIsSet(true);
    return this;
  }

  public void unsetIEndDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IENDDATE_ISSET_ID);
  }

  /** Returns true if field iEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetIEndDate() {
    return EncodingUtils.testBit(__isset_bitfield, __IENDDATE_ISSET_ID);
  }

  public void setIEndDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IENDDATE_ISSET_ID, value);
  }

  public boolean isICurrent() {
    return this.iCurrent;
  }

  public MoodleSection setICurrent(boolean iCurrent) {
    this.iCurrent = iCurrent;
    setICurrentIsSet(true);
    return this;
  }

  public void unsetICurrent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ICURRENT_ISSET_ID);
  }

  /** Returns true if field iCurrent is set (has been assigned a value) and false otherwise */
  public boolean isSetICurrent() {
    return EncodingUtils.testBit(__isset_bitfield, __ICURRENT_ISSET_ID);
  }

  public void setICurrentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ICURRENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_RESOURCES:
      if (value == null) {
        unsetIResources();
      } else {
        setIResources((List<MoodleResource>)value);
      }
      break;

    case I_TEXT:
      if (value == null) {
        unsetIText();
      } else {
        setIText((String)value);
      }
      break;

    case I_START_DATE:
      if (value == null) {
        unsetIStartDate();
      } else {
        setIStartDate((Long)value);
      }
      break;

    case I_END_DATE:
      if (value == null) {
        unsetIEndDate();
      } else {
        setIEndDate((Long)value);
      }
      break;

    case I_CURRENT:
      if (value == null) {
        unsetICurrent();
      } else {
        setICurrent((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_RESOURCES:
      return getIResources();

    case I_TEXT:
      return getIText();

    case I_START_DATE:
      return Long.valueOf(getIStartDate());

    case I_END_DATE:
      return Long.valueOf(getIEndDate());

    case I_CURRENT:
      return Boolean.valueOf(isICurrent());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_RESOURCES:
      return isSetIResources();
    case I_TEXT:
      return isSetIText();
    case I_START_DATE:
      return isSetIStartDate();
    case I_END_DATE:
      return isSetIEndDate();
    case I_CURRENT:
      return isSetICurrent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MoodleSection)
      return this.equals((MoodleSection)that);
    return false;
  }

  public boolean equals(MoodleSection that) {
    if (that == null)
      return false;

    boolean this_present_iResources = true && this.isSetIResources();
    boolean that_present_iResources = true && that.isSetIResources();
    if (this_present_iResources || that_present_iResources) {
      if (!(this_present_iResources && that_present_iResources))
        return false;
      if (!this.iResources.equals(that.iResources))
        return false;
    }

    boolean this_present_iText = true && this.isSetIText();
    boolean that_present_iText = true && that.isSetIText();
    if (this_present_iText || that_present_iText) {
      if (!(this_present_iText && that_present_iText))
        return false;
      if (!this.iText.equals(that.iText))
        return false;
    }

    boolean this_present_iStartDate = true && this.isSetIStartDate();
    boolean that_present_iStartDate = true && that.isSetIStartDate();
    if (this_present_iStartDate || that_present_iStartDate) {
      if (!(this_present_iStartDate && that_present_iStartDate))
        return false;
      if (this.iStartDate != that.iStartDate)
        return false;
    }

    boolean this_present_iEndDate = true && this.isSetIEndDate();
    boolean that_present_iEndDate = true && that.isSetIEndDate();
    if (this_present_iEndDate || that_present_iEndDate) {
      if (!(this_present_iEndDate && that_present_iEndDate))
        return false;
      if (this.iEndDate != that.iEndDate)
        return false;
    }

    boolean this_present_iCurrent = true && this.isSetICurrent();
    boolean that_present_iCurrent = true && that.isSetICurrent();
    if (this_present_iCurrent || that_present_iCurrent) {
      if (!(this_present_iCurrent && that_present_iCurrent))
        return false;
      if (this.iCurrent != that.iCurrent)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_iResources = true && (isSetIResources());
    list.add(present_iResources);
    if (present_iResources)
      list.add(iResources);

    boolean present_iText = true && (isSetIText());
    list.add(present_iText);
    if (present_iText)
      list.add(iText);

    boolean present_iStartDate = true && (isSetIStartDate());
    list.add(present_iStartDate);
    if (present_iStartDate)
      list.add(iStartDate);

    boolean present_iEndDate = true && (isSetIEndDate());
    list.add(present_iEndDate);
    if (present_iEndDate)
      list.add(iEndDate);

    boolean present_iCurrent = true && (isSetICurrent());
    list.add(present_iCurrent);
    if (present_iCurrent)
      list.add(iCurrent);

    return list.hashCode();
  }

  @Override
  public int compareTo(MoodleSection other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIResources()).compareTo(other.isSetIResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIResources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iResources, other.iResources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIText()).compareTo(other.isSetIText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iText, other.iText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIStartDate()).compareTo(other.isSetIStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iStartDate, other.iStartDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIEndDate()).compareTo(other.isSetIEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iEndDate, other.iEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetICurrent()).compareTo(other.isSetICurrent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetICurrent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iCurrent, other.iCurrent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MoodleSection(");
    boolean first = true;

    sb.append("iResources:");
    if (this.iResources == null) {
      sb.append("null");
    } else {
      sb.append(this.iResources);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iText:");
    if (this.iText == null) {
      sb.append("null");
    } else {
      sb.append(this.iText);
    }
    first = false;
    if (isSetIStartDate()) {
      if (!first) sb.append(", ");
      sb.append("iStartDate:");
      sb.append(this.iStartDate);
      first = false;
    }
    if (isSetIEndDate()) {
      if (!first) sb.append(", ");
      sb.append("iEndDate:");
      sb.append(this.iEndDate);
      first = false;
    }
    if (isSetICurrent()) {
      if (!first) sb.append(", ");
      sb.append("iCurrent:");
      sb.append(this.iCurrent);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (iResources == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iResources' was not present! Struct: " + toString());
    }
    if (iText == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iText' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MoodleSectionStandardSchemeFactory implements SchemeFactory {
    public MoodleSectionStandardScheme getScheme() {
      return new MoodleSectionStandardScheme();
    }
  }

  private static class MoodleSectionStandardScheme extends StandardScheme<MoodleSection> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MoodleSection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // I_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.iResources = new ArrayList<MoodleResource>(_list0.size);
                MoodleResource _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new MoodleResource();
                  _elem1.read(iprot);
                  struct.iResources.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setIResourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // I_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iText = iprot.readString();
              struct.setITextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.iStartDate = iprot.readI64();
              struct.setIStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.iEndDate = iprot.readI64();
              struct.setIEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // I_CURRENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.iCurrent = iprot.readBool();
              struct.setICurrentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MoodleSection struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.iResources != null) {
        oprot.writeFieldBegin(I_RESOURCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.iResources.size()));
          for (MoodleResource _iter3 : struct.iResources)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.iText != null) {
        oprot.writeFieldBegin(I_TEXT_FIELD_DESC);
        oprot.writeString(struct.iText);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIStartDate()) {
        oprot.writeFieldBegin(I_START_DATE_FIELD_DESC);
        oprot.writeI64(struct.iStartDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIEndDate()) {
        oprot.writeFieldBegin(I_END_DATE_FIELD_DESC);
        oprot.writeI64(struct.iEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetICurrent()) {
        oprot.writeFieldBegin(I_CURRENT_FIELD_DESC);
        oprot.writeBool(struct.iCurrent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MoodleSectionTupleSchemeFactory implements SchemeFactory {
    public MoodleSectionTupleScheme getScheme() {
      return new MoodleSectionTupleScheme();
    }
  }

  private static class MoodleSectionTupleScheme extends TupleScheme<MoodleSection> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MoodleSection struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.iResources.size());
        for (MoodleResource _iter4 : struct.iResources)
        {
          _iter4.write(oprot);
        }
      }
      oprot.writeString(struct.iText);
      BitSet optionals = new BitSet();
      if (struct.isSetIStartDate()) {
        optionals.set(0);
      }
      if (struct.isSetIEndDate()) {
        optionals.set(1);
      }
      if (struct.isSetICurrent()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIStartDate()) {
        oprot.writeI64(struct.iStartDate);
      }
      if (struct.isSetIEndDate()) {
        oprot.writeI64(struct.iEndDate);
      }
      if (struct.isSetICurrent()) {
        oprot.writeBool(struct.iCurrent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MoodleSection struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.iResources = new ArrayList<MoodleResource>(_list5.size);
        MoodleResource _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new MoodleResource();
          _elem6.read(iprot);
          struct.iResources.add(_elem6);
        }
      }
      struct.setIResourcesIsSet(true);
      struct.iText = iprot.readString();
      struct.setITextIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.iStartDate = iprot.readI64();
        struct.setIStartDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.iEndDate = iprot.readI64();
        struct.setIEndDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.iCurrent = iprot.readBool();
        struct.setICurrentIsSet(true);
      }
    }
  }

}

