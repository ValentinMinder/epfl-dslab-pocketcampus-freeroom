/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.moodle.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

public class MoodleCoursesResponse2 implements org.apache.thrift.TBase<MoodleCoursesResponse2, MoodleCoursesResponse2._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MoodleCoursesResponse2");

  private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COURSES_FIELD_DESC = new org.apache.thrift.protocol.TField("courses", org.apache.thrift.protocol.TType.LIST, (short)2);

  private MoodleStatusCode2 statusCode; // required
  private List<MoodleCourse2> courses; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see MoodleStatusCode2
     */
    STATUS_CODE((short)1, "statusCode"),
    COURSES((short)2, "courses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS_CODE
          return STATUS_CODE;
        case 2: // COURSES
          return COURSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("statusCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MoodleStatusCode2.class)));
    tmpMap.put(_Fields.COURSES, new org.apache.thrift.meta_data.FieldMetaData("courses", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MoodleCourse2.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MoodleCoursesResponse2.class, metaDataMap);
  }

  public MoodleCoursesResponse2() {
  }

  public MoodleCoursesResponse2(
    MoodleStatusCode2 statusCode,
    List<MoodleCourse2> courses)
  {
    this();
    this.statusCode = statusCode;
    this.courses = courses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MoodleCoursesResponse2(MoodleCoursesResponse2 other) {
    if (other.isSetStatusCode()) {
      this.statusCode = other.statusCode;
    }
    if (other.isSetCourses()) {
      List<MoodleCourse2> __this__courses = new ArrayList<MoodleCourse2>();
      for (MoodleCourse2 other_element : other.courses) {
        __this__courses.add(new MoodleCourse2(other_element));
      }
      this.courses = __this__courses;
    }
  }

  public MoodleCoursesResponse2 deepCopy() {
    return new MoodleCoursesResponse2(this);
  }

  @Override
  public void clear() {
    this.statusCode = null;
    this.courses = null;
  }

  /**
   * 
   * @see MoodleStatusCode2
   */
  public MoodleStatusCode2 getStatusCode() {
    return this.statusCode;
  }

  /**
   * 
   * @see MoodleStatusCode2
   */
  public MoodleCoursesResponse2 setStatusCode(MoodleStatusCode2 statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  public void unsetStatusCode() {
    this.statusCode = null;
  }

  /** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusCode() {
    return this.statusCode != null;
  }

  public void setStatusCodeIsSet(boolean value) {
    if (!value) {
      this.statusCode = null;
    }
  }

  public int getCoursesSize() {
    return (this.courses == null) ? 0 : this.courses.size();
  }

  public java.util.Iterator<MoodleCourse2> getCoursesIterator() {
    return (this.courses == null) ? null : this.courses.iterator();
  }

  public void addToCourses(MoodleCourse2 elem) {
    if (this.courses == null) {
      this.courses = new ArrayList<MoodleCourse2>();
    }
    this.courses.add(elem);
  }

  public List<MoodleCourse2> getCourses() {
    return this.courses;
  }

  public MoodleCoursesResponse2 setCourses(List<MoodleCourse2> courses) {
    this.courses = courses;
    return this;
  }

  public void unsetCourses() {
    this.courses = null;
  }

  /** Returns true if field courses is set (has been assigned a value) and false otherwise */
  public boolean isSetCourses() {
    return this.courses != null;
  }

  public void setCoursesIsSet(boolean value) {
    if (!value) {
      this.courses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS_CODE:
      if (value == null) {
        unsetStatusCode();
      } else {
        setStatusCode((MoodleStatusCode2)value);
      }
      break;

    case COURSES:
      if (value == null) {
        unsetCourses();
      } else {
        setCourses((List<MoodleCourse2>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS_CODE:
      return getStatusCode();

    case COURSES:
      return getCourses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS_CODE:
      return isSetStatusCode();
    case COURSES:
      return isSetCourses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MoodleCoursesResponse2)
      return this.equals((MoodleCoursesResponse2)that);
    return false;
  }

  public boolean equals(MoodleCoursesResponse2 that) {
    if (that == null)
      return false;

    boolean this_present_statusCode = true && this.isSetStatusCode();
    boolean that_present_statusCode = true && that.isSetStatusCode();
    if (this_present_statusCode || that_present_statusCode) {
      if (!(this_present_statusCode && that_present_statusCode))
        return false;
      if (!this.statusCode.equals(that.statusCode))
        return false;
    }

    boolean this_present_courses = true && this.isSetCourses();
    boolean that_present_courses = true && that.isSetCourses();
    if (this_present_courses || that_present_courses) {
      if (!(this_present_courses && that_present_courses))
        return false;
      if (!this.courses.equals(that.courses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_statusCode = true && (isSetStatusCode());
    builder.append(present_statusCode);
    if (present_statusCode)
      builder.append(statusCode.getValue());

    boolean present_courses = true && (isSetCourses());
    builder.append(present_courses);
    if (present_courses)
      builder.append(courses);

    return builder.toHashCode();
  }

  public int compareTo(MoodleCoursesResponse2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MoodleCoursesResponse2 typedOther = (MoodleCoursesResponse2)other;

    lastComparison = Boolean.valueOf(isSetStatusCode()).compareTo(typedOther.isSetStatusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCode, typedOther.statusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourses()).compareTo(typedOther.isSetCourses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courses, typedOther.courses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // STATUS_CODE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.statusCode = MoodleStatusCode2.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COURSES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
              this.courses = new ArrayList<MoodleCourse2>(_list20.size);
              for (int _i21 = 0; _i21 < _list20.size; ++_i21)
              {
                MoodleCourse2 _elem22; // required
                _elem22 = new MoodleCourse2();
                _elem22.read(iprot);
                this.courses.add(_elem22);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.statusCode != null) {
      oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
      oprot.writeI32(this.statusCode.getValue());
      oprot.writeFieldEnd();
    }
    if (this.courses != null) {
      oprot.writeFieldBegin(COURSES_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.courses.size()));
        for (MoodleCourse2 _iter23 : this.courses)
        {
          _iter23.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MoodleCoursesResponse2(");
    boolean first = true;

    sb.append("statusCode:");
    if (this.statusCode == null) {
      sb.append("null");
    } else {
      sb.append(this.statusCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courses:");
    if (this.courses == null) {
      sb.append("null");
    } else {
      sb.append(this.courses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (statusCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusCode' was not present! Struct: " + toString());
    }
    if (courses == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'courses' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

