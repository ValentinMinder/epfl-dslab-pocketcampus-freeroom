/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventPool implements org.apache.thrift.TBase<EventPool, EventPool._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventPool");

  private static final org.apache.thrift.protocol.TField POOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poolId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField POOL_PICTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("poolPicture", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POOL_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("poolTitle", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField POOL_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("poolPlace", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField POOL_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("poolDetails", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DISABLE_STAR_FIELD_DESC = new org.apache.thrift.protocol.TField("disableStar", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField DISABLE_FILTER_BY_CATEG_FIELD_DESC = new org.apache.thrift.protocol.TField("disableFilterByCateg", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField DISABLE_FILTER_BY_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("disableFilterByTags", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField ENABLE_SCAN_FIELD_DESC = new org.apache.thrift.protocol.TField("enableScan", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField NO_RESULT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("noResultText", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CHILDREN_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenEvents", org.apache.thrift.protocol.TType.LIST, (short)15);

  public long poolId; // required
  public String poolPicture; // required
  public String poolTitle; // required
  public String poolPlace; // required
  public String poolDetails; // required
  public boolean disableStar; // required
  public boolean disableFilterByCateg; // required
  public boolean disableFilterByTags; // required
  public boolean enableScan; // required
  public String noResultText; // required
  public List<Long> childrenEvents; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POOL_ID((short)1, "poolId"),
    POOL_PICTURE((short)5, "poolPicture"),
    POOL_TITLE((short)6, "poolTitle"),
    POOL_PLACE((short)7, "poolPlace"),
    POOL_DETAILS((short)9, "poolDetails"),
    DISABLE_STAR((short)10, "disableStar"),
    DISABLE_FILTER_BY_CATEG((short)11, "disableFilterByCateg"),
    DISABLE_FILTER_BY_TAGS((short)12, "disableFilterByTags"),
    ENABLE_SCAN((short)13, "enableScan"),
    NO_RESULT_TEXT((short)14, "noResultText"),
    CHILDREN_EVENTS((short)15, "childrenEvents");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POOL_ID
          return POOL_ID;
        case 5: // POOL_PICTURE
          return POOL_PICTURE;
        case 6: // POOL_TITLE
          return POOL_TITLE;
        case 7: // POOL_PLACE
          return POOL_PLACE;
        case 9: // POOL_DETAILS
          return POOL_DETAILS;
        case 10: // DISABLE_STAR
          return DISABLE_STAR;
        case 11: // DISABLE_FILTER_BY_CATEG
          return DISABLE_FILTER_BY_CATEG;
        case 12: // DISABLE_FILTER_BY_TAGS
          return DISABLE_FILTER_BY_TAGS;
        case 13: // ENABLE_SCAN
          return ENABLE_SCAN;
        case 14: // NO_RESULT_TEXT
          return NO_RESULT_TEXT;
        case 15: // CHILDREN_EVENTS
          return CHILDREN_EVENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POOLID_ISSET_ID = 0;
  private static final int __DISABLESTAR_ISSET_ID = 1;
  private static final int __DISABLEFILTERBYCATEG_ISSET_ID = 2;
  private static final int __DISABLEFILTERBYTAGS_ISSET_ID = 3;
  private static final int __ENABLESCAN_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POOL_ID, new org.apache.thrift.meta_data.FieldMetaData("poolId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POOL_PICTURE, new org.apache.thrift.meta_data.FieldMetaData("poolPicture", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POOL_TITLE, new org.apache.thrift.meta_data.FieldMetaData("poolTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POOL_PLACE, new org.apache.thrift.meta_data.FieldMetaData("poolPlace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POOL_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("poolDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISABLE_STAR, new org.apache.thrift.meta_data.FieldMetaData("disableStar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISABLE_FILTER_BY_CATEG, new org.apache.thrift.meta_data.FieldMetaData("disableFilterByCateg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISABLE_FILTER_BY_TAGS, new org.apache.thrift.meta_data.FieldMetaData("disableFilterByTags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_SCAN, new org.apache.thrift.meta_data.FieldMetaData("enableScan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NO_RESULT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("noResultText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILDREN_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("childrenEvents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventPool.class, metaDataMap);
  }

  public EventPool() {
  }

  public EventPool(
    long poolId)
  {
    this();
    this.poolId = poolId;
    setPoolIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventPool(EventPool other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.poolId = other.poolId;
    if (other.isSetPoolPicture()) {
      this.poolPicture = other.poolPicture;
    }
    if (other.isSetPoolTitle()) {
      this.poolTitle = other.poolTitle;
    }
    if (other.isSetPoolPlace()) {
      this.poolPlace = other.poolPlace;
    }
    if (other.isSetPoolDetails()) {
      this.poolDetails = other.poolDetails;
    }
    this.disableStar = other.disableStar;
    this.disableFilterByCateg = other.disableFilterByCateg;
    this.disableFilterByTags = other.disableFilterByTags;
    this.enableScan = other.enableScan;
    if (other.isSetNoResultText()) {
      this.noResultText = other.noResultText;
    }
    if (other.isSetChildrenEvents()) {
      List<Long> __this__childrenEvents = new ArrayList<Long>();
      for (Long other_element : other.childrenEvents) {
        __this__childrenEvents.add(other_element);
      }
      this.childrenEvents = __this__childrenEvents;
    }
  }

  public EventPool deepCopy() {
    return new EventPool(this);
  }

  @Override
  public void clear() {
    setPoolIdIsSet(false);
    this.poolId = 0;
    this.poolPicture = null;
    this.poolTitle = null;
    this.poolPlace = null;
    this.poolDetails = null;
    setDisableStarIsSet(false);
    this.disableStar = false;
    setDisableFilterByCategIsSet(false);
    this.disableFilterByCateg = false;
    setDisableFilterByTagsIsSet(false);
    this.disableFilterByTags = false;
    setEnableScanIsSet(false);
    this.enableScan = false;
    this.noResultText = null;
    this.childrenEvents = null;
  }

  public long getPoolId() {
    return this.poolId;
  }

  public EventPool setPoolId(long poolId) {
    this.poolId = poolId;
    setPoolIdIsSet(true);
    return this;
  }

  public void unsetPoolId() {
    __isset_bit_vector.clear(__POOLID_ISSET_ID);
  }

  /** Returns true if field poolId is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolId() {
    return __isset_bit_vector.get(__POOLID_ISSET_ID);
  }

  public void setPoolIdIsSet(boolean value) {
    __isset_bit_vector.set(__POOLID_ISSET_ID, value);
  }

  public String getPoolPicture() {
    return this.poolPicture;
  }

  public EventPool setPoolPicture(String poolPicture) {
    this.poolPicture = poolPicture;
    return this;
  }

  public void unsetPoolPicture() {
    this.poolPicture = null;
  }

  /** Returns true if field poolPicture is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolPicture() {
    return this.poolPicture != null;
  }

  public void setPoolPictureIsSet(boolean value) {
    if (!value) {
      this.poolPicture = null;
    }
  }

  public String getPoolTitle() {
    return this.poolTitle;
  }

  public EventPool setPoolTitle(String poolTitle) {
    this.poolTitle = poolTitle;
    return this;
  }

  public void unsetPoolTitle() {
    this.poolTitle = null;
  }

  /** Returns true if field poolTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolTitle() {
    return this.poolTitle != null;
  }

  public void setPoolTitleIsSet(boolean value) {
    if (!value) {
      this.poolTitle = null;
    }
  }

  public String getPoolPlace() {
    return this.poolPlace;
  }

  public EventPool setPoolPlace(String poolPlace) {
    this.poolPlace = poolPlace;
    return this;
  }

  public void unsetPoolPlace() {
    this.poolPlace = null;
  }

  /** Returns true if field poolPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolPlace() {
    return this.poolPlace != null;
  }

  public void setPoolPlaceIsSet(boolean value) {
    if (!value) {
      this.poolPlace = null;
    }
  }

  public String getPoolDetails() {
    return this.poolDetails;
  }

  public EventPool setPoolDetails(String poolDetails) {
    this.poolDetails = poolDetails;
    return this;
  }

  public void unsetPoolDetails() {
    this.poolDetails = null;
  }

  /** Returns true if field poolDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolDetails() {
    return this.poolDetails != null;
  }

  public void setPoolDetailsIsSet(boolean value) {
    if (!value) {
      this.poolDetails = null;
    }
  }

  public boolean isDisableStar() {
    return this.disableStar;
  }

  public EventPool setDisableStar(boolean disableStar) {
    this.disableStar = disableStar;
    setDisableStarIsSet(true);
    return this;
  }

  public void unsetDisableStar() {
    __isset_bit_vector.clear(__DISABLESTAR_ISSET_ID);
  }

  /** Returns true if field disableStar is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableStar() {
    return __isset_bit_vector.get(__DISABLESTAR_ISSET_ID);
  }

  public void setDisableStarIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLESTAR_ISSET_ID, value);
  }

  public boolean isDisableFilterByCateg() {
    return this.disableFilterByCateg;
  }

  public EventPool setDisableFilterByCateg(boolean disableFilterByCateg) {
    this.disableFilterByCateg = disableFilterByCateg;
    setDisableFilterByCategIsSet(true);
    return this;
  }

  public void unsetDisableFilterByCateg() {
    __isset_bit_vector.clear(__DISABLEFILTERBYCATEG_ISSET_ID);
  }

  /** Returns true if field disableFilterByCateg is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableFilterByCateg() {
    return __isset_bit_vector.get(__DISABLEFILTERBYCATEG_ISSET_ID);
  }

  public void setDisableFilterByCategIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLEFILTERBYCATEG_ISSET_ID, value);
  }

  public boolean isDisableFilterByTags() {
    return this.disableFilterByTags;
  }

  public EventPool setDisableFilterByTags(boolean disableFilterByTags) {
    this.disableFilterByTags = disableFilterByTags;
    setDisableFilterByTagsIsSet(true);
    return this;
  }

  public void unsetDisableFilterByTags() {
    __isset_bit_vector.clear(__DISABLEFILTERBYTAGS_ISSET_ID);
  }

  /** Returns true if field disableFilterByTags is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableFilterByTags() {
    return __isset_bit_vector.get(__DISABLEFILTERBYTAGS_ISSET_ID);
  }

  public void setDisableFilterByTagsIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLEFILTERBYTAGS_ISSET_ID, value);
  }

  public boolean isEnableScan() {
    return this.enableScan;
  }

  public EventPool setEnableScan(boolean enableScan) {
    this.enableScan = enableScan;
    setEnableScanIsSet(true);
    return this;
  }

  public void unsetEnableScan() {
    __isset_bit_vector.clear(__ENABLESCAN_ISSET_ID);
  }

  /** Returns true if field enableScan is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableScan() {
    return __isset_bit_vector.get(__ENABLESCAN_ISSET_ID);
  }

  public void setEnableScanIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLESCAN_ISSET_ID, value);
  }

  public String getNoResultText() {
    return this.noResultText;
  }

  public EventPool setNoResultText(String noResultText) {
    this.noResultText = noResultText;
    return this;
  }

  public void unsetNoResultText() {
    this.noResultText = null;
  }

  /** Returns true if field noResultText is set (has been assigned a value) and false otherwise */
  public boolean isSetNoResultText() {
    return this.noResultText != null;
  }

  public void setNoResultTextIsSet(boolean value) {
    if (!value) {
      this.noResultText = null;
    }
  }

  public int getChildrenEventsSize() {
    return (this.childrenEvents == null) ? 0 : this.childrenEvents.size();
  }

  public java.util.Iterator<Long> getChildrenEventsIterator() {
    return (this.childrenEvents == null) ? null : this.childrenEvents.iterator();
  }

  public void addToChildrenEvents(long elem) {
    if (this.childrenEvents == null) {
      this.childrenEvents = new ArrayList<Long>();
    }
    this.childrenEvents.add(elem);
  }

  public List<Long> getChildrenEvents() {
    return this.childrenEvents;
  }

  public EventPool setChildrenEvents(List<Long> childrenEvents) {
    this.childrenEvents = childrenEvents;
    return this;
  }

  public void unsetChildrenEvents() {
    this.childrenEvents = null;
  }

  /** Returns true if field childrenEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenEvents() {
    return this.childrenEvents != null;
  }

  public void setChildrenEventsIsSet(boolean value) {
    if (!value) {
      this.childrenEvents = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POOL_ID:
      if (value == null) {
        unsetPoolId();
      } else {
        setPoolId((Long)value);
      }
      break;

    case POOL_PICTURE:
      if (value == null) {
        unsetPoolPicture();
      } else {
        setPoolPicture((String)value);
      }
      break;

    case POOL_TITLE:
      if (value == null) {
        unsetPoolTitle();
      } else {
        setPoolTitle((String)value);
      }
      break;

    case POOL_PLACE:
      if (value == null) {
        unsetPoolPlace();
      } else {
        setPoolPlace((String)value);
      }
      break;

    case POOL_DETAILS:
      if (value == null) {
        unsetPoolDetails();
      } else {
        setPoolDetails((String)value);
      }
      break;

    case DISABLE_STAR:
      if (value == null) {
        unsetDisableStar();
      } else {
        setDisableStar((Boolean)value);
      }
      break;

    case DISABLE_FILTER_BY_CATEG:
      if (value == null) {
        unsetDisableFilterByCateg();
      } else {
        setDisableFilterByCateg((Boolean)value);
      }
      break;

    case DISABLE_FILTER_BY_TAGS:
      if (value == null) {
        unsetDisableFilterByTags();
      } else {
        setDisableFilterByTags((Boolean)value);
      }
      break;

    case ENABLE_SCAN:
      if (value == null) {
        unsetEnableScan();
      } else {
        setEnableScan((Boolean)value);
      }
      break;

    case NO_RESULT_TEXT:
      if (value == null) {
        unsetNoResultText();
      } else {
        setNoResultText((String)value);
      }
      break;

    case CHILDREN_EVENTS:
      if (value == null) {
        unsetChildrenEvents();
      } else {
        setChildrenEvents((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POOL_ID:
      return Long.valueOf(getPoolId());

    case POOL_PICTURE:
      return getPoolPicture();

    case POOL_TITLE:
      return getPoolTitle();

    case POOL_PLACE:
      return getPoolPlace();

    case POOL_DETAILS:
      return getPoolDetails();

    case DISABLE_STAR:
      return Boolean.valueOf(isDisableStar());

    case DISABLE_FILTER_BY_CATEG:
      return Boolean.valueOf(isDisableFilterByCateg());

    case DISABLE_FILTER_BY_TAGS:
      return Boolean.valueOf(isDisableFilterByTags());

    case ENABLE_SCAN:
      return Boolean.valueOf(isEnableScan());

    case NO_RESULT_TEXT:
      return getNoResultText();

    case CHILDREN_EVENTS:
      return getChildrenEvents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POOL_ID:
      return isSetPoolId();
    case POOL_PICTURE:
      return isSetPoolPicture();
    case POOL_TITLE:
      return isSetPoolTitle();
    case POOL_PLACE:
      return isSetPoolPlace();
    case POOL_DETAILS:
      return isSetPoolDetails();
    case DISABLE_STAR:
      return isSetDisableStar();
    case DISABLE_FILTER_BY_CATEG:
      return isSetDisableFilterByCateg();
    case DISABLE_FILTER_BY_TAGS:
      return isSetDisableFilterByTags();
    case ENABLE_SCAN:
      return isSetEnableScan();
    case NO_RESULT_TEXT:
      return isSetNoResultText();
    case CHILDREN_EVENTS:
      return isSetChildrenEvents();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventPool)
      return this.equals((EventPool)that);
    return false;
  }

  public boolean equals(EventPool that) {
    if (that == null)
      return false;

    boolean this_present_poolId = true;
    boolean that_present_poolId = true;
    if (this_present_poolId || that_present_poolId) {
      if (!(this_present_poolId && that_present_poolId))
        return false;
      if (this.poolId != that.poolId)
        return false;
    }

    boolean this_present_poolPicture = true && this.isSetPoolPicture();
    boolean that_present_poolPicture = true && that.isSetPoolPicture();
    if (this_present_poolPicture || that_present_poolPicture) {
      if (!(this_present_poolPicture && that_present_poolPicture))
        return false;
      if (!this.poolPicture.equals(that.poolPicture))
        return false;
    }

    boolean this_present_poolTitle = true && this.isSetPoolTitle();
    boolean that_present_poolTitle = true && that.isSetPoolTitle();
    if (this_present_poolTitle || that_present_poolTitle) {
      if (!(this_present_poolTitle && that_present_poolTitle))
        return false;
      if (!this.poolTitle.equals(that.poolTitle))
        return false;
    }

    boolean this_present_poolPlace = true && this.isSetPoolPlace();
    boolean that_present_poolPlace = true && that.isSetPoolPlace();
    if (this_present_poolPlace || that_present_poolPlace) {
      if (!(this_present_poolPlace && that_present_poolPlace))
        return false;
      if (!this.poolPlace.equals(that.poolPlace))
        return false;
    }

    boolean this_present_poolDetails = true && this.isSetPoolDetails();
    boolean that_present_poolDetails = true && that.isSetPoolDetails();
    if (this_present_poolDetails || that_present_poolDetails) {
      if (!(this_present_poolDetails && that_present_poolDetails))
        return false;
      if (!this.poolDetails.equals(that.poolDetails))
        return false;
    }

    boolean this_present_disableStar = true && this.isSetDisableStar();
    boolean that_present_disableStar = true && that.isSetDisableStar();
    if (this_present_disableStar || that_present_disableStar) {
      if (!(this_present_disableStar && that_present_disableStar))
        return false;
      if (this.disableStar != that.disableStar)
        return false;
    }

    boolean this_present_disableFilterByCateg = true && this.isSetDisableFilterByCateg();
    boolean that_present_disableFilterByCateg = true && that.isSetDisableFilterByCateg();
    if (this_present_disableFilterByCateg || that_present_disableFilterByCateg) {
      if (!(this_present_disableFilterByCateg && that_present_disableFilterByCateg))
        return false;
      if (this.disableFilterByCateg != that.disableFilterByCateg)
        return false;
    }

    boolean this_present_disableFilterByTags = true && this.isSetDisableFilterByTags();
    boolean that_present_disableFilterByTags = true && that.isSetDisableFilterByTags();
    if (this_present_disableFilterByTags || that_present_disableFilterByTags) {
      if (!(this_present_disableFilterByTags && that_present_disableFilterByTags))
        return false;
      if (this.disableFilterByTags != that.disableFilterByTags)
        return false;
    }

    boolean this_present_enableScan = true && this.isSetEnableScan();
    boolean that_present_enableScan = true && that.isSetEnableScan();
    if (this_present_enableScan || that_present_enableScan) {
      if (!(this_present_enableScan && that_present_enableScan))
        return false;
      if (this.enableScan != that.enableScan)
        return false;
    }

    boolean this_present_noResultText = true && this.isSetNoResultText();
    boolean that_present_noResultText = true && that.isSetNoResultText();
    if (this_present_noResultText || that_present_noResultText) {
      if (!(this_present_noResultText && that_present_noResultText))
        return false;
      if (!this.noResultText.equals(that.noResultText))
        return false;
    }

    boolean this_present_childrenEvents = true && this.isSetChildrenEvents();
    boolean that_present_childrenEvents = true && that.isSetChildrenEvents();
    if (this_present_childrenEvents || that_present_childrenEvents) {
      if (!(this_present_childrenEvents && that_present_childrenEvents))
        return false;
      if (!this.childrenEvents.equals(that.childrenEvents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_poolId = true;
    builder.append(present_poolId);
    if (present_poolId)
      builder.append(poolId);

    boolean present_poolPicture = true && (isSetPoolPicture());
    builder.append(present_poolPicture);
    if (present_poolPicture)
      builder.append(poolPicture);

    boolean present_poolTitle = true && (isSetPoolTitle());
    builder.append(present_poolTitle);
    if (present_poolTitle)
      builder.append(poolTitle);

    boolean present_poolPlace = true && (isSetPoolPlace());
    builder.append(present_poolPlace);
    if (present_poolPlace)
      builder.append(poolPlace);

    boolean present_poolDetails = true && (isSetPoolDetails());
    builder.append(present_poolDetails);
    if (present_poolDetails)
      builder.append(poolDetails);

    boolean present_disableStar = true && (isSetDisableStar());
    builder.append(present_disableStar);
    if (present_disableStar)
      builder.append(disableStar);

    boolean present_disableFilterByCateg = true && (isSetDisableFilterByCateg());
    builder.append(present_disableFilterByCateg);
    if (present_disableFilterByCateg)
      builder.append(disableFilterByCateg);

    boolean present_disableFilterByTags = true && (isSetDisableFilterByTags());
    builder.append(present_disableFilterByTags);
    if (present_disableFilterByTags)
      builder.append(disableFilterByTags);

    boolean present_enableScan = true && (isSetEnableScan());
    builder.append(present_enableScan);
    if (present_enableScan)
      builder.append(enableScan);

    boolean present_noResultText = true && (isSetNoResultText());
    builder.append(present_noResultText);
    if (present_noResultText)
      builder.append(noResultText);

    boolean present_childrenEvents = true && (isSetChildrenEvents());
    builder.append(present_childrenEvents);
    if (present_childrenEvents)
      builder.append(childrenEvents);

    return builder.toHashCode();
  }

  public int compareTo(EventPool other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EventPool typedOther = (EventPool)other;

    lastComparison = Boolean.valueOf(isSetPoolId()).compareTo(typedOther.isSetPoolId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolId, typedOther.poolId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolPicture()).compareTo(typedOther.isSetPoolPicture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolPicture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolPicture, typedOther.poolPicture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolTitle()).compareTo(typedOther.isSetPoolTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolTitle, typedOther.poolTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolPlace()).compareTo(typedOther.isSetPoolPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolPlace, typedOther.poolPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolDetails()).compareTo(typedOther.isSetPoolDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolDetails, typedOther.poolDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisableStar()).compareTo(typedOther.isSetDisableStar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableStar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disableStar, typedOther.disableStar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisableFilterByCateg()).compareTo(typedOther.isSetDisableFilterByCateg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableFilterByCateg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disableFilterByCateg, typedOther.disableFilterByCateg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisableFilterByTags()).compareTo(typedOther.isSetDisableFilterByTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableFilterByTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disableFilterByTags, typedOther.disableFilterByTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableScan()).compareTo(typedOther.isSetEnableScan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableScan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableScan, typedOther.enableScan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoResultText()).compareTo(typedOther.isSetNoResultText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoResultText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noResultText, typedOther.noResultText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenEvents()).compareTo(typedOther.isSetChildrenEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenEvents, typedOther.childrenEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // POOL_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.poolId = iprot.readI64();
            setPoolIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // POOL_PICTURE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.poolPicture = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // POOL_TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.poolTitle = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // POOL_PLACE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.poolPlace = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // POOL_DETAILS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.poolDetails = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // DISABLE_STAR
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.disableStar = iprot.readBool();
            setDisableStarIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // DISABLE_FILTER_BY_CATEG
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.disableFilterByCateg = iprot.readBool();
            setDisableFilterByCategIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // DISABLE_FILTER_BY_TAGS
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.disableFilterByTags = iprot.readBool();
            setDisableFilterByTagsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // ENABLE_SCAN
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.enableScan = iprot.readBool();
            setEnableScanIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // NO_RESULT_TEXT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.noResultText = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // CHILDREN_EVENTS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
              this.childrenEvents = new ArrayList<Long>(_list8.size);
              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
              {
                long _elem10; // required
                _elem10 = iprot.readI64();
                this.childrenEvents.add(_elem10);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetPoolId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'poolId' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(POOL_ID_FIELD_DESC);
    oprot.writeI64(this.poolId);
    oprot.writeFieldEnd();
    if (this.poolPicture != null) {
      if (isSetPoolPicture()) {
        oprot.writeFieldBegin(POOL_PICTURE_FIELD_DESC);
        oprot.writeString(this.poolPicture);
        oprot.writeFieldEnd();
      }
    }
    if (this.poolTitle != null) {
      if (isSetPoolTitle()) {
        oprot.writeFieldBegin(POOL_TITLE_FIELD_DESC);
        oprot.writeString(this.poolTitle);
        oprot.writeFieldEnd();
      }
    }
    if (this.poolPlace != null) {
      if (isSetPoolPlace()) {
        oprot.writeFieldBegin(POOL_PLACE_FIELD_DESC);
        oprot.writeString(this.poolPlace);
        oprot.writeFieldEnd();
      }
    }
    if (this.poolDetails != null) {
      if (isSetPoolDetails()) {
        oprot.writeFieldBegin(POOL_DETAILS_FIELD_DESC);
        oprot.writeString(this.poolDetails);
        oprot.writeFieldEnd();
      }
    }
    if (isSetDisableStar()) {
      oprot.writeFieldBegin(DISABLE_STAR_FIELD_DESC);
      oprot.writeBool(this.disableStar);
      oprot.writeFieldEnd();
    }
    if (isSetDisableFilterByCateg()) {
      oprot.writeFieldBegin(DISABLE_FILTER_BY_CATEG_FIELD_DESC);
      oprot.writeBool(this.disableFilterByCateg);
      oprot.writeFieldEnd();
    }
    if (isSetDisableFilterByTags()) {
      oprot.writeFieldBegin(DISABLE_FILTER_BY_TAGS_FIELD_DESC);
      oprot.writeBool(this.disableFilterByTags);
      oprot.writeFieldEnd();
    }
    if (isSetEnableScan()) {
      oprot.writeFieldBegin(ENABLE_SCAN_FIELD_DESC);
      oprot.writeBool(this.enableScan);
      oprot.writeFieldEnd();
    }
    if (this.noResultText != null) {
      if (isSetNoResultText()) {
        oprot.writeFieldBegin(NO_RESULT_TEXT_FIELD_DESC);
        oprot.writeString(this.noResultText);
        oprot.writeFieldEnd();
      }
    }
    if (this.childrenEvents != null) {
      if (isSetChildrenEvents()) {
        oprot.writeFieldBegin(CHILDREN_EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, this.childrenEvents.size()));
          for (long _iter11 : this.childrenEvents)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventPool(");
    boolean first = true;

    sb.append("poolId:");
    sb.append(this.poolId);
    first = false;
    if (isSetPoolPicture()) {
      if (!first) sb.append(", ");
      sb.append("poolPicture:");
      if (this.poolPicture == null) {
        sb.append("null");
      } else {
        sb.append(this.poolPicture);
      }
      first = false;
    }
    if (isSetPoolTitle()) {
      if (!first) sb.append(", ");
      sb.append("poolTitle:");
      if (this.poolTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.poolTitle);
      }
      first = false;
    }
    if (isSetPoolPlace()) {
      if (!first) sb.append(", ");
      sb.append("poolPlace:");
      if (this.poolPlace == null) {
        sb.append("null");
      } else {
        sb.append(this.poolPlace);
      }
      first = false;
    }
    if (isSetPoolDetails()) {
      if (!first) sb.append(", ");
      sb.append("poolDetails:");
      if (this.poolDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.poolDetails);
      }
      first = false;
    }
    if (isSetDisableStar()) {
      if (!first) sb.append(", ");
      sb.append("disableStar:");
      sb.append(this.disableStar);
      first = false;
    }
    if (isSetDisableFilterByCateg()) {
      if (!first) sb.append(", ");
      sb.append("disableFilterByCateg:");
      sb.append(this.disableFilterByCateg);
      first = false;
    }
    if (isSetDisableFilterByTags()) {
      if (!first) sb.append(", ");
      sb.append("disableFilterByTags:");
      sb.append(this.disableFilterByTags);
      first = false;
    }
    if (isSetEnableScan()) {
      if (!first) sb.append(", ");
      sb.append("enableScan:");
      sb.append(this.enableScan);
      first = false;
    }
    if (isSetNoResultText()) {
      if (!first) sb.append(", ");
      sb.append("noResultText:");
      if (this.noResultText == null) {
        sb.append("null");
      } else {
        sb.append(this.noResultText);
      }
      first = false;
    }
    if (isSetChildrenEvents()) {
      if (!first) sb.append(", ");
      sb.append("childrenEvents:");
      if (this.childrenEvents == null) {
        sb.append("null");
      } else {
        sb.append(this.childrenEvents);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'poolId' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

