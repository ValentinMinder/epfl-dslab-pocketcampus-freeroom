/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventItem implements org.apache.thrift.TBase<EventItem, EventItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventItem");

  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FULL_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("fullDay", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField EVENT_PICTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventPicture", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EVENT_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventTitle", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EVENT_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventPlace", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EVENT_SPEAKER_FIELD_DESC = new org.apache.thrift.protocol.TField("eventSpeaker", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EVENT_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventDetails", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHILDREN_POOLS_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenPools", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField EVENT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("eventUri", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField VCAL_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("vcalUid", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EVENT_CATEG_FIELD_DESC = new org.apache.thrift.protocol.TField("eventCateg", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField EVENT_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventTags", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField LOCATION_HREF_FIELD_DESC = new org.apache.thrift.protocol.TField("locationHref", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DETAILS_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("detailsLink", org.apache.thrift.protocol.TType.STRING, (short)17);

  public long eventId; // required
  public long startDate; // required
  public long endDate; // required
  public boolean fullDay; // required
  public String eventPicture; // required
  public String eventTitle; // required
  public String eventPlace; // required
  public String eventSpeaker; // required
  public String eventDetails; // required
  public List<Long> childrenPools; // required
  public String eventUri; // required
  public String vcalUid; // required
  public int eventCateg; // required
  public List<String> eventTags; // required
  public String locationHref; // required
  public String detailsLink; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT_ID((short)1, "eventId"),
    START_DATE((short)2, "startDate"),
    END_DATE((short)3, "endDate"),
    FULL_DAY((short)4, "fullDay"),
    EVENT_PICTURE((short)5, "eventPicture"),
    EVENT_TITLE((short)6, "eventTitle"),
    EVENT_PLACE((short)7, "eventPlace"),
    EVENT_SPEAKER((short)8, "eventSpeaker"),
    EVENT_DETAILS((short)9, "eventDetails"),
    CHILDREN_POOLS((short)11, "childrenPools"),
    EVENT_URI((short)12, "eventUri"),
    VCAL_UID((short)13, "vcalUid"),
    EVENT_CATEG((short)14, "eventCateg"),
    EVENT_TAGS((short)15, "eventTags"),
    LOCATION_HREF((short)16, "locationHref"),
    DETAILS_LINK((short)17, "detailsLink");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT_ID
          return EVENT_ID;
        case 2: // START_DATE
          return START_DATE;
        case 3: // END_DATE
          return END_DATE;
        case 4: // FULL_DAY
          return FULL_DAY;
        case 5: // EVENT_PICTURE
          return EVENT_PICTURE;
        case 6: // EVENT_TITLE
          return EVENT_TITLE;
        case 7: // EVENT_PLACE
          return EVENT_PLACE;
        case 8: // EVENT_SPEAKER
          return EVENT_SPEAKER;
        case 9: // EVENT_DETAILS
          return EVENT_DETAILS;
        case 11: // CHILDREN_POOLS
          return CHILDREN_POOLS;
        case 12: // EVENT_URI
          return EVENT_URI;
        case 13: // VCAL_UID
          return VCAL_UID;
        case 14: // EVENT_CATEG
          return EVENT_CATEG;
        case 15: // EVENT_TAGS
          return EVENT_TAGS;
        case 16: // LOCATION_HREF
          return LOCATION_HREF;
        case 17: // DETAILS_LINK
          return DETAILS_LINK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTID_ISSET_ID = 0;
  private static final int __STARTDATE_ISSET_ID = 1;
  private static final int __ENDDATE_ISSET_ID = 2;
  private static final int __FULLDAY_ISSET_ID = 3;
  private static final int __EVENTCATEG_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FULL_DAY, new org.apache.thrift.meta_data.FieldMetaData("fullDay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EVENT_PICTURE, new org.apache.thrift.meta_data.FieldMetaData("eventPicture", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_TITLE, new org.apache.thrift.meta_data.FieldMetaData("eventTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_PLACE, new org.apache.thrift.meta_data.FieldMetaData("eventPlace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_SPEAKER, new org.apache.thrift.meta_data.FieldMetaData("eventSpeaker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("eventDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILDREN_POOLS, new org.apache.thrift.meta_data.FieldMetaData("childrenPools", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.EVENT_URI, new org.apache.thrift.meta_data.FieldMetaData("eventUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VCAL_UID, new org.apache.thrift.meta_data.FieldMetaData("vcalUid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_CATEG, new org.apache.thrift.meta_data.FieldMetaData("eventCateg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_TAGS, new org.apache.thrift.meta_data.FieldMetaData("eventTags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOCATION_HREF, new org.apache.thrift.meta_data.FieldMetaData("locationHref", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAILS_LINK, new org.apache.thrift.meta_data.FieldMetaData("detailsLink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventItem.class, metaDataMap);
  }

  public EventItem() {
  }

  public EventItem(
    long eventId)
  {
    this();
    this.eventId = eventId;
    setEventIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventItem(EventItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.eventId = other.eventId;
    this.startDate = other.startDate;
    this.endDate = other.endDate;
    this.fullDay = other.fullDay;
    if (other.isSetEventPicture()) {
      this.eventPicture = other.eventPicture;
    }
    if (other.isSetEventTitle()) {
      this.eventTitle = other.eventTitle;
    }
    if (other.isSetEventPlace()) {
      this.eventPlace = other.eventPlace;
    }
    if (other.isSetEventSpeaker()) {
      this.eventSpeaker = other.eventSpeaker;
    }
    if (other.isSetEventDetails()) {
      this.eventDetails = other.eventDetails;
    }
    if (other.isSetChildrenPools()) {
      List<Long> __this__childrenPools = new ArrayList<Long>();
      for (Long other_element : other.childrenPools) {
        __this__childrenPools.add(other_element);
      }
      this.childrenPools = __this__childrenPools;
    }
    if (other.isSetEventUri()) {
      this.eventUri = other.eventUri;
    }
    if (other.isSetVcalUid()) {
      this.vcalUid = other.vcalUid;
    }
    this.eventCateg = other.eventCateg;
    if (other.isSetEventTags()) {
      List<String> __this__eventTags = new ArrayList<String>();
      for (String other_element : other.eventTags) {
        __this__eventTags.add(other_element);
      }
      this.eventTags = __this__eventTags;
    }
    if (other.isSetLocationHref()) {
      this.locationHref = other.locationHref;
    }
    if (other.isSetDetailsLink()) {
      this.detailsLink = other.detailsLink;
    }
  }

  public EventItem deepCopy() {
    return new EventItem(this);
  }

  @Override
  public void clear() {
    setEventIdIsSet(false);
    this.eventId = 0;
    setStartDateIsSet(false);
    this.startDate = 0;
    setEndDateIsSet(false);
    this.endDate = 0;
    setFullDayIsSet(false);
    this.fullDay = false;
    this.eventPicture = null;
    this.eventTitle = null;
    this.eventPlace = null;
    this.eventSpeaker = null;
    this.eventDetails = null;
    this.childrenPools = null;
    this.eventUri = null;
    this.vcalUid = null;
    setEventCategIsSet(false);
    this.eventCateg = 0;
    this.eventTags = null;
    this.locationHref = null;
    this.detailsLink = null;
  }

  public long getEventId() {
    return this.eventId;
  }

  public EventItem setEventId(long eventId) {
    this.eventId = eventId;
    setEventIdIsSet(true);
    return this;
  }

  public void unsetEventId() {
    __isset_bit_vector.clear(__EVENTID_ISSET_ID);
  }

  /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventId() {
    return __isset_bit_vector.get(__EVENTID_ISSET_ID);
  }

  public void setEventIdIsSet(boolean value) {
    __isset_bit_vector.set(__EVENTID_ISSET_ID, value);
  }

  public long getStartDate() {
    return this.startDate;
  }

  public EventItem setStartDate(long startDate) {
    this.startDate = startDate;
    setStartDateIsSet(true);
    return this;
  }

  public void unsetStartDate() {
    __isset_bit_vector.clear(__STARTDATE_ISSET_ID);
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return __isset_bit_vector.get(__STARTDATE_ISSET_ID);
  }

  public void setStartDateIsSet(boolean value) {
    __isset_bit_vector.set(__STARTDATE_ISSET_ID, value);
  }

  public long getEndDate() {
    return this.endDate;
  }

  public EventItem setEndDate(long endDate) {
    this.endDate = endDate;
    setEndDateIsSet(true);
    return this;
  }

  public void unsetEndDate() {
    __isset_bit_vector.clear(__ENDDATE_ISSET_ID);
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return __isset_bit_vector.get(__ENDDATE_ISSET_ID);
  }

  public void setEndDateIsSet(boolean value) {
    __isset_bit_vector.set(__ENDDATE_ISSET_ID, value);
  }

  public boolean isFullDay() {
    return this.fullDay;
  }

  public EventItem setFullDay(boolean fullDay) {
    this.fullDay = fullDay;
    setFullDayIsSet(true);
    return this;
  }

  public void unsetFullDay() {
    __isset_bit_vector.clear(__FULLDAY_ISSET_ID);
  }

  /** Returns true if field fullDay is set (has been assigned a value) and false otherwise */
  public boolean isSetFullDay() {
    return __isset_bit_vector.get(__FULLDAY_ISSET_ID);
  }

  public void setFullDayIsSet(boolean value) {
    __isset_bit_vector.set(__FULLDAY_ISSET_ID, value);
  }

  public String getEventPicture() {
    return this.eventPicture;
  }

  public EventItem setEventPicture(String eventPicture) {
    this.eventPicture = eventPicture;
    return this;
  }

  public void unsetEventPicture() {
    this.eventPicture = null;
  }

  /** Returns true if field eventPicture is set (has been assigned a value) and false otherwise */
  public boolean isSetEventPicture() {
    return this.eventPicture != null;
  }

  public void setEventPictureIsSet(boolean value) {
    if (!value) {
      this.eventPicture = null;
    }
  }

  public String getEventTitle() {
    return this.eventTitle;
  }

  public EventItem setEventTitle(String eventTitle) {
    this.eventTitle = eventTitle;
    return this;
  }

  public void unsetEventTitle() {
    this.eventTitle = null;
  }

  /** Returns true if field eventTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetEventTitle() {
    return this.eventTitle != null;
  }

  public void setEventTitleIsSet(boolean value) {
    if (!value) {
      this.eventTitle = null;
    }
  }

  public String getEventPlace() {
    return this.eventPlace;
  }

  public EventItem setEventPlace(String eventPlace) {
    this.eventPlace = eventPlace;
    return this;
  }

  public void unsetEventPlace() {
    this.eventPlace = null;
  }

  /** Returns true if field eventPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetEventPlace() {
    return this.eventPlace != null;
  }

  public void setEventPlaceIsSet(boolean value) {
    if (!value) {
      this.eventPlace = null;
    }
  }

  public String getEventSpeaker() {
    return this.eventSpeaker;
  }

  public EventItem setEventSpeaker(String eventSpeaker) {
    this.eventSpeaker = eventSpeaker;
    return this;
  }

  public void unsetEventSpeaker() {
    this.eventSpeaker = null;
  }

  /** Returns true if field eventSpeaker is set (has been assigned a value) and false otherwise */
  public boolean isSetEventSpeaker() {
    return this.eventSpeaker != null;
  }

  public void setEventSpeakerIsSet(boolean value) {
    if (!value) {
      this.eventSpeaker = null;
    }
  }

  public String getEventDetails() {
    return this.eventDetails;
  }

  public EventItem setEventDetails(String eventDetails) {
    this.eventDetails = eventDetails;
    return this;
  }

  public void unsetEventDetails() {
    this.eventDetails = null;
  }

  /** Returns true if field eventDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetEventDetails() {
    return this.eventDetails != null;
  }

  public void setEventDetailsIsSet(boolean value) {
    if (!value) {
      this.eventDetails = null;
    }
  }

  public int getChildrenPoolsSize() {
    return (this.childrenPools == null) ? 0 : this.childrenPools.size();
  }

  public java.util.Iterator<Long> getChildrenPoolsIterator() {
    return (this.childrenPools == null) ? null : this.childrenPools.iterator();
  }

  public void addToChildrenPools(long elem) {
    if (this.childrenPools == null) {
      this.childrenPools = new ArrayList<Long>();
    }
    this.childrenPools.add(elem);
  }

  public List<Long> getChildrenPools() {
    return this.childrenPools;
  }

  public EventItem setChildrenPools(List<Long> childrenPools) {
    this.childrenPools = childrenPools;
    return this;
  }

  public void unsetChildrenPools() {
    this.childrenPools = null;
  }

  /** Returns true if field childrenPools is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenPools() {
    return this.childrenPools != null;
  }

  public void setChildrenPoolsIsSet(boolean value) {
    if (!value) {
      this.childrenPools = null;
    }
  }

  public String getEventUri() {
    return this.eventUri;
  }

  public EventItem setEventUri(String eventUri) {
    this.eventUri = eventUri;
    return this;
  }

  public void unsetEventUri() {
    this.eventUri = null;
  }

  /** Returns true if field eventUri is set (has been assigned a value) and false otherwise */
  public boolean isSetEventUri() {
    return this.eventUri != null;
  }

  public void setEventUriIsSet(boolean value) {
    if (!value) {
      this.eventUri = null;
    }
  }

  public String getVcalUid() {
    return this.vcalUid;
  }

  public EventItem setVcalUid(String vcalUid) {
    this.vcalUid = vcalUid;
    return this;
  }

  public void unsetVcalUid() {
    this.vcalUid = null;
  }

  /** Returns true if field vcalUid is set (has been assigned a value) and false otherwise */
  public boolean isSetVcalUid() {
    return this.vcalUid != null;
  }

  public void setVcalUidIsSet(boolean value) {
    if (!value) {
      this.vcalUid = null;
    }
  }

  public int getEventCateg() {
    return this.eventCateg;
  }

  public EventItem setEventCateg(int eventCateg) {
    this.eventCateg = eventCateg;
    setEventCategIsSet(true);
    return this;
  }

  public void unsetEventCateg() {
    __isset_bit_vector.clear(__EVENTCATEG_ISSET_ID);
  }

  /** Returns true if field eventCateg is set (has been assigned a value) and false otherwise */
  public boolean isSetEventCateg() {
    return __isset_bit_vector.get(__EVENTCATEG_ISSET_ID);
  }

  public void setEventCategIsSet(boolean value) {
    __isset_bit_vector.set(__EVENTCATEG_ISSET_ID, value);
  }

  public int getEventTagsSize() {
    return (this.eventTags == null) ? 0 : this.eventTags.size();
  }

  public java.util.Iterator<String> getEventTagsIterator() {
    return (this.eventTags == null) ? null : this.eventTags.iterator();
  }

  public void addToEventTags(String elem) {
    if (this.eventTags == null) {
      this.eventTags = new ArrayList<String>();
    }
    this.eventTags.add(elem);
  }

  public List<String> getEventTags() {
    return this.eventTags;
  }

  public EventItem setEventTags(List<String> eventTags) {
    this.eventTags = eventTags;
    return this;
  }

  public void unsetEventTags() {
    this.eventTags = null;
  }

  /** Returns true if field eventTags is set (has been assigned a value) and false otherwise */
  public boolean isSetEventTags() {
    return this.eventTags != null;
  }

  public void setEventTagsIsSet(boolean value) {
    if (!value) {
      this.eventTags = null;
    }
  }

  public String getLocationHref() {
    return this.locationHref;
  }

  public EventItem setLocationHref(String locationHref) {
    this.locationHref = locationHref;
    return this;
  }

  public void unsetLocationHref() {
    this.locationHref = null;
  }

  /** Returns true if field locationHref is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationHref() {
    return this.locationHref != null;
  }

  public void setLocationHrefIsSet(boolean value) {
    if (!value) {
      this.locationHref = null;
    }
  }

  public String getDetailsLink() {
    return this.detailsLink;
  }

  public EventItem setDetailsLink(String detailsLink) {
    this.detailsLink = detailsLink;
    return this;
  }

  public void unsetDetailsLink() {
    this.detailsLink = null;
  }

  /** Returns true if field detailsLink is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailsLink() {
    return this.detailsLink != null;
  }

  public void setDetailsLinkIsSet(boolean value) {
    if (!value) {
      this.detailsLink = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT_ID:
      if (value == null) {
        unsetEventId();
      } else {
        setEventId((Long)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((Long)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((Long)value);
      }
      break;

    case FULL_DAY:
      if (value == null) {
        unsetFullDay();
      } else {
        setFullDay((Boolean)value);
      }
      break;

    case EVENT_PICTURE:
      if (value == null) {
        unsetEventPicture();
      } else {
        setEventPicture((String)value);
      }
      break;

    case EVENT_TITLE:
      if (value == null) {
        unsetEventTitle();
      } else {
        setEventTitle((String)value);
      }
      break;

    case EVENT_PLACE:
      if (value == null) {
        unsetEventPlace();
      } else {
        setEventPlace((String)value);
      }
      break;

    case EVENT_SPEAKER:
      if (value == null) {
        unsetEventSpeaker();
      } else {
        setEventSpeaker((String)value);
      }
      break;

    case EVENT_DETAILS:
      if (value == null) {
        unsetEventDetails();
      } else {
        setEventDetails((String)value);
      }
      break;

    case CHILDREN_POOLS:
      if (value == null) {
        unsetChildrenPools();
      } else {
        setChildrenPools((List<Long>)value);
      }
      break;

    case EVENT_URI:
      if (value == null) {
        unsetEventUri();
      } else {
        setEventUri((String)value);
      }
      break;

    case VCAL_UID:
      if (value == null) {
        unsetVcalUid();
      } else {
        setVcalUid((String)value);
      }
      break;

    case EVENT_CATEG:
      if (value == null) {
        unsetEventCateg();
      } else {
        setEventCateg((Integer)value);
      }
      break;

    case EVENT_TAGS:
      if (value == null) {
        unsetEventTags();
      } else {
        setEventTags((List<String>)value);
      }
      break;

    case LOCATION_HREF:
      if (value == null) {
        unsetLocationHref();
      } else {
        setLocationHref((String)value);
      }
      break;

    case DETAILS_LINK:
      if (value == null) {
        unsetDetailsLink();
      } else {
        setDetailsLink((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT_ID:
      return Long.valueOf(getEventId());

    case START_DATE:
      return Long.valueOf(getStartDate());

    case END_DATE:
      return Long.valueOf(getEndDate());

    case FULL_DAY:
      return Boolean.valueOf(isFullDay());

    case EVENT_PICTURE:
      return getEventPicture();

    case EVENT_TITLE:
      return getEventTitle();

    case EVENT_PLACE:
      return getEventPlace();

    case EVENT_SPEAKER:
      return getEventSpeaker();

    case EVENT_DETAILS:
      return getEventDetails();

    case CHILDREN_POOLS:
      return getChildrenPools();

    case EVENT_URI:
      return getEventUri();

    case VCAL_UID:
      return getVcalUid();

    case EVENT_CATEG:
      return Integer.valueOf(getEventCateg());

    case EVENT_TAGS:
      return getEventTags();

    case LOCATION_HREF:
      return getLocationHref();

    case DETAILS_LINK:
      return getDetailsLink();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT_ID:
      return isSetEventId();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case FULL_DAY:
      return isSetFullDay();
    case EVENT_PICTURE:
      return isSetEventPicture();
    case EVENT_TITLE:
      return isSetEventTitle();
    case EVENT_PLACE:
      return isSetEventPlace();
    case EVENT_SPEAKER:
      return isSetEventSpeaker();
    case EVENT_DETAILS:
      return isSetEventDetails();
    case CHILDREN_POOLS:
      return isSetChildrenPools();
    case EVENT_URI:
      return isSetEventUri();
    case VCAL_UID:
      return isSetVcalUid();
    case EVENT_CATEG:
      return isSetEventCateg();
    case EVENT_TAGS:
      return isSetEventTags();
    case LOCATION_HREF:
      return isSetLocationHref();
    case DETAILS_LINK:
      return isSetDetailsLink();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventItem)
      return this.equals((EventItem)that);
    return false;
  }

  public boolean equals(EventItem that) {
    if (that == null)
      return false;

    boolean this_present_eventId = true;
    boolean that_present_eventId = true;
    if (this_present_eventId || that_present_eventId) {
      if (!(this_present_eventId && that_present_eventId))
        return false;
      if (this.eventId != that.eventId)
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (this.startDate != that.startDate)
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (this.endDate != that.endDate)
        return false;
    }

    boolean this_present_fullDay = true && this.isSetFullDay();
    boolean that_present_fullDay = true && that.isSetFullDay();
    if (this_present_fullDay || that_present_fullDay) {
      if (!(this_present_fullDay && that_present_fullDay))
        return false;
      if (this.fullDay != that.fullDay)
        return false;
    }

    boolean this_present_eventPicture = true && this.isSetEventPicture();
    boolean that_present_eventPicture = true && that.isSetEventPicture();
    if (this_present_eventPicture || that_present_eventPicture) {
      if (!(this_present_eventPicture && that_present_eventPicture))
        return false;
      if (!this.eventPicture.equals(that.eventPicture))
        return false;
    }

    boolean this_present_eventTitle = true && this.isSetEventTitle();
    boolean that_present_eventTitle = true && that.isSetEventTitle();
    if (this_present_eventTitle || that_present_eventTitle) {
      if (!(this_present_eventTitle && that_present_eventTitle))
        return false;
      if (!this.eventTitle.equals(that.eventTitle))
        return false;
    }

    boolean this_present_eventPlace = true && this.isSetEventPlace();
    boolean that_present_eventPlace = true && that.isSetEventPlace();
    if (this_present_eventPlace || that_present_eventPlace) {
      if (!(this_present_eventPlace && that_present_eventPlace))
        return false;
      if (!this.eventPlace.equals(that.eventPlace))
        return false;
    }

    boolean this_present_eventSpeaker = true && this.isSetEventSpeaker();
    boolean that_present_eventSpeaker = true && that.isSetEventSpeaker();
    if (this_present_eventSpeaker || that_present_eventSpeaker) {
      if (!(this_present_eventSpeaker && that_present_eventSpeaker))
        return false;
      if (!this.eventSpeaker.equals(that.eventSpeaker))
        return false;
    }

    boolean this_present_eventDetails = true && this.isSetEventDetails();
    boolean that_present_eventDetails = true && that.isSetEventDetails();
    if (this_present_eventDetails || that_present_eventDetails) {
      if (!(this_present_eventDetails && that_present_eventDetails))
        return false;
      if (!this.eventDetails.equals(that.eventDetails))
        return false;
    }

    boolean this_present_childrenPools = true && this.isSetChildrenPools();
    boolean that_present_childrenPools = true && that.isSetChildrenPools();
    if (this_present_childrenPools || that_present_childrenPools) {
      if (!(this_present_childrenPools && that_present_childrenPools))
        return false;
      if (!this.childrenPools.equals(that.childrenPools))
        return false;
    }

    boolean this_present_eventUri = true && this.isSetEventUri();
    boolean that_present_eventUri = true && that.isSetEventUri();
    if (this_present_eventUri || that_present_eventUri) {
      if (!(this_present_eventUri && that_present_eventUri))
        return false;
      if (!this.eventUri.equals(that.eventUri))
        return false;
    }

    boolean this_present_vcalUid = true && this.isSetVcalUid();
    boolean that_present_vcalUid = true && that.isSetVcalUid();
    if (this_present_vcalUid || that_present_vcalUid) {
      if (!(this_present_vcalUid && that_present_vcalUid))
        return false;
      if (!this.vcalUid.equals(that.vcalUid))
        return false;
    }

    boolean this_present_eventCateg = true && this.isSetEventCateg();
    boolean that_present_eventCateg = true && that.isSetEventCateg();
    if (this_present_eventCateg || that_present_eventCateg) {
      if (!(this_present_eventCateg && that_present_eventCateg))
        return false;
      if (this.eventCateg != that.eventCateg)
        return false;
    }

    boolean this_present_eventTags = true && this.isSetEventTags();
    boolean that_present_eventTags = true && that.isSetEventTags();
    if (this_present_eventTags || that_present_eventTags) {
      if (!(this_present_eventTags && that_present_eventTags))
        return false;
      if (!this.eventTags.equals(that.eventTags))
        return false;
    }

    boolean this_present_locationHref = true && this.isSetLocationHref();
    boolean that_present_locationHref = true && that.isSetLocationHref();
    if (this_present_locationHref || that_present_locationHref) {
      if (!(this_present_locationHref && that_present_locationHref))
        return false;
      if (!this.locationHref.equals(that.locationHref))
        return false;
    }

    boolean this_present_detailsLink = true && this.isSetDetailsLink();
    boolean that_present_detailsLink = true && that.isSetDetailsLink();
    if (this_present_detailsLink || that_present_detailsLink) {
      if (!(this_present_detailsLink && that_present_detailsLink))
        return false;
      if (!this.detailsLink.equals(that.detailsLink))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_eventId = true;
    builder.append(present_eventId);
    if (present_eventId)
      builder.append(eventId);

    boolean present_startDate = true && (isSetStartDate());
    builder.append(present_startDate);
    if (present_startDate)
      builder.append(startDate);

    boolean present_endDate = true && (isSetEndDate());
    builder.append(present_endDate);
    if (present_endDate)
      builder.append(endDate);

    boolean present_fullDay = true && (isSetFullDay());
    builder.append(present_fullDay);
    if (present_fullDay)
      builder.append(fullDay);

    boolean present_eventPicture = true && (isSetEventPicture());
    builder.append(present_eventPicture);
    if (present_eventPicture)
      builder.append(eventPicture);

    boolean present_eventTitle = true && (isSetEventTitle());
    builder.append(present_eventTitle);
    if (present_eventTitle)
      builder.append(eventTitle);

    boolean present_eventPlace = true && (isSetEventPlace());
    builder.append(present_eventPlace);
    if (present_eventPlace)
      builder.append(eventPlace);

    boolean present_eventSpeaker = true && (isSetEventSpeaker());
    builder.append(present_eventSpeaker);
    if (present_eventSpeaker)
      builder.append(eventSpeaker);

    boolean present_eventDetails = true && (isSetEventDetails());
    builder.append(present_eventDetails);
    if (present_eventDetails)
      builder.append(eventDetails);

    boolean present_childrenPools = true && (isSetChildrenPools());
    builder.append(present_childrenPools);
    if (present_childrenPools)
      builder.append(childrenPools);

    boolean present_eventUri = true && (isSetEventUri());
    builder.append(present_eventUri);
    if (present_eventUri)
      builder.append(eventUri);

    boolean present_vcalUid = true && (isSetVcalUid());
    builder.append(present_vcalUid);
    if (present_vcalUid)
      builder.append(vcalUid);

    boolean present_eventCateg = true && (isSetEventCateg());
    builder.append(present_eventCateg);
    if (present_eventCateg)
      builder.append(eventCateg);

    boolean present_eventTags = true && (isSetEventTags());
    builder.append(present_eventTags);
    if (present_eventTags)
      builder.append(eventTags);

    boolean present_locationHref = true && (isSetLocationHref());
    builder.append(present_locationHref);
    if (present_locationHref)
      builder.append(locationHref);

    boolean present_detailsLink = true && (isSetDetailsLink());
    builder.append(present_detailsLink);
    if (present_detailsLink)
      builder.append(detailsLink);

    return builder.toHashCode();
  }

  public int compareTo(EventItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EventItem typedOther = (EventItem)other;

    lastComparison = Boolean.valueOf(isSetEventId()).compareTo(typedOther.isSetEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, typedOther.eventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, typedOther.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullDay()).compareTo(typedOther.isSetFullDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullDay, typedOther.fullDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventPicture()).compareTo(typedOther.isSetEventPicture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventPicture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventPicture, typedOther.eventPicture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventTitle()).compareTo(typedOther.isSetEventTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventTitle, typedOther.eventTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventPlace()).compareTo(typedOther.isSetEventPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventPlace, typedOther.eventPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventSpeaker()).compareTo(typedOther.isSetEventSpeaker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventSpeaker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventSpeaker, typedOther.eventSpeaker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventDetails()).compareTo(typedOther.isSetEventDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventDetails, typedOther.eventDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenPools()).compareTo(typedOther.isSetChildrenPools());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenPools()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenPools, typedOther.childrenPools);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventUri()).compareTo(typedOther.isSetEventUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventUri, typedOther.eventUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVcalUid()).compareTo(typedOther.isSetVcalUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVcalUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vcalUid, typedOther.vcalUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventCateg()).compareTo(typedOther.isSetEventCateg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventCateg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventCateg, typedOther.eventCateg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventTags()).compareTo(typedOther.isSetEventTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventTags, typedOther.eventTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationHref()).compareTo(typedOther.isSetLocationHref());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationHref()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationHref, typedOther.locationHref);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailsLink()).compareTo(typedOther.isSetDetailsLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailsLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailsLink, typedOther.detailsLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // EVENT_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.eventId = iprot.readI64();
            setEventIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // START_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.startDate = iprot.readI64();
            setStartDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // END_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.endDate = iprot.readI64();
            setEndDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // FULL_DAY
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.fullDay = iprot.readBool();
            setFullDayIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // EVENT_PICTURE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.eventPicture = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // EVENT_TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.eventTitle = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // EVENT_PLACE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.eventPlace = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // EVENT_SPEAKER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.eventSpeaker = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // EVENT_DETAILS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.eventDetails = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // CHILDREN_POOLS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.childrenPools = new ArrayList<Long>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                long _elem2; // required
                _elem2 = iprot.readI64();
                this.childrenPools.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // EVENT_URI
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.eventUri = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // VCAL_UID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.vcalUid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // EVENT_CATEG
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.eventCateg = iprot.readI32();
            setEventCategIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // EVENT_TAGS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
              this.eventTags = new ArrayList<String>(_list3.size);
              for (int _i4 = 0; _i4 < _list3.size; ++_i4)
              {
                String _elem5; // required
                _elem5 = iprot.readString();
                this.eventTags.add(_elem5);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // LOCATION_HREF
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.locationHref = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // DETAILS_LINK
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.detailsLink = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetEventId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventId' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
    oprot.writeI64(this.eventId);
    oprot.writeFieldEnd();
    if (isSetStartDate()) {
      oprot.writeFieldBegin(START_DATE_FIELD_DESC);
      oprot.writeI64(this.startDate);
      oprot.writeFieldEnd();
    }
    if (isSetEndDate()) {
      oprot.writeFieldBegin(END_DATE_FIELD_DESC);
      oprot.writeI64(this.endDate);
      oprot.writeFieldEnd();
    }
    if (isSetFullDay()) {
      oprot.writeFieldBegin(FULL_DAY_FIELD_DESC);
      oprot.writeBool(this.fullDay);
      oprot.writeFieldEnd();
    }
    if (this.eventPicture != null) {
      if (isSetEventPicture()) {
        oprot.writeFieldBegin(EVENT_PICTURE_FIELD_DESC);
        oprot.writeString(this.eventPicture);
        oprot.writeFieldEnd();
      }
    }
    if (this.eventTitle != null) {
      if (isSetEventTitle()) {
        oprot.writeFieldBegin(EVENT_TITLE_FIELD_DESC);
        oprot.writeString(this.eventTitle);
        oprot.writeFieldEnd();
      }
    }
    if (this.eventPlace != null) {
      if (isSetEventPlace()) {
        oprot.writeFieldBegin(EVENT_PLACE_FIELD_DESC);
        oprot.writeString(this.eventPlace);
        oprot.writeFieldEnd();
      }
    }
    if (this.eventSpeaker != null) {
      if (isSetEventSpeaker()) {
        oprot.writeFieldBegin(EVENT_SPEAKER_FIELD_DESC);
        oprot.writeString(this.eventSpeaker);
        oprot.writeFieldEnd();
      }
    }
    if (this.eventDetails != null) {
      if (isSetEventDetails()) {
        oprot.writeFieldBegin(EVENT_DETAILS_FIELD_DESC);
        oprot.writeString(this.eventDetails);
        oprot.writeFieldEnd();
      }
    }
    if (this.childrenPools != null) {
      if (isSetChildrenPools()) {
        oprot.writeFieldBegin(CHILDREN_POOLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, this.childrenPools.size()));
          for (long _iter6 : this.childrenPools)
          {
            oprot.writeI64(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.eventUri != null) {
      if (isSetEventUri()) {
        oprot.writeFieldBegin(EVENT_URI_FIELD_DESC);
        oprot.writeString(this.eventUri);
        oprot.writeFieldEnd();
      }
    }
    if (this.vcalUid != null) {
      if (isSetVcalUid()) {
        oprot.writeFieldBegin(VCAL_UID_FIELD_DESC);
        oprot.writeString(this.vcalUid);
        oprot.writeFieldEnd();
      }
    }
    if (isSetEventCateg()) {
      oprot.writeFieldBegin(EVENT_CATEG_FIELD_DESC);
      oprot.writeI32(this.eventCateg);
      oprot.writeFieldEnd();
    }
    if (this.eventTags != null) {
      if (isSetEventTags()) {
        oprot.writeFieldBegin(EVENT_TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.eventTags.size()));
          for (String _iter7 : this.eventTags)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.locationHref != null) {
      if (isSetLocationHref()) {
        oprot.writeFieldBegin(LOCATION_HREF_FIELD_DESC);
        oprot.writeString(this.locationHref);
        oprot.writeFieldEnd();
      }
    }
    if (this.detailsLink != null) {
      if (isSetDetailsLink()) {
        oprot.writeFieldBegin(DETAILS_LINK_FIELD_DESC);
        oprot.writeString(this.detailsLink);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventItem(");
    boolean first = true;

    sb.append("eventId:");
    sb.append(this.eventId);
    first = false;
    if (isSetStartDate()) {
      if (!first) sb.append(", ");
      sb.append("startDate:");
      sb.append(this.startDate);
      first = false;
    }
    if (isSetEndDate()) {
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
    }
    if (isSetFullDay()) {
      if (!first) sb.append(", ");
      sb.append("fullDay:");
      sb.append(this.fullDay);
      first = false;
    }
    if (isSetEventPicture()) {
      if (!first) sb.append(", ");
      sb.append("eventPicture:");
      if (this.eventPicture == null) {
        sb.append("null");
      } else {
        sb.append(this.eventPicture);
      }
      first = false;
    }
    if (isSetEventTitle()) {
      if (!first) sb.append(", ");
      sb.append("eventTitle:");
      if (this.eventTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.eventTitle);
      }
      first = false;
    }
    if (isSetEventPlace()) {
      if (!first) sb.append(", ");
      sb.append("eventPlace:");
      if (this.eventPlace == null) {
        sb.append("null");
      } else {
        sb.append(this.eventPlace);
      }
      first = false;
    }
    if (isSetEventSpeaker()) {
      if (!first) sb.append(", ");
      sb.append("eventSpeaker:");
      if (this.eventSpeaker == null) {
        sb.append("null");
      } else {
        sb.append(this.eventSpeaker);
      }
      first = false;
    }
    if (isSetEventDetails()) {
      if (!first) sb.append(", ");
      sb.append("eventDetails:");
      if (this.eventDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.eventDetails);
      }
      first = false;
    }
    if (isSetChildrenPools()) {
      if (!first) sb.append(", ");
      sb.append("childrenPools:");
      if (this.childrenPools == null) {
        sb.append("null");
      } else {
        sb.append(this.childrenPools);
      }
      first = false;
    }
    if (isSetEventUri()) {
      if (!first) sb.append(", ");
      sb.append("eventUri:");
      if (this.eventUri == null) {
        sb.append("null");
      } else {
        sb.append(this.eventUri);
      }
      first = false;
    }
    if (isSetVcalUid()) {
      if (!first) sb.append(", ");
      sb.append("vcalUid:");
      if (this.vcalUid == null) {
        sb.append("null");
      } else {
        sb.append(this.vcalUid);
      }
      first = false;
    }
    if (isSetEventCateg()) {
      if (!first) sb.append(", ");
      sb.append("eventCateg:");
      sb.append(this.eventCateg);
      first = false;
    }
    if (isSetEventTags()) {
      if (!first) sb.append(", ");
      sb.append("eventTags:");
      if (this.eventTags == null) {
        sb.append("null");
      } else {
        sb.append(this.eventTags);
      }
      first = false;
    }
    if (isSetLocationHref()) {
      if (!first) sb.append(", ");
      sb.append("locationHref:");
      if (this.locationHref == null) {
        sb.append("null");
      } else {
        sb.append(this.locationHref);
      }
      first = false;
    }
    if (isSetDetailsLink()) {
      if (!first) sb.append(", ");
      sb.append("detailsLink:");
      if (this.detailsLink == null) {
        sb.append("null");
      } else {
        sb.append(this.detailsLink);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'eventId' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

