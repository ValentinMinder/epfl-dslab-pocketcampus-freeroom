/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class EventItemReply implements org.apache.thrift.TBase<EventItemReply, EventItemReply._Fields>, java.io.Serializable, Cloneable, Comparable<EventItemReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventItemReply");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("eventItem", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CHILDREN_POOLS_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenPools", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGS_FIELD_DESC = new org.apache.thrift.protocol.TField("categs", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventItemReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventItemReplyTupleSchemeFactory());
  }

  private int status; // required
  private EventItem eventItem; // optional
  private Map<Long,EventPool> childrenPools; // optional
  private Map<Integer,String> categs; // optional
  private Map<String,String> tags; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    EVENT_ITEM((short)2, "eventItem"),
    CHILDREN_POOLS((short)3, "childrenPools"),
    CATEGS((short)5, "categs"),
    TAGS((short)6, "tags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // EVENT_ITEM
          return EVENT_ITEM;
        case 3: // CHILDREN_POOLS
          return CHILDREN_POOLS;
        case 5: // CATEGS
          return CATEGS;
        case 6: // TAGS
          return TAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EVENT_ITEM,_Fields.CHILDREN_POOLS,_Fields.CATEGS,_Fields.TAGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_ITEM, new org.apache.thrift.meta_data.FieldMetaData("eventItem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventItem.class)));
    tmpMap.put(_Fields.CHILDREN_POOLS, new org.apache.thrift.meta_data.FieldMetaData("childrenPools", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventPool.class))));
    tmpMap.put(_Fields.CATEGS, new org.apache.thrift.meta_data.FieldMetaData("categs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventItemReply.class, metaDataMap);
  }

  public EventItemReply() {
  }

  public EventItemReply(
    int status)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventItemReply(EventItemReply other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status = other.status;
    if (other.isSetEventItem()) {
      this.eventItem = new EventItem(other.eventItem);
    }
    if (other.isSetChildrenPools()) {
      Map<Long,EventPool> __this__childrenPools = new HashMap<Long,EventPool>(other.childrenPools.size());
      for (Map.Entry<Long, EventPool> other_element : other.childrenPools.entrySet()) {

        Long other_element_key = other_element.getKey();
        EventPool other_element_value = other_element.getValue();

        Long __this__childrenPools_copy_key = other_element_key;

        EventPool __this__childrenPools_copy_value = new EventPool(other_element_value);

        __this__childrenPools.put(__this__childrenPools_copy_key, __this__childrenPools_copy_value);
      }
      this.childrenPools = __this__childrenPools;
    }
    if (other.isSetCategs()) {
      Map<Integer,String> __this__categs = new HashMap<Integer,String>(other.categs);
      this.categs = __this__categs;
    }
    if (other.isSetTags()) {
      Map<String,String> __this__tags = new HashMap<String,String>(other.tags);
      this.tags = __this__tags;
    }
  }

  public EventItemReply deepCopy() {
    return new EventItemReply(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.eventItem = null;
    this.childrenPools = null;
    this.categs = null;
    this.tags = null;
  }

  public int getStatus() {
    return this.status;
  }

  public EventItemReply setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public EventItem getEventItem() {
    return this.eventItem;
  }

  public EventItemReply setEventItem(EventItem eventItem) {
    this.eventItem = eventItem;
    return this;
  }

  public void unsetEventItem() {
    this.eventItem = null;
  }

  /** Returns true if field eventItem is set (has been assigned a value) and false otherwise */
  public boolean isSetEventItem() {
    return this.eventItem != null;
  }

  public void setEventItemIsSet(boolean value) {
    if (!value) {
      this.eventItem = null;
    }
  }

  public int getChildrenPoolsSize() {
    return (this.childrenPools == null) ? 0 : this.childrenPools.size();
  }

  public void putToChildrenPools(long key, EventPool val) {
    if (this.childrenPools == null) {
      this.childrenPools = new HashMap<Long,EventPool>();
    }
    this.childrenPools.put(key, val);
  }

  public Map<Long,EventPool> getChildrenPools() {
    return this.childrenPools;
  }

  public EventItemReply setChildrenPools(Map<Long,EventPool> childrenPools) {
    this.childrenPools = childrenPools;
    return this;
  }

  public void unsetChildrenPools() {
    this.childrenPools = null;
  }

  /** Returns true if field childrenPools is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenPools() {
    return this.childrenPools != null;
  }

  public void setChildrenPoolsIsSet(boolean value) {
    if (!value) {
      this.childrenPools = null;
    }
  }

  public int getCategsSize() {
    return (this.categs == null) ? 0 : this.categs.size();
  }

  public void putToCategs(int key, String val) {
    if (this.categs == null) {
      this.categs = new HashMap<Integer,String>();
    }
    this.categs.put(key, val);
  }

  public Map<Integer,String> getCategs() {
    return this.categs;
  }

  public EventItemReply setCategs(Map<Integer,String> categs) {
    this.categs = categs;
    return this;
  }

  public void unsetCategs() {
    this.categs = null;
  }

  /** Returns true if field categs is set (has been assigned a value) and false otherwise */
  public boolean isSetCategs() {
    return this.categs != null;
  }

  public void setCategsIsSet(boolean value) {
    if (!value) {
      this.categs = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public void putToTags(String key, String val) {
    if (this.tags == null) {
      this.tags = new HashMap<String,String>();
    }
    this.tags.put(key, val);
  }

  public Map<String,String> getTags() {
    return this.tags;
  }

  public EventItemReply setTags(Map<String,String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case EVENT_ITEM:
      if (value == null) {
        unsetEventItem();
      } else {
        setEventItem((EventItem)value);
      }
      break;

    case CHILDREN_POOLS:
      if (value == null) {
        unsetChildrenPools();
      } else {
        setChildrenPools((Map<Long,EventPool>)value);
      }
      break;

    case CATEGS:
      if (value == null) {
        unsetCategs();
      } else {
        setCategs((Map<Integer,String>)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Integer.valueOf(getStatus());

    case EVENT_ITEM:
      return getEventItem();

    case CHILDREN_POOLS:
      return getChildrenPools();

    case CATEGS:
      return getCategs();

    case TAGS:
      return getTags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case EVENT_ITEM:
      return isSetEventItem();
    case CHILDREN_POOLS:
      return isSetChildrenPools();
    case CATEGS:
      return isSetCategs();
    case TAGS:
      return isSetTags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventItemReply)
      return this.equals((EventItemReply)that);
    return false;
  }

  public boolean equals(EventItemReply that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_eventItem = true && this.isSetEventItem();
    boolean that_present_eventItem = true && that.isSetEventItem();
    if (this_present_eventItem || that_present_eventItem) {
      if (!(this_present_eventItem && that_present_eventItem))
        return false;
      if (!this.eventItem.equals(that.eventItem))
        return false;
    }

    boolean this_present_childrenPools = true && this.isSetChildrenPools();
    boolean that_present_childrenPools = true && that.isSetChildrenPools();
    if (this_present_childrenPools || that_present_childrenPools) {
      if (!(this_present_childrenPools && that_present_childrenPools))
        return false;
      if (!this.childrenPools.equals(that.childrenPools))
        return false;
    }

    boolean this_present_categs = true && this.isSetCategs();
    boolean that_present_categs = true && that.isSetCategs();
    if (this_present_categs || that_present_categs) {
      if (!(this_present_categs && that_present_categs))
        return false;
      if (!this.categs.equals(that.categs))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_eventItem = true && (isSetEventItem());
    list.add(present_eventItem);
    if (present_eventItem)
      list.add(eventItem);

    boolean present_childrenPools = true && (isSetChildrenPools());
    list.add(present_childrenPools);
    if (present_childrenPools)
      list.add(childrenPools);

    boolean present_categs = true && (isSetCategs());
    list.add(present_categs);
    if (present_categs)
      list.add(categs);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    return list.hashCode();
  }

  @Override
  public int compareTo(EventItemReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventItem()).compareTo(other.isSetEventItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventItem, other.eventItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenPools()).compareTo(other.isSetChildrenPools());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenPools()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenPools, other.childrenPools);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategs()).compareTo(other.isSetCategs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categs, other.categs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventItemReply(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetEventItem()) {
      if (!first) sb.append(", ");
      sb.append("eventItem:");
      if (this.eventItem == null) {
        sb.append("null");
      } else {
        sb.append(this.eventItem);
      }
      first = false;
    }
    if (isSetChildrenPools()) {
      if (!first) sb.append(", ");
      sb.append("childrenPools:");
      if (this.childrenPools == null) {
        sb.append("null");
      } else {
        sb.append(this.childrenPools);
      }
      first = false;
    }
    if (isSetCategs()) {
      if (!first) sb.append(", ");
      sb.append("categs:");
      if (this.categs == null) {
        sb.append("null");
      } else {
        sb.append(this.categs);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (eventItem != null) {
      eventItem.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventItemReplyStandardSchemeFactory implements SchemeFactory {
    public EventItemReplyStandardScheme getScheme() {
      return new EventItemReplyStandardScheme();
    }
  }

  private static class EventItemReplyStandardScheme extends StandardScheme<EventItemReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EventItemReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENT_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.eventItem = new EventItem();
              struct.eventItem.read(iprot);
              struct.setEventItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHILDREN_POOLS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                struct.childrenPools = new HashMap<Long,EventPool>(2*_map48.size);
                long _key49;
                EventPool _val50;
                for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                {
                  _key49 = iprot.readI64();
                  _val50 = new EventPool();
                  _val50.read(iprot);
                  struct.childrenPools.put(_key49, _val50);
                }
                iprot.readMapEnd();
              }
              struct.setChildrenPoolsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CATEGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
                struct.categs = new HashMap<Integer,String>(2*_map52.size);
                int _key53;
                String _val54;
                for (int _i55 = 0; _i55 < _map52.size; ++_i55)
                {
                  _key53 = iprot.readI32();
                  _val54 = iprot.readString();
                  struct.categs.put(_key53, _val54);
                }
                iprot.readMapEnd();
              }
              struct.setCategsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
                struct.tags = new HashMap<String,String>(2*_map56.size);
                String _key57;
                String _val58;
                for (int _i59 = 0; _i59 < _map56.size; ++_i59)
                {
                  _key57 = iprot.readString();
                  _val58 = iprot.readString();
                  struct.tags.put(_key57, _val58);
                }
                iprot.readMapEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EventItemReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.eventItem != null) {
        if (struct.isSetEventItem()) {
          oprot.writeFieldBegin(EVENT_ITEM_FIELD_DESC);
          struct.eventItem.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.childrenPools != null) {
        if (struct.isSetChildrenPools()) {
          oprot.writeFieldBegin(CHILDREN_POOLS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.childrenPools.size()));
            for (Map.Entry<Long, EventPool> _iter60 : struct.childrenPools.entrySet())
            {
              oprot.writeI64(_iter60.getKey());
              _iter60.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.categs != null) {
        if (struct.isSetCategs()) {
          oprot.writeFieldBegin(CATEGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.categs.size()));
            for (Map.Entry<Integer, String> _iter61 : struct.categs.entrySet())
            {
              oprot.writeI32(_iter61.getKey());
              oprot.writeString(_iter61.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (Map.Entry<String, String> _iter62 : struct.tags.entrySet())
            {
              oprot.writeString(_iter62.getKey());
              oprot.writeString(_iter62.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventItemReplyTupleSchemeFactory implements SchemeFactory {
    public EventItemReplyTupleScheme getScheme() {
      return new EventItemReplyTupleScheme();
    }
  }

  private static class EventItemReplyTupleScheme extends TupleScheme<EventItemReply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EventItemReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status);
      BitSet optionals = new BitSet();
      if (struct.isSetEventItem()) {
        optionals.set(0);
      }
      if (struct.isSetChildrenPools()) {
        optionals.set(1);
      }
      if (struct.isSetCategs()) {
        optionals.set(2);
      }
      if (struct.isSetTags()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEventItem()) {
        struct.eventItem.write(oprot);
      }
      if (struct.isSetChildrenPools()) {
        {
          oprot.writeI32(struct.childrenPools.size());
          for (Map.Entry<Long, EventPool> _iter63 : struct.childrenPools.entrySet())
          {
            oprot.writeI64(_iter63.getKey());
            _iter63.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetCategs()) {
        {
          oprot.writeI32(struct.categs.size());
          for (Map.Entry<Integer, String> _iter64 : struct.categs.entrySet())
          {
            oprot.writeI32(_iter64.getKey());
            oprot.writeString(_iter64.getValue());
          }
        }
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (Map.Entry<String, String> _iter65 : struct.tags.entrySet())
          {
            oprot.writeString(_iter65.getKey());
            oprot.writeString(_iter65.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EventItemReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.eventItem = new EventItem();
        struct.eventItem.read(iprot);
        struct.setEventItemIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.childrenPools = new HashMap<Long,EventPool>(2*_map66.size);
          long _key67;
          EventPool _val68;
          for (int _i69 = 0; _i69 < _map66.size; ++_i69)
          {
            _key67 = iprot.readI64();
            _val68 = new EventPool();
            _val68.read(iprot);
            struct.childrenPools.put(_key67, _val68);
          }
        }
        struct.setChildrenPoolsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.categs = new HashMap<Integer,String>(2*_map70.size);
          int _key71;
          String _val72;
          for (int _i73 = 0; _i73 < _map70.size; ++_i73)
          {
            _key71 = iprot.readI32();
            _val72 = iprot.readString();
            struct.categs.put(_key71, _val72);
          }
        }
        struct.setCategsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map74 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new HashMap<String,String>(2*_map74.size);
          String _key75;
          String _val76;
          for (int _i77 = 0; _i77 < _map74.size; ++_i77)
          {
            _key75 = iprot.readString();
            _val76 = iprot.readString();
            struct.tags.put(_key75, _val76);
          }
        }
        struct.setTagsIsSet(true);
      }
    }
  }

}

