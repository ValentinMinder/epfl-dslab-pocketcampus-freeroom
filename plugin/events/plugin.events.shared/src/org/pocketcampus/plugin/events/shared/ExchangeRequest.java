/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class ExchangeRequest implements org.apache.thrift.TBase<ExchangeRequest, ExchangeRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ExchangeRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExchangeRequest");

  private static final org.apache.thrift.protocol.TField EXCHANGE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeToken", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("userToken", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_TICKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("userTickets", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExchangeRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExchangeRequestTupleSchemeFactory());
  }

  private String exchangeToken; // required
  private String userToken; // optional
  private List<String> userTickets; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXCHANGE_TOKEN((short)2, "exchangeToken"),
    USER_TOKEN((short)1, "userToken"),
    USER_TICKETS((short)3, "userTickets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // EXCHANGE_TOKEN
          return EXCHANGE_TOKEN;
        case 1: // USER_TOKEN
          return USER_TOKEN;
        case 3: // USER_TICKETS
          return USER_TICKETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.USER_TOKEN,_Fields.USER_TICKETS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXCHANGE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("exchangeToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("userToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TICKETS, new org.apache.thrift.meta_data.FieldMetaData("userTickets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExchangeRequest.class, metaDataMap);
  }

  public ExchangeRequest() {
  }

  public ExchangeRequest(
    String exchangeToken)
  {
    this();
    this.exchangeToken = exchangeToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExchangeRequest(ExchangeRequest other) {
    if (other.isSetExchangeToken()) {
      this.exchangeToken = other.exchangeToken;
    }
    if (other.isSetUserToken()) {
      this.userToken = other.userToken;
    }
    if (other.isSetUserTickets()) {
      List<String> __this__userTickets = new ArrayList<String>(other.userTickets);
      this.userTickets = __this__userTickets;
    }
  }

  public ExchangeRequest deepCopy() {
    return new ExchangeRequest(this);
  }

  @Override
  public void clear() {
    this.exchangeToken = null;
    this.userToken = null;
    this.userTickets = null;
  }

  public String getExchangeToken() {
    return this.exchangeToken;
  }

  public ExchangeRequest setExchangeToken(String exchangeToken) {
    this.exchangeToken = exchangeToken;
    return this;
  }

  public void unsetExchangeToken() {
    this.exchangeToken = null;
  }

  /** Returns true if field exchangeToken is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeToken() {
    return this.exchangeToken != null;
  }

  public void setExchangeTokenIsSet(boolean value) {
    if (!value) {
      this.exchangeToken = null;
    }
  }

  public String getUserToken() {
    return this.userToken;
  }

  public ExchangeRequest setUserToken(String userToken) {
    this.userToken = userToken;
    return this;
  }

  public void unsetUserToken() {
    this.userToken = null;
  }

  /** Returns true if field userToken is set (has been assigned a value) and false otherwise */
  public boolean isSetUserToken() {
    return this.userToken != null;
  }

  public void setUserTokenIsSet(boolean value) {
    if (!value) {
      this.userToken = null;
    }
  }

  public int getUserTicketsSize() {
    return (this.userTickets == null) ? 0 : this.userTickets.size();
  }

  public java.util.Iterator<String> getUserTicketsIterator() {
    return (this.userTickets == null) ? null : this.userTickets.iterator();
  }

  public void addToUserTickets(String elem) {
    if (this.userTickets == null) {
      this.userTickets = new ArrayList<String>();
    }
    this.userTickets.add(elem);
  }

  public List<String> getUserTickets() {
    return this.userTickets;
  }

  public ExchangeRequest setUserTickets(List<String> userTickets) {
    this.userTickets = userTickets;
    return this;
  }

  public void unsetUserTickets() {
    this.userTickets = null;
  }

  /** Returns true if field userTickets is set (has been assigned a value) and false otherwise */
  public boolean isSetUserTickets() {
    return this.userTickets != null;
  }

  public void setUserTicketsIsSet(boolean value) {
    if (!value) {
      this.userTickets = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXCHANGE_TOKEN:
      if (value == null) {
        unsetExchangeToken();
      } else {
        setExchangeToken((String)value);
      }
      break;

    case USER_TOKEN:
      if (value == null) {
        unsetUserToken();
      } else {
        setUserToken((String)value);
      }
      break;

    case USER_TICKETS:
      if (value == null) {
        unsetUserTickets();
      } else {
        setUserTickets((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXCHANGE_TOKEN:
      return getExchangeToken();

    case USER_TOKEN:
      return getUserToken();

    case USER_TICKETS:
      return getUserTickets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXCHANGE_TOKEN:
      return isSetExchangeToken();
    case USER_TOKEN:
      return isSetUserToken();
    case USER_TICKETS:
      return isSetUserTickets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExchangeRequest)
      return this.equals((ExchangeRequest)that);
    return false;
  }

  public boolean equals(ExchangeRequest that) {
    if (that == null)
      return false;

    boolean this_present_exchangeToken = true && this.isSetExchangeToken();
    boolean that_present_exchangeToken = true && that.isSetExchangeToken();
    if (this_present_exchangeToken || that_present_exchangeToken) {
      if (!(this_present_exchangeToken && that_present_exchangeToken))
        return false;
      if (!this.exchangeToken.equals(that.exchangeToken))
        return false;
    }

    boolean this_present_userToken = true && this.isSetUserToken();
    boolean that_present_userToken = true && that.isSetUserToken();
    if (this_present_userToken || that_present_userToken) {
      if (!(this_present_userToken && that_present_userToken))
        return false;
      if (!this.userToken.equals(that.userToken))
        return false;
    }

    boolean this_present_userTickets = true && this.isSetUserTickets();
    boolean that_present_userTickets = true && that.isSetUserTickets();
    if (this_present_userTickets || that_present_userTickets) {
      if (!(this_present_userTickets && that_present_userTickets))
        return false;
      if (!this.userTickets.equals(that.userTickets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_exchangeToken = true && (isSetExchangeToken());
    list.add(present_exchangeToken);
    if (present_exchangeToken)
      list.add(exchangeToken);

    boolean present_userToken = true && (isSetUserToken());
    list.add(present_userToken);
    if (present_userToken)
      list.add(userToken);

    boolean present_userTickets = true && (isSetUserTickets());
    list.add(present_userTickets);
    if (present_userTickets)
      list.add(userTickets);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExchangeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExchangeToken()).compareTo(other.isSetExchangeToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeToken, other.exchangeToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserToken()).compareTo(other.isSetUserToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userToken, other.userToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserTickets()).compareTo(other.isSetUserTickets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserTickets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userTickets, other.userTickets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExchangeRequest(");
    boolean first = true;

    sb.append("exchangeToken:");
    if (this.exchangeToken == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeToken);
    }
    first = false;
    if (isSetUserToken()) {
      if (!first) sb.append(", ");
      sb.append("userToken:");
      if (this.userToken == null) {
        sb.append("null");
      } else {
        sb.append(this.userToken);
      }
      first = false;
    }
    if (isSetUserTickets()) {
      if (!first) sb.append(", ");
      sb.append("userTickets:");
      if (this.userTickets == null) {
        sb.append("null");
      } else {
        sb.append(this.userTickets);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (exchangeToken == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exchangeToken' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExchangeRequestStandardSchemeFactory implements SchemeFactory {
    public ExchangeRequestStandardScheme getScheme() {
      return new ExchangeRequestStandardScheme();
    }
  }

  private static class ExchangeRequestStandardScheme extends StandardScheme<ExchangeRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExchangeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // EXCHANGE_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeToken = iprot.readString();
              struct.setExchangeTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // USER_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userToken = iprot.readString();
              struct.setUserTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_TICKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                struct.userTickets = new ArrayList<String>(_list108.size);
                String _elem109;
                for (int _i110 = 0; _i110 < _list108.size; ++_i110)
                {
                  _elem109 = iprot.readString();
                  struct.userTickets.add(_elem109);
                }
                iprot.readListEnd();
              }
              struct.setUserTicketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExchangeRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userToken != null) {
        if (struct.isSetUserToken()) {
          oprot.writeFieldBegin(USER_TOKEN_FIELD_DESC);
          oprot.writeString(struct.userToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeToken != null) {
        oprot.writeFieldBegin(EXCHANGE_TOKEN_FIELD_DESC);
        oprot.writeString(struct.exchangeToken);
        oprot.writeFieldEnd();
      }
      if (struct.userTickets != null) {
        if (struct.isSetUserTickets()) {
          oprot.writeFieldBegin(USER_TICKETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userTickets.size()));
            for (String _iter111 : struct.userTickets)
            {
              oprot.writeString(_iter111);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExchangeRequestTupleSchemeFactory implements SchemeFactory {
    public ExchangeRequestTupleScheme getScheme() {
      return new ExchangeRequestTupleScheme();
    }
  }

  private static class ExchangeRequestTupleScheme extends TupleScheme<ExchangeRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExchangeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.exchangeToken);
      BitSet optionals = new BitSet();
      if (struct.isSetUserToken()) {
        optionals.set(0);
      }
      if (struct.isSetUserTickets()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUserToken()) {
        oprot.writeString(struct.userToken);
      }
      if (struct.isSetUserTickets()) {
        {
          oprot.writeI32(struct.userTickets.size());
          for (String _iter112 : struct.userTickets)
          {
            oprot.writeString(_iter112);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExchangeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.exchangeToken = iprot.readString();
      struct.setExchangeTokenIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.userToken = iprot.readString();
        struct.setUserTokenIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.userTickets = new ArrayList<String>(_list113.size);
          String _elem114;
          for (int _i115 = 0; _i115 < _list113.size; ++_i115)
          {
            _elem114 = iprot.readString();
            struct.userTickets.add(_elem114);
          }
        }
        struct.setUserTicketsIsSet(true);
      }
    }
  }

}

