/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventsItem implements org.apache.thrift.TBase<EventsItem, EventsItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventsItem");

  private static final org.apache.thrift.protocol.TField EVENTS_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventsItemId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField URLREF_FIELD_DESC = new org.apache.thrift.protocol.TField("urlref", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SPEAKER_FIELD_DESC = new org.apache.thrift.protocol.TField("speaker", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contact", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField AUDIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("audience", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField EXPECTED_PEOPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedPeople", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("room", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ORGANIZER_FIELD_DESC = new org.apache.thrift.protocol.TField("organizer", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SHORTTITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("shorttitle", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField FEED_FIELD_DESC = new org.apache.thrift.protocol.TField("feed", org.apache.thrift.protocol.TType.STRING, (short)19);

  public long eventsItemId; // required
  public String title; // required
  public String link; // required
  public String content; // required
  public String urlref; // required
  public long startDate; // required
  public long endDate; // required
  public String startTime; // required
  public String speaker; // required
  public String contact; // required
  public String language; // required
  public String audience; // required
  public String expectedPeople; // required
  public String location; // required
  public String room; // required
  public String category; // required
  public String organizer; // required
  public String shorttitle; // required
  public String feed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENTS_ITEM_ID((short)1, "eventsItemId"),
    TITLE((short)2, "title"),
    LINK((short)3, "link"),
    CONTENT((short)4, "content"),
    URLREF((short)5, "urlref"),
    START_DATE((short)6, "startDate"),
    END_DATE((short)7, "endDate"),
    START_TIME((short)8, "startTime"),
    SPEAKER((short)9, "speaker"),
    CONTACT((short)10, "contact"),
    LANGUAGE((short)11, "language"),
    AUDIENCE((short)12, "audience"),
    EXPECTED_PEOPLE((short)13, "expectedPeople"),
    LOCATION((short)14, "location"),
    ROOM((short)15, "room"),
    CATEGORY((short)16, "category"),
    ORGANIZER((short)17, "organizer"),
    SHORTTITLE((short)18, "shorttitle"),
    FEED((short)19, "feed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENTS_ITEM_ID
          return EVENTS_ITEM_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // LINK
          return LINK;
        case 4: // CONTENT
          return CONTENT;
        case 5: // URLREF
          return URLREF;
        case 6: // START_DATE
          return START_DATE;
        case 7: // END_DATE
          return END_DATE;
        case 8: // START_TIME
          return START_TIME;
        case 9: // SPEAKER
          return SPEAKER;
        case 10: // CONTACT
          return CONTACT;
        case 11: // LANGUAGE
          return LANGUAGE;
        case 12: // AUDIENCE
          return AUDIENCE;
        case 13: // EXPECTED_PEOPLE
          return EXPECTED_PEOPLE;
        case 14: // LOCATION
          return LOCATION;
        case 15: // ROOM
          return ROOM;
        case 16: // CATEGORY
          return CATEGORY;
        case 17: // ORGANIZER
          return ORGANIZER;
        case 18: // SHORTTITLE
          return SHORTTITLE;
        case 19: // FEED
          return FEED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTSITEMID_ISSET_ID = 0;
  private static final int __STARTDATE_ISSET_ID = 1;
  private static final int __ENDDATE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENTS_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("eventsItemId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URLREF, new org.apache.thrift.meta_data.FieldMetaData("urlref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPEAKER, new org.apache.thrift.meta_data.FieldMetaData("speaker", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT, new org.apache.thrift.meta_data.FieldMetaData("contact", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIENCE, new org.apache.thrift.meta_data.FieldMetaData("audience", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPECTED_PEOPLE, new org.apache.thrift.meta_data.FieldMetaData("expectedPeople", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROOM, new org.apache.thrift.meta_data.FieldMetaData("room", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZER, new org.apache.thrift.meta_data.FieldMetaData("organizer", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORTTITLE, new org.apache.thrift.meta_data.FieldMetaData("shorttitle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEED, new org.apache.thrift.meta_data.FieldMetaData("feed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventsItem.class, metaDataMap);
  }

  public EventsItem() {
  }

  public EventsItem(
    long eventsItemId,
    String title,
    String link,
    String content,
    String urlref,
    long startDate,
    long endDate,
    String startTime,
    String speaker,
    String contact,
    String language,
    String audience,
    String expectedPeople,
    String location,
    String room,
    String category,
    String organizer,
    String shorttitle,
    String feed)
  {
    this();
    this.eventsItemId = eventsItemId;
    setEventsItemIdIsSet(true);
    this.title = title;
    this.link = link;
    this.content = content;
    this.urlref = urlref;
    this.startDate = startDate;
    setStartDateIsSet(true);
    this.endDate = endDate;
    setEndDateIsSet(true);
    this.startTime = startTime;
    this.speaker = speaker;
    this.contact = contact;
    this.language = language;
    this.audience = audience;
    this.expectedPeople = expectedPeople;
    this.location = location;
    this.room = room;
    this.category = category;
    this.organizer = organizer;
    this.shorttitle = shorttitle;
    this.feed = feed;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventsItem(EventsItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.eventsItemId = other.eventsItemId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetLink()) {
      this.link = other.link;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetUrlref()) {
      this.urlref = other.urlref;
    }
    this.startDate = other.startDate;
    this.endDate = other.endDate;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetSpeaker()) {
      this.speaker = other.speaker;
    }
    if (other.isSetContact()) {
      this.contact = other.contact;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetAudience()) {
      this.audience = other.audience;
    }
    if (other.isSetExpectedPeople()) {
      this.expectedPeople = other.expectedPeople;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetRoom()) {
      this.room = other.room;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetOrganizer()) {
      this.organizer = other.organizer;
    }
    if (other.isSetShorttitle()) {
      this.shorttitle = other.shorttitle;
    }
    if (other.isSetFeed()) {
      this.feed = other.feed;
    }
  }

  public EventsItem deepCopy() {
    return new EventsItem(this);
  }

  @Override
  public void clear() {
    setEventsItemIdIsSet(false);
    this.eventsItemId = 0;
    this.title = null;
    this.link = null;
    this.content = null;
    this.urlref = null;
    setStartDateIsSet(false);
    this.startDate = 0;
    setEndDateIsSet(false);
    this.endDate = 0;
    this.startTime = null;
    this.speaker = null;
    this.contact = null;
    this.language = null;
    this.audience = null;
    this.expectedPeople = null;
    this.location = null;
    this.room = null;
    this.category = null;
    this.organizer = null;
    this.shorttitle = null;
    this.feed = null;
  }

  public long getEventsItemId() {
    return this.eventsItemId;
  }

  public EventsItem setEventsItemId(long eventsItemId) {
    this.eventsItemId = eventsItemId;
    setEventsItemIdIsSet(true);
    return this;
  }

  public void unsetEventsItemId() {
    __isset_bit_vector.clear(__EVENTSITEMID_ISSET_ID);
  }

  /** Returns true if field eventsItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventsItemId() {
    return __isset_bit_vector.get(__EVENTSITEMID_ISSET_ID);
  }

  public void setEventsItemIdIsSet(boolean value) {
    __isset_bit_vector.set(__EVENTSITEMID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public EventsItem setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getLink() {
    return this.link;
  }

  public EventsItem setLink(String link) {
    this.link = link;
    return this;
  }

  public void unsetLink() {
    this.link = null;
  }

  /** Returns true if field link is set (has been assigned a value) and false otherwise */
  public boolean isSetLink() {
    return this.link != null;
  }

  public void setLinkIsSet(boolean value) {
    if (!value) {
      this.link = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public EventsItem setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getUrlref() {
    return this.urlref;
  }

  public EventsItem setUrlref(String urlref) {
    this.urlref = urlref;
    return this;
  }

  public void unsetUrlref() {
    this.urlref = null;
  }

  /** Returns true if field urlref is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlref() {
    return this.urlref != null;
  }

  public void setUrlrefIsSet(boolean value) {
    if (!value) {
      this.urlref = null;
    }
  }

  public long getStartDate() {
    return this.startDate;
  }

  public EventsItem setStartDate(long startDate) {
    this.startDate = startDate;
    setStartDateIsSet(true);
    return this;
  }

  public void unsetStartDate() {
    __isset_bit_vector.clear(__STARTDATE_ISSET_ID);
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return __isset_bit_vector.get(__STARTDATE_ISSET_ID);
  }

  public void setStartDateIsSet(boolean value) {
    __isset_bit_vector.set(__STARTDATE_ISSET_ID, value);
  }

  public long getEndDate() {
    return this.endDate;
  }

  public EventsItem setEndDate(long endDate) {
    this.endDate = endDate;
    setEndDateIsSet(true);
    return this;
  }

  public void unsetEndDate() {
    __isset_bit_vector.clear(__ENDDATE_ISSET_ID);
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return __isset_bit_vector.get(__ENDDATE_ISSET_ID);
  }

  public void setEndDateIsSet(boolean value) {
    __isset_bit_vector.set(__ENDDATE_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public EventsItem setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getSpeaker() {
    return this.speaker;
  }

  public EventsItem setSpeaker(String speaker) {
    this.speaker = speaker;
    return this;
  }

  public void unsetSpeaker() {
    this.speaker = null;
  }

  /** Returns true if field speaker is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeaker() {
    return this.speaker != null;
  }

  public void setSpeakerIsSet(boolean value) {
    if (!value) {
      this.speaker = null;
    }
  }

  public String getContact() {
    return this.contact;
  }

  public EventsItem setContact(String contact) {
    this.contact = contact;
    return this;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public EventsItem setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getAudience() {
    return this.audience;
  }

  public EventsItem setAudience(String audience) {
    this.audience = audience;
    return this;
  }

  public void unsetAudience() {
    this.audience = null;
  }

  /** Returns true if field audience is set (has been assigned a value) and false otherwise */
  public boolean isSetAudience() {
    return this.audience != null;
  }

  public void setAudienceIsSet(boolean value) {
    if (!value) {
      this.audience = null;
    }
  }

  public String getExpectedPeople() {
    return this.expectedPeople;
  }

  public EventsItem setExpectedPeople(String expectedPeople) {
    this.expectedPeople = expectedPeople;
    return this;
  }

  public void unsetExpectedPeople() {
    this.expectedPeople = null;
  }

  /** Returns true if field expectedPeople is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedPeople() {
    return this.expectedPeople != null;
  }

  public void setExpectedPeopleIsSet(boolean value) {
    if (!value) {
      this.expectedPeople = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public EventsItem setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public String getRoom() {
    return this.room;
  }

  public EventsItem setRoom(String room) {
    this.room = room;
    return this;
  }

  public void unsetRoom() {
    this.room = null;
  }

  /** Returns true if field room is set (has been assigned a value) and false otherwise */
  public boolean isSetRoom() {
    return this.room != null;
  }

  public void setRoomIsSet(boolean value) {
    if (!value) {
      this.room = null;
    }
  }

  public String getCategory() {
    return this.category;
  }

  public EventsItem setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getOrganizer() {
    return this.organizer;
  }

  public EventsItem setOrganizer(String organizer) {
    this.organizer = organizer;
    return this;
  }

  public void unsetOrganizer() {
    this.organizer = null;
  }

  /** Returns true if field organizer is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganizer() {
    return this.organizer != null;
  }

  public void setOrganizerIsSet(boolean value) {
    if (!value) {
      this.organizer = null;
    }
  }

  public String getShorttitle() {
    return this.shorttitle;
  }

  public EventsItem setShorttitle(String shorttitle) {
    this.shorttitle = shorttitle;
    return this;
  }

  public void unsetShorttitle() {
    this.shorttitle = null;
  }

  /** Returns true if field shorttitle is set (has been assigned a value) and false otherwise */
  public boolean isSetShorttitle() {
    return this.shorttitle != null;
  }

  public void setShorttitleIsSet(boolean value) {
    if (!value) {
      this.shorttitle = null;
    }
  }

  public String getFeed() {
    return this.feed;
  }

  public EventsItem setFeed(String feed) {
    this.feed = feed;
    return this;
  }

  public void unsetFeed() {
    this.feed = null;
  }

  /** Returns true if field feed is set (has been assigned a value) and false otherwise */
  public boolean isSetFeed() {
    return this.feed != null;
  }

  public void setFeedIsSet(boolean value) {
    if (!value) {
      this.feed = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENTS_ITEM_ID:
      if (value == null) {
        unsetEventsItemId();
      } else {
        setEventsItemId((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case LINK:
      if (value == null) {
        unsetLink();
      } else {
        setLink((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case URLREF:
      if (value == null) {
        unsetUrlref();
      } else {
        setUrlref((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((Long)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case SPEAKER:
      if (value == null) {
        unsetSpeaker();
      } else {
        setSpeaker((String)value);
      }
      break;

    case CONTACT:
      if (value == null) {
        unsetContact();
      } else {
        setContact((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case AUDIENCE:
      if (value == null) {
        unsetAudience();
      } else {
        setAudience((String)value);
      }
      break;

    case EXPECTED_PEOPLE:
      if (value == null) {
        unsetExpectedPeople();
      } else {
        setExpectedPeople((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case ROOM:
      if (value == null) {
        unsetRoom();
      } else {
        setRoom((String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case ORGANIZER:
      if (value == null) {
        unsetOrganizer();
      } else {
        setOrganizer((String)value);
      }
      break;

    case SHORTTITLE:
      if (value == null) {
        unsetShorttitle();
      } else {
        setShorttitle((String)value);
      }
      break;

    case FEED:
      if (value == null) {
        unsetFeed();
      } else {
        setFeed((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENTS_ITEM_ID:
      return Long.valueOf(getEventsItemId());

    case TITLE:
      return getTitle();

    case LINK:
      return getLink();

    case CONTENT:
      return getContent();

    case URLREF:
      return getUrlref();

    case START_DATE:
      return Long.valueOf(getStartDate());

    case END_DATE:
      return Long.valueOf(getEndDate());

    case START_TIME:
      return getStartTime();

    case SPEAKER:
      return getSpeaker();

    case CONTACT:
      return getContact();

    case LANGUAGE:
      return getLanguage();

    case AUDIENCE:
      return getAudience();

    case EXPECTED_PEOPLE:
      return getExpectedPeople();

    case LOCATION:
      return getLocation();

    case ROOM:
      return getRoom();

    case CATEGORY:
      return getCategory();

    case ORGANIZER:
      return getOrganizer();

    case SHORTTITLE:
      return getShorttitle();

    case FEED:
      return getFeed();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENTS_ITEM_ID:
      return isSetEventsItemId();
    case TITLE:
      return isSetTitle();
    case LINK:
      return isSetLink();
    case CONTENT:
      return isSetContent();
    case URLREF:
      return isSetUrlref();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case START_TIME:
      return isSetStartTime();
    case SPEAKER:
      return isSetSpeaker();
    case CONTACT:
      return isSetContact();
    case LANGUAGE:
      return isSetLanguage();
    case AUDIENCE:
      return isSetAudience();
    case EXPECTED_PEOPLE:
      return isSetExpectedPeople();
    case LOCATION:
      return isSetLocation();
    case ROOM:
      return isSetRoom();
    case CATEGORY:
      return isSetCategory();
    case ORGANIZER:
      return isSetOrganizer();
    case SHORTTITLE:
      return isSetShorttitle();
    case FEED:
      return isSetFeed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventsItem)
      return this.equals((EventsItem)that);
    return false;
  }

  public boolean equals(EventsItem that) {
    if (that == null)
      return false;

    boolean this_present_eventsItemId = true;
    boolean that_present_eventsItemId = true;
    if (this_present_eventsItemId || that_present_eventsItemId) {
      if (!(this_present_eventsItemId && that_present_eventsItemId))
        return false;
      if (this.eventsItemId != that.eventsItemId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_link = true && this.isSetLink();
    boolean that_present_link = true && that.isSetLink();
    if (this_present_link || that_present_link) {
      if (!(this_present_link && that_present_link))
        return false;
      if (!this.link.equals(that.link))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_urlref = true && this.isSetUrlref();
    boolean that_present_urlref = true && that.isSetUrlref();
    if (this_present_urlref || that_present_urlref) {
      if (!(this_present_urlref && that_present_urlref))
        return false;
      if (!this.urlref.equals(that.urlref))
        return false;
    }

    boolean this_present_startDate = true;
    boolean that_present_startDate = true;
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (this.startDate != that.startDate)
        return false;
    }

    boolean this_present_endDate = true;
    boolean that_present_endDate = true;
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (this.endDate != that.endDate)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_speaker = true && this.isSetSpeaker();
    boolean that_present_speaker = true && that.isSetSpeaker();
    if (this_present_speaker || that_present_speaker) {
      if (!(this_present_speaker && that_present_speaker))
        return false;
      if (!this.speaker.equals(that.speaker))
        return false;
    }

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_audience = true && this.isSetAudience();
    boolean that_present_audience = true && that.isSetAudience();
    if (this_present_audience || that_present_audience) {
      if (!(this_present_audience && that_present_audience))
        return false;
      if (!this.audience.equals(that.audience))
        return false;
    }

    boolean this_present_expectedPeople = true && this.isSetExpectedPeople();
    boolean that_present_expectedPeople = true && that.isSetExpectedPeople();
    if (this_present_expectedPeople || that_present_expectedPeople) {
      if (!(this_present_expectedPeople && that_present_expectedPeople))
        return false;
      if (!this.expectedPeople.equals(that.expectedPeople))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_room = true && this.isSetRoom();
    boolean that_present_room = true && that.isSetRoom();
    if (this_present_room || that_present_room) {
      if (!(this_present_room && that_present_room))
        return false;
      if (!this.room.equals(that.room))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_organizer = true && this.isSetOrganizer();
    boolean that_present_organizer = true && that.isSetOrganizer();
    if (this_present_organizer || that_present_organizer) {
      if (!(this_present_organizer && that_present_organizer))
        return false;
      if (!this.organizer.equals(that.organizer))
        return false;
    }

    boolean this_present_shorttitle = true && this.isSetShorttitle();
    boolean that_present_shorttitle = true && that.isSetShorttitle();
    if (this_present_shorttitle || that_present_shorttitle) {
      if (!(this_present_shorttitle && that_present_shorttitle))
        return false;
      if (!this.shorttitle.equals(that.shorttitle))
        return false;
    }

    boolean this_present_feed = true && this.isSetFeed();
    boolean that_present_feed = true && that.isSetFeed();
    if (this_present_feed || that_present_feed) {
      if (!(this_present_feed && that_present_feed))
        return false;
      if (!this.feed.equals(that.feed))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_eventsItemId = true;
    builder.append(present_eventsItemId);
    if (present_eventsItemId)
      builder.append(eventsItemId);

    boolean present_title = true && (isSetTitle());
    builder.append(present_title);
    if (present_title)
      builder.append(title);

    boolean present_link = true && (isSetLink());
    builder.append(present_link);
    if (present_link)
      builder.append(link);

    boolean present_content = true && (isSetContent());
    builder.append(present_content);
    if (present_content)
      builder.append(content);

    boolean present_urlref = true && (isSetUrlref());
    builder.append(present_urlref);
    if (present_urlref)
      builder.append(urlref);

    boolean present_startDate = true;
    builder.append(present_startDate);
    if (present_startDate)
      builder.append(startDate);

    boolean present_endDate = true;
    builder.append(present_endDate);
    if (present_endDate)
      builder.append(endDate);

    boolean present_startTime = true && (isSetStartTime());
    builder.append(present_startTime);
    if (present_startTime)
      builder.append(startTime);

    boolean present_speaker = true && (isSetSpeaker());
    builder.append(present_speaker);
    if (present_speaker)
      builder.append(speaker);

    boolean present_contact = true && (isSetContact());
    builder.append(present_contact);
    if (present_contact)
      builder.append(contact);

    boolean present_language = true && (isSetLanguage());
    builder.append(present_language);
    if (present_language)
      builder.append(language);

    boolean present_audience = true && (isSetAudience());
    builder.append(present_audience);
    if (present_audience)
      builder.append(audience);

    boolean present_expectedPeople = true && (isSetExpectedPeople());
    builder.append(present_expectedPeople);
    if (present_expectedPeople)
      builder.append(expectedPeople);

    boolean present_location = true && (isSetLocation());
    builder.append(present_location);
    if (present_location)
      builder.append(location);

    boolean present_room = true && (isSetRoom());
    builder.append(present_room);
    if (present_room)
      builder.append(room);

    boolean present_category = true && (isSetCategory());
    builder.append(present_category);
    if (present_category)
      builder.append(category);

    boolean present_organizer = true && (isSetOrganizer());
    builder.append(present_organizer);
    if (present_organizer)
      builder.append(organizer);

    boolean present_shorttitle = true && (isSetShorttitle());
    builder.append(present_shorttitle);
    if (present_shorttitle)
      builder.append(shorttitle);

    boolean present_feed = true && (isSetFeed());
    builder.append(present_feed);
    if (present_feed)
      builder.append(feed);

    return builder.toHashCode();
  }

  public int compareTo(EventsItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EventsItem typedOther = (EventsItem)other;

    lastComparison = Boolean.valueOf(isSetEventsItemId()).compareTo(typedOther.isSetEventsItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventsItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventsItemId, typedOther.eventsItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLink()).compareTo(typedOther.isSetLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, typedOther.link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlref()).compareTo(typedOther.isSetUrlref());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlref()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlref, typedOther.urlref);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, typedOther.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeaker()).compareTo(typedOther.isSetSpeaker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeaker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speaker, typedOther.speaker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContact()).compareTo(typedOther.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contact, typedOther.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudience()).compareTo(typedOther.isSetAudience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audience, typedOther.audience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpectedPeople()).compareTo(typedOther.isSetExpectedPeople());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedPeople()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedPeople, typedOther.expectedPeople);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoom()).compareTo(typedOther.isSetRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.room, typedOther.room);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganizer()).compareTo(typedOther.isSetOrganizer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganizer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizer, typedOther.organizer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShorttitle()).compareTo(typedOther.isSetShorttitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShorttitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shorttitle, typedOther.shorttitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeed()).compareTo(typedOther.isSetFeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feed, typedOther.feed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // EVENTS_ITEM_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.eventsItemId = iprot.readI64();
            setEventsItemIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.title = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LINK
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.link = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CONTENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.content = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // URLREF
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.urlref = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // START_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.startDate = iprot.readI64();
            setStartDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // END_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.endDate = iprot.readI64();
            setEndDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // START_TIME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.startTime = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // SPEAKER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.speaker = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // CONTACT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.contact = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // LANGUAGE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.language = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // AUDIENCE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.audience = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // EXPECTED_PEOPLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.expectedPeople = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // LOCATION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.location = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // ROOM
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.room = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // CATEGORY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.category = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // ORGANIZER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.organizer = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // SHORTTITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.shorttitle = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // FEED
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.feed = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetEventsItemId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventsItemId' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetStartDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startDate' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetEndDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endDate' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(EVENTS_ITEM_ID_FIELD_DESC);
    oprot.writeI64(this.eventsItemId);
    oprot.writeFieldEnd();
    if (this.title != null) {
      oprot.writeFieldBegin(TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.link != null) {
      oprot.writeFieldBegin(LINK_FIELD_DESC);
      oprot.writeString(this.link);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(CONTENT_FIELD_DESC);
      oprot.writeString(this.content);
      oprot.writeFieldEnd();
    }
    if (this.urlref != null) {
      oprot.writeFieldBegin(URLREF_FIELD_DESC);
      oprot.writeString(this.urlref);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(START_DATE_FIELD_DESC);
    oprot.writeI64(this.startDate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_DATE_FIELD_DESC);
    oprot.writeI64(this.endDate);
    oprot.writeFieldEnd();
    if (this.startTime != null) {
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeString(this.startTime);
      oprot.writeFieldEnd();
    }
    if (this.speaker != null) {
      oprot.writeFieldBegin(SPEAKER_FIELD_DESC);
      oprot.writeString(this.speaker);
      oprot.writeFieldEnd();
    }
    if (this.contact != null) {
      oprot.writeFieldBegin(CONTACT_FIELD_DESC);
      oprot.writeString(this.contact);
      oprot.writeFieldEnd();
    }
    if (this.language != null) {
      oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.audience != null) {
      oprot.writeFieldBegin(AUDIENCE_FIELD_DESC);
      oprot.writeString(this.audience);
      oprot.writeFieldEnd();
    }
    if (this.expectedPeople != null) {
      oprot.writeFieldBegin(EXPECTED_PEOPLE_FIELD_DESC);
      oprot.writeString(this.expectedPeople);
      oprot.writeFieldEnd();
    }
    if (this.location != null) {
      oprot.writeFieldBegin(LOCATION_FIELD_DESC);
      oprot.writeString(this.location);
      oprot.writeFieldEnd();
    }
    if (this.room != null) {
      oprot.writeFieldBegin(ROOM_FIELD_DESC);
      oprot.writeString(this.room);
      oprot.writeFieldEnd();
    }
    if (this.category != null) {
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeString(this.category);
      oprot.writeFieldEnd();
    }
    if (this.organizer != null) {
      oprot.writeFieldBegin(ORGANIZER_FIELD_DESC);
      oprot.writeString(this.organizer);
      oprot.writeFieldEnd();
    }
    if (this.shorttitle != null) {
      oprot.writeFieldBegin(SHORTTITLE_FIELD_DESC);
      oprot.writeString(this.shorttitle);
      oprot.writeFieldEnd();
    }
    if (this.feed != null) {
      oprot.writeFieldBegin(FEED_FIELD_DESC);
      oprot.writeString(this.feed);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventsItem(");
    boolean first = true;

    sb.append("eventsItemId:");
    sb.append(this.eventsItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("link:");
    if (this.link == null) {
      sb.append("null");
    } else {
      sb.append(this.link);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urlref:");
    if (this.urlref == null) {
      sb.append("null");
    } else {
      sb.append(this.urlref);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    sb.append(this.startDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    sb.append(this.endDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("speaker:");
    if (this.speaker == null) {
      sb.append("null");
    } else {
      sb.append(this.speaker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audience:");
    if (this.audience == null) {
      sb.append("null");
    } else {
      sb.append(this.audience);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expectedPeople:");
    if (this.expectedPeople == null) {
      sb.append("null");
    } else {
      sb.append(this.expectedPeople);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("room:");
    if (this.room == null) {
      sb.append("null");
    } else {
      sb.append(this.room);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organizer:");
    if (this.organizer == null) {
      sb.append("null");
    } else {
      sb.append(this.organizer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shorttitle:");
    if (this.shorttitle == null) {
      sb.append("null");
    } else {
      sb.append(this.shorttitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feed:");
    if (this.feed == null) {
      sb.append("null");
    } else {
      sb.append(this.feed);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'eventsItemId' because it's a primitive and you chose the non-beans generator.
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    if (link == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'link' was not present! Struct: " + toString());
    }
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    if (urlref == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'urlref' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'startDate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endDate' because it's a primitive and you chose the non-beans generator.
    if (startTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not present! Struct: " + toString());
    }
    if (speaker == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'speaker' was not present! Struct: " + toString());
    }
    if (contact == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contact' was not present! Struct: " + toString());
    }
    if (language == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'language' was not present! Struct: " + toString());
    }
    if (audience == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'audience' was not present! Struct: " + toString());
    }
    if (expectedPeople == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'expectedPeople' was not present! Struct: " + toString());
    }
    if (location == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'location' was not present! Struct: " + toString());
    }
    if (room == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'room' was not present! Struct: " + toString());
    }
    if (category == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'category' was not present! Struct: " + toString());
    }
    if (organizer == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'organizer' was not present! Struct: " + toString());
    }
    if (shorttitle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'shorttitle' was not present! Struct: " + toString());
    }
    if (feed == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'feed' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

