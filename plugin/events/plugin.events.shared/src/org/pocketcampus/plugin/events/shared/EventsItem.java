/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventsItem implements org.apache.thrift.TBase<EventsItem, EventsItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventsItem");

  private static final org.apache.thrift.protocol.TField EVENTS_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventsItemId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FEED_FIELD_DESC = new org.apache.thrift.protocol.TField("feed", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORGANIZER_FIELD_DESC = new org.apache.thrift.protocol.TField("organizer", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)9);

  public long eventsItemId; // required
  public String title; // required
  public String content; // required
  public String link; // required
  public String feed; // required
  public String organizer; // required
  public String startTime; // required
  public long startDate; // required
  public long endDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENTS_ITEM_ID((short)1, "eventsItemId"),
    TITLE((short)2, "title"),
    CONTENT((short)3, "content"),
    LINK((short)4, "link"),
    FEED((short)5, "feed"),
    ORGANIZER((short)6, "organizer"),
    START_TIME((short)7, "startTime"),
    START_DATE((short)8, "startDate"),
    END_DATE((short)9, "endDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENTS_ITEM_ID
          return EVENTS_ITEM_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // CONTENT
          return CONTENT;
        case 4: // LINK
          return LINK;
        case 5: // FEED
          return FEED;
        case 6: // ORGANIZER
          return ORGANIZER;
        case 7: // START_TIME
          return START_TIME;
        case 8: // START_DATE
          return START_DATE;
        case 9: // END_DATE
          return END_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTSITEMID_ISSET_ID = 0;
  private static final int __STARTDATE_ISSET_ID = 1;
  private static final int __ENDDATE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENTS_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("eventsItemId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEED, new org.apache.thrift.meta_data.FieldMetaData("feed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZER, new org.apache.thrift.meta_data.FieldMetaData("organizer", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventsItem.class, metaDataMap);
  }

  public EventsItem() {
  }

  public EventsItem(
    long eventsItemId,
    String title,
    String content,
    String link,
    String feed,
    String organizer,
    String startTime,
    long startDate,
    long endDate)
  {
    this();
    this.eventsItemId = eventsItemId;
    setEventsItemIdIsSet(true);
    this.title = title;
    this.content = content;
    this.link = link;
    this.feed = feed;
    this.organizer = organizer;
    this.startTime = startTime;
    this.startDate = startDate;
    setStartDateIsSet(true);
    this.endDate = endDate;
    setEndDateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventsItem(EventsItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.eventsItemId = other.eventsItemId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetLink()) {
      this.link = other.link;
    }
    if (other.isSetFeed()) {
      this.feed = other.feed;
    }
    if (other.isSetOrganizer()) {
      this.organizer = other.organizer;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    this.startDate = other.startDate;
    this.endDate = other.endDate;
  }

  public EventsItem deepCopy() {
    return new EventsItem(this);
  }

  @Override
  public void clear() {
    setEventsItemIdIsSet(false);
    this.eventsItemId = 0;
    this.title = null;
    this.content = null;
    this.link = null;
    this.feed = null;
    this.organizer = null;
    this.startTime = null;
    setStartDateIsSet(false);
    this.startDate = 0;
    setEndDateIsSet(false);
    this.endDate = 0;
  }

  public long getEventsItemId() {
    return this.eventsItemId;
  }

  public EventsItem setEventsItemId(long eventsItemId) {
    this.eventsItemId = eventsItemId;
    setEventsItemIdIsSet(true);
    return this;
  }

  public void unsetEventsItemId() {
    __isset_bit_vector.clear(__EVENTSITEMID_ISSET_ID);
  }

  /** Returns true if field eventsItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventsItemId() {
    return __isset_bit_vector.get(__EVENTSITEMID_ISSET_ID);
  }

  public void setEventsItemIdIsSet(boolean value) {
    __isset_bit_vector.set(__EVENTSITEMID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public EventsItem setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public EventsItem setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getLink() {
    return this.link;
  }

  public EventsItem setLink(String link) {
    this.link = link;
    return this;
  }

  public void unsetLink() {
    this.link = null;
  }

  /** Returns true if field link is set (has been assigned a value) and false otherwise */
  public boolean isSetLink() {
    return this.link != null;
  }

  public void setLinkIsSet(boolean value) {
    if (!value) {
      this.link = null;
    }
  }

  public String getFeed() {
    return this.feed;
  }

  public EventsItem setFeed(String feed) {
    this.feed = feed;
    return this;
  }

  public void unsetFeed() {
    this.feed = null;
  }

  /** Returns true if field feed is set (has been assigned a value) and false otherwise */
  public boolean isSetFeed() {
    return this.feed != null;
  }

  public void setFeedIsSet(boolean value) {
    if (!value) {
      this.feed = null;
    }
  }

  public String getOrganizer() {
    return this.organizer;
  }

  public EventsItem setOrganizer(String organizer) {
    this.organizer = organizer;
    return this;
  }

  public void unsetOrganizer() {
    this.organizer = null;
  }

  /** Returns true if field organizer is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganizer() {
    return this.organizer != null;
  }

  public void setOrganizerIsSet(boolean value) {
    if (!value) {
      this.organizer = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public EventsItem setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public long getStartDate() {
    return this.startDate;
  }

  public EventsItem setStartDate(long startDate) {
    this.startDate = startDate;
    setStartDateIsSet(true);
    return this;
  }

  public void unsetStartDate() {
    __isset_bit_vector.clear(__STARTDATE_ISSET_ID);
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return __isset_bit_vector.get(__STARTDATE_ISSET_ID);
  }

  public void setStartDateIsSet(boolean value) {
    __isset_bit_vector.set(__STARTDATE_ISSET_ID, value);
  }

  public long getEndDate() {
    return this.endDate;
  }

  public EventsItem setEndDate(long endDate) {
    this.endDate = endDate;
    setEndDateIsSet(true);
    return this;
  }

  public void unsetEndDate() {
    __isset_bit_vector.clear(__ENDDATE_ISSET_ID);
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return __isset_bit_vector.get(__ENDDATE_ISSET_ID);
  }

  public void setEndDateIsSet(boolean value) {
    __isset_bit_vector.set(__ENDDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENTS_ITEM_ID:
      if (value == null) {
        unsetEventsItemId();
      } else {
        setEventsItemId((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case LINK:
      if (value == null) {
        unsetLink();
      } else {
        setLink((String)value);
      }
      break;

    case FEED:
      if (value == null) {
        unsetFeed();
      } else {
        setFeed((String)value);
      }
      break;

    case ORGANIZER:
      if (value == null) {
        unsetOrganizer();
      } else {
        setOrganizer((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((Long)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENTS_ITEM_ID:
      return Long.valueOf(getEventsItemId());

    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case LINK:
      return getLink();

    case FEED:
      return getFeed();

    case ORGANIZER:
      return getOrganizer();

    case START_TIME:
      return getStartTime();

    case START_DATE:
      return Long.valueOf(getStartDate());

    case END_DATE:
      return Long.valueOf(getEndDate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENTS_ITEM_ID:
      return isSetEventsItemId();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case LINK:
      return isSetLink();
    case FEED:
      return isSetFeed();
    case ORGANIZER:
      return isSetOrganizer();
    case START_TIME:
      return isSetStartTime();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventsItem)
      return this.equals((EventsItem)that);
    return false;
  }

  public boolean equals(EventsItem that) {
    if (that == null)
      return false;

    boolean this_present_eventsItemId = true;
    boolean that_present_eventsItemId = true;
    if (this_present_eventsItemId || that_present_eventsItemId) {
      if (!(this_present_eventsItemId && that_present_eventsItemId))
        return false;
      if (this.eventsItemId != that.eventsItemId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_link = true && this.isSetLink();
    boolean that_present_link = true && that.isSetLink();
    if (this_present_link || that_present_link) {
      if (!(this_present_link && that_present_link))
        return false;
      if (!this.link.equals(that.link))
        return false;
    }

    boolean this_present_feed = true && this.isSetFeed();
    boolean that_present_feed = true && that.isSetFeed();
    if (this_present_feed || that_present_feed) {
      if (!(this_present_feed && that_present_feed))
        return false;
      if (!this.feed.equals(that.feed))
        return false;
    }

    boolean this_present_organizer = true && this.isSetOrganizer();
    boolean that_present_organizer = true && that.isSetOrganizer();
    if (this_present_organizer || that_present_organizer) {
      if (!(this_present_organizer && that_present_organizer))
        return false;
      if (!this.organizer.equals(that.organizer))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_startDate = true;
    boolean that_present_startDate = true;
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (this.startDate != that.startDate)
        return false;
    }

    boolean this_present_endDate = true;
    boolean that_present_endDate = true;
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (this.endDate != that.endDate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_eventsItemId = true;
    builder.append(present_eventsItemId);
    if (present_eventsItemId)
      builder.append(eventsItemId);

    boolean present_title = true && (isSetTitle());
    builder.append(present_title);
    if (present_title)
      builder.append(title);

    boolean present_content = true && (isSetContent());
    builder.append(present_content);
    if (present_content)
      builder.append(content);

    boolean present_link = true && (isSetLink());
    builder.append(present_link);
    if (present_link)
      builder.append(link);

    boolean present_feed = true && (isSetFeed());
    builder.append(present_feed);
    if (present_feed)
      builder.append(feed);

    boolean present_organizer = true && (isSetOrganizer());
    builder.append(present_organizer);
    if (present_organizer)
      builder.append(organizer);

    boolean present_startTime = true && (isSetStartTime());
    builder.append(present_startTime);
    if (present_startTime)
      builder.append(startTime);

    boolean present_startDate = true;
    builder.append(present_startDate);
    if (present_startDate)
      builder.append(startDate);

    boolean present_endDate = true;
    builder.append(present_endDate);
    if (present_endDate)
      builder.append(endDate);

    return builder.toHashCode();
  }

  public int compareTo(EventsItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EventsItem typedOther = (EventsItem)other;

    lastComparison = Boolean.valueOf(isSetEventsItemId()).compareTo(typedOther.isSetEventsItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventsItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventsItemId, typedOther.eventsItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLink()).compareTo(typedOther.isSetLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, typedOther.link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeed()).compareTo(typedOther.isSetFeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feed, typedOther.feed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganizer()).compareTo(typedOther.isSetOrganizer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganizer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizer, typedOther.organizer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, typedOther.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // EVENTS_ITEM_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.eventsItemId = iprot.readI64();
            setEventsItemIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.title = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CONTENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.content = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LINK
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.link = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FEED
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.feed = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ORGANIZER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.organizer = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // START_TIME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.startTime = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // START_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.startDate = iprot.readI64();
            setStartDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // END_DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.endDate = iprot.readI64();
            setEndDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetEventsItemId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventsItemId' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetStartDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startDate' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetEndDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endDate' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(EVENTS_ITEM_ID_FIELD_DESC);
    oprot.writeI64(this.eventsItemId);
    oprot.writeFieldEnd();
    if (this.title != null) {
      oprot.writeFieldBegin(TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(CONTENT_FIELD_DESC);
      oprot.writeString(this.content);
      oprot.writeFieldEnd();
    }
    if (this.link != null) {
      oprot.writeFieldBegin(LINK_FIELD_DESC);
      oprot.writeString(this.link);
      oprot.writeFieldEnd();
    }
    if (this.feed != null) {
      oprot.writeFieldBegin(FEED_FIELD_DESC);
      oprot.writeString(this.feed);
      oprot.writeFieldEnd();
    }
    if (this.organizer != null) {
      oprot.writeFieldBegin(ORGANIZER_FIELD_DESC);
      oprot.writeString(this.organizer);
      oprot.writeFieldEnd();
    }
    if (this.startTime != null) {
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeString(this.startTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(START_DATE_FIELD_DESC);
    oprot.writeI64(this.startDate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_DATE_FIELD_DESC);
    oprot.writeI64(this.endDate);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventsItem(");
    boolean first = true;

    sb.append("eventsItemId:");
    sb.append(this.eventsItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("link:");
    if (this.link == null) {
      sb.append("null");
    } else {
      sb.append(this.link);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feed:");
    if (this.feed == null) {
      sb.append("null");
    } else {
      sb.append(this.feed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organizer:");
    if (this.organizer == null) {
      sb.append("null");
    } else {
      sb.append(this.organizer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    sb.append(this.startDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    sb.append(this.endDate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'eventsItemId' because it's a primitive and you chose the non-beans generator.
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    if (link == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'link' was not present! Struct: " + toString());
    }
    if (feed == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'feed' was not present! Struct: " + toString());
    }
    if (organizer == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'organizer' was not present! Struct: " + toString());
    }
    if (startTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'startDate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endDate' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

