/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class EventPoolReply implements org.apache.thrift.TBase<EventPoolReply, EventPoolReply._Fields>, java.io.Serializable, Cloneable, Comparable<EventPoolReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventPoolReply");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("eventPool", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CHILDREN_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenItems", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGS_FIELD_DESC = new org.apache.thrift.protocol.TField("categs", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventPoolReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventPoolReplyTupleSchemeFactory());
  }

  private int status; // required
  private EventPool eventPool; // optional
  private Map<Long,EventItem> childrenItems; // optional
  private Map<Integer,String> categs; // optional
  private Map<String,String> tags; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    EVENT_POOL((short)2, "eventPool"),
    CHILDREN_ITEMS((short)3, "childrenItems"),
    CATEGS((short)5, "categs"),
    TAGS((short)6, "tags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // EVENT_POOL
          return EVENT_POOL;
        case 3: // CHILDREN_ITEMS
          return CHILDREN_ITEMS;
        case 5: // CATEGS
          return CATEGS;
        case 6: // TAGS
          return TAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EVENT_POOL,_Fields.CHILDREN_ITEMS,_Fields.CATEGS,_Fields.TAGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_POOL, new org.apache.thrift.meta_data.FieldMetaData("eventPool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventPool.class)));
    tmpMap.put(_Fields.CHILDREN_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("childrenItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventItem.class))));
    tmpMap.put(_Fields.CATEGS, new org.apache.thrift.meta_data.FieldMetaData("categs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventPoolReply.class, metaDataMap);
  }

  public EventPoolReply() {
  }

  public EventPoolReply(
    int status)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventPoolReply(EventPoolReply other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status = other.status;
    if (other.isSetEventPool()) {
      this.eventPool = new EventPool(other.eventPool);
    }
    if (other.isSetChildrenItems()) {
      Map<Long,EventItem> __this__childrenItems = new HashMap<Long,EventItem>(other.childrenItems.size());
      for (Map.Entry<Long, EventItem> other_element : other.childrenItems.entrySet()) {

        Long other_element_key = other_element.getKey();
        EventItem other_element_value = other_element.getValue();

        Long __this__childrenItems_copy_key = other_element_key;

        EventItem __this__childrenItems_copy_value = new EventItem(other_element_value);

        __this__childrenItems.put(__this__childrenItems_copy_key, __this__childrenItems_copy_value);
      }
      this.childrenItems = __this__childrenItems;
    }
    if (other.isSetCategs()) {
      Map<Integer,String> __this__categs = new HashMap<Integer,String>(other.categs);
      this.categs = __this__categs;
    }
    if (other.isSetTags()) {
      Map<String,String> __this__tags = new HashMap<String,String>(other.tags);
      this.tags = __this__tags;
    }
  }

  public EventPoolReply deepCopy() {
    return new EventPoolReply(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.eventPool = null;
    this.childrenItems = null;
    this.categs = null;
    this.tags = null;
  }

  public int getStatus() {
    return this.status;
  }

  public EventPoolReply setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public EventPool getEventPool() {
    return this.eventPool;
  }

  public EventPoolReply setEventPool(EventPool eventPool) {
    this.eventPool = eventPool;
    return this;
  }

  public void unsetEventPool() {
    this.eventPool = null;
  }

  /** Returns true if field eventPool is set (has been assigned a value) and false otherwise */
  public boolean isSetEventPool() {
    return this.eventPool != null;
  }

  public void setEventPoolIsSet(boolean value) {
    if (!value) {
      this.eventPool = null;
    }
  }

  public int getChildrenItemsSize() {
    return (this.childrenItems == null) ? 0 : this.childrenItems.size();
  }

  public void putToChildrenItems(long key, EventItem val) {
    if (this.childrenItems == null) {
      this.childrenItems = new HashMap<Long,EventItem>();
    }
    this.childrenItems.put(key, val);
  }

  public Map<Long,EventItem> getChildrenItems() {
    return this.childrenItems;
  }

  public EventPoolReply setChildrenItems(Map<Long,EventItem> childrenItems) {
    this.childrenItems = childrenItems;
    return this;
  }

  public void unsetChildrenItems() {
    this.childrenItems = null;
  }

  /** Returns true if field childrenItems is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenItems() {
    return this.childrenItems != null;
  }

  public void setChildrenItemsIsSet(boolean value) {
    if (!value) {
      this.childrenItems = null;
    }
  }

  public int getCategsSize() {
    return (this.categs == null) ? 0 : this.categs.size();
  }

  public void putToCategs(int key, String val) {
    if (this.categs == null) {
      this.categs = new HashMap<Integer,String>();
    }
    this.categs.put(key, val);
  }

  public Map<Integer,String> getCategs() {
    return this.categs;
  }

  public EventPoolReply setCategs(Map<Integer,String> categs) {
    this.categs = categs;
    return this;
  }

  public void unsetCategs() {
    this.categs = null;
  }

  /** Returns true if field categs is set (has been assigned a value) and false otherwise */
  public boolean isSetCategs() {
    return this.categs != null;
  }

  public void setCategsIsSet(boolean value) {
    if (!value) {
      this.categs = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public void putToTags(String key, String val) {
    if (this.tags == null) {
      this.tags = new HashMap<String,String>();
    }
    this.tags.put(key, val);
  }

  public Map<String,String> getTags() {
    return this.tags;
  }

  public EventPoolReply setTags(Map<String,String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case EVENT_POOL:
      if (value == null) {
        unsetEventPool();
      } else {
        setEventPool((EventPool)value);
      }
      break;

    case CHILDREN_ITEMS:
      if (value == null) {
        unsetChildrenItems();
      } else {
        setChildrenItems((Map<Long,EventItem>)value);
      }
      break;

    case CATEGS:
      if (value == null) {
        unsetCategs();
      } else {
        setCategs((Map<Integer,String>)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Integer.valueOf(getStatus());

    case EVENT_POOL:
      return getEventPool();

    case CHILDREN_ITEMS:
      return getChildrenItems();

    case CATEGS:
      return getCategs();

    case TAGS:
      return getTags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case EVENT_POOL:
      return isSetEventPool();
    case CHILDREN_ITEMS:
      return isSetChildrenItems();
    case CATEGS:
      return isSetCategs();
    case TAGS:
      return isSetTags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventPoolReply)
      return this.equals((EventPoolReply)that);
    return false;
  }

  public boolean equals(EventPoolReply that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_eventPool = true && this.isSetEventPool();
    boolean that_present_eventPool = true && that.isSetEventPool();
    if (this_present_eventPool || that_present_eventPool) {
      if (!(this_present_eventPool && that_present_eventPool))
        return false;
      if (!this.eventPool.equals(that.eventPool))
        return false;
    }

    boolean this_present_childrenItems = true && this.isSetChildrenItems();
    boolean that_present_childrenItems = true && that.isSetChildrenItems();
    if (this_present_childrenItems || that_present_childrenItems) {
      if (!(this_present_childrenItems && that_present_childrenItems))
        return false;
      if (!this.childrenItems.equals(that.childrenItems))
        return false;
    }

    boolean this_present_categs = true && this.isSetCategs();
    boolean that_present_categs = true && that.isSetCategs();
    if (this_present_categs || that_present_categs) {
      if (!(this_present_categs && that_present_categs))
        return false;
      if (!this.categs.equals(that.categs))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_eventPool = true && (isSetEventPool());
    list.add(present_eventPool);
    if (present_eventPool)
      list.add(eventPool);

    boolean present_childrenItems = true && (isSetChildrenItems());
    list.add(present_childrenItems);
    if (present_childrenItems)
      list.add(childrenItems);

    boolean present_categs = true && (isSetCategs());
    list.add(present_categs);
    if (present_categs)
      list.add(categs);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    return list.hashCode();
  }

  @Override
  public int compareTo(EventPoolReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventPool()).compareTo(other.isSetEventPool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventPool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventPool, other.eventPool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenItems()).compareTo(other.isSetChildrenItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenItems, other.childrenItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategs()).compareTo(other.isSetCategs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categs, other.categs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventPoolReply(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetEventPool()) {
      if (!first) sb.append(", ");
      sb.append("eventPool:");
      if (this.eventPool == null) {
        sb.append("null");
      } else {
        sb.append(this.eventPool);
      }
      first = false;
    }
    if (isSetChildrenItems()) {
      if (!first) sb.append(", ");
      sb.append("childrenItems:");
      if (this.childrenItems == null) {
        sb.append("null");
      } else {
        sb.append(this.childrenItems);
      }
      first = false;
    }
    if (isSetCategs()) {
      if (!first) sb.append(", ");
      sb.append("categs:");
      if (this.categs == null) {
        sb.append("null");
      } else {
        sb.append(this.categs);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (eventPool != null) {
      eventPool.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventPoolReplyStandardSchemeFactory implements SchemeFactory {
    public EventPoolReplyStandardScheme getScheme() {
      return new EventPoolReplyStandardScheme();
    }
  }

  private static class EventPoolReplyStandardScheme extends StandardScheme<EventPoolReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EventPoolReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENT_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.eventPool = new EventPool();
              struct.eventPool.read(iprot);
              struct.setEventPoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHILDREN_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map78 = iprot.readMapBegin();
                struct.childrenItems = new HashMap<Long,EventItem>(2*_map78.size);
                long _key79;
                EventItem _val80;
                for (int _i81 = 0; _i81 < _map78.size; ++_i81)
                {
                  _key79 = iprot.readI64();
                  _val80 = new EventItem();
                  _val80.read(iprot);
                  struct.childrenItems.put(_key79, _val80);
                }
                iprot.readMapEnd();
              }
              struct.setChildrenItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CATEGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
                struct.categs = new HashMap<Integer,String>(2*_map82.size);
                int _key83;
                String _val84;
                for (int _i85 = 0; _i85 < _map82.size; ++_i85)
                {
                  _key83 = iprot.readI32();
                  _val84 = iprot.readString();
                  struct.categs.put(_key83, _val84);
                }
                iprot.readMapEnd();
              }
              struct.setCategsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map86 = iprot.readMapBegin();
                struct.tags = new HashMap<String,String>(2*_map86.size);
                String _key87;
                String _val88;
                for (int _i89 = 0; _i89 < _map86.size; ++_i89)
                {
                  _key87 = iprot.readString();
                  _val88 = iprot.readString();
                  struct.tags.put(_key87, _val88);
                }
                iprot.readMapEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EventPoolReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.eventPool != null) {
        if (struct.isSetEventPool()) {
          oprot.writeFieldBegin(EVENT_POOL_FIELD_DESC);
          struct.eventPool.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.childrenItems != null) {
        if (struct.isSetChildrenItems()) {
          oprot.writeFieldBegin(CHILDREN_ITEMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.childrenItems.size()));
            for (Map.Entry<Long, EventItem> _iter90 : struct.childrenItems.entrySet())
            {
              oprot.writeI64(_iter90.getKey());
              _iter90.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.categs != null) {
        if (struct.isSetCategs()) {
          oprot.writeFieldBegin(CATEGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.categs.size()));
            for (Map.Entry<Integer, String> _iter91 : struct.categs.entrySet())
            {
              oprot.writeI32(_iter91.getKey());
              oprot.writeString(_iter91.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (Map.Entry<String, String> _iter92 : struct.tags.entrySet())
            {
              oprot.writeString(_iter92.getKey());
              oprot.writeString(_iter92.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventPoolReplyTupleSchemeFactory implements SchemeFactory {
    public EventPoolReplyTupleScheme getScheme() {
      return new EventPoolReplyTupleScheme();
    }
  }

  private static class EventPoolReplyTupleScheme extends TupleScheme<EventPoolReply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EventPoolReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status);
      BitSet optionals = new BitSet();
      if (struct.isSetEventPool()) {
        optionals.set(0);
      }
      if (struct.isSetChildrenItems()) {
        optionals.set(1);
      }
      if (struct.isSetCategs()) {
        optionals.set(2);
      }
      if (struct.isSetTags()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEventPool()) {
        struct.eventPool.write(oprot);
      }
      if (struct.isSetChildrenItems()) {
        {
          oprot.writeI32(struct.childrenItems.size());
          for (Map.Entry<Long, EventItem> _iter93 : struct.childrenItems.entrySet())
          {
            oprot.writeI64(_iter93.getKey());
            _iter93.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetCategs()) {
        {
          oprot.writeI32(struct.categs.size());
          for (Map.Entry<Integer, String> _iter94 : struct.categs.entrySet())
          {
            oprot.writeI32(_iter94.getKey());
            oprot.writeString(_iter94.getValue());
          }
        }
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (Map.Entry<String, String> _iter95 : struct.tags.entrySet())
          {
            oprot.writeString(_iter95.getKey());
            oprot.writeString(_iter95.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EventPoolReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.eventPool = new EventPool();
        struct.eventPool.read(iprot);
        struct.setEventPoolIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.childrenItems = new HashMap<Long,EventItem>(2*_map96.size);
          long _key97;
          EventItem _val98;
          for (int _i99 = 0; _i99 < _map96.size; ++_i99)
          {
            _key97 = iprot.readI64();
            _val98 = new EventItem();
            _val98.read(iprot);
            struct.childrenItems.put(_key97, _val98);
          }
        }
        struct.setChildrenItemsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.categs = new HashMap<Integer,String>(2*_map100.size);
          int _key101;
          String _val102;
          for (int _i103 = 0; _i103 < _map100.size; ++_i103)
          {
            _key101 = iprot.readI32();
            _val102 = iprot.readString();
            struct.categs.put(_key101, _val102);
          }
        }
        struct.setCategsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map104 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new HashMap<String,String>(2*_map104.size);
          String _key105;
          String _val106;
          for (int _i107 = 0; _i107 < _map104.size; ++_i107)
          {
            _key105 = iprot.readString();
            _val106 = iprot.readString();
            struct.tags.put(_key105, _val106);
          }
        }
        struct.setTagsIsSet(true);
      }
    }
  }

}

