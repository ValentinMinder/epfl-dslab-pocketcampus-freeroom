/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventPoolReply implements org.apache.thrift.TBase<EventPoolReply, EventPoolReply._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventPoolReply");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("eventPool", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CHILDREN_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenItems", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGS_FIELD_DESC = new org.apache.thrift.protocol.TField("categs", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)6);

  public int status; // required
  public EventPool eventPool; // required
  public Map<Long,EventItem> childrenItems; // required
  public Map<Integer,String> categs; // required
  public Map<String,String> tags; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    EVENT_POOL((short)2, "eventPool"),
    CHILDREN_ITEMS((short)3, "childrenItems"),
    CATEGS((short)5, "categs"),
    TAGS((short)6, "tags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // EVENT_POOL
          return EVENT_POOL;
        case 3: // CHILDREN_ITEMS
          return CHILDREN_ITEMS;
        case 5: // CATEGS
          return CATEGS;
        case 6: // TAGS
          return TAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_POOL, new org.apache.thrift.meta_data.FieldMetaData("eventPool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventPool.class)));
    tmpMap.put(_Fields.CHILDREN_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("childrenItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventItem.class))));
    tmpMap.put(_Fields.CATEGS, new org.apache.thrift.meta_data.FieldMetaData("categs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventPoolReply.class, metaDataMap);
  }

  public EventPoolReply() {
  }

  public EventPoolReply(
    int status)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventPoolReply(EventPoolReply other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.status = other.status;
    if (other.isSetEventPool()) {
      this.eventPool = new EventPool(other.eventPool);
    }
    if (other.isSetChildrenItems()) {
      Map<Long,EventItem> __this__childrenItems = new HashMap<Long,EventItem>();
      for (Map.Entry<Long, EventItem> other_element : other.childrenItems.entrySet()) {

        Long other_element_key = other_element.getKey();
        EventItem other_element_value = other_element.getValue();

        Long __this__childrenItems_copy_key = other_element_key;

        EventItem __this__childrenItems_copy_value = new EventItem(other_element_value);

        __this__childrenItems.put(__this__childrenItems_copy_key, __this__childrenItems_copy_value);
      }
      this.childrenItems = __this__childrenItems;
    }
    if (other.isSetCategs()) {
      Map<Integer,String> __this__categs = new HashMap<Integer,String>();
      for (Map.Entry<Integer, String> other_element : other.categs.entrySet()) {

        Integer other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        Integer __this__categs_copy_key = other_element_key;

        String __this__categs_copy_value = other_element_value;

        __this__categs.put(__this__categs_copy_key, __this__categs_copy_value);
      }
      this.categs = __this__categs;
    }
    if (other.isSetTags()) {
      Map<String,String> __this__tags = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.tags.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__tags_copy_key = other_element_key;

        String __this__tags_copy_value = other_element_value;

        __this__tags.put(__this__tags_copy_key, __this__tags_copy_value);
      }
      this.tags = __this__tags;
    }
  }

  public EventPoolReply deepCopy() {
    return new EventPoolReply(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.eventPool = null;
    this.childrenItems = null;
    this.categs = null;
    this.tags = null;
  }

  public int getStatus() {
    return this.status;
  }

  public EventPoolReply setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public EventPool getEventPool() {
    return this.eventPool;
  }

  public EventPoolReply setEventPool(EventPool eventPool) {
    this.eventPool = eventPool;
    return this;
  }

  public void unsetEventPool() {
    this.eventPool = null;
  }

  /** Returns true if field eventPool is set (has been assigned a value) and false otherwise */
  public boolean isSetEventPool() {
    return this.eventPool != null;
  }

  public void setEventPoolIsSet(boolean value) {
    if (!value) {
      this.eventPool = null;
    }
  }

  public int getChildrenItemsSize() {
    return (this.childrenItems == null) ? 0 : this.childrenItems.size();
  }

  public void putToChildrenItems(long key, EventItem val) {
    if (this.childrenItems == null) {
      this.childrenItems = new HashMap<Long,EventItem>();
    }
    this.childrenItems.put(key, val);
  }

  public Map<Long,EventItem> getChildrenItems() {
    return this.childrenItems;
  }

  public EventPoolReply setChildrenItems(Map<Long,EventItem> childrenItems) {
    this.childrenItems = childrenItems;
    return this;
  }

  public void unsetChildrenItems() {
    this.childrenItems = null;
  }

  /** Returns true if field childrenItems is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenItems() {
    return this.childrenItems != null;
  }

  public void setChildrenItemsIsSet(boolean value) {
    if (!value) {
      this.childrenItems = null;
    }
  }

  public int getCategsSize() {
    return (this.categs == null) ? 0 : this.categs.size();
  }

  public void putToCategs(int key, String val) {
    if (this.categs == null) {
      this.categs = new HashMap<Integer,String>();
    }
    this.categs.put(key, val);
  }

  public Map<Integer,String> getCategs() {
    return this.categs;
  }

  public EventPoolReply setCategs(Map<Integer,String> categs) {
    this.categs = categs;
    return this;
  }

  public void unsetCategs() {
    this.categs = null;
  }

  /** Returns true if field categs is set (has been assigned a value) and false otherwise */
  public boolean isSetCategs() {
    return this.categs != null;
  }

  public void setCategsIsSet(boolean value) {
    if (!value) {
      this.categs = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public void putToTags(String key, String val) {
    if (this.tags == null) {
      this.tags = new HashMap<String,String>();
    }
    this.tags.put(key, val);
  }

  public Map<String,String> getTags() {
    return this.tags;
  }

  public EventPoolReply setTags(Map<String,String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case EVENT_POOL:
      if (value == null) {
        unsetEventPool();
      } else {
        setEventPool((EventPool)value);
      }
      break;

    case CHILDREN_ITEMS:
      if (value == null) {
        unsetChildrenItems();
      } else {
        setChildrenItems((Map<Long,EventItem>)value);
      }
      break;

    case CATEGS:
      if (value == null) {
        unsetCategs();
      } else {
        setCategs((Map<Integer,String>)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Integer.valueOf(getStatus());

    case EVENT_POOL:
      return getEventPool();

    case CHILDREN_ITEMS:
      return getChildrenItems();

    case CATEGS:
      return getCategs();

    case TAGS:
      return getTags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case EVENT_POOL:
      return isSetEventPool();
    case CHILDREN_ITEMS:
      return isSetChildrenItems();
    case CATEGS:
      return isSetCategs();
    case TAGS:
      return isSetTags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventPoolReply)
      return this.equals((EventPoolReply)that);
    return false;
  }

  public boolean equals(EventPoolReply that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_eventPool = true && this.isSetEventPool();
    boolean that_present_eventPool = true && that.isSetEventPool();
    if (this_present_eventPool || that_present_eventPool) {
      if (!(this_present_eventPool && that_present_eventPool))
        return false;
      if (!this.eventPool.equals(that.eventPool))
        return false;
    }

    boolean this_present_childrenItems = true && this.isSetChildrenItems();
    boolean that_present_childrenItems = true && that.isSetChildrenItems();
    if (this_present_childrenItems || that_present_childrenItems) {
      if (!(this_present_childrenItems && that_present_childrenItems))
        return false;
      if (!this.childrenItems.equals(that.childrenItems))
        return false;
    }

    boolean this_present_categs = true && this.isSetCategs();
    boolean that_present_categs = true && that.isSetCategs();
    if (this_present_categs || that_present_categs) {
      if (!(this_present_categs && that_present_categs))
        return false;
      if (!this.categs.equals(that.categs))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_eventPool = true && (isSetEventPool());
    builder.append(present_eventPool);
    if (present_eventPool)
      builder.append(eventPool);

    boolean present_childrenItems = true && (isSetChildrenItems());
    builder.append(present_childrenItems);
    if (present_childrenItems)
      builder.append(childrenItems);

    boolean present_categs = true && (isSetCategs());
    builder.append(present_categs);
    if (present_categs)
      builder.append(categs);

    boolean present_tags = true && (isSetTags());
    builder.append(present_tags);
    if (present_tags)
      builder.append(tags);

    return builder.toHashCode();
  }

  public int compareTo(EventPoolReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EventPoolReply typedOther = (EventPoolReply)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventPool()).compareTo(typedOther.isSetEventPool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventPool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventPool, typedOther.eventPool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenItems()).compareTo(typedOther.isSetChildrenItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenItems, typedOther.childrenItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategs()).compareTo(typedOther.isSetCategs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categs, typedOther.categs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(typedOther.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, typedOther.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // STATUS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // EVENT_POOL
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.eventPool = new EventPool();
            this.eventPool.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CHILDREN_ITEMS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
              this.childrenItems = new HashMap<Long,EventItem>(2*_map39.size);
              for (int _i40 = 0; _i40 < _map39.size; ++_i40)
              {
                long _key41; // required
                EventItem _val42; // required
                _key41 = iprot.readI64();
                _val42 = new EventItem();
                _val42.read(iprot);
                this.childrenItems.put(_key41, _val42);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CATEGS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map43 = iprot.readMapBegin();
              this.categs = new HashMap<Integer,String>(2*_map43.size);
              for (int _i44 = 0; _i44 < _map43.size; ++_i44)
              {
                int _key45; // required
                String _val46; // required
                _key45 = iprot.readI32();
                _val46 = iprot.readString();
                this.categs.put(_key45, _val46);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TAGS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map47 = iprot.readMapBegin();
              this.tags = new HashMap<String,String>(2*_map47.size);
              for (int _i48 = 0; _i48 < _map47.size; ++_i48)
              {
                String _key49; // required
                String _val50; // required
                _key49 = iprot.readString();
                _val50 = iprot.readString();
                this.tags.put(_key49, _val50);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    if (this.eventPool != null) {
      if (isSetEventPool()) {
        oprot.writeFieldBegin(EVENT_POOL_FIELD_DESC);
        this.eventPool.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.childrenItems != null) {
      if (isSetChildrenItems()) {
        oprot.writeFieldBegin(CHILDREN_ITEMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, this.childrenItems.size()));
          for (Map.Entry<Long, EventItem> _iter51 : this.childrenItems.entrySet())
          {
            oprot.writeI64(_iter51.getKey());
            _iter51.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.categs != null) {
      if (isSetCategs()) {
        oprot.writeFieldBegin(CATEGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, this.categs.size()));
          for (Map.Entry<Integer, String> _iter52 : this.categs.entrySet())
          {
            oprot.writeI32(_iter52.getKey());
            oprot.writeString(_iter52.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.tags != null) {
      if (isSetTags()) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.tags.size()));
          for (Map.Entry<String, String> _iter53 : this.tags.entrySet())
          {
            oprot.writeString(_iter53.getKey());
            oprot.writeString(_iter53.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventPoolReply(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetEventPool()) {
      if (!first) sb.append(", ");
      sb.append("eventPool:");
      if (this.eventPool == null) {
        sb.append("null");
      } else {
        sb.append(this.eventPool);
      }
      first = false;
    }
    if (isSetChildrenItems()) {
      if (!first) sb.append(", ");
      sb.append("childrenItems:");
      if (this.childrenItems == null) {
        sb.append("null");
      } else {
        sb.append(this.childrenItems);
      }
      first = false;
    }
    if (isSetCategs()) {
      if (!first) sb.append(", ");
      sb.append("categs:");
      if (this.categs == null) {
        sb.append("null");
      } else {
        sb.append(this.categs);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

