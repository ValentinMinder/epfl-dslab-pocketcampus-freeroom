/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class EventPool implements org.apache.thrift.TBase<EventPool, EventPool._Fields>, java.io.Serializable, Cloneable, Comparable<EventPool> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventPool");

  private static final org.apache.thrift.protocol.TField POOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poolId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField POOL_PICTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("poolPicture", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POOL_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("poolTitle", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField POOL_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("poolPlace", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField POOL_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("poolDetails", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DISABLE_STAR_FIELD_DESC = new org.apache.thrift.protocol.TField("disableStar", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField DISABLE_FILTER_BY_CATEG_FIELD_DESC = new org.apache.thrift.protocol.TField("disableFilterByCateg", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField DISABLE_FILTER_BY_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("disableFilterByTags", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField ENABLE_SCAN_FIELD_DESC = new org.apache.thrift.protocol.TField("enableScan", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField NO_RESULT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("noResultText", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField REFRESH_ON_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("refreshOnBack", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField SEND_STARRED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("sendStarredItems", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField OVERRIDE_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("overrideLink", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CHILDREN_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenEvents", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField PARENT_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("parentEvent", org.apache.thrift.protocol.TType.I64, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventPoolStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventPoolTupleSchemeFactory());
  }

  private long poolId; // required
  private String poolPicture; // optional
  private String poolTitle; // optional
  private String poolPlace; // optional
  private String poolDetails; // optional
  private boolean disableStar; // optional
  private boolean disableFilterByCateg; // optional
  private boolean disableFilterByTags; // optional
  private boolean enableScan; // optional
  private String noResultText; // optional
  private boolean refreshOnBack; // optional
  private boolean sendStarredItems; // optional
  private String overrideLink; // optional
  private List<Long> childrenEvents; // optional
  private long parentEvent; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POOL_ID((short)1, "poolId"),
    POOL_PICTURE((short)5, "poolPicture"),
    POOL_TITLE((short)6, "poolTitle"),
    POOL_PLACE((short)7, "poolPlace"),
    POOL_DETAILS((short)9, "poolDetails"),
    DISABLE_STAR((short)10, "disableStar"),
    DISABLE_FILTER_BY_CATEG((short)11, "disableFilterByCateg"),
    DISABLE_FILTER_BY_TAGS((short)12, "disableFilterByTags"),
    ENABLE_SCAN((short)13, "enableScan"),
    NO_RESULT_TEXT((short)14, "noResultText"),
    REFRESH_ON_BACK((short)16, "refreshOnBack"),
    SEND_STARRED_ITEMS((short)19, "sendStarredItems"),
    OVERRIDE_LINK((short)21, "overrideLink"),
    CHILDREN_EVENTS((short)15, "childrenEvents"),
    PARENT_EVENT((short)17, "parentEvent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POOL_ID
          return POOL_ID;
        case 5: // POOL_PICTURE
          return POOL_PICTURE;
        case 6: // POOL_TITLE
          return POOL_TITLE;
        case 7: // POOL_PLACE
          return POOL_PLACE;
        case 9: // POOL_DETAILS
          return POOL_DETAILS;
        case 10: // DISABLE_STAR
          return DISABLE_STAR;
        case 11: // DISABLE_FILTER_BY_CATEG
          return DISABLE_FILTER_BY_CATEG;
        case 12: // DISABLE_FILTER_BY_TAGS
          return DISABLE_FILTER_BY_TAGS;
        case 13: // ENABLE_SCAN
          return ENABLE_SCAN;
        case 14: // NO_RESULT_TEXT
          return NO_RESULT_TEXT;
        case 16: // REFRESH_ON_BACK
          return REFRESH_ON_BACK;
        case 19: // SEND_STARRED_ITEMS
          return SEND_STARRED_ITEMS;
        case 21: // OVERRIDE_LINK
          return OVERRIDE_LINK;
        case 15: // CHILDREN_EVENTS
          return CHILDREN_EVENTS;
        case 17: // PARENT_EVENT
          return PARENT_EVENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POOLID_ISSET_ID = 0;
  private static final int __DISABLESTAR_ISSET_ID = 1;
  private static final int __DISABLEFILTERBYCATEG_ISSET_ID = 2;
  private static final int __DISABLEFILTERBYTAGS_ISSET_ID = 3;
  private static final int __ENABLESCAN_ISSET_ID = 4;
  private static final int __REFRESHONBACK_ISSET_ID = 5;
  private static final int __SENDSTARREDITEMS_ISSET_ID = 6;
  private static final int __PARENTEVENT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.POOL_PICTURE,_Fields.POOL_TITLE,_Fields.POOL_PLACE,_Fields.POOL_DETAILS,_Fields.DISABLE_STAR,_Fields.DISABLE_FILTER_BY_CATEG,_Fields.DISABLE_FILTER_BY_TAGS,_Fields.ENABLE_SCAN,_Fields.NO_RESULT_TEXT,_Fields.REFRESH_ON_BACK,_Fields.SEND_STARRED_ITEMS,_Fields.OVERRIDE_LINK,_Fields.CHILDREN_EVENTS,_Fields.PARENT_EVENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POOL_ID, new org.apache.thrift.meta_data.FieldMetaData("poolId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POOL_PICTURE, new org.apache.thrift.meta_data.FieldMetaData("poolPicture", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POOL_TITLE, new org.apache.thrift.meta_data.FieldMetaData("poolTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POOL_PLACE, new org.apache.thrift.meta_data.FieldMetaData("poolPlace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POOL_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("poolDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISABLE_STAR, new org.apache.thrift.meta_data.FieldMetaData("disableStar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISABLE_FILTER_BY_CATEG, new org.apache.thrift.meta_data.FieldMetaData("disableFilterByCateg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISABLE_FILTER_BY_TAGS, new org.apache.thrift.meta_data.FieldMetaData("disableFilterByTags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_SCAN, new org.apache.thrift.meta_data.FieldMetaData("enableScan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NO_RESULT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("noResultText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFRESH_ON_BACK, new org.apache.thrift.meta_data.FieldMetaData("refreshOnBack", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SEND_STARRED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("sendStarredItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OVERRIDE_LINK, new org.apache.thrift.meta_data.FieldMetaData("overrideLink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILDREN_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("childrenEvents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PARENT_EVENT, new org.apache.thrift.meta_data.FieldMetaData("parentEvent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventPool.class, metaDataMap);
  }

  public EventPool() {
  }

  public EventPool(
    long poolId)
  {
    this();
    this.poolId = poolId;
    setPoolIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventPool(EventPool other) {
    __isset_bitfield = other.__isset_bitfield;
    this.poolId = other.poolId;
    if (other.isSetPoolPicture()) {
      this.poolPicture = other.poolPicture;
    }
    if (other.isSetPoolTitle()) {
      this.poolTitle = other.poolTitle;
    }
    if (other.isSetPoolPlace()) {
      this.poolPlace = other.poolPlace;
    }
    if (other.isSetPoolDetails()) {
      this.poolDetails = other.poolDetails;
    }
    this.disableStar = other.disableStar;
    this.disableFilterByCateg = other.disableFilterByCateg;
    this.disableFilterByTags = other.disableFilterByTags;
    this.enableScan = other.enableScan;
    if (other.isSetNoResultText()) {
      this.noResultText = other.noResultText;
    }
    this.refreshOnBack = other.refreshOnBack;
    this.sendStarredItems = other.sendStarredItems;
    if (other.isSetOverrideLink()) {
      this.overrideLink = other.overrideLink;
    }
    if (other.isSetChildrenEvents()) {
      List<Long> __this__childrenEvents = new ArrayList<Long>(other.childrenEvents);
      this.childrenEvents = __this__childrenEvents;
    }
    this.parentEvent = other.parentEvent;
  }

  public EventPool deepCopy() {
    return new EventPool(this);
  }

  @Override
  public void clear() {
    setPoolIdIsSet(false);
    this.poolId = 0;
    this.poolPicture = null;
    this.poolTitle = null;
    this.poolPlace = null;
    this.poolDetails = null;
    setDisableStarIsSet(false);
    this.disableStar = false;
    setDisableFilterByCategIsSet(false);
    this.disableFilterByCateg = false;
    setDisableFilterByTagsIsSet(false);
    this.disableFilterByTags = false;
    setEnableScanIsSet(false);
    this.enableScan = false;
    this.noResultText = null;
    setRefreshOnBackIsSet(false);
    this.refreshOnBack = false;
    setSendStarredItemsIsSet(false);
    this.sendStarredItems = false;
    this.overrideLink = null;
    this.childrenEvents = null;
    setParentEventIsSet(false);
    this.parentEvent = 0;
  }

  public long getPoolId() {
    return this.poolId;
  }

  public EventPool setPoolId(long poolId) {
    this.poolId = poolId;
    setPoolIdIsSet(true);
    return this;
  }

  public void unsetPoolId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POOLID_ISSET_ID);
  }

  /** Returns true if field poolId is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolId() {
    return EncodingUtils.testBit(__isset_bitfield, __POOLID_ISSET_ID);
  }

  public void setPoolIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POOLID_ISSET_ID, value);
  }

  public String getPoolPicture() {
    return this.poolPicture;
  }

  public EventPool setPoolPicture(String poolPicture) {
    this.poolPicture = poolPicture;
    return this;
  }

  public void unsetPoolPicture() {
    this.poolPicture = null;
  }

  /** Returns true if field poolPicture is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolPicture() {
    return this.poolPicture != null;
  }

  public void setPoolPictureIsSet(boolean value) {
    if (!value) {
      this.poolPicture = null;
    }
  }

  public String getPoolTitle() {
    return this.poolTitle;
  }

  public EventPool setPoolTitle(String poolTitle) {
    this.poolTitle = poolTitle;
    return this;
  }

  public void unsetPoolTitle() {
    this.poolTitle = null;
  }

  /** Returns true if field poolTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolTitle() {
    return this.poolTitle != null;
  }

  public void setPoolTitleIsSet(boolean value) {
    if (!value) {
      this.poolTitle = null;
    }
  }

  public String getPoolPlace() {
    return this.poolPlace;
  }

  public EventPool setPoolPlace(String poolPlace) {
    this.poolPlace = poolPlace;
    return this;
  }

  public void unsetPoolPlace() {
    this.poolPlace = null;
  }

  /** Returns true if field poolPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolPlace() {
    return this.poolPlace != null;
  }

  public void setPoolPlaceIsSet(boolean value) {
    if (!value) {
      this.poolPlace = null;
    }
  }

  public String getPoolDetails() {
    return this.poolDetails;
  }

  public EventPool setPoolDetails(String poolDetails) {
    this.poolDetails = poolDetails;
    return this;
  }

  public void unsetPoolDetails() {
    this.poolDetails = null;
  }

  /** Returns true if field poolDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolDetails() {
    return this.poolDetails != null;
  }

  public void setPoolDetailsIsSet(boolean value) {
    if (!value) {
      this.poolDetails = null;
    }
  }

  public boolean isDisableStar() {
    return this.disableStar;
  }

  public EventPool setDisableStar(boolean disableStar) {
    this.disableStar = disableStar;
    setDisableStarIsSet(true);
    return this;
  }

  public void unsetDisableStar() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLESTAR_ISSET_ID);
  }

  /** Returns true if field disableStar is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableStar() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLESTAR_ISSET_ID);
  }

  public void setDisableStarIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLESTAR_ISSET_ID, value);
  }

  public boolean isDisableFilterByCateg() {
    return this.disableFilterByCateg;
  }

  public EventPool setDisableFilterByCateg(boolean disableFilterByCateg) {
    this.disableFilterByCateg = disableFilterByCateg;
    setDisableFilterByCategIsSet(true);
    return this;
  }

  public void unsetDisableFilterByCateg() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLEFILTERBYCATEG_ISSET_ID);
  }

  /** Returns true if field disableFilterByCateg is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableFilterByCateg() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLEFILTERBYCATEG_ISSET_ID);
  }

  public void setDisableFilterByCategIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLEFILTERBYCATEG_ISSET_ID, value);
  }

  public boolean isDisableFilterByTags() {
    return this.disableFilterByTags;
  }

  public EventPool setDisableFilterByTags(boolean disableFilterByTags) {
    this.disableFilterByTags = disableFilterByTags;
    setDisableFilterByTagsIsSet(true);
    return this;
  }

  public void unsetDisableFilterByTags() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLEFILTERBYTAGS_ISSET_ID);
  }

  /** Returns true if field disableFilterByTags is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableFilterByTags() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLEFILTERBYTAGS_ISSET_ID);
  }

  public void setDisableFilterByTagsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLEFILTERBYTAGS_ISSET_ID, value);
  }

  public boolean isEnableScan() {
    return this.enableScan;
  }

  public EventPool setEnableScan(boolean enableScan) {
    this.enableScan = enableScan;
    setEnableScanIsSet(true);
    return this;
  }

  public void unsetEnableScan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLESCAN_ISSET_ID);
  }

  /** Returns true if field enableScan is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableScan() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLESCAN_ISSET_ID);
  }

  public void setEnableScanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLESCAN_ISSET_ID, value);
  }

  public String getNoResultText() {
    return this.noResultText;
  }

  public EventPool setNoResultText(String noResultText) {
    this.noResultText = noResultText;
    return this;
  }

  public void unsetNoResultText() {
    this.noResultText = null;
  }

  /** Returns true if field noResultText is set (has been assigned a value) and false otherwise */
  public boolean isSetNoResultText() {
    return this.noResultText != null;
  }

  public void setNoResultTextIsSet(boolean value) {
    if (!value) {
      this.noResultText = null;
    }
  }

  public boolean isRefreshOnBack() {
    return this.refreshOnBack;
  }

  public EventPool setRefreshOnBack(boolean refreshOnBack) {
    this.refreshOnBack = refreshOnBack;
    setRefreshOnBackIsSet(true);
    return this;
  }

  public void unsetRefreshOnBack() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFRESHONBACK_ISSET_ID);
  }

  /** Returns true if field refreshOnBack is set (has been assigned a value) and false otherwise */
  public boolean isSetRefreshOnBack() {
    return EncodingUtils.testBit(__isset_bitfield, __REFRESHONBACK_ISSET_ID);
  }

  public void setRefreshOnBackIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFRESHONBACK_ISSET_ID, value);
  }

  public boolean isSendStarredItems() {
    return this.sendStarredItems;
  }

  public EventPool setSendStarredItems(boolean sendStarredItems) {
    this.sendStarredItems = sendStarredItems;
    setSendStarredItemsIsSet(true);
    return this;
  }

  public void unsetSendStarredItems() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDSTARREDITEMS_ISSET_ID);
  }

  /** Returns true if field sendStarredItems is set (has been assigned a value) and false otherwise */
  public boolean isSetSendStarredItems() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDSTARREDITEMS_ISSET_ID);
  }

  public void setSendStarredItemsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDSTARREDITEMS_ISSET_ID, value);
  }

  public String getOverrideLink() {
    return this.overrideLink;
  }

  public EventPool setOverrideLink(String overrideLink) {
    this.overrideLink = overrideLink;
    return this;
  }

  public void unsetOverrideLink() {
    this.overrideLink = null;
  }

  /** Returns true if field overrideLink is set (has been assigned a value) and false otherwise */
  public boolean isSetOverrideLink() {
    return this.overrideLink != null;
  }

  public void setOverrideLinkIsSet(boolean value) {
    if (!value) {
      this.overrideLink = null;
    }
  }

  public int getChildrenEventsSize() {
    return (this.childrenEvents == null) ? 0 : this.childrenEvents.size();
  }

  public java.util.Iterator<Long> getChildrenEventsIterator() {
    return (this.childrenEvents == null) ? null : this.childrenEvents.iterator();
  }

  public void addToChildrenEvents(long elem) {
    if (this.childrenEvents == null) {
      this.childrenEvents = new ArrayList<Long>();
    }
    this.childrenEvents.add(elem);
  }

  public List<Long> getChildrenEvents() {
    return this.childrenEvents;
  }

  public EventPool setChildrenEvents(List<Long> childrenEvents) {
    this.childrenEvents = childrenEvents;
    return this;
  }

  public void unsetChildrenEvents() {
    this.childrenEvents = null;
  }

  /** Returns true if field childrenEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenEvents() {
    return this.childrenEvents != null;
  }

  public void setChildrenEventsIsSet(boolean value) {
    if (!value) {
      this.childrenEvents = null;
    }
  }

  public long getParentEvent() {
    return this.parentEvent;
  }

  public EventPool setParentEvent(long parentEvent) {
    this.parentEvent = parentEvent;
    setParentEventIsSet(true);
    return this;
  }

  public void unsetParentEvent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTEVENT_ISSET_ID);
  }

  /** Returns true if field parentEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetParentEvent() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTEVENT_ISSET_ID);
  }

  public void setParentEventIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTEVENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POOL_ID:
      if (value == null) {
        unsetPoolId();
      } else {
        setPoolId((Long)value);
      }
      break;

    case POOL_PICTURE:
      if (value == null) {
        unsetPoolPicture();
      } else {
        setPoolPicture((String)value);
      }
      break;

    case POOL_TITLE:
      if (value == null) {
        unsetPoolTitle();
      } else {
        setPoolTitle((String)value);
      }
      break;

    case POOL_PLACE:
      if (value == null) {
        unsetPoolPlace();
      } else {
        setPoolPlace((String)value);
      }
      break;

    case POOL_DETAILS:
      if (value == null) {
        unsetPoolDetails();
      } else {
        setPoolDetails((String)value);
      }
      break;

    case DISABLE_STAR:
      if (value == null) {
        unsetDisableStar();
      } else {
        setDisableStar((Boolean)value);
      }
      break;

    case DISABLE_FILTER_BY_CATEG:
      if (value == null) {
        unsetDisableFilterByCateg();
      } else {
        setDisableFilterByCateg((Boolean)value);
      }
      break;

    case DISABLE_FILTER_BY_TAGS:
      if (value == null) {
        unsetDisableFilterByTags();
      } else {
        setDisableFilterByTags((Boolean)value);
      }
      break;

    case ENABLE_SCAN:
      if (value == null) {
        unsetEnableScan();
      } else {
        setEnableScan((Boolean)value);
      }
      break;

    case NO_RESULT_TEXT:
      if (value == null) {
        unsetNoResultText();
      } else {
        setNoResultText((String)value);
      }
      break;

    case REFRESH_ON_BACK:
      if (value == null) {
        unsetRefreshOnBack();
      } else {
        setRefreshOnBack((Boolean)value);
      }
      break;

    case SEND_STARRED_ITEMS:
      if (value == null) {
        unsetSendStarredItems();
      } else {
        setSendStarredItems((Boolean)value);
      }
      break;

    case OVERRIDE_LINK:
      if (value == null) {
        unsetOverrideLink();
      } else {
        setOverrideLink((String)value);
      }
      break;

    case CHILDREN_EVENTS:
      if (value == null) {
        unsetChildrenEvents();
      } else {
        setChildrenEvents((List<Long>)value);
      }
      break;

    case PARENT_EVENT:
      if (value == null) {
        unsetParentEvent();
      } else {
        setParentEvent((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POOL_ID:
      return Long.valueOf(getPoolId());

    case POOL_PICTURE:
      return getPoolPicture();

    case POOL_TITLE:
      return getPoolTitle();

    case POOL_PLACE:
      return getPoolPlace();

    case POOL_DETAILS:
      return getPoolDetails();

    case DISABLE_STAR:
      return Boolean.valueOf(isDisableStar());

    case DISABLE_FILTER_BY_CATEG:
      return Boolean.valueOf(isDisableFilterByCateg());

    case DISABLE_FILTER_BY_TAGS:
      return Boolean.valueOf(isDisableFilterByTags());

    case ENABLE_SCAN:
      return Boolean.valueOf(isEnableScan());

    case NO_RESULT_TEXT:
      return getNoResultText();

    case REFRESH_ON_BACK:
      return Boolean.valueOf(isRefreshOnBack());

    case SEND_STARRED_ITEMS:
      return Boolean.valueOf(isSendStarredItems());

    case OVERRIDE_LINK:
      return getOverrideLink();

    case CHILDREN_EVENTS:
      return getChildrenEvents();

    case PARENT_EVENT:
      return Long.valueOf(getParentEvent());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POOL_ID:
      return isSetPoolId();
    case POOL_PICTURE:
      return isSetPoolPicture();
    case POOL_TITLE:
      return isSetPoolTitle();
    case POOL_PLACE:
      return isSetPoolPlace();
    case POOL_DETAILS:
      return isSetPoolDetails();
    case DISABLE_STAR:
      return isSetDisableStar();
    case DISABLE_FILTER_BY_CATEG:
      return isSetDisableFilterByCateg();
    case DISABLE_FILTER_BY_TAGS:
      return isSetDisableFilterByTags();
    case ENABLE_SCAN:
      return isSetEnableScan();
    case NO_RESULT_TEXT:
      return isSetNoResultText();
    case REFRESH_ON_BACK:
      return isSetRefreshOnBack();
    case SEND_STARRED_ITEMS:
      return isSetSendStarredItems();
    case OVERRIDE_LINK:
      return isSetOverrideLink();
    case CHILDREN_EVENTS:
      return isSetChildrenEvents();
    case PARENT_EVENT:
      return isSetParentEvent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventPool)
      return this.equals((EventPool)that);
    return false;
  }

  public boolean equals(EventPool that) {
    if (that == null)
      return false;

    boolean this_present_poolId = true;
    boolean that_present_poolId = true;
    if (this_present_poolId || that_present_poolId) {
      if (!(this_present_poolId && that_present_poolId))
        return false;
      if (this.poolId != that.poolId)
        return false;
    }

    boolean this_present_poolPicture = true && this.isSetPoolPicture();
    boolean that_present_poolPicture = true && that.isSetPoolPicture();
    if (this_present_poolPicture || that_present_poolPicture) {
      if (!(this_present_poolPicture && that_present_poolPicture))
        return false;
      if (!this.poolPicture.equals(that.poolPicture))
        return false;
    }

    boolean this_present_poolTitle = true && this.isSetPoolTitle();
    boolean that_present_poolTitle = true && that.isSetPoolTitle();
    if (this_present_poolTitle || that_present_poolTitle) {
      if (!(this_present_poolTitle && that_present_poolTitle))
        return false;
      if (!this.poolTitle.equals(that.poolTitle))
        return false;
    }

    boolean this_present_poolPlace = true && this.isSetPoolPlace();
    boolean that_present_poolPlace = true && that.isSetPoolPlace();
    if (this_present_poolPlace || that_present_poolPlace) {
      if (!(this_present_poolPlace && that_present_poolPlace))
        return false;
      if (!this.poolPlace.equals(that.poolPlace))
        return false;
    }

    boolean this_present_poolDetails = true && this.isSetPoolDetails();
    boolean that_present_poolDetails = true && that.isSetPoolDetails();
    if (this_present_poolDetails || that_present_poolDetails) {
      if (!(this_present_poolDetails && that_present_poolDetails))
        return false;
      if (!this.poolDetails.equals(that.poolDetails))
        return false;
    }

    boolean this_present_disableStar = true && this.isSetDisableStar();
    boolean that_present_disableStar = true && that.isSetDisableStar();
    if (this_present_disableStar || that_present_disableStar) {
      if (!(this_present_disableStar && that_present_disableStar))
        return false;
      if (this.disableStar != that.disableStar)
        return false;
    }

    boolean this_present_disableFilterByCateg = true && this.isSetDisableFilterByCateg();
    boolean that_present_disableFilterByCateg = true && that.isSetDisableFilterByCateg();
    if (this_present_disableFilterByCateg || that_present_disableFilterByCateg) {
      if (!(this_present_disableFilterByCateg && that_present_disableFilterByCateg))
        return false;
      if (this.disableFilterByCateg != that.disableFilterByCateg)
        return false;
    }

    boolean this_present_disableFilterByTags = true && this.isSetDisableFilterByTags();
    boolean that_present_disableFilterByTags = true && that.isSetDisableFilterByTags();
    if (this_present_disableFilterByTags || that_present_disableFilterByTags) {
      if (!(this_present_disableFilterByTags && that_present_disableFilterByTags))
        return false;
      if (this.disableFilterByTags != that.disableFilterByTags)
        return false;
    }

    boolean this_present_enableScan = true && this.isSetEnableScan();
    boolean that_present_enableScan = true && that.isSetEnableScan();
    if (this_present_enableScan || that_present_enableScan) {
      if (!(this_present_enableScan && that_present_enableScan))
        return false;
      if (this.enableScan != that.enableScan)
        return false;
    }

    boolean this_present_noResultText = true && this.isSetNoResultText();
    boolean that_present_noResultText = true && that.isSetNoResultText();
    if (this_present_noResultText || that_present_noResultText) {
      if (!(this_present_noResultText && that_present_noResultText))
        return false;
      if (!this.noResultText.equals(that.noResultText))
        return false;
    }

    boolean this_present_refreshOnBack = true && this.isSetRefreshOnBack();
    boolean that_present_refreshOnBack = true && that.isSetRefreshOnBack();
    if (this_present_refreshOnBack || that_present_refreshOnBack) {
      if (!(this_present_refreshOnBack && that_present_refreshOnBack))
        return false;
      if (this.refreshOnBack != that.refreshOnBack)
        return false;
    }

    boolean this_present_sendStarredItems = true && this.isSetSendStarredItems();
    boolean that_present_sendStarredItems = true && that.isSetSendStarredItems();
    if (this_present_sendStarredItems || that_present_sendStarredItems) {
      if (!(this_present_sendStarredItems && that_present_sendStarredItems))
        return false;
      if (this.sendStarredItems != that.sendStarredItems)
        return false;
    }

    boolean this_present_overrideLink = true && this.isSetOverrideLink();
    boolean that_present_overrideLink = true && that.isSetOverrideLink();
    if (this_present_overrideLink || that_present_overrideLink) {
      if (!(this_present_overrideLink && that_present_overrideLink))
        return false;
      if (!this.overrideLink.equals(that.overrideLink))
        return false;
    }

    boolean this_present_childrenEvents = true && this.isSetChildrenEvents();
    boolean that_present_childrenEvents = true && that.isSetChildrenEvents();
    if (this_present_childrenEvents || that_present_childrenEvents) {
      if (!(this_present_childrenEvents && that_present_childrenEvents))
        return false;
      if (!this.childrenEvents.equals(that.childrenEvents))
        return false;
    }

    boolean this_present_parentEvent = true && this.isSetParentEvent();
    boolean that_present_parentEvent = true && that.isSetParentEvent();
    if (this_present_parentEvent || that_present_parentEvent) {
      if (!(this_present_parentEvent && that_present_parentEvent))
        return false;
      if (this.parentEvent != that.parentEvent)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_poolId = true;
    list.add(present_poolId);
    if (present_poolId)
      list.add(poolId);

    boolean present_poolPicture = true && (isSetPoolPicture());
    list.add(present_poolPicture);
    if (present_poolPicture)
      list.add(poolPicture);

    boolean present_poolTitle = true && (isSetPoolTitle());
    list.add(present_poolTitle);
    if (present_poolTitle)
      list.add(poolTitle);

    boolean present_poolPlace = true && (isSetPoolPlace());
    list.add(present_poolPlace);
    if (present_poolPlace)
      list.add(poolPlace);

    boolean present_poolDetails = true && (isSetPoolDetails());
    list.add(present_poolDetails);
    if (present_poolDetails)
      list.add(poolDetails);

    boolean present_disableStar = true && (isSetDisableStar());
    list.add(present_disableStar);
    if (present_disableStar)
      list.add(disableStar);

    boolean present_disableFilterByCateg = true && (isSetDisableFilterByCateg());
    list.add(present_disableFilterByCateg);
    if (present_disableFilterByCateg)
      list.add(disableFilterByCateg);

    boolean present_disableFilterByTags = true && (isSetDisableFilterByTags());
    list.add(present_disableFilterByTags);
    if (present_disableFilterByTags)
      list.add(disableFilterByTags);

    boolean present_enableScan = true && (isSetEnableScan());
    list.add(present_enableScan);
    if (present_enableScan)
      list.add(enableScan);

    boolean present_noResultText = true && (isSetNoResultText());
    list.add(present_noResultText);
    if (present_noResultText)
      list.add(noResultText);

    boolean present_refreshOnBack = true && (isSetRefreshOnBack());
    list.add(present_refreshOnBack);
    if (present_refreshOnBack)
      list.add(refreshOnBack);

    boolean present_sendStarredItems = true && (isSetSendStarredItems());
    list.add(present_sendStarredItems);
    if (present_sendStarredItems)
      list.add(sendStarredItems);

    boolean present_overrideLink = true && (isSetOverrideLink());
    list.add(present_overrideLink);
    if (present_overrideLink)
      list.add(overrideLink);

    boolean present_childrenEvents = true && (isSetChildrenEvents());
    list.add(present_childrenEvents);
    if (present_childrenEvents)
      list.add(childrenEvents);

    boolean present_parentEvent = true && (isSetParentEvent());
    list.add(present_parentEvent);
    if (present_parentEvent)
      list.add(parentEvent);

    return list.hashCode();
  }

  @Override
  public int compareTo(EventPool other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPoolId()).compareTo(other.isSetPoolId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolId, other.poolId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolPicture()).compareTo(other.isSetPoolPicture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolPicture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolPicture, other.poolPicture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolTitle()).compareTo(other.isSetPoolTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolTitle, other.poolTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolPlace()).compareTo(other.isSetPoolPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolPlace, other.poolPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolDetails()).compareTo(other.isSetPoolDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolDetails, other.poolDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisableStar()).compareTo(other.isSetDisableStar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableStar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disableStar, other.disableStar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisableFilterByCateg()).compareTo(other.isSetDisableFilterByCateg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableFilterByCateg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disableFilterByCateg, other.disableFilterByCateg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisableFilterByTags()).compareTo(other.isSetDisableFilterByTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableFilterByTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disableFilterByTags, other.disableFilterByTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableScan()).compareTo(other.isSetEnableScan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableScan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableScan, other.enableScan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoResultText()).compareTo(other.isSetNoResultText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoResultText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noResultText, other.noResultText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefreshOnBack()).compareTo(other.isSetRefreshOnBack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefreshOnBack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refreshOnBack, other.refreshOnBack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendStarredItems()).compareTo(other.isSetSendStarredItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendStarredItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendStarredItems, other.sendStarredItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverrideLink()).compareTo(other.isSetOverrideLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverrideLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overrideLink, other.overrideLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenEvents()).compareTo(other.isSetChildrenEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenEvents, other.childrenEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentEvent()).compareTo(other.isSetParentEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentEvent, other.parentEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventPool(");
    boolean first = true;

    sb.append("poolId:");
    sb.append(this.poolId);
    first = false;
    if (isSetPoolPicture()) {
      if (!first) sb.append(", ");
      sb.append("poolPicture:");
      if (this.poolPicture == null) {
        sb.append("null");
      } else {
        sb.append(this.poolPicture);
      }
      first = false;
    }
    if (isSetPoolTitle()) {
      if (!first) sb.append(", ");
      sb.append("poolTitle:");
      if (this.poolTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.poolTitle);
      }
      first = false;
    }
    if (isSetPoolPlace()) {
      if (!first) sb.append(", ");
      sb.append("poolPlace:");
      if (this.poolPlace == null) {
        sb.append("null");
      } else {
        sb.append(this.poolPlace);
      }
      first = false;
    }
    if (isSetPoolDetails()) {
      if (!first) sb.append(", ");
      sb.append("poolDetails:");
      if (this.poolDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.poolDetails);
      }
      first = false;
    }
    if (isSetDisableStar()) {
      if (!first) sb.append(", ");
      sb.append("disableStar:");
      sb.append(this.disableStar);
      first = false;
    }
    if (isSetDisableFilterByCateg()) {
      if (!first) sb.append(", ");
      sb.append("disableFilterByCateg:");
      sb.append(this.disableFilterByCateg);
      first = false;
    }
    if (isSetDisableFilterByTags()) {
      if (!first) sb.append(", ");
      sb.append("disableFilterByTags:");
      sb.append(this.disableFilterByTags);
      first = false;
    }
    if (isSetEnableScan()) {
      if (!first) sb.append(", ");
      sb.append("enableScan:");
      sb.append(this.enableScan);
      first = false;
    }
    if (isSetNoResultText()) {
      if (!first) sb.append(", ");
      sb.append("noResultText:");
      if (this.noResultText == null) {
        sb.append("null");
      } else {
        sb.append(this.noResultText);
      }
      first = false;
    }
    if (isSetRefreshOnBack()) {
      if (!first) sb.append(", ");
      sb.append("refreshOnBack:");
      sb.append(this.refreshOnBack);
      first = false;
    }
    if (isSetSendStarredItems()) {
      if (!first) sb.append(", ");
      sb.append("sendStarredItems:");
      sb.append(this.sendStarredItems);
      first = false;
    }
    if (isSetOverrideLink()) {
      if (!first) sb.append(", ");
      sb.append("overrideLink:");
      if (this.overrideLink == null) {
        sb.append("null");
      } else {
        sb.append(this.overrideLink);
      }
      first = false;
    }
    if (isSetChildrenEvents()) {
      if (!first) sb.append(", ");
      sb.append("childrenEvents:");
      if (this.childrenEvents == null) {
        sb.append("null");
      } else {
        sb.append(this.childrenEvents);
      }
      first = false;
    }
    if (isSetParentEvent()) {
      if (!first) sb.append(", ");
      sb.append("parentEvent:");
      sb.append(this.parentEvent);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'poolId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventPoolStandardSchemeFactory implements SchemeFactory {
    public EventPoolStandardScheme getScheme() {
      return new EventPoolStandardScheme();
    }
  }

  private static class EventPoolStandardScheme extends StandardScheme<EventPool> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EventPool struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POOL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.poolId = iprot.readI64();
              struct.setPoolIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POOL_PICTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poolPicture = iprot.readString();
              struct.setPoolPictureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POOL_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poolTitle = iprot.readString();
              struct.setPoolTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POOL_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poolPlace = iprot.readString();
              struct.setPoolPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POOL_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poolDetails = iprot.readString();
              struct.setPoolDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISABLE_STAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disableStar = iprot.readBool();
              struct.setDisableStarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DISABLE_FILTER_BY_CATEG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disableFilterByCateg = iprot.readBool();
              struct.setDisableFilterByCategIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DISABLE_FILTER_BY_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disableFilterByTags = iprot.readBool();
              struct.setDisableFilterByTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENABLE_SCAN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableScan = iprot.readBool();
              struct.setEnableScanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NO_RESULT_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noResultText = iprot.readString();
              struct.setNoResultTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REFRESH_ON_BACK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.refreshOnBack = iprot.readBool();
              struct.setRefreshOnBackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SEND_STARRED_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sendStarredItems = iprot.readBool();
              struct.setSendStarredItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OVERRIDE_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.overrideLink = iprot.readString();
              struct.setOverrideLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CHILDREN_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.childrenEvents = new ArrayList<Long>(_list16.size);
                long _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI64();
                  struct.childrenEvents.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setChildrenEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PARENT_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentEvent = iprot.readI64();
              struct.setParentEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPoolId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'poolId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EventPool struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POOL_ID_FIELD_DESC);
      oprot.writeI64(struct.poolId);
      oprot.writeFieldEnd();
      if (struct.poolPicture != null) {
        if (struct.isSetPoolPicture()) {
          oprot.writeFieldBegin(POOL_PICTURE_FIELD_DESC);
          oprot.writeString(struct.poolPicture);
          oprot.writeFieldEnd();
        }
      }
      if (struct.poolTitle != null) {
        if (struct.isSetPoolTitle()) {
          oprot.writeFieldBegin(POOL_TITLE_FIELD_DESC);
          oprot.writeString(struct.poolTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.poolPlace != null) {
        if (struct.isSetPoolPlace()) {
          oprot.writeFieldBegin(POOL_PLACE_FIELD_DESC);
          oprot.writeString(struct.poolPlace);
          oprot.writeFieldEnd();
        }
      }
      if (struct.poolDetails != null) {
        if (struct.isSetPoolDetails()) {
          oprot.writeFieldBegin(POOL_DETAILS_FIELD_DESC);
          oprot.writeString(struct.poolDetails);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisableStar()) {
        oprot.writeFieldBegin(DISABLE_STAR_FIELD_DESC);
        oprot.writeBool(struct.disableStar);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisableFilterByCateg()) {
        oprot.writeFieldBegin(DISABLE_FILTER_BY_CATEG_FIELD_DESC);
        oprot.writeBool(struct.disableFilterByCateg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisableFilterByTags()) {
        oprot.writeFieldBegin(DISABLE_FILTER_BY_TAGS_FIELD_DESC);
        oprot.writeBool(struct.disableFilterByTags);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableScan()) {
        oprot.writeFieldBegin(ENABLE_SCAN_FIELD_DESC);
        oprot.writeBool(struct.enableScan);
        oprot.writeFieldEnd();
      }
      if (struct.noResultText != null) {
        if (struct.isSetNoResultText()) {
          oprot.writeFieldBegin(NO_RESULT_TEXT_FIELD_DESC);
          oprot.writeString(struct.noResultText);
          oprot.writeFieldEnd();
        }
      }
      if (struct.childrenEvents != null) {
        if (struct.isSetChildrenEvents()) {
          oprot.writeFieldBegin(CHILDREN_EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.childrenEvents.size()));
            for (long _iter19 : struct.childrenEvents)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRefreshOnBack()) {
        oprot.writeFieldBegin(REFRESH_ON_BACK_FIELD_DESC);
        oprot.writeBool(struct.refreshOnBack);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParentEvent()) {
        oprot.writeFieldBegin(PARENT_EVENT_FIELD_DESC);
        oprot.writeI64(struct.parentEvent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSendStarredItems()) {
        oprot.writeFieldBegin(SEND_STARRED_ITEMS_FIELD_DESC);
        oprot.writeBool(struct.sendStarredItems);
        oprot.writeFieldEnd();
      }
      if (struct.overrideLink != null) {
        if (struct.isSetOverrideLink()) {
          oprot.writeFieldBegin(OVERRIDE_LINK_FIELD_DESC);
          oprot.writeString(struct.overrideLink);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventPoolTupleSchemeFactory implements SchemeFactory {
    public EventPoolTupleScheme getScheme() {
      return new EventPoolTupleScheme();
    }
  }

  private static class EventPoolTupleScheme extends TupleScheme<EventPool> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EventPool struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.poolId);
      BitSet optionals = new BitSet();
      if (struct.isSetPoolPicture()) {
        optionals.set(0);
      }
      if (struct.isSetPoolTitle()) {
        optionals.set(1);
      }
      if (struct.isSetPoolPlace()) {
        optionals.set(2);
      }
      if (struct.isSetPoolDetails()) {
        optionals.set(3);
      }
      if (struct.isSetDisableStar()) {
        optionals.set(4);
      }
      if (struct.isSetDisableFilterByCateg()) {
        optionals.set(5);
      }
      if (struct.isSetDisableFilterByTags()) {
        optionals.set(6);
      }
      if (struct.isSetEnableScan()) {
        optionals.set(7);
      }
      if (struct.isSetNoResultText()) {
        optionals.set(8);
      }
      if (struct.isSetRefreshOnBack()) {
        optionals.set(9);
      }
      if (struct.isSetSendStarredItems()) {
        optionals.set(10);
      }
      if (struct.isSetOverrideLink()) {
        optionals.set(11);
      }
      if (struct.isSetChildrenEvents()) {
        optionals.set(12);
      }
      if (struct.isSetParentEvent()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPoolPicture()) {
        oprot.writeString(struct.poolPicture);
      }
      if (struct.isSetPoolTitle()) {
        oprot.writeString(struct.poolTitle);
      }
      if (struct.isSetPoolPlace()) {
        oprot.writeString(struct.poolPlace);
      }
      if (struct.isSetPoolDetails()) {
        oprot.writeString(struct.poolDetails);
      }
      if (struct.isSetDisableStar()) {
        oprot.writeBool(struct.disableStar);
      }
      if (struct.isSetDisableFilterByCateg()) {
        oprot.writeBool(struct.disableFilterByCateg);
      }
      if (struct.isSetDisableFilterByTags()) {
        oprot.writeBool(struct.disableFilterByTags);
      }
      if (struct.isSetEnableScan()) {
        oprot.writeBool(struct.enableScan);
      }
      if (struct.isSetNoResultText()) {
        oprot.writeString(struct.noResultText);
      }
      if (struct.isSetRefreshOnBack()) {
        oprot.writeBool(struct.refreshOnBack);
      }
      if (struct.isSetSendStarredItems()) {
        oprot.writeBool(struct.sendStarredItems);
      }
      if (struct.isSetOverrideLink()) {
        oprot.writeString(struct.overrideLink);
      }
      if (struct.isSetChildrenEvents()) {
        {
          oprot.writeI32(struct.childrenEvents.size());
          for (long _iter20 : struct.childrenEvents)
          {
            oprot.writeI64(_iter20);
          }
        }
      }
      if (struct.isSetParentEvent()) {
        oprot.writeI64(struct.parentEvent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EventPool struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.poolId = iprot.readI64();
      struct.setPoolIdIsSet(true);
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.poolPicture = iprot.readString();
        struct.setPoolPictureIsSet(true);
      }
      if (incoming.get(1)) {
        struct.poolTitle = iprot.readString();
        struct.setPoolTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.poolPlace = iprot.readString();
        struct.setPoolPlaceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.poolDetails = iprot.readString();
        struct.setPoolDetailsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.disableStar = iprot.readBool();
        struct.setDisableStarIsSet(true);
      }
      if (incoming.get(5)) {
        struct.disableFilterByCateg = iprot.readBool();
        struct.setDisableFilterByCategIsSet(true);
      }
      if (incoming.get(6)) {
        struct.disableFilterByTags = iprot.readBool();
        struct.setDisableFilterByTagsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.enableScan = iprot.readBool();
        struct.setEnableScanIsSet(true);
      }
      if (incoming.get(8)) {
        struct.noResultText = iprot.readString();
        struct.setNoResultTextIsSet(true);
      }
      if (incoming.get(9)) {
        struct.refreshOnBack = iprot.readBool();
        struct.setRefreshOnBackIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sendStarredItems = iprot.readBool();
        struct.setSendStarredItemsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.overrideLink = iprot.readString();
        struct.setOverrideLinkIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.childrenEvents = new ArrayList<Long>(_list21.size);
          long _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI64();
            struct.childrenEvents.add(_elem22);
          }
        }
        struct.setChildrenEventsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.parentEvent = iprot.readI64();
        struct.setParentEventIsSet(true);
      }
    }
  }

}

