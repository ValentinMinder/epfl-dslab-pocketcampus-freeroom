/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.events.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class EventItemRequest implements org.apache.thrift.TBase<EventItemRequest, EventItemRequest._Fields>, java.io.Serializable, Cloneable, Comparable<EventItemRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventItemRequest");

  private static final org.apache.thrift.protocol.TField EVENT_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventItemId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("userToken", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_TICKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("userTickets", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventItemRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventItemRequestTupleSchemeFactory());
  }

  private long eventItemId; // required
  private String userToken; // optional
  private List<String> userTickets; // optional
  private String lang; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT_ITEM_ID((short)1, "eventItemId"),
    USER_TOKEN((short)2, "userToken"),
    USER_TICKETS((short)3, "userTickets"),
    LANG((short)5, "lang");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT_ITEM_ID
          return EVENT_ITEM_ID;
        case 2: // USER_TOKEN
          return USER_TOKEN;
        case 3: // USER_TICKETS
          return USER_TICKETS;
        case 5: // LANG
          return LANG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTITEMID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_TOKEN,_Fields.USER_TICKETS,_Fields.LANG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("eventItemId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("userToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TICKETS, new org.apache.thrift.meta_data.FieldMetaData("userTickets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventItemRequest.class, metaDataMap);
  }

  public EventItemRequest() {
  }

  public EventItemRequest(
    long eventItemId)
  {
    this();
    this.eventItemId = eventItemId;
    setEventItemIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventItemRequest(EventItemRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.eventItemId = other.eventItemId;
    if (other.isSetUserToken()) {
      this.userToken = other.userToken;
    }
    if (other.isSetUserTickets()) {
      List<String> __this__userTickets = new ArrayList<String>(other.userTickets);
      this.userTickets = __this__userTickets;
    }
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
  }

  public EventItemRequest deepCopy() {
    return new EventItemRequest(this);
  }

  @Override
  public void clear() {
    setEventItemIdIsSet(false);
    this.eventItemId = 0;
    this.userToken = null;
    this.userTickets = null;
    this.lang = null;
  }

  public long getEventItemId() {
    return this.eventItemId;
  }

  public EventItemRequest setEventItemId(long eventItemId) {
    this.eventItemId = eventItemId;
    setEventItemIdIsSet(true);
    return this;
  }

  public void unsetEventItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTITEMID_ISSET_ID);
  }

  /** Returns true if field eventItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTITEMID_ISSET_ID);
  }

  public void setEventItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTITEMID_ISSET_ID, value);
  }

  public String getUserToken() {
    return this.userToken;
  }

  public EventItemRequest setUserToken(String userToken) {
    this.userToken = userToken;
    return this;
  }

  public void unsetUserToken() {
    this.userToken = null;
  }

  /** Returns true if field userToken is set (has been assigned a value) and false otherwise */
  public boolean isSetUserToken() {
    return this.userToken != null;
  }

  public void setUserTokenIsSet(boolean value) {
    if (!value) {
      this.userToken = null;
    }
  }

  public int getUserTicketsSize() {
    return (this.userTickets == null) ? 0 : this.userTickets.size();
  }

  public java.util.Iterator<String> getUserTicketsIterator() {
    return (this.userTickets == null) ? null : this.userTickets.iterator();
  }

  public void addToUserTickets(String elem) {
    if (this.userTickets == null) {
      this.userTickets = new ArrayList<String>();
    }
    this.userTickets.add(elem);
  }

  public List<String> getUserTickets() {
    return this.userTickets;
  }

  public EventItemRequest setUserTickets(List<String> userTickets) {
    this.userTickets = userTickets;
    return this;
  }

  public void unsetUserTickets() {
    this.userTickets = null;
  }

  /** Returns true if field userTickets is set (has been assigned a value) and false otherwise */
  public boolean isSetUserTickets() {
    return this.userTickets != null;
  }

  public void setUserTicketsIsSet(boolean value) {
    if (!value) {
      this.userTickets = null;
    }
  }

  public String getLang() {
    return this.lang;
  }

  public EventItemRequest setLang(String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT_ITEM_ID:
      if (value == null) {
        unsetEventItemId();
      } else {
        setEventItemId((Long)value);
      }
      break;

    case USER_TOKEN:
      if (value == null) {
        unsetUserToken();
      } else {
        setUserToken((String)value);
      }
      break;

    case USER_TICKETS:
      if (value == null) {
        unsetUserTickets();
      } else {
        setUserTickets((List<String>)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT_ITEM_ID:
      return Long.valueOf(getEventItemId());

    case USER_TOKEN:
      return getUserToken();

    case USER_TICKETS:
      return getUserTickets();

    case LANG:
      return getLang();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT_ITEM_ID:
      return isSetEventItemId();
    case USER_TOKEN:
      return isSetUserToken();
    case USER_TICKETS:
      return isSetUserTickets();
    case LANG:
      return isSetLang();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventItemRequest)
      return this.equals((EventItemRequest)that);
    return false;
  }

  public boolean equals(EventItemRequest that) {
    if (that == null)
      return false;

    boolean this_present_eventItemId = true;
    boolean that_present_eventItemId = true;
    if (this_present_eventItemId || that_present_eventItemId) {
      if (!(this_present_eventItemId && that_present_eventItemId))
        return false;
      if (this.eventItemId != that.eventItemId)
        return false;
    }

    boolean this_present_userToken = true && this.isSetUserToken();
    boolean that_present_userToken = true && that.isSetUserToken();
    if (this_present_userToken || that_present_userToken) {
      if (!(this_present_userToken && that_present_userToken))
        return false;
      if (!this.userToken.equals(that.userToken))
        return false;
    }

    boolean this_present_userTickets = true && this.isSetUserTickets();
    boolean that_present_userTickets = true && that.isSetUserTickets();
    if (this_present_userTickets || that_present_userTickets) {
      if (!(this_present_userTickets && that_present_userTickets))
        return false;
      if (!this.userTickets.equals(that.userTickets))
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_eventItemId = true;
    list.add(present_eventItemId);
    if (present_eventItemId)
      list.add(eventItemId);

    boolean present_userToken = true && (isSetUserToken());
    list.add(present_userToken);
    if (present_userToken)
      list.add(userToken);

    boolean present_userTickets = true && (isSetUserTickets());
    list.add(present_userTickets);
    if (present_userTickets)
      list.add(userTickets);

    boolean present_lang = true && (isSetLang());
    list.add(present_lang);
    if (present_lang)
      list.add(lang);

    return list.hashCode();
  }

  @Override
  public int compareTo(EventItemRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEventItemId()).compareTo(other.isSetEventItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventItemId, other.eventItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserToken()).compareTo(other.isSetUserToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userToken, other.userToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserTickets()).compareTo(other.isSetUserTickets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserTickets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userTickets, other.userTickets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLang()).compareTo(other.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventItemRequest(");
    boolean first = true;

    sb.append("eventItemId:");
    sb.append(this.eventItemId);
    first = false;
    if (isSetUserToken()) {
      if (!first) sb.append(", ");
      sb.append("userToken:");
      if (this.userToken == null) {
        sb.append("null");
      } else {
        sb.append(this.userToken);
      }
      first = false;
    }
    if (isSetUserTickets()) {
      if (!first) sb.append(", ");
      sb.append("userTickets:");
      if (this.userTickets == null) {
        sb.append("null");
      } else {
        sb.append(this.userTickets);
      }
      first = false;
    }
    if (isSetLang()) {
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'eventItemId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventItemRequestStandardSchemeFactory implements SchemeFactory {
    public EventItemRequestStandardScheme getScheme() {
      return new EventItemRequestStandardScheme();
    }
  }

  private static class EventItemRequestStandardScheme extends StandardScheme<EventItemRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EventItemRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EVENT_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eventItemId = iprot.readI64();
              struct.setEventItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userToken = iprot.readString();
              struct.setUserTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_TICKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.userTickets = new ArrayList<String>(_list24.size);
                String _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readString();
                  struct.userTickets.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setUserTicketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEventItemId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventItemId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EventItemRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EVENT_ITEM_ID_FIELD_DESC);
      oprot.writeI64(struct.eventItemId);
      oprot.writeFieldEnd();
      if (struct.userToken != null) {
        if (struct.isSetUserToken()) {
          oprot.writeFieldBegin(USER_TOKEN_FIELD_DESC);
          oprot.writeString(struct.userToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userTickets != null) {
        if (struct.isSetUserTickets()) {
          oprot.writeFieldBegin(USER_TICKETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userTickets.size()));
            for (String _iter27 : struct.userTickets)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lang != null) {
        if (struct.isSetLang()) {
          oprot.writeFieldBegin(LANG_FIELD_DESC);
          oprot.writeString(struct.lang);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventItemRequestTupleSchemeFactory implements SchemeFactory {
    public EventItemRequestTupleScheme getScheme() {
      return new EventItemRequestTupleScheme();
    }
  }

  private static class EventItemRequestTupleScheme extends TupleScheme<EventItemRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EventItemRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.eventItemId);
      BitSet optionals = new BitSet();
      if (struct.isSetUserToken()) {
        optionals.set(0);
      }
      if (struct.isSetUserTickets()) {
        optionals.set(1);
      }
      if (struct.isSetLang()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUserToken()) {
        oprot.writeString(struct.userToken);
      }
      if (struct.isSetUserTickets()) {
        {
          oprot.writeI32(struct.userTickets.size());
          for (String _iter28 : struct.userTickets)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetLang()) {
        oprot.writeString(struct.lang);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EventItemRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.eventItemId = iprot.readI64();
      struct.setEventItemIdIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.userToken = iprot.readString();
        struct.setUserTokenIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.userTickets = new ArrayList<String>(_list29.size);
          String _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readString();
            struct.userTickets.add(_elem30);
          }
        }
        struct.setUserTicketsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lang = iprot.readString();
        struct.setLangIsSet(true);
      }
    }
  }

}

