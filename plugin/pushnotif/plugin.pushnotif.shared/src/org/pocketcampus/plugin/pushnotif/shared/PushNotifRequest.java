/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.pushnotif.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushNotifRequest implements org.apache.thrift.TBase<PushNotifRequest, PushNotifRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushNotifRequest");

  private static final org.apache.thrift.protocol.TField I_AUTHENTICATED_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("iAuthenticatedToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField I_PLATFORM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("iPlatformType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField I_ANDROID_REGISTRATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("iAndroidRegistrationId", org.apache.thrift.protocol.TType.STRING, (short)3);

  public TequilaToken iAuthenticatedToken; // required
  /**
   * 
   * @see PlatformType
   */
  public PlatformType iPlatformType; // required
  public String iAndroidRegistrationId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_AUTHENTICATED_TOKEN((short)1, "iAuthenticatedToken"),
    /**
     * 
     * @see PlatformType
     */
    I_PLATFORM_TYPE((short)2, "iPlatformType"),
    I_ANDROID_REGISTRATION_ID((short)3, "iAndroidRegistrationId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_AUTHENTICATED_TOKEN
          return I_AUTHENTICATED_TOKEN;
        case 2: // I_PLATFORM_TYPE
          return I_PLATFORM_TYPE;
        case 3: // I_ANDROID_REGISTRATION_ID
          return I_ANDROID_REGISTRATION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_AUTHENTICATED_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("iAuthenticatedToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TequilaToken.class)));
    tmpMap.put(_Fields.I_PLATFORM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("iPlatformType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlatformType.class)));
    tmpMap.put(_Fields.I_ANDROID_REGISTRATION_ID, new org.apache.thrift.meta_data.FieldMetaData("iAndroidRegistrationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushNotifRequest.class, metaDataMap);
  }

  public PushNotifRequest() {
  }

  public PushNotifRequest(
    PlatformType iPlatformType)
  {
    this();
    this.iPlatformType = iPlatformType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PushNotifRequest(PushNotifRequest other) {
    if (other.isSetIAuthenticatedToken()) {
      this.iAuthenticatedToken = new TequilaToken(other.iAuthenticatedToken);
    }
    if (other.isSetIPlatformType()) {
      this.iPlatformType = other.iPlatformType;
    }
    if (other.isSetIAndroidRegistrationId()) {
      this.iAndroidRegistrationId = other.iAndroidRegistrationId;
    }
  }

  public PushNotifRequest deepCopy() {
    return new PushNotifRequest(this);
  }

  @Override
  public void clear() {
    this.iAuthenticatedToken = null;
    this.iPlatformType = null;
    this.iAndroidRegistrationId = null;
  }

  public TequilaToken getIAuthenticatedToken() {
    return this.iAuthenticatedToken;
  }

  public PushNotifRequest setIAuthenticatedToken(TequilaToken iAuthenticatedToken) {
    this.iAuthenticatedToken = iAuthenticatedToken;
    return this;
  }

  public void unsetIAuthenticatedToken() {
    this.iAuthenticatedToken = null;
  }

  /** Returns true if field iAuthenticatedToken is set (has been assigned a value) and false otherwise */
  public boolean isSetIAuthenticatedToken() {
    return this.iAuthenticatedToken != null;
  }

  public void setIAuthenticatedTokenIsSet(boolean value) {
    if (!value) {
      this.iAuthenticatedToken = null;
    }
  }

  /**
   * 
   * @see PlatformType
   */
  public PlatformType getIPlatformType() {
    return this.iPlatformType;
  }

  /**
   * 
   * @see PlatformType
   */
  public PushNotifRequest setIPlatformType(PlatformType iPlatformType) {
    this.iPlatformType = iPlatformType;
    return this;
  }

  public void unsetIPlatformType() {
    this.iPlatformType = null;
  }

  /** Returns true if field iPlatformType is set (has been assigned a value) and false otherwise */
  public boolean isSetIPlatformType() {
    return this.iPlatformType != null;
  }

  public void setIPlatformTypeIsSet(boolean value) {
    if (!value) {
      this.iPlatformType = null;
    }
  }

  public String getIAndroidRegistrationId() {
    return this.iAndroidRegistrationId;
  }

  public PushNotifRequest setIAndroidRegistrationId(String iAndroidRegistrationId) {
    this.iAndroidRegistrationId = iAndroidRegistrationId;
    return this;
  }

  public void unsetIAndroidRegistrationId() {
    this.iAndroidRegistrationId = null;
  }

  /** Returns true if field iAndroidRegistrationId is set (has been assigned a value) and false otherwise */
  public boolean isSetIAndroidRegistrationId() {
    return this.iAndroidRegistrationId != null;
  }

  public void setIAndroidRegistrationIdIsSet(boolean value) {
    if (!value) {
      this.iAndroidRegistrationId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_AUTHENTICATED_TOKEN:
      if (value == null) {
        unsetIAuthenticatedToken();
      } else {
        setIAuthenticatedToken((TequilaToken)value);
      }
      break;

    case I_PLATFORM_TYPE:
      if (value == null) {
        unsetIPlatformType();
      } else {
        setIPlatformType((PlatformType)value);
      }
      break;

    case I_ANDROID_REGISTRATION_ID:
      if (value == null) {
        unsetIAndroidRegistrationId();
      } else {
        setIAndroidRegistrationId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_AUTHENTICATED_TOKEN:
      return getIAuthenticatedToken();

    case I_PLATFORM_TYPE:
      return getIPlatformType();

    case I_ANDROID_REGISTRATION_ID:
      return getIAndroidRegistrationId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_AUTHENTICATED_TOKEN:
      return isSetIAuthenticatedToken();
    case I_PLATFORM_TYPE:
      return isSetIPlatformType();
    case I_ANDROID_REGISTRATION_ID:
      return isSetIAndroidRegistrationId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PushNotifRequest)
      return this.equals((PushNotifRequest)that);
    return false;
  }

  public boolean equals(PushNotifRequest that) {
    if (that == null)
      return false;

    boolean this_present_iAuthenticatedToken = true && this.isSetIAuthenticatedToken();
    boolean that_present_iAuthenticatedToken = true && that.isSetIAuthenticatedToken();
    if (this_present_iAuthenticatedToken || that_present_iAuthenticatedToken) {
      if (!(this_present_iAuthenticatedToken && that_present_iAuthenticatedToken))
        return false;
      if (!this.iAuthenticatedToken.equals(that.iAuthenticatedToken))
        return false;
    }

    boolean this_present_iPlatformType = true && this.isSetIPlatformType();
    boolean that_present_iPlatformType = true && that.isSetIPlatformType();
    if (this_present_iPlatformType || that_present_iPlatformType) {
      if (!(this_present_iPlatformType && that_present_iPlatformType))
        return false;
      if (!this.iPlatformType.equals(that.iPlatformType))
        return false;
    }

    boolean this_present_iAndroidRegistrationId = true && this.isSetIAndroidRegistrationId();
    boolean that_present_iAndroidRegistrationId = true && that.isSetIAndroidRegistrationId();
    if (this_present_iAndroidRegistrationId || that_present_iAndroidRegistrationId) {
      if (!(this_present_iAndroidRegistrationId && that_present_iAndroidRegistrationId))
        return false;
      if (!this.iAndroidRegistrationId.equals(that.iAndroidRegistrationId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_iAuthenticatedToken = true && (isSetIAuthenticatedToken());
    builder.append(present_iAuthenticatedToken);
    if (present_iAuthenticatedToken)
      builder.append(iAuthenticatedToken);

    boolean present_iPlatformType = true && (isSetIPlatformType());
    builder.append(present_iPlatformType);
    if (present_iPlatformType)
      builder.append(iPlatformType.getValue());

    boolean present_iAndroidRegistrationId = true && (isSetIAndroidRegistrationId());
    builder.append(present_iAndroidRegistrationId);
    if (present_iAndroidRegistrationId)
      builder.append(iAndroidRegistrationId);

    return builder.toHashCode();
  }

  public int compareTo(PushNotifRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PushNotifRequest typedOther = (PushNotifRequest)other;

    lastComparison = Boolean.valueOf(isSetIAuthenticatedToken()).compareTo(typedOther.isSetIAuthenticatedToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIAuthenticatedToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iAuthenticatedToken, typedOther.iAuthenticatedToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIPlatformType()).compareTo(typedOther.isSetIPlatformType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIPlatformType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iPlatformType, typedOther.iPlatformType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIAndroidRegistrationId()).compareTo(typedOther.isSetIAndroidRegistrationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIAndroidRegistrationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iAndroidRegistrationId, typedOther.iAndroidRegistrationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // I_AUTHENTICATED_TOKEN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.iAuthenticatedToken = new TequilaToken();
            this.iAuthenticatedToken.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // I_PLATFORM_TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.iPlatformType = PlatformType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // I_ANDROID_REGISTRATION_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.iAndroidRegistrationId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.iAuthenticatedToken != null) {
      if (isSetIAuthenticatedToken()) {
        oprot.writeFieldBegin(I_AUTHENTICATED_TOKEN_FIELD_DESC);
        this.iAuthenticatedToken.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.iPlatformType != null) {
      oprot.writeFieldBegin(I_PLATFORM_TYPE_FIELD_DESC);
      oprot.writeI32(this.iPlatformType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.iAndroidRegistrationId != null) {
      if (isSetIAndroidRegistrationId()) {
        oprot.writeFieldBegin(I_ANDROID_REGISTRATION_ID_FIELD_DESC);
        oprot.writeString(this.iAndroidRegistrationId);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PushNotifRequest(");
    boolean first = true;

    if (isSetIAuthenticatedToken()) {
      sb.append("iAuthenticatedToken:");
      if (this.iAuthenticatedToken == null) {
        sb.append("null");
      } else {
        sb.append(this.iAuthenticatedToken);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("iPlatformType:");
    if (this.iPlatformType == null) {
      sb.append("null");
    } else {
      sb.append(this.iPlatformType);
    }
    first = false;
    if (isSetIAndroidRegistrationId()) {
      if (!first) sb.append(", ");
      sb.append("iAndroidRegistrationId:");
      if (this.iAndroidRegistrationId == null) {
        sb.append("null");
      } else {
        sb.append(this.iAndroidRegistrationId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (iPlatformType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iPlatformType' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

