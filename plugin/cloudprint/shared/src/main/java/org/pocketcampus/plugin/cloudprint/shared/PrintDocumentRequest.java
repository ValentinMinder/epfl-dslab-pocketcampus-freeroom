/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pocketcampus.plugin.cloudprint.shared;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-28")
public class PrintDocumentRequest implements org.apache.thrift.TBase<PrintDocumentRequest, PrintDocumentRequest._Fields>, java.io.Serializable, Cloneable, Comparable<PrintDocumentRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrintDocumentRequest");

  private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("documentId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SELECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSelection", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField MULTI_PAGE_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("multiPageConfig", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DOUBLE_SIDED_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleSided", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ORIENTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("orientation", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MULTIPLE_COPIES_FIELD_DESC = new org.apache.thrift.protocol.TField("multipleCopies", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField COLOR_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("colorConfig", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrintDocumentRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrintDocumentRequestTupleSchemeFactory());
  }

  private long documentId; // required
  private CloudPrintPageRange pageSelection; // optional
  private CloudPrintMultiPageConfig multiPageConfig; // optional
  private CloudPrintDoubleSidedConfig doubleSided; // optional
  private CloudPrintOrientation orientation; // optional
  private CloudPrintMultipleCopies multipleCopies; // optional
  private CloudPrintColorConfig colorConfig; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOCUMENT_ID((short)1, "documentId"),
    PAGE_SELECTION((short)5, "pageSelection"),
    MULTI_PAGE_CONFIG((short)6, "multiPageConfig"),
    /**
     * 
     * @see CloudPrintDoubleSidedConfig
     */
    DOUBLE_SIDED((short)7, "doubleSided"),
    /**
     * 
     * @see CloudPrintOrientation
     */
    ORIENTATION((short)8, "orientation"),
    MULTIPLE_COPIES((short)9, "multipleCopies"),
    /**
     * 
     * @see CloudPrintColorConfig
     */
    COLOR_CONFIG((short)10, "colorConfig");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOCUMENT_ID
          return DOCUMENT_ID;
        case 5: // PAGE_SELECTION
          return PAGE_SELECTION;
        case 6: // MULTI_PAGE_CONFIG
          return MULTI_PAGE_CONFIG;
        case 7: // DOUBLE_SIDED
          return DOUBLE_SIDED;
        case 8: // ORIENTATION
          return ORIENTATION;
        case 9: // MULTIPLE_COPIES
          return MULTIPLE_COPIES;
        case 10: // COLOR_CONFIG
          return COLOR_CONFIG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DOCUMENTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PAGE_SELECTION,_Fields.MULTI_PAGE_CONFIG,_Fields.DOUBLE_SIDED,_Fields.ORIENTATION,_Fields.MULTIPLE_COPIES,_Fields.COLOR_CONFIG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("documentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE_SELECTION, new org.apache.thrift.meta_data.FieldMetaData("pageSelection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudPrintPageRange.class)));
    tmpMap.put(_Fields.MULTI_PAGE_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("multiPageConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudPrintMultiPageConfig.class)));
    tmpMap.put(_Fields.DOUBLE_SIDED, new org.apache.thrift.meta_data.FieldMetaData("doubleSided", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CloudPrintDoubleSidedConfig.class)));
    tmpMap.put(_Fields.ORIENTATION, new org.apache.thrift.meta_data.FieldMetaData("orientation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CloudPrintOrientation.class)));
    tmpMap.put(_Fields.MULTIPLE_COPIES, new org.apache.thrift.meta_data.FieldMetaData("multipleCopies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudPrintMultipleCopies.class)));
    tmpMap.put(_Fields.COLOR_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("colorConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CloudPrintColorConfig.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrintDocumentRequest.class, metaDataMap);
  }

  public PrintDocumentRequest() {
  }

  public PrintDocumentRequest(
    long documentId)
  {
    this();
    this.documentId = documentId;
    setDocumentIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrintDocumentRequest(PrintDocumentRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.documentId = other.documentId;
    if (other.isSetPageSelection()) {
      this.pageSelection = new CloudPrintPageRange(other.pageSelection);
    }
    if (other.isSetMultiPageConfig()) {
      this.multiPageConfig = new CloudPrintMultiPageConfig(other.multiPageConfig);
    }
    if (other.isSetDoubleSided()) {
      this.doubleSided = other.doubleSided;
    }
    if (other.isSetOrientation()) {
      this.orientation = other.orientation;
    }
    if (other.isSetMultipleCopies()) {
      this.multipleCopies = new CloudPrintMultipleCopies(other.multipleCopies);
    }
    if (other.isSetColorConfig()) {
      this.colorConfig = other.colorConfig;
    }
  }

  public PrintDocumentRequest deepCopy() {
    return new PrintDocumentRequest(this);
  }

  @Override
  public void clear() {
    setDocumentIdIsSet(false);
    this.documentId = 0;
    this.pageSelection = null;
    this.multiPageConfig = null;
    this.doubleSided = null;
    this.orientation = null;
    this.multipleCopies = null;
    this.colorConfig = null;
  }

  public long getDocumentId() {
    return this.documentId;
  }

  public PrintDocumentRequest setDocumentId(long documentId) {
    this.documentId = documentId;
    setDocumentIdIsSet(true);
    return this;
  }

  public void unsetDocumentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
  }

  /** Returns true if field documentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentId() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
  }

  public void setDocumentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCUMENTID_ISSET_ID, value);
  }

  public CloudPrintPageRange getPageSelection() {
    return this.pageSelection;
  }

  public PrintDocumentRequest setPageSelection(CloudPrintPageRange pageSelection) {
    this.pageSelection = pageSelection;
    return this;
  }

  public void unsetPageSelection() {
    this.pageSelection = null;
  }

  /** Returns true if field pageSelection is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSelection() {
    return this.pageSelection != null;
  }

  public void setPageSelectionIsSet(boolean value) {
    if (!value) {
      this.pageSelection = null;
    }
  }

  public CloudPrintMultiPageConfig getMultiPageConfig() {
    return this.multiPageConfig;
  }

  public PrintDocumentRequest setMultiPageConfig(CloudPrintMultiPageConfig multiPageConfig) {
    this.multiPageConfig = multiPageConfig;
    return this;
  }

  public void unsetMultiPageConfig() {
    this.multiPageConfig = null;
  }

  /** Returns true if field multiPageConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiPageConfig() {
    return this.multiPageConfig != null;
  }

  public void setMultiPageConfigIsSet(boolean value) {
    if (!value) {
      this.multiPageConfig = null;
    }
  }

  /**
   * 
   * @see CloudPrintDoubleSidedConfig
   */
  public CloudPrintDoubleSidedConfig getDoubleSided() {
    return this.doubleSided;
  }

  /**
   * 
   * @see CloudPrintDoubleSidedConfig
   */
  public PrintDocumentRequest setDoubleSided(CloudPrintDoubleSidedConfig doubleSided) {
    this.doubleSided = doubleSided;
    return this;
  }

  public void unsetDoubleSided() {
    this.doubleSided = null;
  }

  /** Returns true if field doubleSided is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleSided() {
    return this.doubleSided != null;
  }

  public void setDoubleSidedIsSet(boolean value) {
    if (!value) {
      this.doubleSided = null;
    }
  }

  /**
   * 
   * @see CloudPrintOrientation
   */
  public CloudPrintOrientation getOrientation() {
    return this.orientation;
  }

  /**
   * 
   * @see CloudPrintOrientation
   */
  public PrintDocumentRequest setOrientation(CloudPrintOrientation orientation) {
    this.orientation = orientation;
    return this;
  }

  public void unsetOrientation() {
    this.orientation = null;
  }

  /** Returns true if field orientation is set (has been assigned a value) and false otherwise */
  public boolean isSetOrientation() {
    return this.orientation != null;
  }

  public void setOrientationIsSet(boolean value) {
    if (!value) {
      this.orientation = null;
    }
  }

  public CloudPrintMultipleCopies getMultipleCopies() {
    return this.multipleCopies;
  }

  public PrintDocumentRequest setMultipleCopies(CloudPrintMultipleCopies multipleCopies) {
    this.multipleCopies = multipleCopies;
    return this;
  }

  public void unsetMultipleCopies() {
    this.multipleCopies = null;
  }

  /** Returns true if field multipleCopies is set (has been assigned a value) and false otherwise */
  public boolean isSetMultipleCopies() {
    return this.multipleCopies != null;
  }

  public void setMultipleCopiesIsSet(boolean value) {
    if (!value) {
      this.multipleCopies = null;
    }
  }

  /**
   * 
   * @see CloudPrintColorConfig
   */
  public CloudPrintColorConfig getColorConfig() {
    return this.colorConfig;
  }

  /**
   * 
   * @see CloudPrintColorConfig
   */
  public PrintDocumentRequest setColorConfig(CloudPrintColorConfig colorConfig) {
    this.colorConfig = colorConfig;
    return this;
  }

  public void unsetColorConfig() {
    this.colorConfig = null;
  }

  /** Returns true if field colorConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetColorConfig() {
    return this.colorConfig != null;
  }

  public void setColorConfigIsSet(boolean value) {
    if (!value) {
      this.colorConfig = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DOCUMENT_ID:
      if (value == null) {
        unsetDocumentId();
      } else {
        setDocumentId((Long)value);
      }
      break;

    case PAGE_SELECTION:
      if (value == null) {
        unsetPageSelection();
      } else {
        setPageSelection((CloudPrintPageRange)value);
      }
      break;

    case MULTI_PAGE_CONFIG:
      if (value == null) {
        unsetMultiPageConfig();
      } else {
        setMultiPageConfig((CloudPrintMultiPageConfig)value);
      }
      break;

    case DOUBLE_SIDED:
      if (value == null) {
        unsetDoubleSided();
      } else {
        setDoubleSided((CloudPrintDoubleSidedConfig)value);
      }
      break;

    case ORIENTATION:
      if (value == null) {
        unsetOrientation();
      } else {
        setOrientation((CloudPrintOrientation)value);
      }
      break;

    case MULTIPLE_COPIES:
      if (value == null) {
        unsetMultipleCopies();
      } else {
        setMultipleCopies((CloudPrintMultipleCopies)value);
      }
      break;

    case COLOR_CONFIG:
      if (value == null) {
        unsetColorConfig();
      } else {
        setColorConfig((CloudPrintColorConfig)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOCUMENT_ID:
      return Long.valueOf(getDocumentId());

    case PAGE_SELECTION:
      return getPageSelection();

    case MULTI_PAGE_CONFIG:
      return getMultiPageConfig();

    case DOUBLE_SIDED:
      return getDoubleSided();

    case ORIENTATION:
      return getOrientation();

    case MULTIPLE_COPIES:
      return getMultipleCopies();

    case COLOR_CONFIG:
      return getColorConfig();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOCUMENT_ID:
      return isSetDocumentId();
    case PAGE_SELECTION:
      return isSetPageSelection();
    case MULTI_PAGE_CONFIG:
      return isSetMultiPageConfig();
    case DOUBLE_SIDED:
      return isSetDoubleSided();
    case ORIENTATION:
      return isSetOrientation();
    case MULTIPLE_COPIES:
      return isSetMultipleCopies();
    case COLOR_CONFIG:
      return isSetColorConfig();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PrintDocumentRequest)
      return this.equals((PrintDocumentRequest)that);
    return false;
  }

  public boolean equals(PrintDocumentRequest that) {
    if (that == null)
      return false;

    boolean this_present_documentId = true;
    boolean that_present_documentId = true;
    if (this_present_documentId || that_present_documentId) {
      if (!(this_present_documentId && that_present_documentId))
        return false;
      if (this.documentId != that.documentId)
        return false;
    }

    boolean this_present_pageSelection = true && this.isSetPageSelection();
    boolean that_present_pageSelection = true && that.isSetPageSelection();
    if (this_present_pageSelection || that_present_pageSelection) {
      if (!(this_present_pageSelection && that_present_pageSelection))
        return false;
      if (!this.pageSelection.equals(that.pageSelection))
        return false;
    }

    boolean this_present_multiPageConfig = true && this.isSetMultiPageConfig();
    boolean that_present_multiPageConfig = true && that.isSetMultiPageConfig();
    if (this_present_multiPageConfig || that_present_multiPageConfig) {
      if (!(this_present_multiPageConfig && that_present_multiPageConfig))
        return false;
      if (!this.multiPageConfig.equals(that.multiPageConfig))
        return false;
    }

    boolean this_present_doubleSided = true && this.isSetDoubleSided();
    boolean that_present_doubleSided = true && that.isSetDoubleSided();
    if (this_present_doubleSided || that_present_doubleSided) {
      if (!(this_present_doubleSided && that_present_doubleSided))
        return false;
      if (!this.doubleSided.equals(that.doubleSided))
        return false;
    }

    boolean this_present_orientation = true && this.isSetOrientation();
    boolean that_present_orientation = true && that.isSetOrientation();
    if (this_present_orientation || that_present_orientation) {
      if (!(this_present_orientation && that_present_orientation))
        return false;
      if (!this.orientation.equals(that.orientation))
        return false;
    }

    boolean this_present_multipleCopies = true && this.isSetMultipleCopies();
    boolean that_present_multipleCopies = true && that.isSetMultipleCopies();
    if (this_present_multipleCopies || that_present_multipleCopies) {
      if (!(this_present_multipleCopies && that_present_multipleCopies))
        return false;
      if (!this.multipleCopies.equals(that.multipleCopies))
        return false;
    }

    boolean this_present_colorConfig = true && this.isSetColorConfig();
    boolean that_present_colorConfig = true && that.isSetColorConfig();
    if (this_present_colorConfig || that_present_colorConfig) {
      if (!(this_present_colorConfig && that_present_colorConfig))
        return false;
      if (!this.colorConfig.equals(that.colorConfig))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_documentId = true;
    list.add(present_documentId);
    if (present_documentId)
      list.add(documentId);

    boolean present_pageSelection = true && (isSetPageSelection());
    list.add(present_pageSelection);
    if (present_pageSelection)
      list.add(pageSelection);

    boolean present_multiPageConfig = true && (isSetMultiPageConfig());
    list.add(present_multiPageConfig);
    if (present_multiPageConfig)
      list.add(multiPageConfig);

    boolean present_doubleSided = true && (isSetDoubleSided());
    list.add(present_doubleSided);
    if (present_doubleSided)
      list.add(doubleSided.getValue());

    boolean present_orientation = true && (isSetOrientation());
    list.add(present_orientation);
    if (present_orientation)
      list.add(orientation.getValue());

    boolean present_multipleCopies = true && (isSetMultipleCopies());
    list.add(present_multipleCopies);
    if (present_multipleCopies)
      list.add(multipleCopies);

    boolean present_colorConfig = true && (isSetColorConfig());
    list.add(present_colorConfig);
    if (present_colorConfig)
      list.add(colorConfig.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(PrintDocumentRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDocumentId()).compareTo(other.isSetDocumentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentId, other.documentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSelection()).compareTo(other.isSetPageSelection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSelection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSelection, other.pageSelection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiPageConfig()).compareTo(other.isSetMultiPageConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiPageConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiPageConfig, other.multiPageConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleSided()).compareTo(other.isSetDoubleSided());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleSided()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleSided, other.doubleSided);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrientation()).compareTo(other.isSetOrientation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrientation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orientation, other.orientation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultipleCopies()).compareTo(other.isSetMultipleCopies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultipleCopies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multipleCopies, other.multipleCopies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColorConfig()).compareTo(other.isSetColorConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColorConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colorConfig, other.colorConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PrintDocumentRequest(");
    boolean first = true;

    sb.append("documentId:");
    sb.append(this.documentId);
    first = false;
    if (isSetPageSelection()) {
      if (!first) sb.append(", ");
      sb.append("pageSelection:");
      if (this.pageSelection == null) {
        sb.append("null");
      } else {
        sb.append(this.pageSelection);
      }
      first = false;
    }
    if (isSetMultiPageConfig()) {
      if (!first) sb.append(", ");
      sb.append("multiPageConfig:");
      if (this.multiPageConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.multiPageConfig);
      }
      first = false;
    }
    if (isSetDoubleSided()) {
      if (!first) sb.append(", ");
      sb.append("doubleSided:");
      if (this.doubleSided == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleSided);
      }
      first = false;
    }
    if (isSetOrientation()) {
      if (!first) sb.append(", ");
      sb.append("orientation:");
      if (this.orientation == null) {
        sb.append("null");
      } else {
        sb.append(this.orientation);
      }
      first = false;
    }
    if (isSetMultipleCopies()) {
      if (!first) sb.append(", ");
      sb.append("multipleCopies:");
      if (this.multipleCopies == null) {
        sb.append("null");
      } else {
        sb.append(this.multipleCopies);
      }
      first = false;
    }
    if (isSetColorConfig()) {
      if (!first) sb.append(", ");
      sb.append("colorConfig:");
      if (this.colorConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.colorConfig);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'documentId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (pageSelection != null) {
      pageSelection.validate();
    }
    if (multiPageConfig != null) {
      multiPageConfig.validate();
    }
    if (multipleCopies != null) {
      multipleCopies.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrintDocumentRequestStandardSchemeFactory implements SchemeFactory {
    public PrintDocumentRequestStandardScheme getScheme() {
      return new PrintDocumentRequestStandardScheme();
    }
  }

  private static class PrintDocumentRequestStandardScheme extends StandardScheme<PrintDocumentRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrintDocumentRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOCUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.documentId = iprot.readI64();
              struct.setDocumentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAGE_SELECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageSelection = new CloudPrintPageRange();
              struct.pageSelection.read(iprot);
              struct.setPageSelectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MULTI_PAGE_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multiPageConfig = new CloudPrintMultiPageConfig();
              struct.multiPageConfig.read(iprot);
              struct.setMultiPageConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOUBLE_SIDED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.doubleSided = org.pocketcampus.plugin.cloudprint.shared.CloudPrintDoubleSidedConfig.findByValue(iprot.readI32());
              struct.setDoubleSidedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORIENTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orientation = org.pocketcampus.plugin.cloudprint.shared.CloudPrintOrientation.findByValue(iprot.readI32());
              struct.setOrientationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MULTIPLE_COPIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multipleCopies = new CloudPrintMultipleCopies();
              struct.multipleCopies.read(iprot);
              struct.setMultipleCopiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COLOR_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.colorConfig = org.pocketcampus.plugin.cloudprint.shared.CloudPrintColorConfig.findByValue(iprot.readI32());
              struct.setColorConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDocumentId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'documentId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrintDocumentRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
      oprot.writeI64(struct.documentId);
      oprot.writeFieldEnd();
      if (struct.pageSelection != null) {
        if (struct.isSetPageSelection()) {
          oprot.writeFieldBegin(PAGE_SELECTION_FIELD_DESC);
          struct.pageSelection.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiPageConfig != null) {
        if (struct.isSetMultiPageConfig()) {
          oprot.writeFieldBegin(MULTI_PAGE_CONFIG_FIELD_DESC);
          struct.multiPageConfig.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.doubleSided != null) {
        if (struct.isSetDoubleSided()) {
          oprot.writeFieldBegin(DOUBLE_SIDED_FIELD_DESC);
          oprot.writeI32(struct.doubleSided.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orientation != null) {
        if (struct.isSetOrientation()) {
          oprot.writeFieldBegin(ORIENTATION_FIELD_DESC);
          oprot.writeI32(struct.orientation.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.multipleCopies != null) {
        if (struct.isSetMultipleCopies()) {
          oprot.writeFieldBegin(MULTIPLE_COPIES_FIELD_DESC);
          struct.multipleCopies.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.colorConfig != null) {
        if (struct.isSetColorConfig()) {
          oprot.writeFieldBegin(COLOR_CONFIG_FIELD_DESC);
          oprot.writeI32(struct.colorConfig.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrintDocumentRequestTupleSchemeFactory implements SchemeFactory {
    public PrintDocumentRequestTupleScheme getScheme() {
      return new PrintDocumentRequestTupleScheme();
    }
  }

  private static class PrintDocumentRequestTupleScheme extends TupleScheme<PrintDocumentRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrintDocumentRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.documentId);
      BitSet optionals = new BitSet();
      if (struct.isSetPageSelection()) {
        optionals.set(0);
      }
      if (struct.isSetMultiPageConfig()) {
        optionals.set(1);
      }
      if (struct.isSetDoubleSided()) {
        optionals.set(2);
      }
      if (struct.isSetOrientation()) {
        optionals.set(3);
      }
      if (struct.isSetMultipleCopies()) {
        optionals.set(4);
      }
      if (struct.isSetColorConfig()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPageSelection()) {
        struct.pageSelection.write(oprot);
      }
      if (struct.isSetMultiPageConfig()) {
        struct.multiPageConfig.write(oprot);
      }
      if (struct.isSetDoubleSided()) {
        oprot.writeI32(struct.doubleSided.getValue());
      }
      if (struct.isSetOrientation()) {
        oprot.writeI32(struct.orientation.getValue());
      }
      if (struct.isSetMultipleCopies()) {
        struct.multipleCopies.write(oprot);
      }
      if (struct.isSetColorConfig()) {
        oprot.writeI32(struct.colorConfig.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrintDocumentRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.documentId = iprot.readI64();
      struct.setDocumentIdIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.pageSelection = new CloudPrintPageRange();
        struct.pageSelection.read(iprot);
        struct.setPageSelectionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.multiPageConfig = new CloudPrintMultiPageConfig();
        struct.multiPageConfig.read(iprot);
        struct.setMultiPageConfigIsSet(true);
      }
      if (incoming.get(2)) {
        struct.doubleSided = org.pocketcampus.plugin.cloudprint.shared.CloudPrintDoubleSidedConfig.findByValue(iprot.readI32());
        struct.setDoubleSidedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orientation = org.pocketcampus.plugin.cloudprint.shared.CloudPrintOrientation.findByValue(iprot.readI32());
        struct.setOrientationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.multipleCopies = new CloudPrintMultipleCopies();
        struct.multipleCopies.read(iprot);
        struct.setMultipleCopiesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.colorConfig = org.pocketcampus.plugin.cloudprint.shared.CloudPrintColorConfig.findByValue(iprot.readI32());
        struct.setColorConfigIsSet(true);
      }
    }
  }

}

