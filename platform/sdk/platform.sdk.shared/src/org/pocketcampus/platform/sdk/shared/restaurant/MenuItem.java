/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.platform.sdk.shared.restaurant;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MenuItem implements org.apache.thrift.TBase<MenuItem, MenuItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MenuItem");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField PRICING_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("pricingUnit", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("itemDescription", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PREPARATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("preparationTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SINGLE_CHOICE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("singleChoiceOptions", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MULTI_CHOICE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiChoiceOptions", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField STARS_FIELD_DESC = new org.apache.thrift.protocol.TField("stars", org.apache.thrift.protocol.TType.I32, (short)9);

  public long itemId; // required
  public String name; // required
  public double price; // required
  public String pricingUnit; // required
  public String itemDescription; // required
  public long preparationTime; // required
  public List<org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption> singleChoiceOptions; // required
  public List<org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption> multiChoiceOptions; // required
  /**
   * 
   * @see org.pocketcampus.platform.sdk.shared.common.Rating
   */
  public org.pocketcampus.platform.sdk.shared.common.Rating stars; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    NAME((short)2, "name"),
    PRICE((short)3, "price"),
    PRICING_UNIT((short)4, "pricingUnit"),
    ITEM_DESCRIPTION((short)5, "itemDescription"),
    PREPARATION_TIME((short)6, "preparationTime"),
    SINGLE_CHOICE_OPTIONS((short)7, "singleChoiceOptions"),
    MULTI_CHOICE_OPTIONS((short)8, "multiChoiceOptions"),
    /**
     * 
     * @see org.pocketcampus.platform.sdk.shared.common.Rating
     */
    STARS((short)9, "stars");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // NAME
          return NAME;
        case 3: // PRICE
          return PRICE;
        case 4: // PRICING_UNIT
          return PRICING_UNIT;
        case 5: // ITEM_DESCRIPTION
          return ITEM_DESCRIPTION;
        case 6: // PREPARATION_TIME
          return PREPARATION_TIME;
        case 7: // SINGLE_CHOICE_OPTIONS
          return SINGLE_CHOICE_OPTIONS;
        case 8: // MULTI_CHOICE_OPTIONS
          return MULTI_CHOICE_OPTIONS;
        case 9: // STARS
          return STARS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private static final int __PREPARATIONTIME_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICING_UNIT, new org.apache.thrift.meta_data.FieldMetaData("pricingUnit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("itemDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREPARATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("preparationTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "PreparationTime")));
    tmpMap.put(_Fields.SINGLE_CHOICE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("singleChoiceOptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption.class))));
    tmpMap.put(_Fields.MULTI_CHOICE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("multiChoiceOptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption.class))));
    tmpMap.put(_Fields.STARS, new org.apache.thrift.meta_data.FieldMetaData("stars", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.pocketcampus.platform.sdk.shared.common.Rating.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MenuItem.class, metaDataMap);
  }

  public MenuItem() {
    this.stars = org.pocketcampus.platform.sdk.shared.common.Rating.UNKNOWN;

  }

  public MenuItem(
    long itemId,
    String name,
    double price,
    String pricingUnit,
    org.pocketcampus.platform.sdk.shared.common.Rating stars)
  {
    this();
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.name = name;
    this.price = price;
    setPriceIsSet(true);
    this.pricingUnit = pricingUnit;
    this.stars = stars;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MenuItem(MenuItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.itemId = other.itemId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.price = other.price;
    if (other.isSetPricingUnit()) {
      this.pricingUnit = other.pricingUnit;
    }
    if (other.isSetItemDescription()) {
      this.itemDescription = other.itemDescription;
    }
    this.preparationTime = other.preparationTime;
    if (other.isSetSingleChoiceOptions()) {
      List<org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption> __this__singleChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption>();
      for (org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption other_element : other.singleChoiceOptions) {
        __this__singleChoiceOptions.add(new org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption(other_element));
      }
      this.singleChoiceOptions = __this__singleChoiceOptions;
    }
    if (other.isSetMultiChoiceOptions()) {
      List<org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption> __this__multiChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption>();
      for (org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption other_element : other.multiChoiceOptions) {
        __this__multiChoiceOptions.add(new org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption(other_element));
      }
      this.multiChoiceOptions = __this__multiChoiceOptions;
    }
    if (other.isSetStars()) {
      this.stars = other.stars;
    }
  }

  public MenuItem deepCopy() {
    return new MenuItem(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    this.name = null;
    setPriceIsSet(false);
    this.price = 0.0;
    this.pricingUnit = null;
    this.itemDescription = null;
    setPreparationTimeIsSet(false);
    this.preparationTime = 0;
    this.singleChoiceOptions = null;
    this.multiChoiceOptions = null;
    this.stars = org.pocketcampus.platform.sdk.shared.common.Rating.UNKNOWN;

  }

  public long getItemId() {
    return this.itemId;
  }

  public MenuItem setItemId(long itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bit_vector.clear(__ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return __isset_bit_vector.get(__ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bit_vector.set(__ITEMID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public MenuItem setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public MenuItem setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public String getPricingUnit() {
    return this.pricingUnit;
  }

  public MenuItem setPricingUnit(String pricingUnit) {
    this.pricingUnit = pricingUnit;
    return this;
  }

  public void unsetPricingUnit() {
    this.pricingUnit = null;
  }

  /** Returns true if field pricingUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetPricingUnit() {
    return this.pricingUnit != null;
  }

  public void setPricingUnitIsSet(boolean value) {
    if (!value) {
      this.pricingUnit = null;
    }
  }

  public String getItemDescription() {
    return this.itemDescription;
  }

  public MenuItem setItemDescription(String itemDescription) {
    this.itemDescription = itemDescription;
    return this;
  }

  public void unsetItemDescription() {
    this.itemDescription = null;
  }

  /** Returns true if field itemDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetItemDescription() {
    return this.itemDescription != null;
  }

  public void setItemDescriptionIsSet(boolean value) {
    if (!value) {
      this.itemDescription = null;
    }
  }

  public long getPreparationTime() {
    return this.preparationTime;
  }

  public MenuItem setPreparationTime(long preparationTime) {
    this.preparationTime = preparationTime;
    setPreparationTimeIsSet(true);
    return this;
  }

  public void unsetPreparationTime() {
    __isset_bit_vector.clear(__PREPARATIONTIME_ISSET_ID);
  }

  /** Returns true if field preparationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPreparationTime() {
    return __isset_bit_vector.get(__PREPARATIONTIME_ISSET_ID);
  }

  public void setPreparationTimeIsSet(boolean value) {
    __isset_bit_vector.set(__PREPARATIONTIME_ISSET_ID, value);
  }

  public int getSingleChoiceOptionsSize() {
    return (this.singleChoiceOptions == null) ? 0 : this.singleChoiceOptions.size();
  }

  public java.util.Iterator<org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption> getSingleChoiceOptionsIterator() {
    return (this.singleChoiceOptions == null) ? null : this.singleChoiceOptions.iterator();
  }

  public void addToSingleChoiceOptions(org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption elem) {
    if (this.singleChoiceOptions == null) {
      this.singleChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption>();
    }
    this.singleChoiceOptions.add(elem);
  }

  public List<org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption> getSingleChoiceOptions() {
    return this.singleChoiceOptions;
  }

  public MenuItem setSingleChoiceOptions(List<org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption> singleChoiceOptions) {
    this.singleChoiceOptions = singleChoiceOptions;
    return this;
  }

  public void unsetSingleChoiceOptions() {
    this.singleChoiceOptions = null;
  }

  /** Returns true if field singleChoiceOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleChoiceOptions() {
    return this.singleChoiceOptions != null;
  }

  public void setSingleChoiceOptionsIsSet(boolean value) {
    if (!value) {
      this.singleChoiceOptions = null;
    }
  }

  public int getMultiChoiceOptionsSize() {
    return (this.multiChoiceOptions == null) ? 0 : this.multiChoiceOptions.size();
  }

  public java.util.Iterator<org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption> getMultiChoiceOptionsIterator() {
    return (this.multiChoiceOptions == null) ? null : this.multiChoiceOptions.iterator();
  }

  public void addToMultiChoiceOptions(org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption elem) {
    if (this.multiChoiceOptions == null) {
      this.multiChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption>();
    }
    this.multiChoiceOptions.add(elem);
  }

  public List<org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption> getMultiChoiceOptions() {
    return this.multiChoiceOptions;
  }

  public MenuItem setMultiChoiceOptions(List<org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption> multiChoiceOptions) {
    this.multiChoiceOptions = multiChoiceOptions;
    return this;
  }

  public void unsetMultiChoiceOptions() {
    this.multiChoiceOptions = null;
  }

  /** Returns true if field multiChoiceOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiChoiceOptions() {
    return this.multiChoiceOptions != null;
  }

  public void setMultiChoiceOptionsIsSet(boolean value) {
    if (!value) {
      this.multiChoiceOptions = null;
    }
  }

  /**
   * 
   * @see org.pocketcampus.platform.sdk.shared.common.Rating
   */
  public org.pocketcampus.platform.sdk.shared.common.Rating getStars() {
    return this.stars;
  }

  /**
   * 
   * @see org.pocketcampus.platform.sdk.shared.common.Rating
   */
  public MenuItem setStars(org.pocketcampus.platform.sdk.shared.common.Rating stars) {
    this.stars = stars;
    return this;
  }

  public void unsetStars() {
    this.stars = null;
  }

  /** Returns true if field stars is set (has been assigned a value) and false otherwise */
  public boolean isSetStars() {
    return this.stars != null;
  }

  public void setStarsIsSet(boolean value) {
    if (!value) {
      this.stars = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case PRICING_UNIT:
      if (value == null) {
        unsetPricingUnit();
      } else {
        setPricingUnit((String)value);
      }
      break;

    case ITEM_DESCRIPTION:
      if (value == null) {
        unsetItemDescription();
      } else {
        setItemDescription((String)value);
      }
      break;

    case PREPARATION_TIME:
      if (value == null) {
        unsetPreparationTime();
      } else {
        setPreparationTime((Long)value);
      }
      break;

    case SINGLE_CHOICE_OPTIONS:
      if (value == null) {
        unsetSingleChoiceOptions();
      } else {
        setSingleChoiceOptions((List<org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption>)value);
      }
      break;

    case MULTI_CHOICE_OPTIONS:
      if (value == null) {
        unsetMultiChoiceOptions();
      } else {
        setMultiChoiceOptions((List<org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption>)value);
      }
      break;

    case STARS:
      if (value == null) {
        unsetStars();
      } else {
        setStars((org.pocketcampus.platform.sdk.shared.common.Rating)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return Long.valueOf(getItemId());

    case NAME:
      return getName();

    case PRICE:
      return Double.valueOf(getPrice());

    case PRICING_UNIT:
      return getPricingUnit();

    case ITEM_DESCRIPTION:
      return getItemDescription();

    case PREPARATION_TIME:
      return Long.valueOf(getPreparationTime());

    case SINGLE_CHOICE_OPTIONS:
      return getSingleChoiceOptions();

    case MULTI_CHOICE_OPTIONS:
      return getMultiChoiceOptions();

    case STARS:
      return getStars();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case NAME:
      return isSetName();
    case PRICE:
      return isSetPrice();
    case PRICING_UNIT:
      return isSetPricingUnit();
    case ITEM_DESCRIPTION:
      return isSetItemDescription();
    case PREPARATION_TIME:
      return isSetPreparationTime();
    case SINGLE_CHOICE_OPTIONS:
      return isSetSingleChoiceOptions();
    case MULTI_CHOICE_OPTIONS:
      return isSetMultiChoiceOptions();
    case STARS:
      return isSetStars();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MenuItem)
      return this.equals((MenuItem)that);
    return false;
  }

  public boolean equals(MenuItem that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_pricingUnit = true && this.isSetPricingUnit();
    boolean that_present_pricingUnit = true && that.isSetPricingUnit();
    if (this_present_pricingUnit || that_present_pricingUnit) {
      if (!(this_present_pricingUnit && that_present_pricingUnit))
        return false;
      if (!this.pricingUnit.equals(that.pricingUnit))
        return false;
    }

    boolean this_present_itemDescription = true && this.isSetItemDescription();
    boolean that_present_itemDescription = true && that.isSetItemDescription();
    if (this_present_itemDescription || that_present_itemDescription) {
      if (!(this_present_itemDescription && that_present_itemDescription))
        return false;
      if (!this.itemDescription.equals(that.itemDescription))
        return false;
    }

    boolean this_present_preparationTime = true && this.isSetPreparationTime();
    boolean that_present_preparationTime = true && that.isSetPreparationTime();
    if (this_present_preparationTime || that_present_preparationTime) {
      if (!(this_present_preparationTime && that_present_preparationTime))
        return false;
      if (this.preparationTime != that.preparationTime)
        return false;
    }

    boolean this_present_singleChoiceOptions = true && this.isSetSingleChoiceOptions();
    boolean that_present_singleChoiceOptions = true && that.isSetSingleChoiceOptions();
    if (this_present_singleChoiceOptions || that_present_singleChoiceOptions) {
      if (!(this_present_singleChoiceOptions && that_present_singleChoiceOptions))
        return false;
      if (!this.singleChoiceOptions.equals(that.singleChoiceOptions))
        return false;
    }

    boolean this_present_multiChoiceOptions = true && this.isSetMultiChoiceOptions();
    boolean that_present_multiChoiceOptions = true && that.isSetMultiChoiceOptions();
    if (this_present_multiChoiceOptions || that_present_multiChoiceOptions) {
      if (!(this_present_multiChoiceOptions && that_present_multiChoiceOptions))
        return false;
      if (!this.multiChoiceOptions.equals(that.multiChoiceOptions))
        return false;
    }

    boolean this_present_stars = true && this.isSetStars();
    boolean that_present_stars = true && that.isSetStars();
    if (this_present_stars || that_present_stars) {
      if (!(this_present_stars && that_present_stars))
        return false;
      if (!this.stars.equals(that.stars))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_itemId = true;
    builder.append(present_itemId);
    if (present_itemId)
      builder.append(itemId);

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_price = true;
    builder.append(present_price);
    if (present_price)
      builder.append(price);

    boolean present_pricingUnit = true && (isSetPricingUnit());
    builder.append(present_pricingUnit);
    if (present_pricingUnit)
      builder.append(pricingUnit);

    boolean present_itemDescription = true && (isSetItemDescription());
    builder.append(present_itemDescription);
    if (present_itemDescription)
      builder.append(itemDescription);

    boolean present_preparationTime = true && (isSetPreparationTime());
    builder.append(present_preparationTime);
    if (present_preparationTime)
      builder.append(preparationTime);

    boolean present_singleChoiceOptions = true && (isSetSingleChoiceOptions());
    builder.append(present_singleChoiceOptions);
    if (present_singleChoiceOptions)
      builder.append(singleChoiceOptions);

    boolean present_multiChoiceOptions = true && (isSetMultiChoiceOptions());
    builder.append(present_multiChoiceOptions);
    if (present_multiChoiceOptions)
      builder.append(multiChoiceOptions);

    boolean present_stars = true && (isSetStars());
    builder.append(present_stars);
    if (present_stars)
      builder.append(stars.getValue());

    return builder.toHashCode();
  }

  public int compareTo(MenuItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MenuItem typedOther = (MenuItem)other;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPricingUnit()).compareTo(typedOther.isSetPricingUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPricingUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pricingUnit, typedOther.pricingUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemDescription()).compareTo(typedOther.isSetItemDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemDescription, typedOther.itemDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreparationTime()).compareTo(typedOther.isSetPreparationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreparationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preparationTime, typedOther.preparationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleChoiceOptions()).compareTo(typedOther.isSetSingleChoiceOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleChoiceOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleChoiceOptions, typedOther.singleChoiceOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiChoiceOptions()).compareTo(typedOther.isSetMultiChoiceOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiChoiceOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiChoiceOptions, typedOther.multiChoiceOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStars()).compareTo(typedOther.isSetStars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stars, typedOther.stars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ITEM_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.itemId = iprot.readI64();
            setItemIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PRICE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.price = iprot.readDouble();
            setPriceIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PRICING_UNIT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.pricingUnit = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ITEM_DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.itemDescription = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PREPARATION_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.preparationTime = iprot.readI64();
            setPreparationTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SINGLE_CHOICE_OPTIONS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.singleChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption _elem2; // required
                _elem2 = new org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption();
                _elem2.read(iprot);
                this.singleChoiceOptions.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // MULTI_CHOICE_OPTIONS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
              this.multiChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption>(_list3.size);
              for (int _i4 = 0; _i4 < _list3.size; ++_i4)
              {
                org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption _elem5; // required
                _elem5 = new org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption();
                _elem5.read(iprot);
                this.multiChoiceOptions.add(_elem5);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // STARS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.stars = org.pocketcampus.platform.sdk.shared.common.Rating.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetItemId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemId' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetPrice()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'price' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
    oprot.writeI64(this.itemId);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PRICE_FIELD_DESC);
    oprot.writeDouble(this.price);
    oprot.writeFieldEnd();
    if (this.pricingUnit != null) {
      oprot.writeFieldBegin(PRICING_UNIT_FIELD_DESC);
      oprot.writeString(this.pricingUnit);
      oprot.writeFieldEnd();
    }
    if (this.itemDescription != null) {
      if (isSetItemDescription()) {
        oprot.writeFieldBegin(ITEM_DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.itemDescription);
        oprot.writeFieldEnd();
      }
    }
    if (isSetPreparationTime()) {
      oprot.writeFieldBegin(PREPARATION_TIME_FIELD_DESC);
      oprot.writeI64(this.preparationTime);
      oprot.writeFieldEnd();
    }
    if (this.singleChoiceOptions != null) {
      if (isSetSingleChoiceOptions()) {
        oprot.writeFieldBegin(SINGLE_CHOICE_OPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.singleChoiceOptions.size()));
          for (org.pocketcampus.platform.sdk.shared.common.SingleChoiceOption _iter6 : this.singleChoiceOptions)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.multiChoiceOptions != null) {
      if (isSetMultiChoiceOptions()) {
        oprot.writeFieldBegin(MULTI_CHOICE_OPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.multiChoiceOptions.size()));
          for (org.pocketcampus.platform.sdk.shared.common.MultiChoiceOption _iter7 : this.multiChoiceOptions)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.stars != null) {
      oprot.writeFieldBegin(STARS_FIELD_DESC);
      oprot.writeI32(this.stars.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MenuItem(");
    boolean first = true;

    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pricingUnit:");
    if (this.pricingUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.pricingUnit);
    }
    first = false;
    if (isSetItemDescription()) {
      if (!first) sb.append(", ");
      sb.append("itemDescription:");
      if (this.itemDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.itemDescription);
      }
      first = false;
    }
    if (isSetPreparationTime()) {
      if (!first) sb.append(", ");
      sb.append("preparationTime:");
      sb.append(this.preparationTime);
      first = false;
    }
    if (isSetSingleChoiceOptions()) {
      if (!first) sb.append(", ");
      sb.append("singleChoiceOptions:");
      if (this.singleChoiceOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.singleChoiceOptions);
      }
      first = false;
    }
    if (isSetMultiChoiceOptions()) {
      if (!first) sb.append(", ");
      sb.append("multiChoiceOptions:");
      if (this.multiChoiceOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.multiChoiceOptions);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("stars:");
    if (this.stars == null) {
      sb.append("null");
    } else {
      sb.append(this.stars);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'itemId' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'price' because it's a primitive and you chose the non-beans generator.
    if (pricingUnit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pricingUnit' was not present! Struct: " + toString());
    }
    if (stars == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stars' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

