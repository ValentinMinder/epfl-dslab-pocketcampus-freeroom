/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.platform.sdk.shared.restaurant;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChosenMenuItem implements org.apache.thrift.TBase<ChosenMenuItem, ChosenMenuItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChosenMenuItem");

  private static final org.apache.thrift.protocol.TField MENU_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("menuItemId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SINGLE_CHOICE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("singleChoiceOptions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MULTI_CHOICE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiChoiceOptions", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.STRING, (short)4);

  public long menuItemId; // required
  public List<org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption> singleChoiceOptions; // required
  public List<org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption> multiChoiceOptions; // required
  public String comments; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MENU_ITEM_ID((short)1, "menuItemId"),
    SINGLE_CHOICE_OPTIONS((short)2, "singleChoiceOptions"),
    MULTI_CHOICE_OPTIONS((short)3, "multiChoiceOptions"),
    COMMENTS((short)4, "comments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MENU_ITEM_ID
          return MENU_ITEM_ID;
        case 2: // SINGLE_CHOICE_OPTIONS
          return SINGLE_CHOICE_OPTIONS;
        case 3: // MULTI_CHOICE_OPTIONS
          return MULTI_CHOICE_OPTIONS;
        case 4: // COMMENTS
          return COMMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MENUITEMID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MENU_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("menuItemId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.SINGLE_CHOICE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("singleChoiceOptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption.class))));
    tmpMap.put(_Fields.MULTI_CHOICE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("multiChoiceOptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption.class))));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChosenMenuItem.class, metaDataMap);
  }

  public ChosenMenuItem() {
  }

  public ChosenMenuItem(
    long menuItemId)
  {
    this();
    this.menuItemId = menuItemId;
    setMenuItemIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChosenMenuItem(ChosenMenuItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.menuItemId = other.menuItemId;
    if (other.isSetSingleChoiceOptions()) {
      List<org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption> __this__singleChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption>();
      for (org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption other_element : other.singleChoiceOptions) {
        __this__singleChoiceOptions.add(new org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption(other_element));
      }
      this.singleChoiceOptions = __this__singleChoiceOptions;
    }
    if (other.isSetMultiChoiceOptions()) {
      List<org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption> __this__multiChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption>();
      for (org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption other_element : other.multiChoiceOptions) {
        __this__multiChoiceOptions.add(new org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption(other_element));
      }
      this.multiChoiceOptions = __this__multiChoiceOptions;
    }
    if (other.isSetComments()) {
      this.comments = other.comments;
    }
  }

  public ChosenMenuItem deepCopy() {
    return new ChosenMenuItem(this);
  }

  @Override
  public void clear() {
    setMenuItemIdIsSet(false);
    this.menuItemId = 0;
    this.singleChoiceOptions = null;
    this.multiChoiceOptions = null;
    this.comments = null;
  }

  public long getMenuItemId() {
    return this.menuItemId;
  }

  public ChosenMenuItem setMenuItemId(long menuItemId) {
    this.menuItemId = menuItemId;
    setMenuItemIdIsSet(true);
    return this;
  }

  public void unsetMenuItemId() {
    __isset_bit_vector.clear(__MENUITEMID_ISSET_ID);
  }

  /** Returns true if field menuItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuItemId() {
    return __isset_bit_vector.get(__MENUITEMID_ISSET_ID);
  }

  public void setMenuItemIdIsSet(boolean value) {
    __isset_bit_vector.set(__MENUITEMID_ISSET_ID, value);
  }

  public int getSingleChoiceOptionsSize() {
    return (this.singleChoiceOptions == null) ? 0 : this.singleChoiceOptions.size();
  }

  public java.util.Iterator<org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption> getSingleChoiceOptionsIterator() {
    return (this.singleChoiceOptions == null) ? null : this.singleChoiceOptions.iterator();
  }

  public void addToSingleChoiceOptions(org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption elem) {
    if (this.singleChoiceOptions == null) {
      this.singleChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption>();
    }
    this.singleChoiceOptions.add(elem);
  }

  public List<org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption> getSingleChoiceOptions() {
    return this.singleChoiceOptions;
  }

  public ChosenMenuItem setSingleChoiceOptions(List<org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption> singleChoiceOptions) {
    this.singleChoiceOptions = singleChoiceOptions;
    return this;
  }

  public void unsetSingleChoiceOptions() {
    this.singleChoiceOptions = null;
  }

  /** Returns true if field singleChoiceOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleChoiceOptions() {
    return this.singleChoiceOptions != null;
  }

  public void setSingleChoiceOptionsIsSet(boolean value) {
    if (!value) {
      this.singleChoiceOptions = null;
    }
  }

  public int getMultiChoiceOptionsSize() {
    return (this.multiChoiceOptions == null) ? 0 : this.multiChoiceOptions.size();
  }

  public java.util.Iterator<org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption> getMultiChoiceOptionsIterator() {
    return (this.multiChoiceOptions == null) ? null : this.multiChoiceOptions.iterator();
  }

  public void addToMultiChoiceOptions(org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption elem) {
    if (this.multiChoiceOptions == null) {
      this.multiChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption>();
    }
    this.multiChoiceOptions.add(elem);
  }

  public List<org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption> getMultiChoiceOptions() {
    return this.multiChoiceOptions;
  }

  public ChosenMenuItem setMultiChoiceOptions(List<org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption> multiChoiceOptions) {
    this.multiChoiceOptions = multiChoiceOptions;
    return this;
  }

  public void unsetMultiChoiceOptions() {
    this.multiChoiceOptions = null;
  }

  /** Returns true if field multiChoiceOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiChoiceOptions() {
    return this.multiChoiceOptions != null;
  }

  public void setMultiChoiceOptionsIsSet(boolean value) {
    if (!value) {
      this.multiChoiceOptions = null;
    }
  }

  public String getComments() {
    return this.comments;
  }

  public ChosenMenuItem setComments(String comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MENU_ITEM_ID:
      if (value == null) {
        unsetMenuItemId();
      } else {
        setMenuItemId((Long)value);
      }
      break;

    case SINGLE_CHOICE_OPTIONS:
      if (value == null) {
        unsetSingleChoiceOptions();
      } else {
        setSingleChoiceOptions((List<org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption>)value);
      }
      break;

    case MULTI_CHOICE_OPTIONS:
      if (value == null) {
        unsetMultiChoiceOptions();
      } else {
        setMultiChoiceOptions((List<org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption>)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MENU_ITEM_ID:
      return Long.valueOf(getMenuItemId());

    case SINGLE_CHOICE_OPTIONS:
      return getSingleChoiceOptions();

    case MULTI_CHOICE_OPTIONS:
      return getMultiChoiceOptions();

    case COMMENTS:
      return getComments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MENU_ITEM_ID:
      return isSetMenuItemId();
    case SINGLE_CHOICE_OPTIONS:
      return isSetSingleChoiceOptions();
    case MULTI_CHOICE_OPTIONS:
      return isSetMultiChoiceOptions();
    case COMMENTS:
      return isSetComments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChosenMenuItem)
      return this.equals((ChosenMenuItem)that);
    return false;
  }

  public boolean equals(ChosenMenuItem that) {
    if (that == null)
      return false;

    boolean this_present_menuItemId = true;
    boolean that_present_menuItemId = true;
    if (this_present_menuItemId || that_present_menuItemId) {
      if (!(this_present_menuItemId && that_present_menuItemId))
        return false;
      if (this.menuItemId != that.menuItemId)
        return false;
    }

    boolean this_present_singleChoiceOptions = true && this.isSetSingleChoiceOptions();
    boolean that_present_singleChoiceOptions = true && that.isSetSingleChoiceOptions();
    if (this_present_singleChoiceOptions || that_present_singleChoiceOptions) {
      if (!(this_present_singleChoiceOptions && that_present_singleChoiceOptions))
        return false;
      if (!this.singleChoiceOptions.equals(that.singleChoiceOptions))
        return false;
    }

    boolean this_present_multiChoiceOptions = true && this.isSetMultiChoiceOptions();
    boolean that_present_multiChoiceOptions = true && that.isSetMultiChoiceOptions();
    if (this_present_multiChoiceOptions || that_present_multiChoiceOptions) {
      if (!(this_present_multiChoiceOptions && that_present_multiChoiceOptions))
        return false;
      if (!this.multiChoiceOptions.equals(that.multiChoiceOptions))
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_menuItemId = true;
    builder.append(present_menuItemId);
    if (present_menuItemId)
      builder.append(menuItemId);

    boolean present_singleChoiceOptions = true && (isSetSingleChoiceOptions());
    builder.append(present_singleChoiceOptions);
    if (present_singleChoiceOptions)
      builder.append(singleChoiceOptions);

    boolean present_multiChoiceOptions = true && (isSetMultiChoiceOptions());
    builder.append(present_multiChoiceOptions);
    if (present_multiChoiceOptions)
      builder.append(multiChoiceOptions);

    boolean present_comments = true && (isSetComments());
    builder.append(present_comments);
    if (present_comments)
      builder.append(comments);

    return builder.toHashCode();
  }

  public int compareTo(ChosenMenuItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ChosenMenuItem typedOther = (ChosenMenuItem)other;

    lastComparison = Boolean.valueOf(isSetMenuItemId()).compareTo(typedOther.isSetMenuItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuItemId, typedOther.menuItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleChoiceOptions()).compareTo(typedOther.isSetSingleChoiceOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleChoiceOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleChoiceOptions, typedOther.singleChoiceOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiChoiceOptions()).compareTo(typedOther.isSetMultiChoiceOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiChoiceOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiChoiceOptions, typedOther.multiChoiceOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComments()).compareTo(typedOther.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, typedOther.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MENU_ITEM_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.menuItemId = iprot.readI64();
            setMenuItemIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SINGLE_CHOICE_OPTIONS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
              this.singleChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption>(_list16.size);
              for (int _i17 = 0; _i17 < _list16.size; ++_i17)
              {
                org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption _elem18; // required
                _elem18 = new org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption();
                _elem18.read(iprot);
                this.singleChoiceOptions.add(_elem18);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MULTI_CHOICE_OPTIONS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
              this.multiChoiceOptions = new ArrayList<org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption>(_list19.size);
              for (int _i20 = 0; _i20 < _list19.size; ++_i20)
              {
                org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption _elem21; // required
                _elem21 = new org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption();
                _elem21.read(iprot);
                this.multiChoiceOptions.add(_elem21);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COMMENTS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.comments = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetMenuItemId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'menuItemId' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(MENU_ITEM_ID_FIELD_DESC);
    oprot.writeI64(this.menuItemId);
    oprot.writeFieldEnd();
    if (this.singleChoiceOptions != null) {
      if (isSetSingleChoiceOptions()) {
        oprot.writeFieldBegin(SINGLE_CHOICE_OPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.singleChoiceOptions.size()));
          for (org.pocketcampus.platform.sdk.shared.common.ChosenSingleChoiceOption _iter22 : this.singleChoiceOptions)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.multiChoiceOptions != null) {
      if (isSetMultiChoiceOptions()) {
        oprot.writeFieldBegin(MULTI_CHOICE_OPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.multiChoiceOptions.size()));
          for (org.pocketcampus.platform.sdk.shared.common.ChosenMultiChoiceOption _iter23 : this.multiChoiceOptions)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.comments != null) {
      if (isSetComments()) {
        oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
        oprot.writeString(this.comments);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChosenMenuItem(");
    boolean first = true;

    sb.append("menuItemId:");
    sb.append(this.menuItemId);
    first = false;
    if (isSetSingleChoiceOptions()) {
      if (!first) sb.append(", ");
      sb.append("singleChoiceOptions:");
      if (this.singleChoiceOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.singleChoiceOptions);
      }
      first = false;
    }
    if (isSetMultiChoiceOptions()) {
      if (!first) sb.append(", ");
      sb.append("multiChoiceOptions:");
      if (this.multiChoiceOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.multiChoiceOptions);
      }
      first = false;
    }
    if (isSetComments()) {
      if (!first) sb.append(", ");
      sb.append("comments:");
      if (this.comments == null) {
        sb.append("null");
      } else {
        sb.append(this.comments);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'menuItemId' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

