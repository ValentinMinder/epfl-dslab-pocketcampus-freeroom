/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.platform.sdk.shared.restaurant;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MenuCategory implements org.apache.thrift.TBase<MenuCategory, MenuCategory._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MenuCategory");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("subCategories", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CATEGORY_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryDescription", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I64, (short)4);

  public String name; // required
  public List<MenuSubCategory> subCategories; // required
  public String categoryDescription; // required
  public long categoryId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SUB_CATEGORIES((short)2, "subCategories"),
    CATEGORY_DESCRIPTION((short)3, "categoryDescription"),
    CATEGORY_ID((short)4, "categoryId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SUB_CATEGORIES
          return SUB_CATEGORIES;
        case 3: // CATEGORY_DESCRIPTION
          return CATEGORY_DESCRIPTION;
        case 4: // CATEGORY_ID
          return CATEGORY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATEGORYID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("subCategories", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MenuSubCategory.class))));
    tmpMap.put(_Fields.CATEGORY_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("categoryDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MenuCategory.class, metaDataMap);
  }

  public MenuCategory() {
  }

  public MenuCategory(
    String name,
    List<MenuSubCategory> subCategories,
    long categoryId)
  {
    this();
    this.name = name;
    this.subCategories = subCategories;
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MenuCategory(MenuCategory other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSubCategories()) {
      List<MenuSubCategory> __this__subCategories = new ArrayList<MenuSubCategory>();
      for (MenuSubCategory other_element : other.subCategories) {
        __this__subCategories.add(new MenuSubCategory(other_element));
      }
      this.subCategories = __this__subCategories;
    }
    if (other.isSetCategoryDescription()) {
      this.categoryDescription = other.categoryDescription;
    }
    this.categoryId = other.categoryId;
  }

  public MenuCategory deepCopy() {
    return new MenuCategory(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.subCategories = null;
    this.categoryDescription = null;
    setCategoryIdIsSet(false);
    this.categoryId = 0;
  }

  public String getName() {
    return this.name;
  }

  public MenuCategory setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getSubCategoriesSize() {
    return (this.subCategories == null) ? 0 : this.subCategories.size();
  }

  public java.util.Iterator<MenuSubCategory> getSubCategoriesIterator() {
    return (this.subCategories == null) ? null : this.subCategories.iterator();
  }

  public void addToSubCategories(MenuSubCategory elem) {
    if (this.subCategories == null) {
      this.subCategories = new ArrayList<MenuSubCategory>();
    }
    this.subCategories.add(elem);
  }

  public List<MenuSubCategory> getSubCategories() {
    return this.subCategories;
  }

  public MenuCategory setSubCategories(List<MenuSubCategory> subCategories) {
    this.subCategories = subCategories;
    return this;
  }

  public void unsetSubCategories() {
    this.subCategories = null;
  }

  /** Returns true if field subCategories is set (has been assigned a value) and false otherwise */
  public boolean isSetSubCategories() {
    return this.subCategories != null;
  }

  public void setSubCategoriesIsSet(boolean value) {
    if (!value) {
      this.subCategories = null;
    }
  }

  public String getCategoryDescription() {
    return this.categoryDescription;
  }

  public MenuCategory setCategoryDescription(String categoryDescription) {
    this.categoryDescription = categoryDescription;
    return this;
  }

  public void unsetCategoryDescription() {
    this.categoryDescription = null;
  }

  /** Returns true if field categoryDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryDescription() {
    return this.categoryDescription != null;
  }

  public void setCategoryDescriptionIsSet(boolean value) {
    if (!value) {
      this.categoryDescription = null;
    }
  }

  public long getCategoryId() {
    return this.categoryId;
  }

  public MenuCategory setCategoryId(long categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bit_vector.clear(__CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return __isset_bit_vector.get(__CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bit_vector.set(__CATEGORYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SUB_CATEGORIES:
      if (value == null) {
        unsetSubCategories();
      } else {
        setSubCategories((List<MenuSubCategory>)value);
      }
      break;

    case CATEGORY_DESCRIPTION:
      if (value == null) {
        unsetCategoryDescription();
      } else {
        setCategoryDescription((String)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SUB_CATEGORIES:
      return getSubCategories();

    case CATEGORY_DESCRIPTION:
      return getCategoryDescription();

    case CATEGORY_ID:
      return Long.valueOf(getCategoryId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SUB_CATEGORIES:
      return isSetSubCategories();
    case CATEGORY_DESCRIPTION:
      return isSetCategoryDescription();
    case CATEGORY_ID:
      return isSetCategoryId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MenuCategory)
      return this.equals((MenuCategory)that);
    return false;
  }

  public boolean equals(MenuCategory that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_subCategories = true && this.isSetSubCategories();
    boolean that_present_subCategories = true && that.isSetSubCategories();
    if (this_present_subCategories || that_present_subCategories) {
      if (!(this_present_subCategories && that_present_subCategories))
        return false;
      if (!this.subCategories.equals(that.subCategories))
        return false;
    }

    boolean this_present_categoryDescription = true && this.isSetCategoryDescription();
    boolean that_present_categoryDescription = true && that.isSetCategoryDescription();
    if (this_present_categoryDescription || that_present_categoryDescription) {
      if (!(this_present_categoryDescription && that_present_categoryDescription))
        return false;
      if (!this.categoryDescription.equals(that.categoryDescription))
        return false;
    }

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_subCategories = true && (isSetSubCategories());
    builder.append(present_subCategories);
    if (present_subCategories)
      builder.append(subCategories);

    boolean present_categoryDescription = true && (isSetCategoryDescription());
    builder.append(present_categoryDescription);
    if (present_categoryDescription)
      builder.append(categoryDescription);

    boolean present_categoryId = true;
    builder.append(present_categoryId);
    if (present_categoryId)
      builder.append(categoryId);

    return builder.toHashCode();
  }

  public int compareTo(MenuCategory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MenuCategory typedOther = (MenuCategory)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubCategories()).compareTo(typedOther.isSetSubCategories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubCategories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subCategories, typedOther.subCategories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryDescription()).compareTo(typedOther.isSetCategoryDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryDescription, typedOther.categoryDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SUB_CATEGORIES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
              this.subCategories = new ArrayList<MenuSubCategory>(_list12.size);
              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
              {
                MenuSubCategory _elem14; // required
                _elem14 = new MenuSubCategory();
                _elem14.read(iprot);
                this.subCategories.add(_elem14);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CATEGORY_DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.categoryDescription = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CATEGORY_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.categoryId = iprot.readI64();
            setCategoryIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetCategoryId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'categoryId' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.subCategories != null) {
      oprot.writeFieldBegin(SUB_CATEGORIES_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.subCategories.size()));
        for (MenuSubCategory _iter15 : this.subCategories)
        {
          _iter15.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.categoryDescription != null) {
      if (isSetCategoryDescription()) {
        oprot.writeFieldBegin(CATEGORY_DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.categoryDescription);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
    oprot.writeI64(this.categoryId);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MenuCategory(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subCategories:");
    if (this.subCategories == null) {
      sb.append("null");
    } else {
      sb.append(this.subCategories);
    }
    first = false;
    if (isSetCategoryDescription()) {
      if (!first) sb.append(", ");
      sb.append("categoryDescription:");
      if (this.categoryDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryDescription);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (subCategories == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subCategories' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'categoryId' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

