/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.platform.sdk.shared.restaurant;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Restaurant implements org.apache.thrift.TBase<Restaurant, Restaurant._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Restaurant");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MENU_CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("menuCategories", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RESTAURANT_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("restaurantDescription", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField RESTAURANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("restaurantId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField STARS_FIELD_DESC = new org.apache.thrift.protocol.TField("stars", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField PAY_BEFORE_ORDER_IS_PLACED_FIELD_DESC = new org.apache.thrift.protocol.TField("payBeforeOrderIsPlaced", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField ACCEPTED_PAYMENT_METHODS_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedPaymentMethods", org.apache.thrift.protocol.TType.SET, (short)11);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)13);

  public String name; // required
  public List<MenuCategory> menuCategories; // required
  public org.pocketcampus.platform.sdk.shared.common.Currency currency; // required
  /**
   * 
   * @see RestaurantCategory
   */
  public RestaurantCategory category; // required
  public String restaurantDescription; // required
  public long version; // required
  public long restaurantId; // required
  /**
   * 
   * @see org.pocketcampus.platform.sdk.shared.common.Rating
   */
  public org.pocketcampus.platform.sdk.shared.common.Rating stars; // required
  public org.pocketcampus.platform.sdk.shared.common.Location location; // required
  public boolean payBeforeOrderIsPlaced; // required
  public Set<PaymentMethod> acceptedPaymentMethods; // required
  public String phoneNumber; // required
  public String address; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    MENU_CATEGORIES((short)2, "menuCategories"),
    CURRENCY((short)3, "currency"),
    /**
     * 
     * @see RestaurantCategory
     */
    CATEGORY((short)4, "category"),
    RESTAURANT_DESCRIPTION((short)5, "restaurantDescription"),
    VERSION((short)6, "version"),
    RESTAURANT_ID((short)7, "restaurantId"),
    /**
     * 
     * @see org.pocketcampus.platform.sdk.shared.common.Rating
     */
    STARS((short)8, "stars"),
    LOCATION((short)9, "location"),
    PAY_BEFORE_ORDER_IS_PLACED((short)10, "payBeforeOrderIsPlaced"),
    ACCEPTED_PAYMENT_METHODS((short)11, "acceptedPaymentMethods"),
    PHONE_NUMBER((short)12, "phoneNumber"),
    ADDRESS((short)13, "address");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // MENU_CATEGORIES
          return MENU_CATEGORIES;
        case 3: // CURRENCY
          return CURRENCY;
        case 4: // CATEGORY
          return CATEGORY;
        case 5: // RESTAURANT_DESCRIPTION
          return RESTAURANT_DESCRIPTION;
        case 6: // VERSION
          return VERSION;
        case 7: // RESTAURANT_ID
          return RESTAURANT_ID;
        case 8: // STARS
          return STARS;
        case 9: // LOCATION
          return LOCATION;
        case 10: // PAY_BEFORE_ORDER_IS_PLACED
          return PAY_BEFORE_ORDER_IS_PLACED;
        case 11: // ACCEPTED_PAYMENT_METHODS
          return ACCEPTED_PAYMENT_METHODS;
        case 12: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 13: // ADDRESS
          return ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __RESTAURANTID_ISSET_ID = 1;
  private static final int __PAYBEFOREORDERISPLACED_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENU_CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("menuCategories", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MenuCategory.class))));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.pocketcampus.platform.sdk.shared.common.Currency.class)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RestaurantCategory.class)));
    tmpMap.put(_Fields.RESTAURANT_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("restaurantDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "integer")));
    tmpMap.put(_Fields.RESTAURANT_ID, new org.apache.thrift.meta_data.FieldMetaData("restaurantId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.STARS, new org.apache.thrift.meta_data.FieldMetaData("stars", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.pocketcampus.platform.sdk.shared.common.Rating.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.pocketcampus.platform.sdk.shared.common.Location.class)));
    tmpMap.put(_Fields.PAY_BEFORE_ORDER_IS_PLACED, new org.apache.thrift.meta_data.FieldMetaData("payBeforeOrderIsPlaced", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ACCEPTED_PAYMENT_METHODS, new org.apache.thrift.meta_data.FieldMetaData("acceptedPaymentMethods", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaymentMethod.class))));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Restaurant.class, metaDataMap);
  }

  public Restaurant() {
    this.stars = org.pocketcampus.platform.sdk.shared.common.Rating.UNKNOWN;

  }

  public Restaurant(
    String name,
    List<MenuCategory> menuCategories,
    org.pocketcampus.platform.sdk.shared.common.Currency currency,
    RestaurantCategory category,
    long version,
    long restaurantId,
    org.pocketcampus.platform.sdk.shared.common.Rating stars,
    boolean payBeforeOrderIsPlaced,
    Set<PaymentMethod> acceptedPaymentMethods)
  {
    this();
    this.name = name;
    this.menuCategories = menuCategories;
    this.currency = currency;
    this.category = category;
    this.version = version;
    setVersionIsSet(true);
    this.restaurantId = restaurantId;
    setRestaurantIdIsSet(true);
    this.stars = stars;
    this.payBeforeOrderIsPlaced = payBeforeOrderIsPlaced;
    setPayBeforeOrderIsPlacedIsSet(true);
    this.acceptedPaymentMethods = acceptedPaymentMethods;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Restaurant(Restaurant other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMenuCategories()) {
      List<MenuCategory> __this__menuCategories = new ArrayList<MenuCategory>();
      for (MenuCategory other_element : other.menuCategories) {
        __this__menuCategories.add(new MenuCategory(other_element));
      }
      this.menuCategories = __this__menuCategories;
    }
    if (other.isSetCurrency()) {
      this.currency = new org.pocketcampus.platform.sdk.shared.common.Currency(other.currency);
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetRestaurantDescription()) {
      this.restaurantDescription = other.restaurantDescription;
    }
    this.version = other.version;
    this.restaurantId = other.restaurantId;
    if (other.isSetStars()) {
      this.stars = other.stars;
    }
    if (other.isSetLocation()) {
      this.location = new org.pocketcampus.platform.sdk.shared.common.Location(other.location);
    }
    this.payBeforeOrderIsPlaced = other.payBeforeOrderIsPlaced;
    if (other.isSetAcceptedPaymentMethods()) {
      Set<PaymentMethod> __this__acceptedPaymentMethods = new HashSet<PaymentMethod>();
      for (PaymentMethod other_element : other.acceptedPaymentMethods) {
        __this__acceptedPaymentMethods.add(other_element);
      }
      this.acceptedPaymentMethods = __this__acceptedPaymentMethods;
    }
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
  }

  public Restaurant deepCopy() {
    return new Restaurant(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.menuCategories = null;
    this.currency = null;
    this.category = null;
    this.restaurantDescription = null;
    setVersionIsSet(false);
    this.version = 0;
    setRestaurantIdIsSet(false);
    this.restaurantId = 0;
    this.stars = org.pocketcampus.platform.sdk.shared.common.Rating.UNKNOWN;

    this.location = null;
    setPayBeforeOrderIsPlacedIsSet(false);
    this.payBeforeOrderIsPlaced = false;
    this.acceptedPaymentMethods = null;
    this.phoneNumber = null;
    this.address = null;
  }

  public String getName() {
    return this.name;
  }

  public Restaurant setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMenuCategoriesSize() {
    return (this.menuCategories == null) ? 0 : this.menuCategories.size();
  }

  public java.util.Iterator<MenuCategory> getMenuCategoriesIterator() {
    return (this.menuCategories == null) ? null : this.menuCategories.iterator();
  }

  public void addToMenuCategories(MenuCategory elem) {
    if (this.menuCategories == null) {
      this.menuCategories = new ArrayList<MenuCategory>();
    }
    this.menuCategories.add(elem);
  }

  public List<MenuCategory> getMenuCategories() {
    return this.menuCategories;
  }

  public Restaurant setMenuCategories(List<MenuCategory> menuCategories) {
    this.menuCategories = menuCategories;
    return this;
  }

  public void unsetMenuCategories() {
    this.menuCategories = null;
  }

  /** Returns true if field menuCategories is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuCategories() {
    return this.menuCategories != null;
  }

  public void setMenuCategoriesIsSet(boolean value) {
    if (!value) {
      this.menuCategories = null;
    }
  }

  public org.pocketcampus.platform.sdk.shared.common.Currency getCurrency() {
    return this.currency;
  }

  public Restaurant setCurrency(org.pocketcampus.platform.sdk.shared.common.Currency currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  /**
   * 
   * @see RestaurantCategory
   */
  public RestaurantCategory getCategory() {
    return this.category;
  }

  /**
   * 
   * @see RestaurantCategory
   */
  public Restaurant setCategory(RestaurantCategory category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getRestaurantDescription() {
    return this.restaurantDescription;
  }

  public Restaurant setRestaurantDescription(String restaurantDescription) {
    this.restaurantDescription = restaurantDescription;
    return this;
  }

  public void unsetRestaurantDescription() {
    this.restaurantDescription = null;
  }

  /** Returns true if field restaurantDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetRestaurantDescription() {
    return this.restaurantDescription != null;
  }

  public void setRestaurantDescriptionIsSet(boolean value) {
    if (!value) {
      this.restaurantDescription = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public Restaurant setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bit_vector.clear(__VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return __isset_bit_vector.get(__VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bit_vector.set(__VERSION_ISSET_ID, value);
  }

  public long getRestaurantId() {
    return this.restaurantId;
  }

  public Restaurant setRestaurantId(long restaurantId) {
    this.restaurantId = restaurantId;
    setRestaurantIdIsSet(true);
    return this;
  }

  public void unsetRestaurantId() {
    __isset_bit_vector.clear(__RESTAURANTID_ISSET_ID);
  }

  /** Returns true if field restaurantId is set (has been assigned a value) and false otherwise */
  public boolean isSetRestaurantId() {
    return __isset_bit_vector.get(__RESTAURANTID_ISSET_ID);
  }

  public void setRestaurantIdIsSet(boolean value) {
    __isset_bit_vector.set(__RESTAURANTID_ISSET_ID, value);
  }

  /**
   * 
   * @see org.pocketcampus.platform.sdk.shared.common.Rating
   */
  public org.pocketcampus.platform.sdk.shared.common.Rating getStars() {
    return this.stars;
  }

  /**
   * 
   * @see org.pocketcampus.platform.sdk.shared.common.Rating
   */
  public Restaurant setStars(org.pocketcampus.platform.sdk.shared.common.Rating stars) {
    this.stars = stars;
    return this;
  }

  public void unsetStars() {
    this.stars = null;
  }

  /** Returns true if field stars is set (has been assigned a value) and false otherwise */
  public boolean isSetStars() {
    return this.stars != null;
  }

  public void setStarsIsSet(boolean value) {
    if (!value) {
      this.stars = null;
    }
  }

  public org.pocketcampus.platform.sdk.shared.common.Location getLocation() {
    return this.location;
  }

  public Restaurant setLocation(org.pocketcampus.platform.sdk.shared.common.Location location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public boolean isPayBeforeOrderIsPlaced() {
    return this.payBeforeOrderIsPlaced;
  }

  public Restaurant setPayBeforeOrderIsPlaced(boolean payBeforeOrderIsPlaced) {
    this.payBeforeOrderIsPlaced = payBeforeOrderIsPlaced;
    setPayBeforeOrderIsPlacedIsSet(true);
    return this;
  }

  public void unsetPayBeforeOrderIsPlaced() {
    __isset_bit_vector.clear(__PAYBEFOREORDERISPLACED_ISSET_ID);
  }

  /** Returns true if field payBeforeOrderIsPlaced is set (has been assigned a value) and false otherwise */
  public boolean isSetPayBeforeOrderIsPlaced() {
    return __isset_bit_vector.get(__PAYBEFOREORDERISPLACED_ISSET_ID);
  }

  public void setPayBeforeOrderIsPlacedIsSet(boolean value) {
    __isset_bit_vector.set(__PAYBEFOREORDERISPLACED_ISSET_ID, value);
  }

  public int getAcceptedPaymentMethodsSize() {
    return (this.acceptedPaymentMethods == null) ? 0 : this.acceptedPaymentMethods.size();
  }

  public java.util.Iterator<PaymentMethod> getAcceptedPaymentMethodsIterator() {
    return (this.acceptedPaymentMethods == null) ? null : this.acceptedPaymentMethods.iterator();
  }

  public void addToAcceptedPaymentMethods(PaymentMethod elem) {
    if (this.acceptedPaymentMethods == null) {
      this.acceptedPaymentMethods = new HashSet<PaymentMethod>();
    }
    this.acceptedPaymentMethods.add(elem);
  }

  public Set<PaymentMethod> getAcceptedPaymentMethods() {
    return this.acceptedPaymentMethods;
  }

  public Restaurant setAcceptedPaymentMethods(Set<PaymentMethod> acceptedPaymentMethods) {
    this.acceptedPaymentMethods = acceptedPaymentMethods;
    return this;
  }

  public void unsetAcceptedPaymentMethods() {
    this.acceptedPaymentMethods = null;
  }

  /** Returns true if field acceptedPaymentMethods is set (has been assigned a value) and false otherwise */
  public boolean isSetAcceptedPaymentMethods() {
    return this.acceptedPaymentMethods != null;
  }

  public void setAcceptedPaymentMethodsIsSet(boolean value) {
    if (!value) {
      this.acceptedPaymentMethods = null;
    }
  }

  public String getPhoneNumber() {
    return this.phoneNumber;
  }

  public Restaurant setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public Restaurant setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MENU_CATEGORIES:
      if (value == null) {
        unsetMenuCategories();
      } else {
        setMenuCategories((List<MenuCategory>)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((org.pocketcampus.platform.sdk.shared.common.Currency)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((RestaurantCategory)value);
      }
      break;

    case RESTAURANT_DESCRIPTION:
      if (value == null) {
        unsetRestaurantDescription();
      } else {
        setRestaurantDescription((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Long)value);
      }
      break;

    case RESTAURANT_ID:
      if (value == null) {
        unsetRestaurantId();
      } else {
        setRestaurantId((Long)value);
      }
      break;

    case STARS:
      if (value == null) {
        unsetStars();
      } else {
        setStars((org.pocketcampus.platform.sdk.shared.common.Rating)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((org.pocketcampus.platform.sdk.shared.common.Location)value);
      }
      break;

    case PAY_BEFORE_ORDER_IS_PLACED:
      if (value == null) {
        unsetPayBeforeOrderIsPlaced();
      } else {
        setPayBeforeOrderIsPlaced((Boolean)value);
      }
      break;

    case ACCEPTED_PAYMENT_METHODS:
      if (value == null) {
        unsetAcceptedPaymentMethods();
      } else {
        setAcceptedPaymentMethods((Set<PaymentMethod>)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case MENU_CATEGORIES:
      return getMenuCategories();

    case CURRENCY:
      return getCurrency();

    case CATEGORY:
      return getCategory();

    case RESTAURANT_DESCRIPTION:
      return getRestaurantDescription();

    case VERSION:
      return Long.valueOf(getVersion());

    case RESTAURANT_ID:
      return Long.valueOf(getRestaurantId());

    case STARS:
      return getStars();

    case LOCATION:
      return getLocation();

    case PAY_BEFORE_ORDER_IS_PLACED:
      return Boolean.valueOf(isPayBeforeOrderIsPlaced());

    case ACCEPTED_PAYMENT_METHODS:
      return getAcceptedPaymentMethods();

    case PHONE_NUMBER:
      return getPhoneNumber();

    case ADDRESS:
      return getAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case MENU_CATEGORIES:
      return isSetMenuCategories();
    case CURRENCY:
      return isSetCurrency();
    case CATEGORY:
      return isSetCategory();
    case RESTAURANT_DESCRIPTION:
      return isSetRestaurantDescription();
    case VERSION:
      return isSetVersion();
    case RESTAURANT_ID:
      return isSetRestaurantId();
    case STARS:
      return isSetStars();
    case LOCATION:
      return isSetLocation();
    case PAY_BEFORE_ORDER_IS_PLACED:
      return isSetPayBeforeOrderIsPlaced();
    case ACCEPTED_PAYMENT_METHODS:
      return isSetAcceptedPaymentMethods();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case ADDRESS:
      return isSetAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Restaurant)
      return this.equals((Restaurant)that);
    return false;
  }

  public boolean equals(Restaurant that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_menuCategories = true && this.isSetMenuCategories();
    boolean that_present_menuCategories = true && that.isSetMenuCategories();
    if (this_present_menuCategories || that_present_menuCategories) {
      if (!(this_present_menuCategories && that_present_menuCategories))
        return false;
      if (!this.menuCategories.equals(that.menuCategories))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_restaurantDescription = true && this.isSetRestaurantDescription();
    boolean that_present_restaurantDescription = true && that.isSetRestaurantDescription();
    if (this_present_restaurantDescription || that_present_restaurantDescription) {
      if (!(this_present_restaurantDescription && that_present_restaurantDescription))
        return false;
      if (!this.restaurantDescription.equals(that.restaurantDescription))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_restaurantId = true;
    boolean that_present_restaurantId = true;
    if (this_present_restaurantId || that_present_restaurantId) {
      if (!(this_present_restaurantId && that_present_restaurantId))
        return false;
      if (this.restaurantId != that.restaurantId)
        return false;
    }

    boolean this_present_stars = true && this.isSetStars();
    boolean that_present_stars = true && that.isSetStars();
    if (this_present_stars || that_present_stars) {
      if (!(this_present_stars && that_present_stars))
        return false;
      if (!this.stars.equals(that.stars))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_payBeforeOrderIsPlaced = true;
    boolean that_present_payBeforeOrderIsPlaced = true;
    if (this_present_payBeforeOrderIsPlaced || that_present_payBeforeOrderIsPlaced) {
      if (!(this_present_payBeforeOrderIsPlaced && that_present_payBeforeOrderIsPlaced))
        return false;
      if (this.payBeforeOrderIsPlaced != that.payBeforeOrderIsPlaced)
        return false;
    }

    boolean this_present_acceptedPaymentMethods = true && this.isSetAcceptedPaymentMethods();
    boolean that_present_acceptedPaymentMethods = true && that.isSetAcceptedPaymentMethods();
    if (this_present_acceptedPaymentMethods || that_present_acceptedPaymentMethods) {
      if (!(this_present_acceptedPaymentMethods && that_present_acceptedPaymentMethods))
        return false;
      if (!this.acceptedPaymentMethods.equals(that.acceptedPaymentMethods))
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_menuCategories = true && (isSetMenuCategories());
    builder.append(present_menuCategories);
    if (present_menuCategories)
      builder.append(menuCategories);

    boolean present_currency = true && (isSetCurrency());
    builder.append(present_currency);
    if (present_currency)
      builder.append(currency);

    boolean present_category = true && (isSetCategory());
    builder.append(present_category);
    if (present_category)
      builder.append(category.getValue());

    boolean present_restaurantDescription = true && (isSetRestaurantDescription());
    builder.append(present_restaurantDescription);
    if (present_restaurantDescription)
      builder.append(restaurantDescription);

    boolean present_version = true;
    builder.append(present_version);
    if (present_version)
      builder.append(version);

    boolean present_restaurantId = true;
    builder.append(present_restaurantId);
    if (present_restaurantId)
      builder.append(restaurantId);

    boolean present_stars = true && (isSetStars());
    builder.append(present_stars);
    if (present_stars)
      builder.append(stars.getValue());

    boolean present_location = true && (isSetLocation());
    builder.append(present_location);
    if (present_location)
      builder.append(location);

    boolean present_payBeforeOrderIsPlaced = true;
    builder.append(present_payBeforeOrderIsPlaced);
    if (present_payBeforeOrderIsPlaced)
      builder.append(payBeforeOrderIsPlaced);

    boolean present_acceptedPaymentMethods = true && (isSetAcceptedPaymentMethods());
    builder.append(present_acceptedPaymentMethods);
    if (present_acceptedPaymentMethods)
      builder.append(acceptedPaymentMethods);

    boolean present_phoneNumber = true && (isSetPhoneNumber());
    builder.append(present_phoneNumber);
    if (present_phoneNumber)
      builder.append(phoneNumber);

    boolean present_address = true && (isSetAddress());
    builder.append(present_address);
    if (present_address)
      builder.append(address);

    return builder.toHashCode();
  }

  public int compareTo(Restaurant other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Restaurant typedOther = (Restaurant)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuCategories()).compareTo(typedOther.isSetMenuCategories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuCategories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuCategories, typedOther.menuCategories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(typedOther.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, typedOther.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestaurantDescription()).compareTo(typedOther.isSetRestaurantDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestaurantDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restaurantDescription, typedOther.restaurantDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestaurantId()).compareTo(typedOther.isSetRestaurantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestaurantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restaurantId, typedOther.restaurantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStars()).compareTo(typedOther.isSetStars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stars, typedOther.stars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayBeforeOrderIsPlaced()).compareTo(typedOther.isSetPayBeforeOrderIsPlaced());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayBeforeOrderIsPlaced()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payBeforeOrderIsPlaced, typedOther.payBeforeOrderIsPlaced);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcceptedPaymentMethods()).compareTo(typedOther.isSetAcceptedPaymentMethods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcceptedPaymentMethods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedPaymentMethods, typedOther.acceptedPaymentMethods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNumber()).compareTo(typedOther.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, typedOther.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MENU_CATEGORIES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
              this.menuCategories = new ArrayList<MenuCategory>(_list54.size);
              for (int _i55 = 0; _i55 < _list54.size; ++_i55)
              {
                MenuCategory _elem56; // required
                _elem56 = new MenuCategory();
                _elem56.read(iprot);
                this.menuCategories.add(_elem56);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CURRENCY
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.currency = new org.pocketcampus.platform.sdk.shared.common.Currency();
            this.currency.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CATEGORY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.category = RestaurantCategory.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // RESTAURANT_DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.restaurantDescription = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // VERSION
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.version = iprot.readI64();
            setVersionIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // RESTAURANT_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.restaurantId = iprot.readI64();
            setRestaurantIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // STARS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.stars = org.pocketcampus.platform.sdk.shared.common.Rating.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // LOCATION
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.location = new org.pocketcampus.platform.sdk.shared.common.Location();
            this.location.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PAY_BEFORE_ORDER_IS_PLACED
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.payBeforeOrderIsPlaced = iprot.readBool();
            setPayBeforeOrderIsPlacedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // ACCEPTED_PAYMENT_METHODS
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set57 = iprot.readSetBegin();
              this.acceptedPaymentMethods = new HashSet<PaymentMethod>(2*_set57.size);
              for (int _i58 = 0; _i58 < _set57.size; ++_i58)
              {
                PaymentMethod _elem59; // required
                _elem59 = PaymentMethod.findByValue(iprot.readI32());
                this.acceptedPaymentMethods.add(_elem59);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // PHONE_NUMBER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.phoneNumber = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // ADDRESS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.address = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetVersion()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetRestaurantId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'restaurantId' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetPayBeforeOrderIsPlaced()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'payBeforeOrderIsPlaced' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.menuCategories != null) {
      oprot.writeFieldBegin(MENU_CATEGORIES_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.menuCategories.size()));
        for (MenuCategory _iter60 : this.menuCategories)
        {
          _iter60.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.currency != null) {
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      this.currency.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.category != null) {
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeI32(this.category.getValue());
      oprot.writeFieldEnd();
    }
    if (this.restaurantDescription != null) {
      if (isSetRestaurantDescription()) {
        oprot.writeFieldBegin(RESTAURANT_DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.restaurantDescription);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(VERSION_FIELD_DESC);
    oprot.writeI64(this.version);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(RESTAURANT_ID_FIELD_DESC);
    oprot.writeI64(this.restaurantId);
    oprot.writeFieldEnd();
    if (this.stars != null) {
      oprot.writeFieldBegin(STARS_FIELD_DESC);
      oprot.writeI32(this.stars.getValue());
      oprot.writeFieldEnd();
    }
    if (this.location != null) {
      if (isSetLocation()) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        this.location.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(PAY_BEFORE_ORDER_IS_PLACED_FIELD_DESC);
    oprot.writeBool(this.payBeforeOrderIsPlaced);
    oprot.writeFieldEnd();
    if (this.acceptedPaymentMethods != null) {
      oprot.writeFieldBegin(ACCEPTED_PAYMENT_METHODS_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, this.acceptedPaymentMethods.size()));
        for (PaymentMethod _iter61 : this.acceptedPaymentMethods)
        {
          oprot.writeI32(_iter61.getValue());
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.phoneNumber != null) {
      if (isSetPhoneNumber()) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(this.phoneNumber);
        oprot.writeFieldEnd();
      }
    }
    if (this.address != null) {
      if (isSetAddress()) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(this.address);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Restaurant(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuCategories:");
    if (this.menuCategories == null) {
      sb.append("null");
    } else {
      sb.append(this.menuCategories);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (isSetRestaurantDescription()) {
      if (!first) sb.append(", ");
      sb.append("restaurantDescription:");
      if (this.restaurantDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.restaurantDescription);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("restaurantId:");
    sb.append(this.restaurantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stars:");
    if (this.stars == null) {
      sb.append("null");
    } else {
      sb.append(this.stars);
    }
    first = false;
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("payBeforeOrderIsPlaced:");
    sb.append(this.payBeforeOrderIsPlaced);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acceptedPaymentMethods:");
    if (this.acceptedPaymentMethods == null) {
      sb.append("null");
    } else {
      sb.append(this.acceptedPaymentMethods);
    }
    first = false;
    if (isSetPhoneNumber()) {
      if (!first) sb.append(", ");
      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (menuCategories == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'menuCategories' was not present! Struct: " + toString());
    }
    if (currency == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'currency' was not present! Struct: " + toString());
    }
    if (category == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'category' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'restaurantId' because it's a primitive and you chose the non-beans generator.
    if (stars == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stars' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'payBeforeOrderIsPlaced' because it's a primitive and you chose the non-beans generator.
    if (acceptedPaymentMethods == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'acceptedPaymentMethods' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

