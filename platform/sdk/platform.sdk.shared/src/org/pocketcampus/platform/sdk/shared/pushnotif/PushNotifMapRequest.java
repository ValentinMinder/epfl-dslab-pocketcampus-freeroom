/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.platform.sdk.shared.pushnotif;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushNotifMapRequest implements org.apache.thrift.TBase<PushNotifMapRequest, PushNotifMapRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushNotifMapRequest");

  private static final org.apache.thrift.protocol.TField PLUGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pluginName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICE_OS_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceOs", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PUSH_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("pushToken", org.apache.thrift.protocol.TType.STRING, (short)4);

  public String pluginName; // required
  public String userId; // required
  public String deviceOs; // required
  public String pushToken; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLUGIN_NAME((short)1, "pluginName"),
    USER_ID((short)2, "userId"),
    DEVICE_OS((short)3, "deviceOs"),
    PUSH_TOKEN((short)4, "pushToken");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLUGIN_NAME
          return PLUGIN_NAME;
        case 2: // USER_ID
          return USER_ID;
        case 3: // DEVICE_OS
          return DEVICE_OS;
        case 4: // PUSH_TOKEN
          return PUSH_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLUGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("pluginName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_OS, new org.apache.thrift.meta_data.FieldMetaData("deviceOs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUSH_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("pushToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushNotifMapRequest.class, metaDataMap);
  }

  public PushNotifMapRequest() {
  }

  public PushNotifMapRequest(
    String pluginName,
    String userId,
    String deviceOs,
    String pushToken)
  {
    this();
    this.pluginName = pluginName;
    this.userId = userId;
    this.deviceOs = deviceOs;
    this.pushToken = pushToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PushNotifMapRequest(PushNotifMapRequest other) {
    if (other.isSetPluginName()) {
      this.pluginName = other.pluginName;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetDeviceOs()) {
      this.deviceOs = other.deviceOs;
    }
    if (other.isSetPushToken()) {
      this.pushToken = other.pushToken;
    }
  }

  public PushNotifMapRequest deepCopy() {
    return new PushNotifMapRequest(this);
  }

  @Override
  public void clear() {
    this.pluginName = null;
    this.userId = null;
    this.deviceOs = null;
    this.pushToken = null;
  }

  public String getPluginName() {
    return this.pluginName;
  }

  public PushNotifMapRequest setPluginName(String pluginName) {
    this.pluginName = pluginName;
    return this;
  }

  public void unsetPluginName() {
    this.pluginName = null;
  }

  /** Returns true if field pluginName is set (has been assigned a value) and false otherwise */
  public boolean isSetPluginName() {
    return this.pluginName != null;
  }

  public void setPluginNameIsSet(boolean value) {
    if (!value) {
      this.pluginName = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public PushNotifMapRequest setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getDeviceOs() {
    return this.deviceOs;
  }

  public PushNotifMapRequest setDeviceOs(String deviceOs) {
    this.deviceOs = deviceOs;
    return this;
  }

  public void unsetDeviceOs() {
    this.deviceOs = null;
  }

  /** Returns true if field deviceOs is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceOs() {
    return this.deviceOs != null;
  }

  public void setDeviceOsIsSet(boolean value) {
    if (!value) {
      this.deviceOs = null;
    }
  }

  public String getPushToken() {
    return this.pushToken;
  }

  public PushNotifMapRequest setPushToken(String pushToken) {
    this.pushToken = pushToken;
    return this;
  }

  public void unsetPushToken() {
    this.pushToken = null;
  }

  /** Returns true if field pushToken is set (has been assigned a value) and false otherwise */
  public boolean isSetPushToken() {
    return this.pushToken != null;
  }

  public void setPushTokenIsSet(boolean value) {
    if (!value) {
      this.pushToken = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLUGIN_NAME:
      if (value == null) {
        unsetPluginName();
      } else {
        setPluginName((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case DEVICE_OS:
      if (value == null) {
        unsetDeviceOs();
      } else {
        setDeviceOs((String)value);
      }
      break;

    case PUSH_TOKEN:
      if (value == null) {
        unsetPushToken();
      } else {
        setPushToken((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLUGIN_NAME:
      return getPluginName();

    case USER_ID:
      return getUserId();

    case DEVICE_OS:
      return getDeviceOs();

    case PUSH_TOKEN:
      return getPushToken();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLUGIN_NAME:
      return isSetPluginName();
    case USER_ID:
      return isSetUserId();
    case DEVICE_OS:
      return isSetDeviceOs();
    case PUSH_TOKEN:
      return isSetPushToken();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PushNotifMapRequest)
      return this.equals((PushNotifMapRequest)that);
    return false;
  }

  public boolean equals(PushNotifMapRequest that) {
    if (that == null)
      return false;

    boolean this_present_pluginName = true && this.isSetPluginName();
    boolean that_present_pluginName = true && that.isSetPluginName();
    if (this_present_pluginName || that_present_pluginName) {
      if (!(this_present_pluginName && that_present_pluginName))
        return false;
      if (!this.pluginName.equals(that.pluginName))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_deviceOs = true && this.isSetDeviceOs();
    boolean that_present_deviceOs = true && that.isSetDeviceOs();
    if (this_present_deviceOs || that_present_deviceOs) {
      if (!(this_present_deviceOs && that_present_deviceOs))
        return false;
      if (!this.deviceOs.equals(that.deviceOs))
        return false;
    }

    boolean this_present_pushToken = true && this.isSetPushToken();
    boolean that_present_pushToken = true && that.isSetPushToken();
    if (this_present_pushToken || that_present_pushToken) {
      if (!(this_present_pushToken && that_present_pushToken))
        return false;
      if (!this.pushToken.equals(that.pushToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_pluginName = true && (isSetPluginName());
    builder.append(present_pluginName);
    if (present_pluginName)
      builder.append(pluginName);

    boolean present_userId = true && (isSetUserId());
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);

    boolean present_deviceOs = true && (isSetDeviceOs());
    builder.append(present_deviceOs);
    if (present_deviceOs)
      builder.append(deviceOs);

    boolean present_pushToken = true && (isSetPushToken());
    builder.append(present_pushToken);
    if (present_pushToken)
      builder.append(pushToken);

    return builder.toHashCode();
  }

  public int compareTo(PushNotifMapRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PushNotifMapRequest typedOther = (PushNotifMapRequest)other;

    lastComparison = Boolean.valueOf(isSetPluginName()).compareTo(typedOther.isSetPluginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPluginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pluginName, typedOther.pluginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceOs()).compareTo(typedOther.isSetDeviceOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceOs, typedOther.deviceOs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushToken()).compareTo(typedOther.isSetPushToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushToken, typedOther.pushToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PLUGIN_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.pluginName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.userId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DEVICE_OS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.deviceOs = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PUSH_TOKEN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.pushToken = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.pluginName != null) {
      oprot.writeFieldBegin(PLUGIN_NAME_FIELD_DESC);
      oprot.writeString(this.pluginName);
      oprot.writeFieldEnd();
    }
    if (this.userId != null) {
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    if (this.deviceOs != null) {
      oprot.writeFieldBegin(DEVICE_OS_FIELD_DESC);
      oprot.writeString(this.deviceOs);
      oprot.writeFieldEnd();
    }
    if (this.pushToken != null) {
      oprot.writeFieldBegin(PUSH_TOKEN_FIELD_DESC);
      oprot.writeString(this.pushToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PushNotifMapRequest(");
    boolean first = true;

    sb.append("pluginName:");
    if (this.pluginName == null) {
      sb.append("null");
    } else {
      sb.append(this.pluginName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceOs:");
    if (this.deviceOs == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceOs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushToken:");
    if (this.pushToken == null) {
      sb.append("null");
    } else {
      sb.append(this.pushToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (pluginName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pluginName' was not present! Struct: " + toString());
    }
    if (userId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not present! Struct: " + toString());
    }
    if (deviceOs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deviceOs' was not present! Struct: " + toString());
    }
    if (pushToken == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pushToken' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

