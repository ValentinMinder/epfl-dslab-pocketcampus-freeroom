/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.platform.sdk.shared.pushnotif;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushNotifSendRequest implements org.apache.thrift.TBase<PushNotifSendRequest, PushNotifSendRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushNotifSendRequest");

  private static final org.apache.thrift.protocol.TField PLUGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pluginName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("messageMap", org.apache.thrift.protocol.TType.MAP, (short)3);

  public String pluginName; // required
  public List<String> userIds; // required
  public Map<String,String> messageMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLUGIN_NAME((short)1, "pluginName"),
    USER_IDS((short)2, "userIds"),
    MESSAGE_MAP((short)3, "messageMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLUGIN_NAME
          return PLUGIN_NAME;
        case 2: // USER_IDS
          return USER_IDS;
        case 3: // MESSAGE_MAP
          return MESSAGE_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLUGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("pluginName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MESSAGE_MAP, new org.apache.thrift.meta_data.FieldMetaData("messageMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushNotifSendRequest.class, metaDataMap);
  }

  public PushNotifSendRequest() {
  }

  public PushNotifSendRequest(
    String pluginName,
    List<String> userIds,
    Map<String,String> messageMap)
  {
    this();
    this.pluginName = pluginName;
    this.userIds = userIds;
    this.messageMap = messageMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PushNotifSendRequest(PushNotifSendRequest other) {
    if (other.isSetPluginName()) {
      this.pluginName = other.pluginName;
    }
    if (other.isSetUserIds()) {
      List<String> __this__userIds = new ArrayList<String>();
      for (String other_element : other.userIds) {
        __this__userIds.add(other_element);
      }
      this.userIds = __this__userIds;
    }
    if (other.isSetMessageMap()) {
      Map<String,String> __this__messageMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.messageMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__messageMap_copy_key = other_element_key;

        String __this__messageMap_copy_value = other_element_value;

        __this__messageMap.put(__this__messageMap_copy_key, __this__messageMap_copy_value);
      }
      this.messageMap = __this__messageMap;
    }
  }

  public PushNotifSendRequest deepCopy() {
    return new PushNotifSendRequest(this);
  }

  @Override
  public void clear() {
    this.pluginName = null;
    this.userIds = null;
    this.messageMap = null;
  }

  public String getPluginName() {
    return this.pluginName;
  }

  public PushNotifSendRequest setPluginName(String pluginName) {
    this.pluginName = pluginName;
    return this;
  }

  public void unsetPluginName() {
    this.pluginName = null;
  }

  /** Returns true if field pluginName is set (has been assigned a value) and false otherwise */
  public boolean isSetPluginName() {
    return this.pluginName != null;
  }

  public void setPluginNameIsSet(boolean value) {
    if (!value) {
      this.pluginName = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<String> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(String elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<String>();
    }
    this.userIds.add(elem);
  }

  public List<String> getUserIds() {
    return this.userIds;
  }

  public PushNotifSendRequest setUserIds(List<String> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getMessageMapSize() {
    return (this.messageMap == null) ? 0 : this.messageMap.size();
  }

  public void putToMessageMap(String key, String val) {
    if (this.messageMap == null) {
      this.messageMap = new HashMap<String,String>();
    }
    this.messageMap.put(key, val);
  }

  public Map<String,String> getMessageMap() {
    return this.messageMap;
  }

  public PushNotifSendRequest setMessageMap(Map<String,String> messageMap) {
    this.messageMap = messageMap;
    return this;
  }

  public void unsetMessageMap() {
    this.messageMap = null;
  }

  /** Returns true if field messageMap is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageMap() {
    return this.messageMap != null;
  }

  public void setMessageMapIsSet(boolean value) {
    if (!value) {
      this.messageMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLUGIN_NAME:
      if (value == null) {
        unsetPluginName();
      } else {
        setPluginName((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<String>)value);
      }
      break;

    case MESSAGE_MAP:
      if (value == null) {
        unsetMessageMap();
      } else {
        setMessageMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLUGIN_NAME:
      return getPluginName();

    case USER_IDS:
      return getUserIds();

    case MESSAGE_MAP:
      return getMessageMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLUGIN_NAME:
      return isSetPluginName();
    case USER_IDS:
      return isSetUserIds();
    case MESSAGE_MAP:
      return isSetMessageMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PushNotifSendRequest)
      return this.equals((PushNotifSendRequest)that);
    return false;
  }

  public boolean equals(PushNotifSendRequest that) {
    if (that == null)
      return false;

    boolean this_present_pluginName = true && this.isSetPluginName();
    boolean that_present_pluginName = true && that.isSetPluginName();
    if (this_present_pluginName || that_present_pluginName) {
      if (!(this_present_pluginName && that_present_pluginName))
        return false;
      if (!this.pluginName.equals(that.pluginName))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_messageMap = true && this.isSetMessageMap();
    boolean that_present_messageMap = true && that.isSetMessageMap();
    if (this_present_messageMap || that_present_messageMap) {
      if (!(this_present_messageMap && that_present_messageMap))
        return false;
      if (!this.messageMap.equals(that.messageMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_pluginName = true && (isSetPluginName());
    builder.append(present_pluginName);
    if (present_pluginName)
      builder.append(pluginName);

    boolean present_userIds = true && (isSetUserIds());
    builder.append(present_userIds);
    if (present_userIds)
      builder.append(userIds);

    boolean present_messageMap = true && (isSetMessageMap());
    builder.append(present_messageMap);
    if (present_messageMap)
      builder.append(messageMap);

    return builder.toHashCode();
  }

  public int compareTo(PushNotifSendRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PushNotifSendRequest typedOther = (PushNotifSendRequest)other;

    lastComparison = Boolean.valueOf(isSetPluginName()).compareTo(typedOther.isSetPluginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPluginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pluginName, typedOther.pluginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(typedOther.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, typedOther.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageMap()).compareTo(typedOther.isSetMessageMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageMap, typedOther.messageMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PLUGIN_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.pluginName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_IDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.userIds = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2; // required
                _elem2 = iprot.readString();
                this.userIds.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MESSAGE_MAP
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
              this.messageMap = new HashMap<String,String>(2*_map3.size);
              for (int _i4 = 0; _i4 < _map3.size; ++_i4)
              {
                String _key5; // required
                String _val6; // required
                _key5 = iprot.readString();
                _val6 = iprot.readString();
                this.messageMap.put(_key5, _val6);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.pluginName != null) {
      oprot.writeFieldBegin(PLUGIN_NAME_FIELD_DESC);
      oprot.writeString(this.pluginName);
      oprot.writeFieldEnd();
    }
    if (this.userIds != null) {
      oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.userIds.size()));
        for (String _iter7 : this.userIds)
        {
          oprot.writeString(_iter7);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.messageMap != null) {
      oprot.writeFieldBegin(MESSAGE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.messageMap.size()));
        for (Map.Entry<String, String> _iter8 : this.messageMap.entrySet())
        {
          oprot.writeString(_iter8.getKey());
          oprot.writeString(_iter8.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PushNotifSendRequest(");
    boolean first = true;

    sb.append("pluginName:");
    if (this.pluginName == null) {
      sb.append("null");
    } else {
      sb.append(this.pluginName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageMap:");
    if (this.messageMap == null) {
      sb.append("null");
    } else {
      sb.append(this.messageMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (pluginName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pluginName' was not present! Struct: " + toString());
    }
    if (userIds == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userIds' was not present! Struct: " + toString());
    }
    if (messageMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageMap' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

