/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.platform.sdk.shared.restaurant;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CookReceivedItem implements org.apache.thrift.TBase<CookReceivedItem, CookReceivedItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookReceivedItem");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SINGLE_CHOICES_FIELD_DESC = new org.apache.thrift.protocol.TField("singleChoices", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField MULTIPLE_CHOICES_FIELD_DESC = new org.apache.thrift.protocol.TField("multipleChoices", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.STRING, (short)4);

  public String name; // required
  public Map<String,String> singleChoices; // required
  public Map<String,List<String>> multipleChoices; // required
  public String comments; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SINGLE_CHOICES((short)2, "singleChoices"),
    MULTIPLE_CHOICES((short)3, "multipleChoices"),
    COMMENTS((short)4, "comments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SINGLE_CHOICES
          return SINGLE_CHOICES;
        case 3: // MULTIPLE_CHOICES
          return MULTIPLE_CHOICES;
        case 4: // COMMENTS
          return COMMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SINGLE_CHOICES, new org.apache.thrift.meta_data.FieldMetaData("singleChoices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MULTIPLE_CHOICES, new org.apache.thrift.meta_data.FieldMetaData("multipleChoices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookReceivedItem.class, metaDataMap);
  }

  public CookReceivedItem() {
  }

  public CookReceivedItem(
    String name,
    Map<String,String> singleChoices,
    Map<String,List<String>> multipleChoices,
    String comments)
  {
    this();
    this.name = name;
    this.singleChoices = singleChoices;
    this.multipleChoices = multipleChoices;
    this.comments = comments;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CookReceivedItem(CookReceivedItem other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSingleChoices()) {
      Map<String,String> __this__singleChoices = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.singleChoices.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__singleChoices_copy_key = other_element_key;

        String __this__singleChoices_copy_value = other_element_value;

        __this__singleChoices.put(__this__singleChoices_copy_key, __this__singleChoices_copy_value);
      }
      this.singleChoices = __this__singleChoices;
    }
    if (other.isSetMultipleChoices()) {
      Map<String,List<String>> __this__multipleChoices = new HashMap<String,List<String>>();
      for (Map.Entry<String, List<String>> other_element : other.multipleChoices.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__multipleChoices_copy_key = other_element_key;

        List<String> __this__multipleChoices_copy_value = new ArrayList<String>();
        for (String other_element_value_element : other_element_value) {
          __this__multipleChoices_copy_value.add(other_element_value_element);
        }

        __this__multipleChoices.put(__this__multipleChoices_copy_key, __this__multipleChoices_copy_value);
      }
      this.multipleChoices = __this__multipleChoices;
    }
    if (other.isSetComments()) {
      this.comments = other.comments;
    }
  }

  public CookReceivedItem deepCopy() {
    return new CookReceivedItem(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.singleChoices = null;
    this.multipleChoices = null;
    this.comments = null;
  }

  public String getName() {
    return this.name;
  }

  public CookReceivedItem setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getSingleChoicesSize() {
    return (this.singleChoices == null) ? 0 : this.singleChoices.size();
  }

  public void putToSingleChoices(String key, String val) {
    if (this.singleChoices == null) {
      this.singleChoices = new HashMap<String,String>();
    }
    this.singleChoices.put(key, val);
  }

  public Map<String,String> getSingleChoices() {
    return this.singleChoices;
  }

  public CookReceivedItem setSingleChoices(Map<String,String> singleChoices) {
    this.singleChoices = singleChoices;
    return this;
  }

  public void unsetSingleChoices() {
    this.singleChoices = null;
  }

  /** Returns true if field singleChoices is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleChoices() {
    return this.singleChoices != null;
  }

  public void setSingleChoicesIsSet(boolean value) {
    if (!value) {
      this.singleChoices = null;
    }
  }

  public int getMultipleChoicesSize() {
    return (this.multipleChoices == null) ? 0 : this.multipleChoices.size();
  }

  public void putToMultipleChoices(String key, List<String> val) {
    if (this.multipleChoices == null) {
      this.multipleChoices = new HashMap<String,List<String>>();
    }
    this.multipleChoices.put(key, val);
  }

  public Map<String,List<String>> getMultipleChoices() {
    return this.multipleChoices;
  }

  public CookReceivedItem setMultipleChoices(Map<String,List<String>> multipleChoices) {
    this.multipleChoices = multipleChoices;
    return this;
  }

  public void unsetMultipleChoices() {
    this.multipleChoices = null;
  }

  /** Returns true if field multipleChoices is set (has been assigned a value) and false otherwise */
  public boolean isSetMultipleChoices() {
    return this.multipleChoices != null;
  }

  public void setMultipleChoicesIsSet(boolean value) {
    if (!value) {
      this.multipleChoices = null;
    }
  }

  public String getComments() {
    return this.comments;
  }

  public CookReceivedItem setComments(String comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SINGLE_CHOICES:
      if (value == null) {
        unsetSingleChoices();
      } else {
        setSingleChoices((Map<String,String>)value);
      }
      break;

    case MULTIPLE_CHOICES:
      if (value == null) {
        unsetMultipleChoices();
      } else {
        setMultipleChoices((Map<String,List<String>>)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SINGLE_CHOICES:
      return getSingleChoices();

    case MULTIPLE_CHOICES:
      return getMultipleChoices();

    case COMMENTS:
      return getComments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SINGLE_CHOICES:
      return isSetSingleChoices();
    case MULTIPLE_CHOICES:
      return isSetMultipleChoices();
    case COMMENTS:
      return isSetComments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CookReceivedItem)
      return this.equals((CookReceivedItem)that);
    return false;
  }

  public boolean equals(CookReceivedItem that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_singleChoices = true && this.isSetSingleChoices();
    boolean that_present_singleChoices = true && that.isSetSingleChoices();
    if (this_present_singleChoices || that_present_singleChoices) {
      if (!(this_present_singleChoices && that_present_singleChoices))
        return false;
      if (!this.singleChoices.equals(that.singleChoices))
        return false;
    }

    boolean this_present_multipleChoices = true && this.isSetMultipleChoices();
    boolean that_present_multipleChoices = true && that.isSetMultipleChoices();
    if (this_present_multipleChoices || that_present_multipleChoices) {
      if (!(this_present_multipleChoices && that_present_multipleChoices))
        return false;
      if (!this.multipleChoices.equals(that.multipleChoices))
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_singleChoices = true && (isSetSingleChoices());
    builder.append(present_singleChoices);
    if (present_singleChoices)
      builder.append(singleChoices);

    boolean present_multipleChoices = true && (isSetMultipleChoices());
    builder.append(present_multipleChoices);
    if (present_multipleChoices)
      builder.append(multipleChoices);

    boolean present_comments = true && (isSetComments());
    builder.append(present_comments);
    if (present_comments)
      builder.append(comments);

    return builder.toHashCode();
  }

  public int compareTo(CookReceivedItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CookReceivedItem typedOther = (CookReceivedItem)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleChoices()).compareTo(typedOther.isSetSingleChoices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleChoices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleChoices, typedOther.singleChoices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultipleChoices()).compareTo(typedOther.isSetMultipleChoices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultipleChoices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multipleChoices, typedOther.multipleChoices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComments()).compareTo(typedOther.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, typedOther.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SINGLE_CHOICES
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
              this.singleChoices = new HashMap<String,String>(2*_map32.size);
              for (int _i33 = 0; _i33 < _map32.size; ++_i33)
              {
                String _key34; // required
                String _val35; // required
                _key34 = iprot.readString();
                _val35 = iprot.readString();
                this.singleChoices.put(_key34, _val35);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MULTIPLE_CHOICES
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
              this.multipleChoices = new HashMap<String,List<String>>(2*_map36.size);
              for (int _i37 = 0; _i37 < _map36.size; ++_i37)
              {
                String _key38; // required
                List<String> _val39; // required
                _key38 = iprot.readString();
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  _val39 = new ArrayList<String>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    String _elem42; // required
                    _elem42 = iprot.readString();
                    _val39.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                this.multipleChoices.put(_key38, _val39);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COMMENTS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.comments = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.singleChoices != null) {
      oprot.writeFieldBegin(SINGLE_CHOICES_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.singleChoices.size()));
        for (Map.Entry<String, String> _iter43 : this.singleChoices.entrySet())
        {
          oprot.writeString(_iter43.getKey());
          oprot.writeString(_iter43.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.multipleChoices != null) {
      oprot.writeFieldBegin(MULTIPLE_CHOICES_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, this.multipleChoices.size()));
        for (Map.Entry<String, List<String>> _iter44 : this.multipleChoices.entrySet())
        {
          oprot.writeString(_iter44.getKey());
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter44.getValue().size()));
            for (String _iter45 : _iter44.getValue())
            {
              oprot.writeString(_iter45);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.comments != null) {
      oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
      oprot.writeString(this.comments);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CookReceivedItem(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleChoices:");
    if (this.singleChoices == null) {
      sb.append("null");
    } else {
      sb.append(this.singleChoices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("multipleChoices:");
    if (this.multipleChoices == null) {
      sb.append("null");
    } else {
      sb.append(this.multipleChoices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comments:");
    if (this.comments == null) {
      sb.append("null");
    } else {
      sb.append(this.comments);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (singleChoices == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'singleChoices' was not present! Struct: " + toString());
    }
    if (multipleChoices == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'multipleChoices' was not present! Struct: " + toString());
    }
    if (comments == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'comments' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

