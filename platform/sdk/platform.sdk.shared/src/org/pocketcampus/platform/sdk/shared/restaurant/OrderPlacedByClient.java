/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.platform.sdk.shared.restaurant;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrderPlacedByClient implements org.apache.thrift.TBase<OrderPlacedByClient, OrderPlacedByClient._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderPlacedByClient");

  private static final org.apache.thrift.protocol.TField CHOSEN_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("chosenItems", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField EXPECTED_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField HOW_WILL_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("howWillPay", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PICK_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("pickUp", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tableId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField PHONE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)12);

  public List<ChosenMenuItem> chosenItems; // required
  public double expectedPrice; // required
  public long userId; // required
  /**
   * 
   * @see PaymentMethod
   */
  public PaymentMethod howWillPay; // required
  public boolean pickUp; // required
  public String address; // required
  public String phoneNumber; // required
  public long timestamp; // required
  public long tableId; // required
  public String phoneId; // required
  public long orderId; // required
  public String username; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHOSEN_ITEMS((short)1, "chosenItems"),
    EXPECTED_PRICE((short)2, "expectedPrice"),
    USER_ID((short)3, "userId"),
    /**
     * 
     * @see PaymentMethod
     */
    HOW_WILL_PAY((short)4, "howWillPay"),
    PICK_UP((short)5, "pickUp"),
    ADDRESS((short)6, "address"),
    PHONE_NUMBER((short)7, "phoneNumber"),
    TIMESTAMP((short)8, "timestamp"),
    TABLE_ID((short)9, "tableId"),
    PHONE_ID((short)10, "phoneId"),
    ORDER_ID((short)11, "orderId"),
    USERNAME((short)12, "username");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHOSEN_ITEMS
          return CHOSEN_ITEMS;
        case 2: // EXPECTED_PRICE
          return EXPECTED_PRICE;
        case 3: // USER_ID
          return USER_ID;
        case 4: // HOW_WILL_PAY
          return HOW_WILL_PAY;
        case 5: // PICK_UP
          return PICK_UP;
        case 6: // ADDRESS
          return ADDRESS;
        case 7: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 8: // TIMESTAMP
          return TIMESTAMP;
        case 9: // TABLE_ID
          return TABLE_ID;
        case 10: // PHONE_ID
          return PHONE_ID;
        case 11: // ORDER_ID
          return ORDER_ID;
        case 12: // USERNAME
          return USERNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPECTEDPRICE_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __PICKUP_ISSET_ID = 2;
  private static final int __TIMESTAMP_ISSET_ID = 3;
  private static final int __TABLEID_ISSET_ID = 4;
  private static final int __ORDERID_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHOSEN_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("chosenItems", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChosenMenuItem.class))));
    tmpMap.put(_Fields.EXPECTED_PRICE, new org.apache.thrift.meta_data.FieldMetaData("expectedPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.HOW_WILL_PAY, new org.apache.thrift.meta_data.FieldMetaData("howWillPay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaymentMethod.class)));
    tmpMap.put(_Fields.PICK_UP, new org.apache.thrift.meta_data.FieldMetaData("pickUp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tableId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.PHONE_ID, new org.apache.thrift.meta_data.FieldMetaData("phoneId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "PushNotificationPhoneId")));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderPlacedByClient.class, metaDataMap);
  }

  public OrderPlacedByClient() {
  }

  public OrderPlacedByClient(
    List<ChosenMenuItem> chosenItems,
    double expectedPrice,
    long userId,
    PaymentMethod howWillPay,
    boolean pickUp,
    long timestamp,
    String phoneId,
    long orderId,
    String username)
  {
    this();
    this.chosenItems = chosenItems;
    this.expectedPrice = expectedPrice;
    setExpectedPriceIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.howWillPay = howWillPay;
    this.pickUp = pickUp;
    setPickUpIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.phoneId = phoneId;
    this.orderId = orderId;
    setOrderIdIsSet(true);
    this.username = username;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderPlacedByClient(OrderPlacedByClient other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetChosenItems()) {
      List<ChosenMenuItem> __this__chosenItems = new ArrayList<ChosenMenuItem>();
      for (ChosenMenuItem other_element : other.chosenItems) {
        __this__chosenItems.add(new ChosenMenuItem(other_element));
      }
      this.chosenItems = __this__chosenItems;
    }
    this.expectedPrice = other.expectedPrice;
    this.userId = other.userId;
    if (other.isSetHowWillPay()) {
      this.howWillPay = other.howWillPay;
    }
    this.pickUp = other.pickUp;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    this.timestamp = other.timestamp;
    this.tableId = other.tableId;
    if (other.isSetPhoneId()) {
      this.phoneId = other.phoneId;
    }
    this.orderId = other.orderId;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
  }

  public OrderPlacedByClient deepCopy() {
    return new OrderPlacedByClient(this);
  }

  @Override
  public void clear() {
    this.chosenItems = null;
    setExpectedPriceIsSet(false);
    this.expectedPrice = 0.0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.howWillPay = null;
    setPickUpIsSet(false);
    this.pickUp = false;
    this.address = null;
    this.phoneNumber = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setTableIdIsSet(false);
    this.tableId = 0;
    this.phoneId = null;
    setOrderIdIsSet(false);
    this.orderId = 0;
    this.username = null;
  }

  public int getChosenItemsSize() {
    return (this.chosenItems == null) ? 0 : this.chosenItems.size();
  }

  public java.util.Iterator<ChosenMenuItem> getChosenItemsIterator() {
    return (this.chosenItems == null) ? null : this.chosenItems.iterator();
  }

  public void addToChosenItems(ChosenMenuItem elem) {
    if (this.chosenItems == null) {
      this.chosenItems = new ArrayList<ChosenMenuItem>();
    }
    this.chosenItems.add(elem);
  }

  public List<ChosenMenuItem> getChosenItems() {
    return this.chosenItems;
  }

  public OrderPlacedByClient setChosenItems(List<ChosenMenuItem> chosenItems) {
    this.chosenItems = chosenItems;
    return this;
  }

  public void unsetChosenItems() {
    this.chosenItems = null;
  }

  /** Returns true if field chosenItems is set (has been assigned a value) and false otherwise */
  public boolean isSetChosenItems() {
    return this.chosenItems != null;
  }

  public void setChosenItemsIsSet(boolean value) {
    if (!value) {
      this.chosenItems = null;
    }
  }

  public double getExpectedPrice() {
    return this.expectedPrice;
  }

  public OrderPlacedByClient setExpectedPrice(double expectedPrice) {
    this.expectedPrice = expectedPrice;
    setExpectedPriceIsSet(true);
    return this;
  }

  public void unsetExpectedPrice() {
    __isset_bit_vector.clear(__EXPECTEDPRICE_ISSET_ID);
  }

  /** Returns true if field expectedPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedPrice() {
    return __isset_bit_vector.get(__EXPECTEDPRICE_ISSET_ID);
  }

  public void setExpectedPriceIsSet(boolean value) {
    __isset_bit_vector.set(__EXPECTEDPRICE_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public OrderPlacedByClient setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  /**
   * 
   * @see PaymentMethod
   */
  public PaymentMethod getHowWillPay() {
    return this.howWillPay;
  }

  /**
   * 
   * @see PaymentMethod
   */
  public OrderPlacedByClient setHowWillPay(PaymentMethod howWillPay) {
    this.howWillPay = howWillPay;
    return this;
  }

  public void unsetHowWillPay() {
    this.howWillPay = null;
  }

  /** Returns true if field howWillPay is set (has been assigned a value) and false otherwise */
  public boolean isSetHowWillPay() {
    return this.howWillPay != null;
  }

  public void setHowWillPayIsSet(boolean value) {
    if (!value) {
      this.howWillPay = null;
    }
  }

  public boolean isPickUp() {
    return this.pickUp;
  }

  public OrderPlacedByClient setPickUp(boolean pickUp) {
    this.pickUp = pickUp;
    setPickUpIsSet(true);
    return this;
  }

  public void unsetPickUp() {
    __isset_bit_vector.clear(__PICKUP_ISSET_ID);
  }

  /** Returns true if field pickUp is set (has been assigned a value) and false otherwise */
  public boolean isSetPickUp() {
    return __isset_bit_vector.get(__PICKUP_ISSET_ID);
  }

  public void setPickUpIsSet(boolean value) {
    __isset_bit_vector.set(__PICKUP_ISSET_ID, value);
  }

  public String getAddress() {
    return this.address;
  }

  public OrderPlacedByClient setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getPhoneNumber() {
    return this.phoneNumber;
  }

  public OrderPlacedByClient setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public OrderPlacedByClient setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public long getTableId() {
    return this.tableId;
  }

  public OrderPlacedByClient setTableId(long tableId) {
    this.tableId = tableId;
    setTableIdIsSet(true);
    return this;
  }

  public void unsetTableId() {
    __isset_bit_vector.clear(__TABLEID_ISSET_ID);
  }

  /** Returns true if field tableId is set (has been assigned a value) and false otherwise */
  public boolean isSetTableId() {
    return __isset_bit_vector.get(__TABLEID_ISSET_ID);
  }

  public void setTableIdIsSet(boolean value) {
    __isset_bit_vector.set(__TABLEID_ISSET_ID, value);
  }

  public String getPhoneId() {
    return this.phoneId;
  }

  public OrderPlacedByClient setPhoneId(String phoneId) {
    this.phoneId = phoneId;
    return this;
  }

  public void unsetPhoneId() {
    this.phoneId = null;
  }

  /** Returns true if field phoneId is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneId() {
    return this.phoneId != null;
  }

  public void setPhoneIdIsSet(boolean value) {
    if (!value) {
      this.phoneId = null;
    }
  }

  public long getOrderId() {
    return this.orderId;
  }

  public OrderPlacedByClient setOrderId(long orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bit_vector.clear(__ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return __isset_bit_vector.get(__ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bit_vector.set(__ORDERID_ISSET_ID, value);
  }

  public String getUsername() {
    return this.username;
  }

  public OrderPlacedByClient setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHOSEN_ITEMS:
      if (value == null) {
        unsetChosenItems();
      } else {
        setChosenItems((List<ChosenMenuItem>)value);
      }
      break;

    case EXPECTED_PRICE:
      if (value == null) {
        unsetExpectedPrice();
      } else {
        setExpectedPrice((Double)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case HOW_WILL_PAY:
      if (value == null) {
        unsetHowWillPay();
      } else {
        setHowWillPay((PaymentMethod)value);
      }
      break;

    case PICK_UP:
      if (value == null) {
        unsetPickUp();
      } else {
        setPickUp((Boolean)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTableId();
      } else {
        setTableId((Long)value);
      }
      break;

    case PHONE_ID:
      if (value == null) {
        unsetPhoneId();
      } else {
        setPhoneId((String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Long)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHOSEN_ITEMS:
      return getChosenItems();

    case EXPECTED_PRICE:
      return Double.valueOf(getExpectedPrice());

    case USER_ID:
      return Long.valueOf(getUserId());

    case HOW_WILL_PAY:
      return getHowWillPay();

    case PICK_UP:
      return Boolean.valueOf(isPickUp());

    case ADDRESS:
      return getAddress();

    case PHONE_NUMBER:
      return getPhoneNumber();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case TABLE_ID:
      return Long.valueOf(getTableId());

    case PHONE_ID:
      return getPhoneId();

    case ORDER_ID:
      return Long.valueOf(getOrderId());

    case USERNAME:
      return getUsername();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHOSEN_ITEMS:
      return isSetChosenItems();
    case EXPECTED_PRICE:
      return isSetExpectedPrice();
    case USER_ID:
      return isSetUserId();
    case HOW_WILL_PAY:
      return isSetHowWillPay();
    case PICK_UP:
      return isSetPickUp();
    case ADDRESS:
      return isSetAddress();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case TIMESTAMP:
      return isSetTimestamp();
    case TABLE_ID:
      return isSetTableId();
    case PHONE_ID:
      return isSetPhoneId();
    case ORDER_ID:
      return isSetOrderId();
    case USERNAME:
      return isSetUsername();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderPlacedByClient)
      return this.equals((OrderPlacedByClient)that);
    return false;
  }

  public boolean equals(OrderPlacedByClient that) {
    if (that == null)
      return false;

    boolean this_present_chosenItems = true && this.isSetChosenItems();
    boolean that_present_chosenItems = true && that.isSetChosenItems();
    if (this_present_chosenItems || that_present_chosenItems) {
      if (!(this_present_chosenItems && that_present_chosenItems))
        return false;
      if (!this.chosenItems.equals(that.chosenItems))
        return false;
    }

    boolean this_present_expectedPrice = true;
    boolean that_present_expectedPrice = true;
    if (this_present_expectedPrice || that_present_expectedPrice) {
      if (!(this_present_expectedPrice && that_present_expectedPrice))
        return false;
      if (this.expectedPrice != that.expectedPrice)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_howWillPay = true && this.isSetHowWillPay();
    boolean that_present_howWillPay = true && that.isSetHowWillPay();
    if (this_present_howWillPay || that_present_howWillPay) {
      if (!(this_present_howWillPay && that_present_howWillPay))
        return false;
      if (!this.howWillPay.equals(that.howWillPay))
        return false;
    }

    boolean this_present_pickUp = true;
    boolean that_present_pickUp = true;
    if (this_present_pickUp || that_present_pickUp) {
      if (!(this_present_pickUp && that_present_pickUp))
        return false;
      if (this.pickUp != that.pickUp)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_tableId = true && this.isSetTableId();
    boolean that_present_tableId = true && that.isSetTableId();
    if (this_present_tableId || that_present_tableId) {
      if (!(this_present_tableId && that_present_tableId))
        return false;
      if (this.tableId != that.tableId)
        return false;
    }

    boolean this_present_phoneId = true && this.isSetPhoneId();
    boolean that_present_phoneId = true && that.isSetPhoneId();
    if (this_present_phoneId || that_present_phoneId) {
      if (!(this_present_phoneId && that_present_phoneId))
        return false;
      if (!this.phoneId.equals(that.phoneId))
        return false;
    }

    boolean this_present_orderId = true;
    boolean that_present_orderId = true;
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_chosenItems = true && (isSetChosenItems());
    builder.append(present_chosenItems);
    if (present_chosenItems)
      builder.append(chosenItems);

    boolean present_expectedPrice = true;
    builder.append(present_expectedPrice);
    if (present_expectedPrice)
      builder.append(expectedPrice);

    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);

    boolean present_howWillPay = true && (isSetHowWillPay());
    builder.append(present_howWillPay);
    if (present_howWillPay)
      builder.append(howWillPay.getValue());

    boolean present_pickUp = true;
    builder.append(present_pickUp);
    if (present_pickUp)
      builder.append(pickUp);

    boolean present_address = true && (isSetAddress());
    builder.append(present_address);
    if (present_address)
      builder.append(address);

    boolean present_phoneNumber = true && (isSetPhoneNumber());
    builder.append(present_phoneNumber);
    if (present_phoneNumber)
      builder.append(phoneNumber);

    boolean present_timestamp = true;
    builder.append(present_timestamp);
    if (present_timestamp)
      builder.append(timestamp);

    boolean present_tableId = true && (isSetTableId());
    builder.append(present_tableId);
    if (present_tableId)
      builder.append(tableId);

    boolean present_phoneId = true && (isSetPhoneId());
    builder.append(present_phoneId);
    if (present_phoneId)
      builder.append(phoneId);

    boolean present_orderId = true;
    builder.append(present_orderId);
    if (present_orderId)
      builder.append(orderId);

    boolean present_username = true && (isSetUsername());
    builder.append(present_username);
    if (present_username)
      builder.append(username);

    return builder.toHashCode();
  }

  public int compareTo(OrderPlacedByClient other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OrderPlacedByClient typedOther = (OrderPlacedByClient)other;

    lastComparison = Boolean.valueOf(isSetChosenItems()).compareTo(typedOther.isSetChosenItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChosenItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chosenItems, typedOther.chosenItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpectedPrice()).compareTo(typedOther.isSetExpectedPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedPrice, typedOther.expectedPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHowWillPay()).compareTo(typedOther.isSetHowWillPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHowWillPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.howWillPay, typedOther.howWillPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPickUp()).compareTo(typedOther.isSetPickUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPickUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pickUp, typedOther.pickUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNumber()).compareTo(typedOther.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, typedOther.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableId()).compareTo(typedOther.isSetTableId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableId, typedOther.tableId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneId()).compareTo(typedOther.isSetPhoneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneId, typedOther.phoneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CHOSEN_ITEMS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
              this.chosenItems = new ArrayList<ChosenMenuItem>(_list24.size);
              for (int _i25 = 0; _i25 < _list24.size; ++_i25)
              {
                ChosenMenuItem _elem26; // required
                _elem26 = new ChosenMenuItem();
                _elem26.read(iprot);
                this.chosenItems.add(_elem26);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // EXPECTED_PRICE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.expectedPrice = iprot.readDouble();
            setExpectedPriceIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // USER_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.userId = iprot.readI64();
            setUserIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // HOW_WILL_PAY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.howWillPay = PaymentMethod.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PICK_UP
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.pickUp = iprot.readBool();
            setPickUpIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ADDRESS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.address = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PHONE_NUMBER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.phoneNumber = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // TIMESTAMP
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // TABLE_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.tableId = iprot.readI64();
            setTableIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PHONE_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.phoneId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // ORDER_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.orderId = iprot.readI64();
            setOrderIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // USERNAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.username = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetExpectedPrice()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'expectedPrice' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetUserId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetPickUp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pickUp' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetTimestamp()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetOrderId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderId' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.chosenItems != null) {
      oprot.writeFieldBegin(CHOSEN_ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.chosenItems.size()));
        for (ChosenMenuItem _iter27 : this.chosenItems)
        {
          _iter27.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EXPECTED_PRICE_FIELD_DESC);
    oprot.writeDouble(this.expectedPrice);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI64(this.userId);
    oprot.writeFieldEnd();
    if (this.howWillPay != null) {
      oprot.writeFieldBegin(HOW_WILL_PAY_FIELD_DESC);
      oprot.writeI32(this.howWillPay.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PICK_UP_FIELD_DESC);
    oprot.writeBool(this.pickUp);
    oprot.writeFieldEnd();
    if (this.address != null) {
      if (isSetAddress()) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(this.address);
        oprot.writeFieldEnd();
      }
    }
    if (this.phoneNumber != null) {
      if (isSetPhoneNumber()) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(this.phoneNumber);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.timestamp);
    oprot.writeFieldEnd();
    if (isSetTableId()) {
      oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
      oprot.writeI64(this.tableId);
      oprot.writeFieldEnd();
    }
    if (this.phoneId != null) {
      oprot.writeFieldBegin(PHONE_ID_FIELD_DESC);
      oprot.writeString(this.phoneId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
    oprot.writeI64(this.orderId);
    oprot.writeFieldEnd();
    if (this.username != null) {
      oprot.writeFieldBegin(USERNAME_FIELD_DESC);
      oprot.writeString(this.username);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderPlacedByClient(");
    boolean first = true;

    sb.append("chosenItems:");
    if (this.chosenItems == null) {
      sb.append("null");
    } else {
      sb.append(this.chosenItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expectedPrice:");
    sb.append(this.expectedPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("howWillPay:");
    if (this.howWillPay == null) {
      sb.append("null");
    } else {
      sb.append(this.howWillPay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pickUp:");
    sb.append(this.pickUp);
    first = false;
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetPhoneNumber()) {
      if (!first) sb.append(", ");
      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (isSetTableId()) {
      if (!first) sb.append(", ");
      sb.append("tableId:");
      sb.append(this.tableId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("phoneId:");
    if (this.phoneId == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    sb.append(this.orderId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (chosenItems == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'chosenItems' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'expectedPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    if (howWillPay == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'howWillPay' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pickUp' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    if (phoneId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phoneId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'orderId' because it's a primitive and you chose the non-beans generator.
    if (username == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

