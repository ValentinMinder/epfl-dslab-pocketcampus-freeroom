/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.bikes.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BikeEmplacement implements org.apache.thrift.TBase<BikeEmplacement, BikeEmplacement._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BikeEmplacement");

  private static final org.apache.thrift.protocol.TField EMPTY_FIELD_DESC = new org.apache.thrift.protocol.TField("empty", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AVAILABLE_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("availableQuantity", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GEO_LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("geoLat", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField GEO_LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("geoLng", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField DESIGNATION_FIELD_DESC = new org.apache.thrift.protocol.TField("designation", org.apache.thrift.protocol.TType.STRING, (short)5);

  public int empty; // required
  public int availableQuantity; // required
  public double geoLat; // required
  public double geoLng; // required
  public String designation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMPTY((short)1, "empty"),
    AVAILABLE_QUANTITY((short)2, "availableQuantity"),
    GEO_LAT((short)3, "geoLat"),
    GEO_LNG((short)4, "geoLng"),
    DESIGNATION((short)5, "designation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMPTY
          return EMPTY;
        case 2: // AVAILABLE_QUANTITY
          return AVAILABLE_QUANTITY;
        case 3: // GEO_LAT
          return GEO_LAT;
        case 4: // GEO_LNG
          return GEO_LNG;
        case 5: // DESIGNATION
          return DESIGNATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EMPTY_ISSET_ID = 0;
  private static final int __AVAILABLEQUANTITY_ISSET_ID = 1;
  private static final int __GEOLAT_ISSET_ID = 2;
  private static final int __GEOLNG_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMPTY, new org.apache.thrift.meta_data.FieldMetaData("empty", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.AVAILABLE_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("availableQuantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.GEO_LAT, new org.apache.thrift.meta_data.FieldMetaData("geoLat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GEO_LNG, new org.apache.thrift.meta_data.FieldMetaData("geoLng", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DESIGNATION, new org.apache.thrift.meta_data.FieldMetaData("designation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BikeEmplacement.class, metaDataMap);
  }

  public BikeEmplacement() {
  }

  public BikeEmplacement(
    int empty,
    int availableQuantity,
    double geoLat,
    double geoLng,
    String designation)
  {
    this();
    this.empty = empty;
    setEmptyIsSet(true);
    this.availableQuantity = availableQuantity;
    setAvailableQuantityIsSet(true);
    this.geoLat = geoLat;
    setGeoLatIsSet(true);
    this.geoLng = geoLng;
    setGeoLngIsSet(true);
    this.designation = designation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BikeEmplacement(BikeEmplacement other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.empty = other.empty;
    this.availableQuantity = other.availableQuantity;
    this.geoLat = other.geoLat;
    this.geoLng = other.geoLng;
    if (other.isSetDesignation()) {
      this.designation = other.designation;
    }
  }

  public BikeEmplacement deepCopy() {
    return new BikeEmplacement(this);
  }

  @Override
  public void clear() {
    setEmptyIsSet(false);
    this.empty = 0;
    setAvailableQuantityIsSet(false);
    this.availableQuantity = 0;
    setGeoLatIsSet(false);
    this.geoLat = 0.0;
    setGeoLngIsSet(false);
    this.geoLng = 0.0;
    this.designation = null;
  }

  public int getEmpty() {
    return this.empty;
  }

  public BikeEmplacement setEmpty(int empty) {
    this.empty = empty;
    setEmptyIsSet(true);
    return this;
  }

  public void unsetEmpty() {
    __isset_bit_vector.clear(__EMPTY_ISSET_ID);
  }

  /** Returns true if field empty is set (has been assigned a value) and false otherwise */
  public boolean isSetEmpty() {
    return __isset_bit_vector.get(__EMPTY_ISSET_ID);
  }

  public void setEmptyIsSet(boolean value) {
    __isset_bit_vector.set(__EMPTY_ISSET_ID, value);
  }

  public int getAvailableQuantity() {
    return this.availableQuantity;
  }

  public BikeEmplacement setAvailableQuantity(int availableQuantity) {
    this.availableQuantity = availableQuantity;
    setAvailableQuantityIsSet(true);
    return this;
  }

  public void unsetAvailableQuantity() {
    __isset_bit_vector.clear(__AVAILABLEQUANTITY_ISSET_ID);
  }

  /** Returns true if field availableQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableQuantity() {
    return __isset_bit_vector.get(__AVAILABLEQUANTITY_ISSET_ID);
  }

  public void setAvailableQuantityIsSet(boolean value) {
    __isset_bit_vector.set(__AVAILABLEQUANTITY_ISSET_ID, value);
  }

  public double getGeoLat() {
    return this.geoLat;
  }

  public BikeEmplacement setGeoLat(double geoLat) {
    this.geoLat = geoLat;
    setGeoLatIsSet(true);
    return this;
  }

  public void unsetGeoLat() {
    __isset_bit_vector.clear(__GEOLAT_ISSET_ID);
  }

  /** Returns true if field geoLat is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoLat() {
    return __isset_bit_vector.get(__GEOLAT_ISSET_ID);
  }

  public void setGeoLatIsSet(boolean value) {
    __isset_bit_vector.set(__GEOLAT_ISSET_ID, value);
  }

  public double getGeoLng() {
    return this.geoLng;
  }

  public BikeEmplacement setGeoLng(double geoLng) {
    this.geoLng = geoLng;
    setGeoLngIsSet(true);
    return this;
  }

  public void unsetGeoLng() {
    __isset_bit_vector.clear(__GEOLNG_ISSET_ID);
  }

  /** Returns true if field geoLng is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoLng() {
    return __isset_bit_vector.get(__GEOLNG_ISSET_ID);
  }

  public void setGeoLngIsSet(boolean value) {
    __isset_bit_vector.set(__GEOLNG_ISSET_ID, value);
  }

  public String getDesignation() {
    return this.designation;
  }

  public BikeEmplacement setDesignation(String designation) {
    this.designation = designation;
    return this;
  }

  public void unsetDesignation() {
    this.designation = null;
  }

  /** Returns true if field designation is set (has been assigned a value) and false otherwise */
  public boolean isSetDesignation() {
    return this.designation != null;
  }

  public void setDesignationIsSet(boolean value) {
    if (!value) {
      this.designation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EMPTY:
      if (value == null) {
        unsetEmpty();
      } else {
        setEmpty((Integer)value);
      }
      break;

    case AVAILABLE_QUANTITY:
      if (value == null) {
        unsetAvailableQuantity();
      } else {
        setAvailableQuantity((Integer)value);
      }
      break;

    case GEO_LAT:
      if (value == null) {
        unsetGeoLat();
      } else {
        setGeoLat((Double)value);
      }
      break;

    case GEO_LNG:
      if (value == null) {
        unsetGeoLng();
      } else {
        setGeoLng((Double)value);
      }
      break;

    case DESIGNATION:
      if (value == null) {
        unsetDesignation();
      } else {
        setDesignation((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EMPTY:
      return Integer.valueOf(getEmpty());

    case AVAILABLE_QUANTITY:
      return Integer.valueOf(getAvailableQuantity());

    case GEO_LAT:
      return Double.valueOf(getGeoLat());

    case GEO_LNG:
      return Double.valueOf(getGeoLng());

    case DESIGNATION:
      return getDesignation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EMPTY:
      return isSetEmpty();
    case AVAILABLE_QUANTITY:
      return isSetAvailableQuantity();
    case GEO_LAT:
      return isSetGeoLat();
    case GEO_LNG:
      return isSetGeoLng();
    case DESIGNATION:
      return isSetDesignation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BikeEmplacement)
      return this.equals((BikeEmplacement)that);
    return false;
  }

  public boolean equals(BikeEmplacement that) {
    if (that == null)
      return false;

    boolean this_present_empty = true;
    boolean that_present_empty = true;
    if (this_present_empty || that_present_empty) {
      if (!(this_present_empty && that_present_empty))
        return false;
      if (this.empty != that.empty)
        return false;
    }

    boolean this_present_availableQuantity = true;
    boolean that_present_availableQuantity = true;
    if (this_present_availableQuantity || that_present_availableQuantity) {
      if (!(this_present_availableQuantity && that_present_availableQuantity))
        return false;
      if (this.availableQuantity != that.availableQuantity)
        return false;
    }

    boolean this_present_geoLat = true;
    boolean that_present_geoLat = true;
    if (this_present_geoLat || that_present_geoLat) {
      if (!(this_present_geoLat && that_present_geoLat))
        return false;
      if (this.geoLat != that.geoLat)
        return false;
    }

    boolean this_present_geoLng = true;
    boolean that_present_geoLng = true;
    if (this_present_geoLng || that_present_geoLng) {
      if (!(this_present_geoLng && that_present_geoLng))
        return false;
      if (this.geoLng != that.geoLng)
        return false;
    }

    boolean this_present_designation = true && this.isSetDesignation();
    boolean that_present_designation = true && that.isSetDesignation();
    if (this_present_designation || that_present_designation) {
      if (!(this_present_designation && that_present_designation))
        return false;
      if (!this.designation.equals(that.designation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_empty = true;
    builder.append(present_empty);
    if (present_empty)
      builder.append(empty);

    boolean present_availableQuantity = true;
    builder.append(present_availableQuantity);
    if (present_availableQuantity)
      builder.append(availableQuantity);

    boolean present_geoLat = true;
    builder.append(present_geoLat);
    if (present_geoLat)
      builder.append(geoLat);

    boolean present_geoLng = true;
    builder.append(present_geoLng);
    if (present_geoLng)
      builder.append(geoLng);

    boolean present_designation = true && (isSetDesignation());
    builder.append(present_designation);
    if (present_designation)
      builder.append(designation);

    return builder.toHashCode();
  }

  public int compareTo(BikeEmplacement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BikeEmplacement typedOther = (BikeEmplacement)other;

    lastComparison = Boolean.valueOf(isSetEmpty()).compareTo(typedOther.isSetEmpty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmpty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empty, typedOther.empty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableQuantity()).compareTo(typedOther.isSetAvailableQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableQuantity, typedOther.availableQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoLat()).compareTo(typedOther.isSetGeoLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoLat, typedOther.geoLat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoLng()).compareTo(typedOther.isSetGeoLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoLng, typedOther.geoLng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesignation()).compareTo(typedOther.isSetDesignation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesignation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.designation, typedOther.designation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // EMPTY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.empty = iprot.readI32();
            setEmptyIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // AVAILABLE_QUANTITY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.availableQuantity = iprot.readI32();
            setAvailableQuantityIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // GEO_LAT
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.geoLat = iprot.readDouble();
            setGeoLatIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // GEO_LNG
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.geoLng = iprot.readDouble();
            setGeoLngIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DESIGNATION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.designation = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetEmpty()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'empty' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetAvailableQuantity()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'availableQuantity' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetGeoLat()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'geoLat' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetGeoLng()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'geoLng' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(EMPTY_FIELD_DESC);
    oprot.writeI32(this.empty);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(AVAILABLE_QUANTITY_FIELD_DESC);
    oprot.writeI32(this.availableQuantity);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(GEO_LAT_FIELD_DESC);
    oprot.writeDouble(this.geoLat);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(GEO_LNG_FIELD_DESC);
    oprot.writeDouble(this.geoLng);
    oprot.writeFieldEnd();
    if (this.designation != null) {
      oprot.writeFieldBegin(DESIGNATION_FIELD_DESC);
      oprot.writeString(this.designation);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BikeEmplacement(");
    boolean first = true;

    sb.append("empty:");
    sb.append(this.empty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableQuantity:");
    sb.append(this.availableQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("geoLat:");
    sb.append(this.geoLat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("geoLng:");
    sb.append(this.geoLng);
    first = false;
    if (!first) sb.append(", ");
    sb.append("designation:");
    if (this.designation == null) {
      sb.append("null");
    } else {
      sb.append(this.designation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'empty' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'availableQuantity' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'geoLat' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'geoLng' because it's a primitive and you chose the non-beans generator.
    if (designation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'designation' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

