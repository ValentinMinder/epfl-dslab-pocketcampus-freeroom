/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.pocketcampus.plugin.camipro.shared;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Transaction implements org.apache.thrift.TBase<Transaction, Transaction._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Transaction");

  private static final org.apache.thrift.protocol.TField I_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("iDate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField I_OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("iOperation", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField I_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("iPlace", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField I_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("iAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  public String iDate; // required
  public String iOperation; // required
  public String iPlace; // required
  public double iAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_DATE((short)1, "iDate"),
    I_OPERATION((short)2, "iOperation"),
    I_PLACE((short)3, "iPlace"),
    I_AMOUNT((short)4, "iAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_DATE
          return I_DATE;
        case 2: // I_OPERATION
          return I_OPERATION;
        case 3: // I_PLACE
          return I_PLACE;
        case 4: // I_AMOUNT
          return I_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IAMOUNT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_DATE, new org.apache.thrift.meta_data.FieldMetaData("iDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_OPERATION, new org.apache.thrift.meta_data.FieldMetaData("iOperation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_PLACE, new org.apache.thrift.meta_data.FieldMetaData("iPlace", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("iAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Transaction.class, metaDataMap);
  }

  public Transaction() {
  }

  public Transaction(
    String iDate,
    String iOperation,
    String iPlace,
    double iAmount)
  {
    this();
    this.iDate = iDate;
    this.iOperation = iOperation;
    this.iPlace = iPlace;
    this.iAmount = iAmount;
    setIAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Transaction(Transaction other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetIDate()) {
      this.iDate = other.iDate;
    }
    if (other.isSetIOperation()) {
      this.iOperation = other.iOperation;
    }
    if (other.isSetIPlace()) {
      this.iPlace = other.iPlace;
    }
    this.iAmount = other.iAmount;
  }

  public Transaction deepCopy() {
    return new Transaction(this);
  }

  @Override
  public void clear() {
    this.iDate = null;
    this.iOperation = null;
    this.iPlace = null;
    setIAmountIsSet(false);
    this.iAmount = 0.0;
  }

  public String getIDate() {
    return this.iDate;
  }

  public Transaction setIDate(String iDate) {
    this.iDate = iDate;
    return this;
  }

  public void unsetIDate() {
    this.iDate = null;
  }

  /** Returns true if field iDate is set (has been assigned a value) and false otherwise */
  public boolean isSetIDate() {
    return this.iDate != null;
  }

  public void setIDateIsSet(boolean value) {
    if (!value) {
      this.iDate = null;
    }
  }

  public String getIOperation() {
    return this.iOperation;
  }

  public Transaction setIOperation(String iOperation) {
    this.iOperation = iOperation;
    return this;
  }

  public void unsetIOperation() {
    this.iOperation = null;
  }

  /** Returns true if field iOperation is set (has been assigned a value) and false otherwise */
  public boolean isSetIOperation() {
    return this.iOperation != null;
  }

  public void setIOperationIsSet(boolean value) {
    if (!value) {
      this.iOperation = null;
    }
  }

  public String getIPlace() {
    return this.iPlace;
  }

  public Transaction setIPlace(String iPlace) {
    this.iPlace = iPlace;
    return this;
  }

  public void unsetIPlace() {
    this.iPlace = null;
  }

  /** Returns true if field iPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetIPlace() {
    return this.iPlace != null;
  }

  public void setIPlaceIsSet(boolean value) {
    if (!value) {
      this.iPlace = null;
    }
  }

  public double getIAmount() {
    return this.iAmount;
  }

  public Transaction setIAmount(double iAmount) {
    this.iAmount = iAmount;
    setIAmountIsSet(true);
    return this;
  }

  public void unsetIAmount() {
    __isset_bit_vector.clear(__IAMOUNT_ISSET_ID);
  }

  /** Returns true if field iAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetIAmount() {
    return __isset_bit_vector.get(__IAMOUNT_ISSET_ID);
  }

  public void setIAmountIsSet(boolean value) {
    __isset_bit_vector.set(__IAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_DATE:
      if (value == null) {
        unsetIDate();
      } else {
        setIDate((String)value);
      }
      break;

    case I_OPERATION:
      if (value == null) {
        unsetIOperation();
      } else {
        setIOperation((String)value);
      }
      break;

    case I_PLACE:
      if (value == null) {
        unsetIPlace();
      } else {
        setIPlace((String)value);
      }
      break;

    case I_AMOUNT:
      if (value == null) {
        unsetIAmount();
      } else {
        setIAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_DATE:
      return getIDate();

    case I_OPERATION:
      return getIOperation();

    case I_PLACE:
      return getIPlace();

    case I_AMOUNT:
      return Double.valueOf(getIAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_DATE:
      return isSetIDate();
    case I_OPERATION:
      return isSetIOperation();
    case I_PLACE:
      return isSetIPlace();
    case I_AMOUNT:
      return isSetIAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Transaction)
      return this.equals((Transaction)that);
    return false;
  }

  public boolean equals(Transaction that) {
    if (that == null)
      return false;

    boolean this_present_iDate = true && this.isSetIDate();
    boolean that_present_iDate = true && that.isSetIDate();
    if (this_present_iDate || that_present_iDate) {
      if (!(this_present_iDate && that_present_iDate))
        return false;
      if (!this.iDate.equals(that.iDate))
        return false;
    }

    boolean this_present_iOperation = true && this.isSetIOperation();
    boolean that_present_iOperation = true && that.isSetIOperation();
    if (this_present_iOperation || that_present_iOperation) {
      if (!(this_present_iOperation && that_present_iOperation))
        return false;
      if (!this.iOperation.equals(that.iOperation))
        return false;
    }

    boolean this_present_iPlace = true && this.isSetIPlace();
    boolean that_present_iPlace = true && that.isSetIPlace();
    if (this_present_iPlace || that_present_iPlace) {
      if (!(this_present_iPlace && that_present_iPlace))
        return false;
      if (!this.iPlace.equals(that.iPlace))
        return false;
    }

    boolean this_present_iAmount = true;
    boolean that_present_iAmount = true;
    if (this_present_iAmount || that_present_iAmount) {
      if (!(this_present_iAmount && that_present_iAmount))
        return false;
      if (this.iAmount != that.iAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_iDate = true && (isSetIDate());
    builder.append(present_iDate);
    if (present_iDate)
      builder.append(iDate);

    boolean present_iOperation = true && (isSetIOperation());
    builder.append(present_iOperation);
    if (present_iOperation)
      builder.append(iOperation);

    boolean present_iPlace = true && (isSetIPlace());
    builder.append(present_iPlace);
    if (present_iPlace)
      builder.append(iPlace);

    boolean present_iAmount = true;
    builder.append(present_iAmount);
    if (present_iAmount)
      builder.append(iAmount);

    return builder.toHashCode();
  }

  public int compareTo(Transaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Transaction typedOther = (Transaction)other;

    lastComparison = Boolean.valueOf(isSetIDate()).compareTo(typedOther.isSetIDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iDate, typedOther.iDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIOperation()).compareTo(typedOther.isSetIOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iOperation, typedOther.iOperation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIPlace()).compareTo(typedOther.isSetIPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iPlace, typedOther.iPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIAmount()).compareTo(typedOther.isSetIAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iAmount, typedOther.iAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // I_DATE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.iDate = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // I_OPERATION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.iOperation = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // I_PLACE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.iPlace = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // I_AMOUNT
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.iAmount = iprot.readDouble();
            setIAmountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetIAmount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iAmount' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.iDate != null) {
      oprot.writeFieldBegin(I_DATE_FIELD_DESC);
      oprot.writeString(this.iDate);
      oprot.writeFieldEnd();
    }
    if (this.iOperation != null) {
      oprot.writeFieldBegin(I_OPERATION_FIELD_DESC);
      oprot.writeString(this.iOperation);
      oprot.writeFieldEnd();
    }
    if (this.iPlace != null) {
      oprot.writeFieldBegin(I_PLACE_FIELD_DESC);
      oprot.writeString(this.iPlace);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(I_AMOUNT_FIELD_DESC);
    oprot.writeDouble(this.iAmount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Transaction(");
    boolean first = true;

    sb.append("iDate:");
    if (this.iDate == null) {
      sb.append("null");
    } else {
      sb.append(this.iDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iOperation:");
    if (this.iOperation == null) {
      sb.append("null");
    } else {
      sb.append(this.iOperation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iPlace:");
    if (this.iPlace == null) {
      sb.append("null");
    } else {
      sb.append(this.iPlace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iAmount:");
    sb.append(this.iAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (iDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iDate' was not present! Struct: " + toString());
    }
    if (iOperation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iOperation' was not present! Struct: " + toString());
    }
    if (iPlace == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iPlace' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'iAmount' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

