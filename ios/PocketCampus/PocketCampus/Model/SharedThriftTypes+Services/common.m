/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "common.h"

@implementation TakeoutServerAddress

- (id) initWithServerIP: (NSString *) serverIP port: (integer) port
{
  self = [super init];
  __serverIP = [serverIP retain];
  __serverIP_isset = YES;
  __port = port;
  __port_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serverIP"])
  {
    __serverIP = [[decoder decodeObjectForKey: @"serverIP"] retain];
    __serverIP_isset = YES;
  }
  if ([decoder containsValueForKey: @"port"])
  {
    __port = [decoder decodeInt64ForKey: @"port"];
    __port_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serverIP_isset)
  {
    [encoder encodeObject: __serverIP forKey: @"serverIP"];
  }
  if (__port_isset)
  {
    [encoder encodeInt64: __port forKey: @"port"];
  }
}

- (void) dealloc
{
  [__serverIP release];
  [super dealloc];
}

- (NSString *) serverIP {
  return [[__serverIP retain] autorelease];
}

- (void) setServerIP: (NSString *) serverIP {
  [serverIP retain];
  [__serverIP release];
  __serverIP = serverIP;
  __serverIP_isset = YES;
}

- (BOOL) serverIPIsSet {
  return __serverIP_isset;
}

- (void) unsetServerIP {
  [__serverIP release];
  __serverIP = nil;
  __serverIP_isset = NO;
}

- (int64_t) port {
  return __port;
}

- (void) setPort: (int64_t) port {
  __port = port;
  __port_isset = YES;
}

- (BOOL) portIsSet {
  return __port_isset;
}

- (void) unsetPort {
  __port_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServerIP: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TakeoutServerAddress"];
  if (__serverIP_isset) {
    if (__serverIP != nil) {
      [outProtocol writeFieldBeginWithName: @"serverIP" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __serverIP];
      [outProtocol writeFieldEnd];
    }
  }
  if (__port_isset) {
    [outProtocol writeFieldBeginWithName: @"port" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __port];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TakeoutServerAddress("];
  [ms appendString: @"serverIP:"];
  [ms appendFormat: @"\"%@\"", __serverIP];
  [ms appendString: @",port:"];
  [ms appendFormat: @"%qi", __port];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Currency

- (id) initWithName: (NSString *) name symbol: (NSString *) symbol
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __symbol = [symbol retain];
  __symbol_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"symbol"])
  {
    __symbol = [[decoder decodeObjectForKey: @"symbol"] retain];
    __symbol_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__symbol_isset)
  {
    [encoder encodeObject: __symbol forKey: @"symbol"];
  }
}

- (void) dealloc
{
  [__name release];
  [__symbol release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) symbol {
  return [[__symbol retain] autorelease];
}

- (void) setSymbol: (NSString *) symbol {
  [symbol retain];
  [__symbol release];
  __symbol = symbol;
  __symbol_isset = YES;
}

- (BOOL) symbolIsSet {
  return __symbol_isset;
}

- (void) unsetSymbol {
  [__symbol release];
  __symbol = nil;
  __symbol_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSymbol: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Currency"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__symbol_isset) {
    if (__symbol != nil) {
      [outProtocol writeFieldBeginWithName: @"symbol" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __symbol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Currency("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",symbol:"];
  [ms appendFormat: @"\"%@\"", __symbol];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Location

- (id) initWithLatitude: (double) latitude longitude: (double) longitude altitude: (double) altitude
{
  self = [super init];
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __altitude = altitude;
  __altitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"altitude"])
  {
    __altitude = [decoder decodeDoubleForKey: @"altitude"];
    __altitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__altitude_isset)
  {
    [encoder encodeDouble: __altitude forKey: @"altitude"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) altitude {
  return __altitude;
}

- (void) setAltitude: (double) altitude {
  __altitude = altitude;
  __altitude_isset = YES;
}

- (BOOL) altitudeIsSet {
  return __altitude_isset;
}

- (void) unsetAltitude {
  __altitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setAltitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Location"];
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__altitude_isset) {
    [outProtocol writeFieldBeginWithName: @"altitude" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __altitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Location("];
  [ms appendString: @"latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",altitude:"];
  [ms appendFormat: @"%f", __altitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Choice

- (id) initWithChoiceId: (Id) choiceId choiceValue: (NSString *) choiceValue
{
  self = [super init];
  __choiceId = choiceId;
  __choiceId_isset = YES;
  __choiceValue = [choiceValue retain];
  __choiceValue_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"choiceId"])
  {
    __choiceId = [decoder decodeInt64ForKey: @"choiceId"];
    __choiceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"choiceValue"])
  {
    __choiceValue = [[decoder decodeObjectForKey: @"choiceValue"] retain];
    __choiceValue_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__choiceId_isset)
  {
    [encoder encodeInt64: __choiceId forKey: @"choiceId"];
  }
  if (__choiceValue_isset)
  {
    [encoder encodeObject: __choiceValue forKey: @"choiceValue"];
  }
}

- (void) dealloc
{
  [__choiceValue release];
  [super dealloc];
}

- (int64_t) choiceId {
  return __choiceId;
}

- (void) setChoiceId: (int64_t) choiceId {
  __choiceId = choiceId;
  __choiceId_isset = YES;
}

- (BOOL) choiceIdIsSet {
  return __choiceId_isset;
}

- (void) unsetChoiceId {
  __choiceId_isset = NO;
}

- (NSString *) choiceValue {
  return [[__choiceValue retain] autorelease];
}

- (void) setChoiceValue: (NSString *) choiceValue {
  [choiceValue retain];
  [__choiceValue release];
  __choiceValue = choiceValue;
  __choiceValue_isset = YES;
}

- (BOOL) choiceValueIsSet {
  return __choiceValue_isset;
}

- (void) unsetChoiceValue {
  [__choiceValue release];
  __choiceValue = nil;
  __choiceValue_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setChoiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChoiceValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Choice"];
  if (__choiceId_isset) {
    [outProtocol writeFieldBeginWithName: @"choiceId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __choiceId];
    [outProtocol writeFieldEnd];
  }
  if (__choiceValue_isset) {
    if (__choiceValue != nil) {
      [outProtocol writeFieldBeginWithName: @"choiceValue" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __choiceValue];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Choice("];
  [ms appendString: @"choiceId:"];
  [ms appendFormat: @"%qi", __choiceId];
  [ms appendString: @",choiceValue:"];
  [ms appendFormat: @"\"%@\"", __choiceValue];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SingleChoiceOption

- (id) initWithSingleChoiceId: (Id) singleChoiceId name: (NSString *) name choices: (NSArray *) choices defaultChoice: (Choice *) defaultChoice
{
  self = [super init];
  __singleChoiceId = singleChoiceId;
  __singleChoiceId_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __choices = [choices retain];
  __choices_isset = YES;
  __defaultChoice = [defaultChoice retain];
  __defaultChoice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"singleChoiceId"])
  {
    __singleChoiceId = [decoder decodeInt64ForKey: @"singleChoiceId"];
    __singleChoiceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"choices"])
  {
    __choices = [[decoder decodeObjectForKey: @"choices"] retain];
    __choices_isset = YES;
  }
  if ([decoder containsValueForKey: @"defaultChoice"])
  {
    __defaultChoice = [[decoder decodeObjectForKey: @"defaultChoice"] retain];
    __defaultChoice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__singleChoiceId_isset)
  {
    [encoder encodeInt64: __singleChoiceId forKey: @"singleChoiceId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__choices_isset)
  {
    [encoder encodeObject: __choices forKey: @"choices"];
  }
  if (__defaultChoice_isset)
  {
    [encoder encodeObject: __defaultChoice forKey: @"defaultChoice"];
  }
}

- (void) dealloc
{
  [__name release];
  [__choices release];
  [__defaultChoice release];
  [super dealloc];
}

- (int64_t) singleChoiceId {
  return __singleChoiceId;
}

- (void) setSingleChoiceId: (int64_t) singleChoiceId {
  __singleChoiceId = singleChoiceId;
  __singleChoiceId_isset = YES;
}

- (BOOL) singleChoiceIdIsSet {
  return __singleChoiceId_isset;
}

- (void) unsetSingleChoiceId {
  __singleChoiceId_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSArray *) choices {
  return [[__choices retain] autorelease];
}

- (void) setChoices: (NSArray *) choices {
  [choices retain];
  [__choices release];
  __choices = choices;
  __choices_isset = YES;
}

- (BOOL) choicesIsSet {
  return __choices_isset;
}

- (void) unsetChoices {
  [__choices release];
  __choices = nil;
  __choices_isset = NO;
}

- (Choice *) defaultChoice {
  return [[__defaultChoice retain] autorelease];
}

- (void) setDefaultChoice: (Choice *) defaultChoice {
  [defaultChoice retain];
  [__defaultChoice release];
  __defaultChoice = defaultChoice;
  __defaultChoice_isset = YES;
}

- (BOOL) defaultChoiceIsSet {
  return __defaultChoice_isset;
}

- (void) unsetDefaultChoice {
  [__defaultChoice release];
  __defaultChoice = nil;
  __defaultChoice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSingleChoiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Choice *_elem2 = [[Choice alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setChoices: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Choice *fieldValue = [[Choice alloc] init];
          [fieldValue read: inProtocol];
          [self setDefaultChoice: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SingleChoiceOption"];
  if (__singleChoiceId_isset) {
    [outProtocol writeFieldBeginWithName: @"singleChoiceId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __singleChoiceId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__choices_isset) {
    if (__choices != nil) {
      [outProtocol writeFieldBeginWithName: @"choices" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__choices count]];
        int i4;
        for (i4 = 0; i4 < [__choices count]; i4++)
        {
          [[__choices objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__defaultChoice_isset) {
    if (__defaultChoice != nil) {
      [outProtocol writeFieldBeginWithName: @"defaultChoice" type: TType_STRUCT fieldID: 4];
      [__defaultChoice write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SingleChoiceOption("];
  [ms appendString: @"singleChoiceId:"];
  [ms appendFormat: @"%qi", __singleChoiceId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",choices:"];
  [ms appendFormat: @"%@", __choices];
  [ms appendString: @",defaultChoice:"];
  [ms appendFormat: @"%@", __defaultChoice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MultiChoiceOption

- (id) initWithMultiChoiceId: (Id) multiChoiceId name: (NSString *) name choices: (NSArray *) choices defaultChoices: (NSArray *) defaultChoices
{
  self = [super init];
  __multiChoiceId = multiChoiceId;
  __multiChoiceId_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __choices = [choices retain];
  __choices_isset = YES;
  __defaultChoices = [defaultChoices retain];
  __defaultChoices_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"multiChoiceId"])
  {
    __multiChoiceId = [decoder decodeInt64ForKey: @"multiChoiceId"];
    __multiChoiceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"choices"])
  {
    __choices = [[decoder decodeObjectForKey: @"choices"] retain];
    __choices_isset = YES;
  }
  if ([decoder containsValueForKey: @"defaultChoices"])
  {
    __defaultChoices = [[decoder decodeObjectForKey: @"defaultChoices"] retain];
    __defaultChoices_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__multiChoiceId_isset)
  {
    [encoder encodeInt64: __multiChoiceId forKey: @"multiChoiceId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__choices_isset)
  {
    [encoder encodeObject: __choices forKey: @"choices"];
  }
  if (__defaultChoices_isset)
  {
    [encoder encodeObject: __defaultChoices forKey: @"defaultChoices"];
  }
}

- (void) dealloc
{
  [__name release];
  [__choices release];
  [__defaultChoices release];
  [super dealloc];
}

- (int64_t) multiChoiceId {
  return __multiChoiceId;
}

- (void) setMultiChoiceId: (int64_t) multiChoiceId {
  __multiChoiceId = multiChoiceId;
  __multiChoiceId_isset = YES;
}

- (BOOL) multiChoiceIdIsSet {
  return __multiChoiceId_isset;
}

- (void) unsetMultiChoiceId {
  __multiChoiceId_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSArray *) choices {
  return [[__choices retain] autorelease];
}

- (void) setChoices: (NSArray *) choices {
  [choices retain];
  [__choices release];
  __choices = choices;
  __choices_isset = YES;
}

- (BOOL) choicesIsSet {
  return __choices_isset;
}

- (void) unsetChoices {
  [__choices release];
  __choices = nil;
  __choices_isset = NO;
}

- (NSArray *) defaultChoices {
  return [[__defaultChoices retain] autorelease];
}

- (void) setDefaultChoices: (NSArray *) defaultChoices {
  [defaultChoices retain];
  [__defaultChoices release];
  __defaultChoices = defaultChoices;
  __defaultChoices_isset = YES;
}

- (BOOL) defaultChoicesIsSet {
  return __defaultChoices_isset;
}

- (void) unsetDefaultChoices {
  [__defaultChoices release];
  __defaultChoices = nil;
  __defaultChoices_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMultiChoiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Choice *_elem7 = [[Choice alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setChoices: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size8;
          [inProtocol readListBeginReturningElementType: NULL size: &_size8];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            Choice *_elem10 = [[Choice alloc] init];
            [_elem10 read: inProtocol];
            [fieldValue addObject: _elem10];
            [_elem10 release];
          }
          [inProtocol readListEnd];
          [self setDefaultChoices: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MultiChoiceOption"];
  if (__multiChoiceId_isset) {
    [outProtocol writeFieldBeginWithName: @"multiChoiceId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __multiChoiceId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__choices_isset) {
    if (__choices != nil) {
      [outProtocol writeFieldBeginWithName: @"choices" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__choices count]];
        int i12;
        for (i12 = 0; i12 < [__choices count]; i12++)
        {
          [[__choices objectAtIndex: i12] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__defaultChoices_isset) {
    if (__defaultChoices != nil) {
      [outProtocol writeFieldBeginWithName: @"defaultChoices" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__defaultChoices count]];
        int i14;
        for (i14 = 0; i14 < [__defaultChoices count]; i14++)
        {
          [[__defaultChoices objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MultiChoiceOption("];
  [ms appendString: @"multiChoiceId:"];
  [ms appendFormat: @"%qi", __multiChoiceId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",choices:"];
  [ms appendFormat: @"%@", __choices];
  [ms appendString: @",defaultChoices:"];
  [ms appendFormat: @"%@", __defaultChoices];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChosenSingleChoiceOption

- (id) initWithSingleChoiceId: (Id) singleChoiceId chosenId: (Id) chosenId
{
  self = [super init];
  __singleChoiceId = singleChoiceId;
  __singleChoiceId_isset = YES;
  __chosenId = chosenId;
  __chosenId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"singleChoiceId"])
  {
    __singleChoiceId = [decoder decodeInt64ForKey: @"singleChoiceId"];
    __singleChoiceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"chosenId"])
  {
    __chosenId = [decoder decodeInt64ForKey: @"chosenId"];
    __chosenId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__singleChoiceId_isset)
  {
    [encoder encodeInt64: __singleChoiceId forKey: @"singleChoiceId"];
  }
  if (__chosenId_isset)
  {
    [encoder encodeInt64: __chosenId forKey: @"chosenId"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int64_t) singleChoiceId {
  return __singleChoiceId;
}

- (void) setSingleChoiceId: (int64_t) singleChoiceId {
  __singleChoiceId = singleChoiceId;
  __singleChoiceId_isset = YES;
}

- (BOOL) singleChoiceIdIsSet {
  return __singleChoiceId_isset;
}

- (void) unsetSingleChoiceId {
  __singleChoiceId_isset = NO;
}

- (int64_t) chosenId {
  return __chosenId;
}

- (void) setChosenId: (int64_t) chosenId {
  __chosenId = chosenId;
  __chosenId_isset = YES;
}

- (BOOL) chosenIdIsSet {
  return __chosenId_isset;
}

- (void) unsetChosenId {
  __chosenId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSingleChoiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setChosenId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChosenSingleChoiceOption"];
  if (__singleChoiceId_isset) {
    [outProtocol writeFieldBeginWithName: @"singleChoiceId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __singleChoiceId];
    [outProtocol writeFieldEnd];
  }
  if (__chosenId_isset) {
    [outProtocol writeFieldBeginWithName: @"chosenId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __chosenId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChosenSingleChoiceOption("];
  [ms appendString: @"singleChoiceId:"];
  [ms appendFormat: @"%qi", __singleChoiceId];
  [ms appendString: @",chosenId:"];
  [ms appendFormat: @"%qi", __chosenId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ChosenMultiChoiceOption

- (id) initWithMultiChoiceId: (Id) multiChoiceId chosenIds: (NSArray *) chosenIds
{
  self = [super init];
  __multiChoiceId = multiChoiceId;
  __multiChoiceId_isset = YES;
  __chosenIds = [chosenIds retain];
  __chosenIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"multiChoiceId"])
  {
    __multiChoiceId = [decoder decodeInt64ForKey: @"multiChoiceId"];
    __multiChoiceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"chosenIds"])
  {
    __chosenIds = [[decoder decodeObjectForKey: @"chosenIds"] retain];
    __chosenIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__multiChoiceId_isset)
  {
    [encoder encodeInt64: __multiChoiceId forKey: @"multiChoiceId"];
  }
  if (__chosenIds_isset)
  {
    [encoder encodeObject: __chosenIds forKey: @"chosenIds"];
  }
}

- (void) dealloc
{
  [__chosenIds release];
  [super dealloc];
}

- (int64_t) multiChoiceId {
  return __multiChoiceId;
}

- (void) setMultiChoiceId: (int64_t) multiChoiceId {
  __multiChoiceId = multiChoiceId;
  __multiChoiceId_isset = YES;
}

- (BOOL) multiChoiceIdIsSet {
  return __multiChoiceId_isset;
}

- (void) unsetMultiChoiceId {
  __multiChoiceId_isset = NO;
}

- (NSArray *) chosenIds {
  return [[__chosenIds retain] autorelease];
}

- (void) setChosenIds: (NSArray *) chosenIds {
  [chosenIds retain];
  [__chosenIds release];
  __chosenIds = chosenIds;
  __chosenIds_isset = YES;
}

- (BOOL) chosenIdsIsSet {
  return __chosenIds_isset;
}

- (void) unsetChosenIds {
  [__chosenIds release];
  __chosenIds = nil;
  __chosenIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMultiChoiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            int64_t _elem17 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem17]];
          }
          [inProtocol readListEnd];
          [self setChosenIds: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChosenMultiChoiceOption"];
  if (__multiChoiceId_isset) {
    [outProtocol writeFieldBeginWithName: @"multiChoiceId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __multiChoiceId];
    [outProtocol writeFieldEnd];
  }
  if (__chosenIds_isset) {
    if (__chosenIds != nil) {
      [outProtocol writeFieldBeginWithName: @"chosenIds" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__chosenIds count]];
        int i19;
        for (i19 = 0; i19 < [__chosenIds count]; i19++)
        {
          [outProtocol writeI64: [[__chosenIds objectAtIndex: i19] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChosenMultiChoiceOption("];
  [ms appendString: @"multiChoiceId:"];
  [ms appendFormat: @"%qi", __multiChoiceId];
  [ms appendString: @",chosenIds:"];
  [ms appendFormat: @"%@", __chosenIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation commonConstants
+ (void) initialize {
}
@end

