/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "authentication.h"

@implementation TequilaSession

- (id) initWithTequilaCookie: (NSString *) tequilaCookie
{
  self = [super init];
  __tequilaCookie = [tequilaCookie retain];
  __tequilaCookie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tequilaCookie"])
  {
    __tequilaCookie = [[decoder decodeObjectForKey: @"tequilaCookie"] retain];
    __tequilaCookie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tequilaCookie_isset)
  {
    [encoder encodeObject: __tequilaCookie forKey: @"tequilaCookie"];
  }
}

- (void) dealloc
{
  [__tequilaCookie release];
  [super dealloc];
}

- (NSString *) tequilaCookie {
  return [[__tequilaCookie retain] autorelease];
}

- (void) setTequilaCookie: (NSString *) tequilaCookie {
  [tequilaCookie retain];
  [__tequilaCookie release];
  __tequilaCookie = tequilaCookie;
  __tequilaCookie_isset = YES;
}

- (BOOL) tequilaCookieIsSet {
  return __tequilaCookie_isset;
}

- (void) unsetTequilaCookie {
  [__tequilaCookie release];
  __tequilaCookie = nil;
  __tequilaCookie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTequilaCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TequilaSession"];
  if (__tequilaCookie_isset) {
    if (__tequilaCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"tequilaCookie" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tequilaCookie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TequilaSession("];
  [ms appendString: @"tequilaCookie:"];
  [ms appendFormat: @"\"%@\"", __tequilaCookie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TequilaToken

- (id) initWithITequilaKey: (NSString *) iTequilaKey loginCookie: (NSString *) loginCookie
{
  self = [super init];
  __iTequilaKey = [iTequilaKey retain];
  __iTequilaKey_isset = YES;
  __loginCookie = [loginCookie retain];
  __loginCookie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iTequilaKey"])
  {
    __iTequilaKey = [[decoder decodeObjectForKey: @"iTequilaKey"] retain];
    __iTequilaKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginCookie"])
  {
    __loginCookie = [[decoder decodeObjectForKey: @"loginCookie"] retain];
    __loginCookie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iTequilaKey_isset)
  {
    [encoder encodeObject: __iTequilaKey forKey: @"iTequilaKey"];
  }
  if (__loginCookie_isset)
  {
    [encoder encodeObject: __loginCookie forKey: @"loginCookie"];
  }
}

- (void) dealloc
{
  [__iTequilaKey release];
  [__loginCookie release];
  [super dealloc];
}

- (NSString *) iTequilaKey {
  return [[__iTequilaKey retain] autorelease];
}

- (void) setITequilaKey: (NSString *) iTequilaKey {
  [iTequilaKey retain];
  [__iTequilaKey release];
  __iTequilaKey = iTequilaKey;
  __iTequilaKey_isset = YES;
}

- (BOOL) iTequilaKeyIsSet {
  return __iTequilaKey_isset;
}

- (void) unsetITequilaKey {
  [__iTequilaKey release];
  __iTequilaKey = nil;
  __iTequilaKey_isset = NO;
}

- (NSString *) loginCookie {
  return [[__loginCookie retain] autorelease];
}

- (void) setLoginCookie: (NSString *) loginCookie {
  [loginCookie retain];
  [__loginCookie release];
  __loginCookie = loginCookie;
  __loginCookie_isset = YES;
}

- (BOOL) loginCookieIsSet {
  return __loginCookie_isset;
}

- (void) unsetLoginCookie {
  [__loginCookie release];
  __loginCookie = nil;
  __loginCookie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITequilaKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLoginCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TequilaToken"];
  if (__iTequilaKey_isset) {
    if (__iTequilaKey != nil) {
      [outProtocol writeFieldBeginWithName: @"iTequilaKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __iTequilaKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__loginCookie_isset) {
    if (__loginCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"loginCookie" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __loginCookie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TequilaToken("];
  [ms appendString: @"iTequilaKey:"];
  [ms appendFormat: @"\"%@\"", __iTequilaKey];
  [ms appendString: @",loginCookie:"];
  [ms appendFormat: @"\"%@\"", __loginCookie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TequilaKey

- (id) initWithTos: (int) tos iTequilaKey: (NSString *) iTequilaKey loginCookie: (NSString *) loginCookie iTequilaKeyForPc: (NSString *) iTequilaKeyForPc
{
  self = [super init];
  __tos = tos;
  __tos_isset = YES;
  __iTequilaKey = [iTequilaKey retain];
  __iTequilaKey_isset = YES;
  __loginCookie = [loginCookie retain];
  __loginCookie_isset = YES;
  __iTequilaKeyForPc = [iTequilaKeyForPc retain];
  __iTequilaKeyForPc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tos"])
  {
    __tos = [decoder decodeIntForKey: @"tos"];
    __tos_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTequilaKey"])
  {
    __iTequilaKey = [[decoder decodeObjectForKey: @"iTequilaKey"] retain];
    __iTequilaKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginCookie"])
  {
    __loginCookie = [[decoder decodeObjectForKey: @"loginCookie"] retain];
    __loginCookie_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTequilaKeyForPc"])
  {
    __iTequilaKeyForPc = [[decoder decodeObjectForKey: @"iTequilaKeyForPc"] retain];
    __iTequilaKeyForPc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tos_isset)
  {
    [encoder encodeInt: __tos forKey: @"tos"];
  }
  if (__iTequilaKey_isset)
  {
    [encoder encodeObject: __iTequilaKey forKey: @"iTequilaKey"];
  }
  if (__loginCookie_isset)
  {
    [encoder encodeObject: __loginCookie forKey: @"loginCookie"];
  }
  if (__iTequilaKeyForPc_isset)
  {
    [encoder encodeObject: __iTequilaKeyForPc forKey: @"iTequilaKeyForPc"];
  }
}

- (void) dealloc
{
  [__iTequilaKey release];
  [__loginCookie release];
  [__iTequilaKeyForPc release];
  [super dealloc];
}

- (int) tos {
  return __tos;
}

- (void) setTos: (int) tos {
  __tos = tos;
  __tos_isset = YES;
}

- (BOOL) tosIsSet {
  return __tos_isset;
}

- (void) unsetTos {
  __tos_isset = NO;
}

- (NSString *) iTequilaKey {
  return [[__iTequilaKey retain] autorelease];
}

- (void) setITequilaKey: (NSString *) iTequilaKey {
  [iTequilaKey retain];
  [__iTequilaKey release];
  __iTequilaKey = iTequilaKey;
  __iTequilaKey_isset = YES;
}

- (BOOL) iTequilaKeyIsSet {
  return __iTequilaKey_isset;
}

- (void) unsetITequilaKey {
  [__iTequilaKey release];
  __iTequilaKey = nil;
  __iTequilaKey_isset = NO;
}

- (NSString *) loginCookie {
  return [[__loginCookie retain] autorelease];
}

- (void) setLoginCookie: (NSString *) loginCookie {
  [loginCookie retain];
  [__loginCookie release];
  __loginCookie = loginCookie;
  __loginCookie_isset = YES;
}

- (BOOL) loginCookieIsSet {
  return __loginCookie_isset;
}

- (void) unsetLoginCookie {
  [__loginCookie release];
  __loginCookie = nil;
  __loginCookie_isset = NO;
}

- (NSString *) iTequilaKeyForPc {
  return [[__iTequilaKeyForPc retain] autorelease];
}

- (void) setITequilaKeyForPc: (NSString *) iTequilaKeyForPc {
  [iTequilaKeyForPc retain];
  [__iTequilaKeyForPc release];
  __iTequilaKeyForPc = iTequilaKeyForPc;
  __iTequilaKeyForPc_isset = YES;
}

- (BOOL) iTequilaKeyForPcIsSet {
  return __iTequilaKeyForPc_isset;
}

- (void) unsetITequilaKeyForPc {
  [__iTequilaKeyForPc release];
  __iTequilaKeyForPc = nil;
  __iTequilaKeyForPc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setTos: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITequilaKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLoginCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITequilaKeyForPc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TequilaKey"];
  if (__tos_isset) {
    [outProtocol writeFieldBeginWithName: @"tos" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __tos];
    [outProtocol writeFieldEnd];
  }
  if (__iTequilaKey_isset) {
    if (__iTequilaKey != nil) {
      [outProtocol writeFieldBeginWithName: @"iTequilaKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iTequilaKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__loginCookie_isset) {
    if (__loginCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"loginCookie" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __loginCookie];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iTequilaKeyForPc_isset) {
    if (__iTequilaKeyForPc != nil) {
      [outProtocol writeFieldBeginWithName: @"iTequilaKeyForPc" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __iTequilaKeyForPc];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TequilaKey("];
  [ms appendString: @"tos:"];
  [ms appendFormat: @"%i", __tos];
  [ms appendString: @",iTequilaKey:"];
  [ms appendFormat: @"\"%@\"", __iTequilaKey];
  [ms appendString: @",loginCookie:"];
  [ms appendFormat: @"\"%@\"", __loginCookie];
  [ms appendString: @",iTequilaKeyForPc:"];
  [ms appendFormat: @"\"%@\"", __iTequilaKeyForPc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SessionId

- (id) initWithTos: (int) tos pocketCampusSessionId: (NSString *) pocketCampusSessionId moodleCookie: (NSString *) moodleCookie camiproCookie: (NSString *) camiproCookie isaCookie: (NSString *) isaCookie
{
  self = [super init];
  __tos = tos;
  __tos_isset = YES;
  __pocketCampusSessionId = [pocketCampusSessionId retain];
  __pocketCampusSessionId_isset = YES;
  __moodleCookie = [moodleCookie retain];
  __moodleCookie_isset = YES;
  __camiproCookie = [camiproCookie retain];
  __camiproCookie_isset = YES;
  __isaCookie = [isaCookie retain];
  __isaCookie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tos"])
  {
    __tos = [decoder decodeIntForKey: @"tos"];
    __tos_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocketCampusSessionId"])
  {
    __pocketCampusSessionId = [[decoder decodeObjectForKey: @"pocketCampusSessionId"] retain];
    __pocketCampusSessionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"moodleCookie"])
  {
    __moodleCookie = [[decoder decodeObjectForKey: @"moodleCookie"] retain];
    __moodleCookie_isset = YES;
  }
  if ([decoder containsValueForKey: @"camiproCookie"])
  {
    __camiproCookie = [[decoder decodeObjectForKey: @"camiproCookie"] retain];
    __camiproCookie_isset = YES;
  }
  if ([decoder containsValueForKey: @"isaCookie"])
  {
    __isaCookie = [[decoder decodeObjectForKey: @"isaCookie"] retain];
    __isaCookie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tos_isset)
  {
    [encoder encodeInt: __tos forKey: @"tos"];
  }
  if (__pocketCampusSessionId_isset)
  {
    [encoder encodeObject: __pocketCampusSessionId forKey: @"pocketCampusSessionId"];
  }
  if (__moodleCookie_isset)
  {
    [encoder encodeObject: __moodleCookie forKey: @"moodleCookie"];
  }
  if (__camiproCookie_isset)
  {
    [encoder encodeObject: __camiproCookie forKey: @"camiproCookie"];
  }
  if (__isaCookie_isset)
  {
    [encoder encodeObject: __isaCookie forKey: @"isaCookie"];
  }
}

- (void) dealloc
{
  [__pocketCampusSessionId release];
  [__moodleCookie release];
  [__camiproCookie release];
  [__isaCookie release];
  [super dealloc];
}

- (int) tos {
  return __tos;
}

- (void) setTos: (int) tos {
  __tos = tos;
  __tos_isset = YES;
}

- (BOOL) tosIsSet {
  return __tos_isset;
}

- (void) unsetTos {
  __tos_isset = NO;
}

- (NSString *) pocketCampusSessionId {
  return [[__pocketCampusSessionId retain] autorelease];
}

- (void) setPocketCampusSessionId: (NSString *) pocketCampusSessionId {
  [pocketCampusSessionId retain];
  [__pocketCampusSessionId release];
  __pocketCampusSessionId = pocketCampusSessionId;
  __pocketCampusSessionId_isset = YES;
}

- (BOOL) pocketCampusSessionIdIsSet {
  return __pocketCampusSessionId_isset;
}

- (void) unsetPocketCampusSessionId {
  [__pocketCampusSessionId release];
  __pocketCampusSessionId = nil;
  __pocketCampusSessionId_isset = NO;
}

- (NSString *) moodleCookie {
  return [[__moodleCookie retain] autorelease];
}

- (void) setMoodleCookie: (NSString *) moodleCookie {
  [moodleCookie retain];
  [__moodleCookie release];
  __moodleCookie = moodleCookie;
  __moodleCookie_isset = YES;
}

- (BOOL) moodleCookieIsSet {
  return __moodleCookie_isset;
}

- (void) unsetMoodleCookie {
  [__moodleCookie release];
  __moodleCookie = nil;
  __moodleCookie_isset = NO;
}

- (NSString *) camiproCookie {
  return [[__camiproCookie retain] autorelease];
}

- (void) setCamiproCookie: (NSString *) camiproCookie {
  [camiproCookie retain];
  [__camiproCookie release];
  __camiproCookie = camiproCookie;
  __camiproCookie_isset = YES;
}

- (BOOL) camiproCookieIsSet {
  return __camiproCookie_isset;
}

- (void) unsetCamiproCookie {
  [__camiproCookie release];
  __camiproCookie = nil;
  __camiproCookie_isset = NO;
}

- (NSString *) isaCookie {
  return [[__isaCookie retain] autorelease];
}

- (void) setIsaCookie: (NSString *) isaCookie {
  [isaCookie retain];
  [__isaCookie release];
  __isaCookie = isaCookie;
  __isaCookie_isset = YES;
}

- (BOOL) isaCookieIsSet {
  return __isaCookie_isset;
}

- (void) unsetIsaCookie {
  [__isaCookie release];
  __isaCookie = nil;
  __isaCookie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setTos: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPocketCampusSessionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMoodleCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCamiproCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsaCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SessionId"];
  if (__tos_isset) {
    [outProtocol writeFieldBeginWithName: @"tos" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __tos];
    [outProtocol writeFieldEnd];
  }
  if (__pocketCampusSessionId_isset) {
    if (__pocketCampusSessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"pocketCampusSessionId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pocketCampusSessionId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__moodleCookie_isset) {
    if (__moodleCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"moodleCookie" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __moodleCookie];
      [outProtocol writeFieldEnd];
    }
  }
  if (__camiproCookie_isset) {
    if (__camiproCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"camiproCookie" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __camiproCookie];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isaCookie_isset) {
    if (__isaCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"isaCookie" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __isaCookie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SessionId("];
  [ms appendString: @"tos:"];
  [ms appendFormat: @"%i", __tos];
  [ms appendString: @",pocketCampusSessionId:"];
  [ms appendFormat: @"\"%@\"", __pocketCampusSessionId];
  [ms appendString: @",moodleCookie:"];
  [ms appendFormat: @"\"%@\"", __moodleCookie];
  [ms appendString: @",camiproCookie:"];
  [ms appendFormat: @"\"%@\"", __camiproCookie];
  [ms appendString: @",isaCookie:"];
  [ms appendFormat: @"\"%@\"", __isaCookie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation authenticationConstants
+ (void) initialize {
}
@end

@interface startRefresh_args : NSObject <NSCoding> {
  TequilaSession * __aTequilaSession;

  BOOL __aTequilaSession_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=aTequilaSession, setter=setATequilaSession:) TequilaSession * aTequilaSession;
#endif

- (id) initWithATequilaSession: (TequilaSession *) aTequilaSession;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TequilaSession *) aTequilaSession;
- (void) setATequilaSession: (TequilaSession *) aTequilaSession;
- (BOOL) aTequilaSessionIsSet;

@end

@implementation startRefresh_args

- (id) initWithATequilaSession: (TequilaSession *) aTequilaSession
{
  self = [super init];
  __aTequilaSession = [aTequilaSession retain];
  __aTequilaSession_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"aTequilaSession"])
  {
    __aTequilaSession = [[decoder decodeObjectForKey: @"aTequilaSession"] retain];
    __aTequilaSession_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__aTequilaSession_isset)
  {
    [encoder encodeObject: __aTequilaSession forKey: @"aTequilaSession"];
  }
}

- (void) dealloc
{
  [__aTequilaSession release];
  [super dealloc];
}

- (TequilaSession *) aTequilaSession {
  return [[__aTequilaSession retain] autorelease];
}

- (void) setATequilaSession: (TequilaSession *) aTequilaSession {
  [aTequilaSession retain];
  [__aTequilaSession release];
  __aTequilaSession = aTequilaSession;
  __aTequilaSession_isset = YES;
}

- (BOOL) aTequilaSessionIsSet {
  return __aTequilaSession_isset;
}

- (void) unsetATequilaSession {
  [__aTequilaSession release];
  __aTequilaSession = nil;
  __aTequilaSession_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TequilaSession *fieldValue = [[TequilaSession alloc] init];
          [fieldValue read: inProtocol];
          [self setATequilaSession: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"startRefresh_args"];
  if (__aTequilaSession_isset) {
    if (__aTequilaSession != nil) {
      [outProtocol writeFieldBeginWithName: @"aTequilaSession" type: TType_STRUCT fieldID: 1];
      [__aTequilaSession write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"startRefresh_args("];
  [ms appendString: @"aTequilaSession:"];
  [ms appendFormat: @"%@", __aTequilaSession];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface StartRefresh_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) success;
- (void) setSuccess: (int32_t) success;
- (BOOL) successIsSet;

@end

@implementation StartRefresh_result

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StartRefresh_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StartRefresh_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface stopRefresh_args : NSObject <NSCoding> {
  TequilaSession * __aTequilaSession;

  BOOL __aTequilaSession_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=aTequilaSession, setter=setATequilaSession:) TequilaSession * aTequilaSession;
#endif

- (id) initWithATequilaSession: (TequilaSession *) aTequilaSession;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TequilaSession *) aTequilaSession;
- (void) setATequilaSession: (TequilaSession *) aTequilaSession;
- (BOOL) aTequilaSessionIsSet;

@end

@implementation stopRefresh_args

- (id) initWithATequilaSession: (TequilaSession *) aTequilaSession
{
  self = [super init];
  __aTequilaSession = [aTequilaSession retain];
  __aTequilaSession_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"aTequilaSession"])
  {
    __aTequilaSession = [[decoder decodeObjectForKey: @"aTequilaSession"] retain];
    __aTequilaSession_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__aTequilaSession_isset)
  {
    [encoder encodeObject: __aTequilaSession forKey: @"aTequilaSession"];
  }
}

- (void) dealloc
{
  [__aTequilaSession release];
  [super dealloc];
}

- (TequilaSession *) aTequilaSession {
  return [[__aTequilaSession retain] autorelease];
}

- (void) setATequilaSession: (TequilaSession *) aTequilaSession {
  [aTequilaSession retain];
  [__aTequilaSession release];
  __aTequilaSession = aTequilaSession;
  __aTequilaSession_isset = YES;
}

- (BOOL) aTequilaSessionIsSet {
  return __aTequilaSession_isset;
}

- (void) unsetATequilaSession {
  [__aTequilaSession release];
  __aTequilaSession = nil;
  __aTequilaSession_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TequilaSession *fieldValue = [[TequilaSession alloc] init];
          [fieldValue read: inProtocol];
          [self setATequilaSession: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"stopRefresh_args"];
  if (__aTequilaSession_isset) {
    if (__aTequilaSession != nil) {
      [outProtocol writeFieldBeginWithName: @"aTequilaSession" type: TType_STRUCT fieldID: 1];
      [__aTequilaSession write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"stopRefresh_args("];
  [ms appendString: @"aTequilaSession:"];
  [ms appendFormat: @"%@", __aTequilaSession];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface StopRefresh_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) success;
- (void) setSuccess: (int32_t) success;
- (BOOL) successIsSet;

@end

@implementation StopRefresh_result

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StopRefresh_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StopRefresh_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTequilaKeyForService_args : NSObject <NSCoding> {
  int __aService;

  BOOL __aService_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=aService, setter=setAService:) int aService;
#endif

- (id) initWithAService: (int) aService;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int) aService;
- (void) setAService: (int) aService;
- (BOOL) aServiceIsSet;

@end

@implementation getTequilaKeyForService_args

- (id) initWithAService: (int) aService
{
  self = [super init];
  __aService = aService;
  __aService_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"aService"])
  {
    __aService = [decoder decodeIntForKey: @"aService"];
    __aService_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__aService_isset)
  {
    [encoder encodeInt: __aService forKey: @"aService"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int) aService {
  return __aService;
}

- (void) setAService: (int) aService {
  __aService = aService;
  __aService_isset = YES;
}

- (BOOL) aServiceIsSet {
  return __aService_isset;
}

- (void) unsetAService {
  __aService_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setAService: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTequilaKeyForService_args"];
  if (__aService_isset) {
    [outProtocol writeFieldBeginWithName: @"aService" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __aService];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTequilaKeyForService_args("];
  [ms appendString: @"aService:"];
  [ms appendFormat: @"%i", __aService];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTequilaKeyForService_result : NSObject <NSCoding> {
  TequilaKey * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TequilaKey * success;
#endif

- (id) initWithSuccess: (TequilaKey *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TequilaKey *) success;
- (void) setSuccess: (TequilaKey *) success;
- (BOOL) successIsSet;

@end

@implementation GetTequilaKeyForService_result

- (id) initWithSuccess: (TequilaKey *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (TequilaKey *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (TequilaKey *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TequilaKey *fieldValue = [[TequilaKey alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTequilaKeyForService_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTequilaKeyForService_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getSessionIdForService_args : NSObject <NSCoding> {
  TequilaKey * __aTequilaKey;

  BOOL __aTequilaKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=aTequilaKey, setter=setATequilaKey:) TequilaKey * aTequilaKey;
#endif

- (id) initWithATequilaKey: (TequilaKey *) aTequilaKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TequilaKey *) aTequilaKey;
- (void) setATequilaKey: (TequilaKey *) aTequilaKey;
- (BOOL) aTequilaKeyIsSet;

@end

@implementation getSessionIdForService_args

- (id) initWithATequilaKey: (TequilaKey *) aTequilaKey
{
  self = [super init];
  __aTequilaKey = [aTequilaKey retain];
  __aTequilaKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"aTequilaKey"])
  {
    __aTequilaKey = [[decoder decodeObjectForKey: @"aTequilaKey"] retain];
    __aTequilaKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__aTequilaKey_isset)
  {
    [encoder encodeObject: __aTequilaKey forKey: @"aTequilaKey"];
  }
}

- (void) dealloc
{
  [__aTequilaKey release];
  [super dealloc];
}

- (TequilaKey *) aTequilaKey {
  return [[__aTequilaKey retain] autorelease];
}

- (void) setATequilaKey: (TequilaKey *) aTequilaKey {
  [aTequilaKey retain];
  [__aTequilaKey release];
  __aTequilaKey = aTequilaKey;
  __aTequilaKey_isset = YES;
}

- (BOOL) aTequilaKeyIsSet {
  return __aTequilaKey_isset;
}

- (void) unsetATequilaKey {
  [__aTequilaKey release];
  __aTequilaKey = nil;
  __aTequilaKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TequilaKey *fieldValue = [[TequilaKey alloc] init];
          [fieldValue read: inProtocol];
          [self setATequilaKey: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getSessionIdForService_args"];
  if (__aTequilaKey_isset) {
    if (__aTequilaKey != nil) {
      [outProtocol writeFieldBeginWithName: @"aTequilaKey" type: TType_STRUCT fieldID: 1];
      [__aTequilaKey write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getSessionIdForService_args("];
  [ms appendString: @"aTequilaKey:"];
  [ms appendFormat: @"%@", __aTequilaKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetSessionIdForService_result : NSObject <NSCoding> {
  SessionId * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SessionId * success;
#endif

- (id) initWithSuccess: (SessionId *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (SessionId *) success;
- (void) setSuccess: (SessionId *) success;
- (BOOL) successIsSet;

@end

@implementation GetSessionIdForService_result

- (id) initWithSuccess: (SessionId *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (SessionId *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (SessionId *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SessionId *fieldValue = [[SessionId alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSessionIdForService_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSessionIdForService_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logOutSession_args : NSObject <NSCoding> {
  SessionId * __aSessionId;

  BOOL __aSessionId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=aSessionId, setter=setASessionId:) SessionId * aSessionId;
#endif

- (id) initWithASessionId: (SessionId *) aSessionId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (SessionId *) aSessionId;
- (void) setASessionId: (SessionId *) aSessionId;
- (BOOL) aSessionIdIsSet;

@end

@implementation logOutSession_args

- (id) initWithASessionId: (SessionId *) aSessionId
{
  self = [super init];
  __aSessionId = [aSessionId retain];
  __aSessionId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"aSessionId"])
  {
    __aSessionId = [[decoder decodeObjectForKey: @"aSessionId"] retain];
    __aSessionId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__aSessionId_isset)
  {
    [encoder encodeObject: __aSessionId forKey: @"aSessionId"];
  }
}

- (void) dealloc
{
  [__aSessionId release];
  [super dealloc];
}

- (SessionId *) aSessionId {
  return [[__aSessionId retain] autorelease];
}

- (void) setASessionId: (SessionId *) aSessionId {
  [aSessionId retain];
  [__aSessionId release];
  __aSessionId = aSessionId;
  __aSessionId_isset = YES;
}

- (BOOL) aSessionIdIsSet {
  return __aSessionId_isset;
}

- (void) unsetASessionId {
  [__aSessionId release];
  __aSessionId = nil;
  __aSessionId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SessionId *fieldValue = [[SessionId alloc] init];
          [fieldValue read: inProtocol];
          [self setASessionId: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logOutSession_args"];
  if (__aSessionId_isset) {
    if (__aSessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"aSessionId" type: TType_STRUCT fieldID: 1];
      [__aSessionId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logOutSession_args("];
  [ms appendString: @"aSessionId:"];
  [ms appendFormat: @"%@", __aSessionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface LogOutSession_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) success;
- (void) setSuccess: (int32_t) success;
- (BOOL) successIsSet;

@end

@implementation LogOutSession_result

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LogOutSession_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LogOutSession_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_startRefresh: (TequilaSession *) aTequilaSession
{
  [outProtocol writeMessageBeginWithName: @"startRefresh" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"startRefresh_args"];
  if (aTequilaSession != nil)  {
    [outProtocol writeFieldBeginWithName: @"aTequilaSession" type: TType_STRUCT fieldID: 1];
    [aTequilaSession write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_startRefresh
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  StartRefresh_result * result = [[[StartRefresh_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"startRefresh failed: unknown result"];
}

- (int32_t) startRefresh: (TequilaSession *) aTequilaSession
{
  [self send_startRefresh: aTequilaSession];
  return [self recv_startRefresh];
}

- (void) send_stopRefresh: (TequilaSession *) aTequilaSession
{
  [outProtocol writeMessageBeginWithName: @"stopRefresh" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"stopRefresh_args"];
  if (aTequilaSession != nil)  {
    [outProtocol writeFieldBeginWithName: @"aTequilaSession" type: TType_STRUCT fieldID: 1];
    [aTequilaSession write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_stopRefresh
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  StopRefresh_result * result = [[[StopRefresh_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"stopRefresh failed: unknown result"];
}

- (int32_t) stopRefresh: (TequilaSession *) aTequilaSession
{
  [self send_stopRefresh: aTequilaSession];
  return [self recv_stopRefresh];
}

- (void) send_getTequilaKeyForService: (int) aService
{
  [outProtocol writeMessageBeginWithName: @"getTequilaKeyForService" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTequilaKeyForService_args"];
  [outProtocol writeFieldBeginWithName: @"aService" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: aService];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TequilaKey *) recv_getTequilaKeyForService
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTequilaKeyForService_result * result = [[[GetTequilaKeyForService_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTequilaKeyForService failed: unknown result"];
}

- (TequilaKey *) getTequilaKeyForService: (int) aService
{
  [self send_getTequilaKeyForService: aService];
  return [self recv_getTequilaKeyForService];
}

- (void) send_getSessionIdForService: (TequilaKey *) aTequilaKey
{
  [outProtocol writeMessageBeginWithName: @"getSessionIdForService" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getSessionIdForService_args"];
  if (aTequilaKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"aTequilaKey" type: TType_STRUCT fieldID: 1];
    [aTequilaKey write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SessionId *) recv_getSessionIdForService
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetSessionIdForService_result * result = [[[GetSessionIdForService_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getSessionIdForService failed: unknown result"];
}

- (SessionId *) getSessionIdForService: (TequilaKey *) aTequilaKey
{
  [self send_getSessionIdForService: aTequilaKey];
  return [self recv_getSessionIdForService];
}

- (void) send_logOutSession: (SessionId *) aSessionId
{
  [outProtocol writeMessageBeginWithName: @"logOutSession" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logOutSession_args"];
  if (aSessionId != nil)  {
    [outProtocol writeFieldBeginWithName: @"aSessionId" type: TType_STRUCT fieldID: 1];
    [aSessionId write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_logOutSession
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  LogOutSession_result * result = [[[LogOutSession_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"logOutSession failed: unknown result"];
}

- (int32_t) logOutSession: (SessionId *) aSessionId
{
  [self send_logOutSession: aSessionId];
  return [self recv_logOutSession];
}

@end

@implementation AuthenticationServiceProcessor

- (id) initWithAuthenticationService: (id <AuthenticationService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_startRefresh_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"startRefresh"];
  }
  {
    SEL s = @selector(process_stopRefresh_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"stopRefresh"];
  }
  {
    SEL s = @selector(process_getTequilaKeyForService_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTequilaKeyForService"];
  }
  {
    SEL s = @selector(process_getSessionIdForService_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getSessionIdForService"];
  }
  {
    SEL s = @selector(process_logOutSession_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"logOutSession"];
  }
  return self;
}

- (id<AuthenticationService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_startRefresh_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  startRefresh_args * args = [[startRefresh_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  StartRefresh_result * result = [[StartRefresh_result alloc] init];
  [result setSuccess: [mService startRefresh: [args aTequilaSession]]];
  [outProtocol writeMessageBeginWithName: @"startRefresh"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_stopRefresh_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  stopRefresh_args * args = [[stopRefresh_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  StopRefresh_result * result = [[StopRefresh_result alloc] init];
  [result setSuccess: [mService stopRefresh: [args aTequilaSession]]];
  [outProtocol writeMessageBeginWithName: @"stopRefresh"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getTequilaKeyForService_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTequilaKeyForService_args * args = [[getTequilaKeyForService_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTequilaKeyForService_result * result = [[GetTequilaKeyForService_result alloc] init];
  [result setSuccess: [mService getTequilaKeyForService: [args aService]]];
  [outProtocol writeMessageBeginWithName: @"getTequilaKeyForService"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getSessionIdForService_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getSessionIdForService_args * args = [[getSessionIdForService_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetSessionIdForService_result * result = [[GetSessionIdForService_result alloc] init];
  [result setSuccess: [mService getSessionIdForService: [args aTequilaKey]]];
  [outProtocol writeMessageBeginWithName: @"getSessionIdForService"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_logOutSession_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  logOutSession_args * args = [[logOutSession_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  LogOutSession_result * result = [[LogOutSession_result alloc] init];
  [result setSuccess: [mService logOutSession: [args aSessionId]]];
  [outProtocol writeMessageBeginWithName: @"logOutSession"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

