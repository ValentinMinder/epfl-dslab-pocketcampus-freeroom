/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "authentication.h"

@implementation AuthTokenResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTequilaToken: (NSString *) tequilaToken statusCode: (int) statusCode
{
  self = [super init];
  __tequilaToken = [tequilaToken retain_stub];
  __tequilaToken_isset = YES;
  __statusCode = statusCode;
  __statusCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tequilaToken"])
  {
    __tequilaToken = [[decoder decodeObjectForKey: @"tequilaToken"] retain_stub];
    __tequilaToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tequilaToken_isset)
  {
    [encoder encodeObject: __tequilaToken forKey: @"tequilaToken"];
  }
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
}

- (void) dealloc
{
  [__tequilaToken release_stub];
  [super dealloc_stub];
}

- (NSString *) tequilaToken {
  return [[__tequilaToken retain_stub] autorelease_stub];
}

- (void) setTequilaToken: (NSString *) tequilaToken {
  [tequilaToken retain_stub];
  [__tequilaToken release_stub];
  __tequilaToken = tequilaToken;
  __tequilaToken_isset = YES;
}

- (BOOL) tequilaTokenIsSet {
  return __tequilaToken_isset;
}

- (void) unsetTequilaToken {
  [__tequilaToken release_stub];
  __tequilaToken = nil;
  __tequilaToken_isset = NO;
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTequilaToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthTokenResponse"];
  if (__tequilaToken_isset) {
    if (__tequilaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"tequilaToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tequilaToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__statusCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'statusCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthTokenResponse("];
  [ms appendString: @"tequilaToken:"];
  [ms appendFormat: @"\"%@\"", __tequilaToken];
  [ms appendString: @",statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthSessionResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionId: (NSString *) sessionId statusCode: (int) statusCode
{
  self = [super init];
  __sessionId = [sessionId retain_stub];
  __sessionId_isset = YES;
  __statusCode = statusCode;
  __statusCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionId"])
  {
    __sessionId = [[decoder decodeObjectForKey: @"sessionId"] retain_stub];
    __sessionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionId_isset)
  {
    [encoder encodeObject: __sessionId forKey: @"sessionId"];
  }
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
}

- (void) dealloc
{
  [__sessionId release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionId {
  return [[__sessionId retain_stub] autorelease_stub];
}

- (void) setSessionId: (NSString *) sessionId {
  [sessionId retain_stub];
  [__sessionId release_stub];
  __sessionId = sessionId;
  __sessionId_isset = YES;
}

- (BOOL) sessionIdIsSet {
  return __sessionId_isset;
}

- (void) unsetSessionId {
  [__sessionId release_stub];
  __sessionId = nil;
  __sessionId_isset = NO;
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthSessionResponse"];
  if (__sessionId_isset) {
    if (__sessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__statusCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'statusCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthSessionResponse("];
  [ms appendString: @"sessionId:"];
  [ms appendFormat: @"\"%@\"", __sessionId];
  [ms appendString: @",statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthSessionRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTequilaToken: (NSString *) tequilaToken rememberMe: (BOOL) rememberMe
{
  self = [super init];
  __tequilaToken = [tequilaToken retain_stub];
  __tequilaToken_isset = YES;
  __rememberMe = rememberMe;
  __rememberMe_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tequilaToken"])
  {
    __tequilaToken = [[decoder decodeObjectForKey: @"tequilaToken"] retain_stub];
    __tequilaToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"rememberMe"])
  {
    __rememberMe = [decoder decodeBoolForKey: @"rememberMe"];
    __rememberMe_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tequilaToken_isset)
  {
    [encoder encodeObject: __tequilaToken forKey: @"tequilaToken"];
  }
  if (__rememberMe_isset)
  {
    [encoder encodeBool: __rememberMe forKey: @"rememberMe"];
  }
}

- (void) dealloc
{
  [__tequilaToken release_stub];
  [super dealloc_stub];
}

- (NSString *) tequilaToken {
  return [[__tequilaToken retain_stub] autorelease_stub];
}

- (void) setTequilaToken: (NSString *) tequilaToken {
  [tequilaToken retain_stub];
  [__tequilaToken release_stub];
  __tequilaToken = tequilaToken;
  __tequilaToken_isset = YES;
}

- (BOOL) tequilaTokenIsSet {
  return __tequilaToken_isset;
}

- (void) unsetTequilaToken {
  [__tequilaToken release_stub];
  __tequilaToken = nil;
  __tequilaToken_isset = NO;
}

- (BOOL) rememberMe {
  return __rememberMe;
}

- (void) setRememberMe: (BOOL) rememberMe {
  __rememberMe = rememberMe;
  __rememberMe_isset = YES;
}

- (BOOL) rememberMeIsSet {
  return __rememberMe_isset;
}

- (void) unsetRememberMe {
  __rememberMe_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTequilaToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRememberMe: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthSessionRequest"];
  if (__tequilaToken_isset) {
    if (__tequilaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"tequilaToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tequilaToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rememberMe_isset) {
    [outProtocol writeFieldBeginWithName: @"rememberMe" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __rememberMe];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__tequilaToken_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'tequilaToken' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthSessionRequest("];
  [ms appendString: @"tequilaToken:"];
  [ms appendFormat: @"\"%@\"", __tequilaToken];
  [ms appendString: @",rememberMe:"];
  [ms appendFormat: @"%i", __rememberMe];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LogoutResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatusCode: (int) statusCode deletedSessionsCount: (int32_t) deletedSessionsCount
{
  self = [super init];
  __statusCode = statusCode;
  __statusCode_isset = YES;
  __deletedSessionsCount = deletedSessionsCount;
  __deletedSessionsCount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"deletedSessionsCount"])
  {
    __deletedSessionsCount = [decoder decodeInt32ForKey: @"deletedSessionsCount"];
    __deletedSessionsCount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
  if (__deletedSessionsCount_isset)
  {
    [encoder encodeInt32: __deletedSessionsCount forKey: @"deletedSessionsCount"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (int32_t) deletedSessionsCount {
  return __deletedSessionsCount;
}

- (void) setDeletedSessionsCount: (int32_t) deletedSessionsCount {
  __deletedSessionsCount = deletedSessionsCount;
  __deletedSessionsCount_isset = YES;
}

- (BOOL) deletedSessionsCountIsSet {
  return __deletedSessionsCount_isset;
}

- (void) unsetDeletedSessionsCount {
  __deletedSessionsCount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDeletedSessionsCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LogoutResponse"];
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  if (__deletedSessionsCount_isset) {
    [outProtocol writeFieldBeginWithName: @"deletedSessionsCount" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __deletedSessionsCount];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__statusCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'statusCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LogoutResponse("];
  [ms appendString: @"statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @",deletedSessionsCount:"];
  [ms appendFormat: @"%i", __deletedSessionsCount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LogoutRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionId: (NSString *) sessionId
{
  self = [super init];
  __sessionId = [sessionId retain_stub];
  __sessionId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionId"])
  {
    __sessionId = [[decoder decodeObjectForKey: @"sessionId"] retain_stub];
    __sessionId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionId_isset)
  {
    [encoder encodeObject: __sessionId forKey: @"sessionId"];
  }
}

- (void) dealloc
{
  [__sessionId release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionId {
  return [[__sessionId retain_stub] autorelease_stub];
}

- (void) setSessionId: (NSString *) sessionId {
  [sessionId retain_stub];
  [__sessionId release_stub];
  __sessionId = sessionId;
  __sessionId_isset = YES;
}

- (BOOL) sessionIdIsSet {
  return __sessionId_isset;
}

- (void) unsetSessionId {
  [__sessionId release_stub];
  __sessionId = nil;
  __sessionId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LogoutRequest"];
  if (__sessionId_isset) {
    if (__sessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__sessionId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'sessionId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LogoutRequest("];
  [ms appendString: @"sessionId:"];
  [ms appendFormat: @"\"%@\"", __sessionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserAttributesResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserAttributes: (NSMutableArray *) userAttributes statusCode: (int) statusCode
{
  self = [super init];
  __userAttributes = [userAttributes retain_stub];
  __userAttributes_isset = YES;
  __statusCode = statusCode;
  __statusCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userAttributes"])
  {
    __userAttributes = [[decoder decodeObjectForKey: @"userAttributes"] retain_stub];
    __userAttributes_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userAttributes_isset)
  {
    [encoder encodeObject: __userAttributes forKey: @"userAttributes"];
  }
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
}

- (void) dealloc
{
  [__userAttributes release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) userAttributes {
  return [[__userAttributes retain_stub] autorelease_stub];
}

- (void) setUserAttributes: (NSMutableArray *) userAttributes {
  [userAttributes retain_stub];
  [__userAttributes release_stub];
  __userAttributes = userAttributes;
  __userAttributes_isset = YES;
}

- (BOOL) userAttributesIsSet {
  return __userAttributes_isset;
}

- (void) unsetUserAttributes {
  [__userAttributes release_stub];
  __userAttributes = nil;
  __userAttributes_isset = NO;
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setUserAttributes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserAttributesResponse"];
  if (__userAttributes_isset) {
    if (__userAttributes != nil) {
      [outProtocol writeFieldBeginWithName: @"userAttributes" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__userAttributes count]];
        int idx4;
        for (idx4 = 0; idx4 < [__userAttributes count]; idx4++)
        {
          [outProtocol writeString: [__userAttributes objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__statusCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'statusCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserAttributesResponse("];
  [ms appendString: @"userAttributes:"];
  [ms appendFormat: @"%@", __userAttributes];
  [ms appendString: @",statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserAttributesRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionId: (NSString *) sessionId attributeNames: (NSMutableArray *) attributeNames
{
  self = [super init];
  __sessionId = [sessionId retain_stub];
  __sessionId_isset = YES;
  __attributeNames = [attributeNames retain_stub];
  __attributeNames_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionId"])
  {
    __sessionId = [[decoder decodeObjectForKey: @"sessionId"] retain_stub];
    __sessionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"attributeNames"])
  {
    __attributeNames = [[decoder decodeObjectForKey: @"attributeNames"] retain_stub];
    __attributeNames_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionId_isset)
  {
    [encoder encodeObject: __sessionId forKey: @"sessionId"];
  }
  if (__attributeNames_isset)
  {
    [encoder encodeObject: __attributeNames forKey: @"attributeNames"];
  }
}

- (void) dealloc
{
  [__sessionId release_stub];
  [__attributeNames release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionId {
  return [[__sessionId retain_stub] autorelease_stub];
}

- (void) setSessionId: (NSString *) sessionId {
  [sessionId retain_stub];
  [__sessionId release_stub];
  __sessionId = sessionId;
  __sessionId_isset = YES;
}

- (BOOL) sessionIdIsSet {
  return __sessionId_isset;
}

- (void) unsetSessionId {
  [__sessionId release_stub];
  __sessionId = nil;
  __sessionId_isset = NO;
}

- (NSMutableArray *) attributeNames {
  return [[__attributeNames retain_stub] autorelease_stub];
}

- (void) setAttributeNames: (NSMutableArray *) attributeNames {
  [attributeNames retain_stub];
  [__attributeNames release_stub];
  __attributeNames = attributeNames;
  __attributeNames_isset = YES;
}

- (BOOL) attributeNamesIsSet {
  return __attributeNames_isset;
}

- (void) unsetAttributeNames {
  [__attributeNames release_stub];
  __attributeNames = nil;
  __attributeNames_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readListEnd];
          [self setAttributeNames: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserAttributesRequest"];
  if (__sessionId_isset) {
    if (__sessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__attributeNames_isset) {
    if (__attributeNames != nil) {
      [outProtocol writeFieldBeginWithName: @"attributeNames" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__attributeNames count]];
        int idx9;
        for (idx9 = 0; idx9 < [__attributeNames count]; idx9++)
        {
          [outProtocol writeString: [__attributeNames objectAtIndex: idx9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__sessionId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'sessionId' is not set."];
  }
  if (!__attributeNames_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'attributeNames' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserAttributesRequest("];
  [ms appendString: @"sessionId:"];
  [ms appendFormat: @"\"%@\"", __sessionId];
  [ms appendString: @",attributeNames:"];
  [ms appendFormat: @"%@", __attributeNames];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation authenticationConstants
+ (void) initialize {
}
@end

@interface getAuthTequilaToken_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation getAuthTequilaToken_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getAuthTequilaToken_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getAuthTequilaToken_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetAuthTequilaToken_result : NSObject <TBase, NSCoding> {
  AuthTokenResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthTokenResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (AuthTokenResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthTokenResponse *) success;
- (void) setSuccess: (AuthTokenResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAuthTequilaToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AuthTokenResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (AuthTokenResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AuthTokenResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthTokenResponse *fieldValue = [[AuthTokenResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAuthTequilaToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAuthTequilaToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getAuthSession_args : NSObject <TBase, NSCoding> {
  AuthSessionRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) AuthSessionRequest * req;
#endif

- (id) init;
- (id) initWithReq: (AuthSessionRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthSessionRequest *) req;
- (void) setReq: (AuthSessionRequest *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getAuthSession_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (AuthSessionRequest *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (AuthSessionRequest *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (AuthSessionRequest *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthSessionRequest *fieldValue = [[AuthSessionRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getAuthSession_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getAuthSession_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetAuthSession_result : NSObject <TBase, NSCoding> {
  AuthSessionResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthSessionResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (AuthSessionResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthSessionResponse *) success;
- (void) setSuccess: (AuthSessionResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAuthSession_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AuthSessionResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (AuthSessionResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AuthSessionResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthSessionResponse *fieldValue = [[AuthSessionResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAuthSession_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAuthSession_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface destroyAllUserSessions_args : NSObject <TBase, NSCoding> {
  LogoutRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) LogoutRequest * req;
#endif

- (id) init;
- (id) initWithReq: (LogoutRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LogoutRequest *) req;
- (void) setReq: (LogoutRequest *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation destroyAllUserSessions_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (LogoutRequest *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (LogoutRequest *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (LogoutRequest *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          LogoutRequest *fieldValue = [[LogoutRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"destroyAllUserSessions_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"destroyAllUserSessions_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DestroyAllUserSessions_result : NSObject <TBase, NSCoding> {
  LogoutResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LogoutResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (LogoutResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LogoutResponse *) success;
- (void) setSuccess: (LogoutResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DestroyAllUserSessions_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LogoutResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LogoutResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LogoutResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LogoutResponse *fieldValue = [[LogoutResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DestroyAllUserSessions_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DestroyAllUserSessions_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getUserAttributes_args : NSObject <TBase, NSCoding> {
  UserAttributesRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) UserAttributesRequest * req;
#endif

- (id) init;
- (id) initWithReq: (UserAttributesRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UserAttributesRequest *) req;
- (void) setReq: (UserAttributesRequest *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getUserAttributes_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (UserAttributesRequest *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (UserAttributesRequest *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (UserAttributesRequest *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          UserAttributesRequest *fieldValue = [[UserAttributesRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUserAttributes_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getUserAttributes_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetUserAttributes_result : NSObject <TBase, NSCoding> {
  UserAttributesResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UserAttributesResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (UserAttributesResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UserAttributesResponse *) success;
- (void) setSuccess: (UserAttributesResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetUserAttributes_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (UserAttributesResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (UserAttributesResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (UserAttributesResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UserAttributesResponse *fieldValue = [[UserAttributesResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserAttributes_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserAttributes_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getAuthSessionId_args : NSObject <TBase, NSCoding> {
  NSString * __tequilaToken;

  BOOL __tequilaToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=tequilaToken, setter=setTequilaToken:) NSString * tequilaToken;
#endif

- (id) init;
- (id) initWithTequilaToken: (NSString *) tequilaToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) tequilaToken;
- (void) setTequilaToken: (NSString *) tequilaToken;
#endif
- (BOOL) tequilaTokenIsSet;

@end

@implementation getAuthSessionId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTequilaToken: (NSString *) tequilaToken
{
  self = [super init];
  __tequilaToken = [tequilaToken retain_stub];
  __tequilaToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tequilaToken"])
  {
    __tequilaToken = [[decoder decodeObjectForKey: @"tequilaToken"] retain_stub];
    __tequilaToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tequilaToken_isset)
  {
    [encoder encodeObject: __tequilaToken forKey: @"tequilaToken"];
  }
}

- (void) dealloc
{
  [__tequilaToken release_stub];
  [super dealloc_stub];
}

- (NSString *) tequilaToken {
  return [[__tequilaToken retain_stub] autorelease_stub];
}

- (void) setTequilaToken: (NSString *) tequilaToken {
  [tequilaToken retain_stub];
  [__tequilaToken release_stub];
  __tequilaToken = tequilaToken;
  __tequilaToken_isset = YES;
}

- (BOOL) tequilaTokenIsSet {
  return __tequilaToken_isset;
}

- (void) unsetTequilaToken {
  [__tequilaToken release_stub];
  __tequilaToken = nil;
  __tequilaToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTequilaToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getAuthSessionId_args"];
  if (__tequilaToken_isset) {
    if (__tequilaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"tequilaToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tequilaToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getAuthSessionId_args("];
  [ms appendString: @"tequilaToken:"];
  [ms appendFormat: @"\"%@\"", __tequilaToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetAuthSessionId_result : NSObject <TBase, NSCoding> {
  AuthSessionResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthSessionResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (AuthSessionResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthSessionResponse *) success;
- (void) setSuccess: (AuthSessionResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAuthSessionId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AuthSessionResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (AuthSessionResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AuthSessionResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthSessionResponse *fieldValue = [[AuthSessionResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAuthSessionId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAuthSessionId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getAuthTequilaToken
{
  [outProtocol writeMessageBeginWithName: @"getAuthTequilaToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getAuthTequilaToken_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AuthTokenResponse *) recv_getAuthTequilaToken
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetAuthTequilaToken_result * result = [[[GetAuthTequilaToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getAuthTequilaToken failed: unknown result"];
}

- (AuthTokenResponse *) getAuthTequilaToken
{
  [self send_getAuthTequilaToken];
  return [self recv_getAuthTequilaToken];
}

- (void) send_getAuthSession: (AuthSessionRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"getAuthSession" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getAuthSession_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AuthSessionResponse *) recv_getAuthSession
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetAuthSession_result * result = [[[GetAuthSession_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getAuthSession failed: unknown result"];
}

- (AuthSessionResponse *) getAuthSession: (AuthSessionRequest *) req
{
  [self send_getAuthSession : req];
  return [self recv_getAuthSession];
}

- (void) send_destroyAllUserSessions: (LogoutRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"destroyAllUserSessions" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"destroyAllUserSessions_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LogoutResponse *) recv_destroyAllUserSessions
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  DestroyAllUserSessions_result * result = [[[DestroyAllUserSessions_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"destroyAllUserSessions failed: unknown result"];
}

- (LogoutResponse *) destroyAllUserSessions: (LogoutRequest *) req
{
  [self send_destroyAllUserSessions : req];
  return [self recv_destroyAllUserSessions];
}

- (void) send_getUserAttributes: (UserAttributesRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"getUserAttributes" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUserAttributes_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (UserAttributesResponse *) recv_getUserAttributes
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetUserAttributes_result * result = [[[GetUserAttributes_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUserAttributes failed: unknown result"];
}

- (UserAttributesResponse *) getUserAttributes: (UserAttributesRequest *) req
{
  [self send_getUserAttributes : req];
  return [self recv_getUserAttributes];
}

- (void) send_getAuthSessionId: (NSString *) tequilaToken
{
  [outProtocol writeMessageBeginWithName: @"getAuthSessionId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getAuthSessionId_args"];
  if (tequilaToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"tequilaToken" type: TType_STRING fieldID: 1];
    [outProtocol writeString: tequilaToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AuthSessionResponse *) recv_getAuthSessionId
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetAuthSessionId_result * result = [[[GetAuthSessionId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getAuthSessionId failed: unknown result"];
}

- (AuthSessionResponse *) getAuthSessionId: (NSString *) tequilaToken
{
  [self send_getAuthSessionId : tequilaToken];
  return [self recv_getAuthSessionId];
}

@end

@implementation AuthenticationServiceProcessor

- (id) initWithAuthenticationService: (id <AuthenticationService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getAuthTequilaToken_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getAuthTequilaToken"];
  }
  {
    SEL s = @selector(process_getAuthSession_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getAuthSession"];
  }
  {
    SEL s = @selector(process_destroyAllUserSessions_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"destroyAllUserSessions"];
  }
  {
    SEL s = @selector(process_getUserAttributes_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getUserAttributes"];
  }
  {
    SEL s = @selector(process_getAuthSessionId_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getAuthSessionId"];
  }
  return self;
}

- (id<AuthenticationService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAuthTequilaToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getAuthTequilaToken_args * args = [[getAuthTequilaToken_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetAuthTequilaToken_result * result = [[GetAuthTequilaToken_result alloc] init];
  [result setSuccess: [mService getAuthTequilaToken]];
  [outProtocol writeMessageBeginWithName: @"getAuthTequilaToken"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getAuthSession_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getAuthSession_args * args = [[getAuthSession_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetAuthSession_result * result = [[GetAuthSession_result alloc] init];
  [result setSuccess: [mService getAuthSession: [args req]]];
  [outProtocol writeMessageBeginWithName: @"getAuthSession"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_destroyAllUserSessions_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  destroyAllUserSessions_args * args = [[destroyAllUserSessions_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  DestroyAllUserSessions_result * result = [[DestroyAllUserSessions_result alloc] init];
  [result setSuccess: [mService destroyAllUserSessions: [args req]]];
  [outProtocol writeMessageBeginWithName: @"destroyAllUserSessions"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getUserAttributes_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getUserAttributes_args * args = [[getUserAttributes_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetUserAttributes_result * result = [[GetUserAttributes_result alloc] init];
  [result setSuccess: [mService getUserAttributes: [args req]]];
  [outProtocol writeMessageBeginWithName: @"getUserAttributes"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getAuthSessionId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getAuthSessionId_args * args = [[getAuthSessionId_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetAuthSessionId_result * result = [[GetAuthSessionId_result alloc] init];
  [result setSuccess: [mService getAuthSessionId: [args tequilaToken]]];
  [outProtocol writeMessageBeginWithName: @"getAuthSessionId"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

