/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "transport.h"

@implementation TransportStation

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id latitude: (int32_t) latitude longitude: (int32_t) longitude name: (NSString *) name
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeInt32ForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeInt32ForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__latitude_isset)
  {
    [encoder encodeInt32: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeInt32: __longitude forKey: @"longitude"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int32_t) latitude {
  return __latitude;
}

- (void) setLatitude: (int32_t) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (int32_t) longitude {
  return __longitude;
}

- (void) setLongitude: (int32_t) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportStation"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__latitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'latitude' is not set."];
  }
  if (!__longitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'longitude' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportStation("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%i", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%i", __longitude];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportLine

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name _UNUSED: (NSMutableArray *) _UNUSED
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  ___UNUSED = [_UNUSED retain_stub];
  ___UNUSED_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"_UNUSED"])
  {
    ___UNUSED = [[decoder decodeObjectForKey: @"_UNUSED"] retain_stub];
    ___UNUSED_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (___UNUSED_isset)
  {
    [encoder encodeObject: ___UNUSED forKey: @"_UNUSED"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [___UNUSED release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSMutableArray *) _UNUSED {
  return [[___UNUSED retain_stub] autorelease_stub];
}

- (void) set_UNUSED: (NSMutableArray *) _UNUSED {
  [_UNUSED retain_stub];
  [___UNUSED release_stub];
  ___UNUSED = _UNUSED;
  ___UNUSED_isset = YES;
}

- (BOOL) _UNUSEDIsSet {
  return ___UNUSED_isset;
}

- (void) unset_UNUSED {
  [___UNUSED release_stub];
  ___UNUSED = nil;
  ___UNUSED_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self set_UNUSED: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportLine"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (___UNUSED_isset) {
    if (___UNUSED != nil) {
      [outProtocol writeFieldBeginWithName: @"_UNUSED" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [___UNUSED count]];
        int idx4;
        for (idx4 = 0; idx4 < [___UNUSED count]; idx4++)
        {
          [outProtocol writeString: [___UNUSED objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!___UNUSED_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field '_UNUSED' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportLine("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",_UNUSED:"];
  [ms appendFormat: @"%@", ___UNUSED];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportConnection

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeparture: (TransportStation *) departure arrival: (TransportStation *) arrival line: (TransportLine *) line departureTime: (int64_t) departureTime departurePosition: (NSString *) departurePosition arrivalTime: (int64_t) arrivalTime arrivalPosition: (NSString *) arrivalPosition foot: (BOOL) foot footDuration: (int32_t) footDuration
{
  self = [super init];
  __departure = [departure retain_stub];
  __departure_isset = YES;
  __arrival = [arrival retain_stub];
  __arrival_isset = YES;
  __line = [line retain_stub];
  __line_isset = YES;
  __departureTime = departureTime;
  __departureTime_isset = YES;
  __departurePosition = [departurePosition retain_stub];
  __departurePosition_isset = YES;
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
  __arrivalPosition = [arrivalPosition retain_stub];
  __arrivalPosition_isset = YES;
  __foot = foot;
  __foot_isset = YES;
  __footDuration = footDuration;
  __footDuration_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"departure"])
  {
    __departure = [[decoder decodeObjectForKey: @"departure"] retain_stub];
    __departure_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrival"])
  {
    __arrival = [[decoder decodeObjectForKey: @"arrival"] retain_stub];
    __arrival_isset = YES;
  }
  if ([decoder containsValueForKey: @"line"])
  {
    __line = [[decoder decodeObjectForKey: @"line"] retain_stub];
    __line_isset = YES;
  }
  if ([decoder containsValueForKey: @"departureTime"])
  {
    __departureTime = [decoder decodeInt64ForKey: @"departureTime"];
    __departureTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"departurePosition"])
  {
    __departurePosition = [[decoder decodeObjectForKey: @"departurePosition"] retain_stub];
    __departurePosition_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalTime"])
  {
    __arrivalTime = [decoder decodeInt64ForKey: @"arrivalTime"];
    __arrivalTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalPosition"])
  {
    __arrivalPosition = [[decoder decodeObjectForKey: @"arrivalPosition"] retain_stub];
    __arrivalPosition_isset = YES;
  }
  if ([decoder containsValueForKey: @"foot"])
  {
    __foot = [decoder decodeBoolForKey: @"foot"];
    __foot_isset = YES;
  }
  if ([decoder containsValueForKey: @"footDuration"])
  {
    __footDuration = [decoder decodeInt32ForKey: @"footDuration"];
    __footDuration_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__departure_isset)
  {
    [encoder encodeObject: __departure forKey: @"departure"];
  }
  if (__arrival_isset)
  {
    [encoder encodeObject: __arrival forKey: @"arrival"];
  }
  if (__line_isset)
  {
    [encoder encodeObject: __line forKey: @"line"];
  }
  if (__departureTime_isset)
  {
    [encoder encodeInt64: __departureTime forKey: @"departureTime"];
  }
  if (__departurePosition_isset)
  {
    [encoder encodeObject: __departurePosition forKey: @"departurePosition"];
  }
  if (__arrivalTime_isset)
  {
    [encoder encodeInt64: __arrivalTime forKey: @"arrivalTime"];
  }
  if (__arrivalPosition_isset)
  {
    [encoder encodeObject: __arrivalPosition forKey: @"arrivalPosition"];
  }
  if (__foot_isset)
  {
    [encoder encodeBool: __foot forKey: @"foot"];
  }
  if (__footDuration_isset)
  {
    [encoder encodeInt32: __footDuration forKey: @"footDuration"];
  }
}

- (void) dealloc
{
  [__departure release_stub];
  [__arrival release_stub];
  [__line release_stub];
  [__departurePosition release_stub];
  [__arrivalPosition release_stub];
  [super dealloc_stub];
}

- (TransportStation *) departure {
  return [[__departure retain_stub] autorelease_stub];
}

- (void) setDeparture: (TransportStation *) departure {
  [departure retain_stub];
  [__departure release_stub];
  __departure = departure;
  __departure_isset = YES;
}

- (BOOL) departureIsSet {
  return __departure_isset;
}

- (void) unsetDeparture {
  [__departure release_stub];
  __departure = nil;
  __departure_isset = NO;
}

- (TransportStation *) arrival {
  return [[__arrival retain_stub] autorelease_stub];
}

- (void) setArrival: (TransportStation *) arrival {
  [arrival retain_stub];
  [__arrival release_stub];
  __arrival = arrival;
  __arrival_isset = YES;
}

- (BOOL) arrivalIsSet {
  return __arrival_isset;
}

- (void) unsetArrival {
  [__arrival release_stub];
  __arrival = nil;
  __arrival_isset = NO;
}

- (TransportLine *) line {
  return [[__line retain_stub] autorelease_stub];
}

- (void) setLine: (TransportLine *) line {
  [line retain_stub];
  [__line release_stub];
  __line = line;
  __line_isset = YES;
}

- (BOOL) lineIsSet {
  return __line_isset;
}

- (void) unsetLine {
  [__line release_stub];
  __line = nil;
  __line_isset = NO;
}

- (int64_t) departureTime {
  return __departureTime;
}

- (void) setDepartureTime: (int64_t) departureTime {
  __departureTime = departureTime;
  __departureTime_isset = YES;
}

- (BOOL) departureTimeIsSet {
  return __departureTime_isset;
}

- (void) unsetDepartureTime {
  __departureTime_isset = NO;
}

- (NSString *) departurePosition {
  return [[__departurePosition retain_stub] autorelease_stub];
}

- (void) setDeparturePosition: (NSString *) departurePosition {
  [departurePosition retain_stub];
  [__departurePosition release_stub];
  __departurePosition = departurePosition;
  __departurePosition_isset = YES;
}

- (BOOL) departurePositionIsSet {
  return __departurePosition_isset;
}

- (void) unsetDeparturePosition {
  [__departurePosition release_stub];
  __departurePosition = nil;
  __departurePosition_isset = NO;
}

- (int64_t) arrivalTime {
  return __arrivalTime;
}

- (void) setArrivalTime: (int64_t) arrivalTime {
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
}

- (BOOL) arrivalTimeIsSet {
  return __arrivalTime_isset;
}

- (void) unsetArrivalTime {
  __arrivalTime_isset = NO;
}

- (NSString *) arrivalPosition {
  return [[__arrivalPosition retain_stub] autorelease_stub];
}

- (void) setArrivalPosition: (NSString *) arrivalPosition {
  [arrivalPosition retain_stub];
  [__arrivalPosition release_stub];
  __arrivalPosition = arrivalPosition;
  __arrivalPosition_isset = YES;
}

- (BOOL) arrivalPositionIsSet {
  return __arrivalPosition_isset;
}

- (void) unsetArrivalPosition {
  [__arrivalPosition release_stub];
  __arrivalPosition = nil;
  __arrivalPosition_isset = NO;
}

- (BOOL) foot {
  return __foot;
}

- (void) setFoot: (BOOL) foot {
  __foot = foot;
  __foot_isset = YES;
}

- (BOOL) footIsSet {
  return __foot_isset;
}

- (void) unsetFoot {
  __foot_isset = NO;
}

- (int32_t) footDuration {
  return __footDuration;
}

- (void) setFootDuration: (int32_t) footDuration {
  __footDuration = footDuration;
  __footDuration_isset = YES;
}

- (BOOL) footDurationIsSet {
  return __footDuration_isset;
}

- (void) unsetFootDuration {
  __footDuration_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setDeparture: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setArrival: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          TransportLine *fieldValue = [[TransportLine alloc] init];
          [fieldValue read: inProtocol];
          [self setLine: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDepartureTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeparturePosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArrivalTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArrivalPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFoot: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFootDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportConnection"];
  if (__departure_isset) {
    if (__departure != nil) {
      [outProtocol writeFieldBeginWithName: @"departure" type: TType_STRUCT fieldID: 1];
      [__departure write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__arrival_isset) {
    if (__arrival != nil) {
      [outProtocol writeFieldBeginWithName: @"arrival" type: TType_STRUCT fieldID: 2];
      [__arrival write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__line_isset) {
    if (__line != nil) {
      [outProtocol writeFieldBeginWithName: @"line" type: TType_STRUCT fieldID: 4];
      [__line write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__departureTime_isset) {
    [outProtocol writeFieldBeginWithName: @"departureTime" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __departureTime];
    [outProtocol writeFieldEnd];
  }
  if (__departurePosition_isset) {
    if (__departurePosition != nil) {
      [outProtocol writeFieldBeginWithName: @"departurePosition" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __departurePosition];
      [outProtocol writeFieldEnd];
    }
  }
  if (__arrivalTime_isset) {
    [outProtocol writeFieldBeginWithName: @"arrivalTime" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __arrivalTime];
    [outProtocol writeFieldEnd];
  }
  if (__arrivalPosition_isset) {
    if (__arrivalPosition != nil) {
      [outProtocol writeFieldBeginWithName: @"arrivalPosition" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __arrivalPosition];
      [outProtocol writeFieldEnd];
    }
  }
  if (__foot_isset) {
    [outProtocol writeFieldBeginWithName: @"foot" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __foot];
    [outProtocol writeFieldEnd];
  }
  if (__footDuration_isset) {
    [outProtocol writeFieldBeginWithName: @"footDuration" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __footDuration];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__departure_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'departure' is not set."];
  }
  if (!__arrival_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'arrival' is not set."];
  }
  if (!__foot_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'foot' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportConnection("];
  [ms appendString: @"departure:"];
  [ms appendFormat: @"%@", __departure];
  [ms appendString: @",arrival:"];
  [ms appendFormat: @"%@", __arrival];
  [ms appendString: @",line:"];
  [ms appendFormat: @"%@", __line];
  [ms appendString: @",departureTime:"];
  [ms appendFormat: @"%qi", __departureTime];
  [ms appendString: @",departurePosition:"];
  [ms appendFormat: @"\"%@\"", __departurePosition];
  [ms appendString: @",arrivalTime:"];
  [ms appendFormat: @"%qi", __arrivalTime];
  [ms appendString: @",arrivalPosition:"];
  [ms appendFormat: @"\"%@\"", __arrivalPosition];
  [ms appendString: @",foot:"];
  [ms appendFormat: @"%i", __foot];
  [ms appendString: @",footDuration:"];
  [ms appendFormat: @"%i", __footDuration];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportTrip

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id departureTime: (int64_t) departureTime arrivalTime: (int64_t) arrivalTime from: (TransportStation *) from to: (TransportStation *) to parts: (NSMutableArray *) parts
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __departureTime = departureTime;
  __departureTime_isset = YES;
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
  __from = [from retain_stub];
  __from_isset = YES;
  __to = [to retain_stub];
  __to_isset = YES;
  __parts = [parts retain_stub];
  __parts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"departureTime"])
  {
    __departureTime = [decoder decodeInt64ForKey: @"departureTime"];
    __departureTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalTime"])
  {
    __arrivalTime = [decoder decodeInt64ForKey: @"arrivalTime"];
    __arrivalTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain_stub];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain_stub];
    __to_isset = YES;
  }
  if ([decoder containsValueForKey: @"parts"])
  {
    __parts = [[decoder decodeObjectForKey: @"parts"] retain_stub];
    __parts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__departureTime_isset)
  {
    [encoder encodeInt64: __departureTime forKey: @"departureTime"];
  }
  if (__arrivalTime_isset)
  {
    [encoder encodeInt64: __arrivalTime forKey: @"arrivalTime"];
  }
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
  if (__parts_isset)
  {
    [encoder encodeObject: __parts forKey: @"parts"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__from release_stub];
  [__to release_stub];
  [__parts release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (int64_t) departureTime {
  return __departureTime;
}

- (void) setDepartureTime: (int64_t) departureTime {
  __departureTime = departureTime;
  __departureTime_isset = YES;
}

- (BOOL) departureTimeIsSet {
  return __departureTime_isset;
}

- (void) unsetDepartureTime {
  __departureTime_isset = NO;
}

- (int64_t) arrivalTime {
  return __arrivalTime;
}

- (void) setArrivalTime: (int64_t) arrivalTime {
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
}

- (BOOL) arrivalTimeIsSet {
  return __arrivalTime_isset;
}

- (void) unsetArrivalTime {
  __arrivalTime_isset = NO;
}

- (TransportStation *) from {
  return [[__from retain_stub] autorelease_stub];
}

- (void) setFrom: (TransportStation *) from {
  [from retain_stub];
  [__from release_stub];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release_stub];
  __from = nil;
  __from_isset = NO;
}

- (TransportStation *) to {
  return [[__to retain_stub] autorelease_stub];
}

- (void) setTo: (TransportStation *) to {
  [to retain_stub];
  [__to release_stub];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release_stub];
  __to = nil;
  __to_isset = NO;
}

- (NSMutableArray *) parts {
  return [[__parts retain_stub] autorelease_stub];
}

- (void) setParts: (NSMutableArray *) parts {
  [parts retain_stub];
  [__parts release_stub];
  __parts = parts;
  __parts_isset = YES;
}

- (BOOL) partsIsSet {
  return __parts_isset;
}

- (void) unsetParts {
  [__parts release_stub];
  __parts = nil;
  __parts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDepartureTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArrivalTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setFrom: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setTo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            TransportConnection *_elem7 = [[TransportConnection alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setParts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportTrip"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__departureTime_isset) {
    [outProtocol writeFieldBeginWithName: @"departureTime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __departureTime];
    [outProtocol writeFieldEnd];
  }
  if (__arrivalTime_isset) {
    [outProtocol writeFieldBeginWithName: @"arrivalTime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __arrivalTime];
    [outProtocol writeFieldEnd];
  }
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRUCT fieldID: 5];
      [__from write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRUCT fieldID: 6];
      [__to write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__parts_isset) {
    if (__parts != nil) {
      [outProtocol writeFieldBeginWithName: @"parts" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__parts count]];
        int idx9;
        for (idx9 = 0; idx9 < [__parts count]; idx9++)
        {
          [[__parts objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__departureTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'departureTime' is not set."];
  }
  if (!__arrivalTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'arrivalTime' is not set."];
  }
  if (!__from_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'from' is not set."];
  }
  if (!__to_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'to' is not set."];
  }
  if (!__parts_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'parts' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportTrip("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",departureTime:"];
  [ms appendFormat: @"%qi", __departureTime];
  [ms appendString: @",arrivalTime:"];
  [ms appendFormat: @"%qi", __arrivalTime];
  [ms appendString: @",from:"];
  [ms appendFormat: @"%@", __from];
  [ms appendString: @",to:"];
  [ms appendFormat: @"%@", __to];
  [ms appendString: @",parts:"];
  [ms appendFormat: @"%@", __parts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryTripsResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFrom: (TransportStation *) from to: (TransportStation *) to connections: (NSMutableArray *) connections
{
  self = [super init];
  __from = [from retain_stub];
  __from_isset = YES;
  __to = [to retain_stub];
  __to_isset = YES;
  __connections = [connections retain_stub];
  __connections_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain_stub];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain_stub];
    __to_isset = YES;
  }
  if ([decoder containsValueForKey: @"connections"])
  {
    __connections = [[decoder decodeObjectForKey: @"connections"] retain_stub];
    __connections_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
  if (__connections_isset)
  {
    [encoder encodeObject: __connections forKey: @"connections"];
  }
}

- (void) dealloc
{
  [__from release_stub];
  [__to release_stub];
  [__connections release_stub];
  [super dealloc_stub];
}

- (TransportStation *) from {
  return [[__from retain_stub] autorelease_stub];
}

- (void) setFrom: (TransportStation *) from {
  [from retain_stub];
  [__from release_stub];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release_stub];
  __from = nil;
  __from_isset = NO;
}

- (TransportStation *) to {
  return [[__to retain_stub] autorelease_stub];
}

- (void) setTo: (TransportStation *) to {
  [to retain_stub];
  [__to release_stub];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release_stub];
  __to = nil;
  __to_isset = NO;
}

- (NSMutableArray *) connections {
  return [[__connections retain_stub] autorelease_stub];
}

- (void) setConnections: (NSMutableArray *) connections {
  [connections retain_stub];
  [__connections release_stub];
  __connections = connections;
  __connections_isset = YES;
}

- (BOOL) connectionsIsSet {
  return __connections_isset;
}

- (void) unsetConnections {
  [__connections release_stub];
  __connections = nil;
  __connections_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 5:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setFrom: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setTo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            TransportTrip *_elem12 = [[TransportTrip alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setConnections: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryTripsResult"];
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRUCT fieldID: 5];
      [__from write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRUCT fieldID: 7];
      [__to write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__connections_isset) {
    if (__connections != nil) {
      [outProtocol writeFieldBeginWithName: @"connections" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__connections count]];
        int idx14;
        for (idx14 = 0; idx14 < [__connections count]; idx14++)
        {
          [[__connections objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__from_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'from' is not set."];
  }
  if (!__to_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'to' is not set."];
  }
  if (!__connections_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'connections' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryTripsResult("];
  [ms appendString: @"from:"];
  [ms appendFormat: @"%@", __from];
  [ms appendString: @",to:"];
  [ms appendFormat: @"%@", __to];
  [ms appendString: @",connections:"];
  [ms appendFormat: @"%@", __connections];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportGeoPoint

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLatitude: (double) latitude longitude: (double) longitude
{
  self = [super init];
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportGeoPoint"];
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__latitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'latitude' is not set."];
  }
  if (!__longitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'longitude' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportGeoPoint("];
  [ms appendString: @"latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportStationSearchRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStationName: (NSString *) stationName geoPoint: (TransportGeoPoint *) geoPoint
{
  self = [super init];
  __stationName = [stationName retain_stub];
  __stationName_isset = YES;
  __geoPoint = [geoPoint retain_stub];
  __geoPoint_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"stationName"])
  {
    __stationName = [[decoder decodeObjectForKey: @"stationName"] retain_stub];
    __stationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"geoPoint"])
  {
    __geoPoint = [[decoder decodeObjectForKey: @"geoPoint"] retain_stub];
    __geoPoint_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__stationName_isset)
  {
    [encoder encodeObject: __stationName forKey: @"stationName"];
  }
  if (__geoPoint_isset)
  {
    [encoder encodeObject: __geoPoint forKey: @"geoPoint"];
  }
}

- (void) dealloc
{
  [__stationName release_stub];
  [__geoPoint release_stub];
  [super dealloc_stub];
}

- (NSString *) stationName {
  return [[__stationName retain_stub] autorelease_stub];
}

- (void) setStationName: (NSString *) stationName {
  [stationName retain_stub];
  [__stationName release_stub];
  __stationName = stationName;
  __stationName_isset = YES;
}

- (BOOL) stationNameIsSet {
  return __stationName_isset;
}

- (void) unsetStationName {
  [__stationName release_stub];
  __stationName = nil;
  __stationName_isset = NO;
}

- (TransportGeoPoint *) geoPoint {
  return [[__geoPoint retain_stub] autorelease_stub];
}

- (void) setGeoPoint: (TransportGeoPoint *) geoPoint {
  [geoPoint retain_stub];
  [__geoPoint release_stub];
  __geoPoint = geoPoint;
  __geoPoint_isset = YES;
}

- (BOOL) geoPointIsSet {
  return __geoPoint_isset;
}

- (void) unsetGeoPoint {
  [__geoPoint release_stub];
  __geoPoint = nil;
  __geoPoint_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TransportGeoPoint *fieldValue = [[TransportGeoPoint alloc] init];
          [fieldValue read: inProtocol];
          [self setGeoPoint: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportStationSearchRequest"];
  if (__stationName_isset) {
    if (__stationName != nil) {
      [outProtocol writeFieldBeginWithName: @"stationName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __stationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__geoPoint_isset) {
    if (__geoPoint != nil) {
      [outProtocol writeFieldBeginWithName: @"geoPoint" type: TType_STRUCT fieldID: 2];
      [__geoPoint write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__stationName_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'stationName' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportStationSearchRequest("];
  [ms appendString: @"stationName:"];
  [ms appendFormat: @"\"%@\"", __stationName];
  [ms appendString: @",geoPoint:"];
  [ms appendFormat: @"%@", __geoPoint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportTripSearchRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFromStation: (TransportStation *) fromStation toStation: (TransportStation *) toStation
{
  self = [super init];
  __fromStation = [fromStation retain_stub];
  __fromStation_isset = YES;
  __toStation = [toStation retain_stub];
  __toStation_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"fromStation"])
  {
    __fromStation = [[decoder decodeObjectForKey: @"fromStation"] retain_stub];
    __fromStation_isset = YES;
  }
  if ([decoder containsValueForKey: @"toStation"])
  {
    __toStation = [[decoder decodeObjectForKey: @"toStation"] retain_stub];
    __toStation_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__fromStation_isset)
  {
    [encoder encodeObject: __fromStation forKey: @"fromStation"];
  }
  if (__toStation_isset)
  {
    [encoder encodeObject: __toStation forKey: @"toStation"];
  }
}

- (void) dealloc
{
  [__fromStation release_stub];
  [__toStation release_stub];
  [super dealloc_stub];
}

- (TransportStation *) fromStation {
  return [[__fromStation retain_stub] autorelease_stub];
}

- (void) setFromStation: (TransportStation *) fromStation {
  [fromStation retain_stub];
  [__fromStation release_stub];
  __fromStation = fromStation;
  __fromStation_isset = YES;
}

- (BOOL) fromStationIsSet {
  return __fromStation_isset;
}

- (void) unsetFromStation {
  [__fromStation release_stub];
  __fromStation = nil;
  __fromStation_isset = NO;
}

- (TransportStation *) toStation {
  return [[__toStation retain_stub] autorelease_stub];
}

- (void) setToStation: (TransportStation *) toStation {
  [toStation retain_stub];
  [__toStation release_stub];
  __toStation = toStation;
  __toStation_isset = YES;
}

- (BOOL) toStationIsSet {
  return __toStation_isset;
}

- (void) unsetToStation {
  [__toStation release_stub];
  __toStation = nil;
  __toStation_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setFromStation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setToStation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportTripSearchRequest"];
  if (__fromStation_isset) {
    if (__fromStation != nil) {
      [outProtocol writeFieldBeginWithName: @"fromStation" type: TType_STRUCT fieldID: 1];
      [__fromStation write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__toStation_isset) {
    if (__toStation != nil) {
      [outProtocol writeFieldBeginWithName: @"toStation" type: TType_STRUCT fieldID: 2];
      [__toStation write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__fromStation_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'fromStation' is not set."];
  }
  if (!__toStation_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'toStation' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportTripSearchRequest("];
  [ms appendString: @"fromStation:"];
  [ms appendFormat: @"%@", __fromStation];
  [ms appendString: @",toStation:"];
  [ms appendFormat: @"%@", __toStation];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportStationSearchResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStations: (NSMutableArray *) stations statusCode: (int) statusCode
{
  self = [super init];
  __stations = [stations retain_stub];
  __stations_isset = YES;
  __statusCode = statusCode;
  __statusCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"stations"])
  {
    __stations = [[decoder decodeObjectForKey: @"stations"] retain_stub];
    __stations_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__stations_isset)
  {
    [encoder encodeObject: __stations forKey: @"stations"];
  }
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
}

- (void) dealloc
{
  [__stations release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) stations {
  return [[__stations retain_stub] autorelease_stub];
}

- (void) setStations: (NSMutableArray *) stations {
  [stations retain_stub];
  [__stations release_stub];
  __stations = stations;
  __stations_isset = YES;
}

- (BOOL) stationsIsSet {
  return __stations_isset;
}

- (void) unsetStations {
  [__stations release_stub];
  __stations = nil;
  __stations_isset = NO;
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            TransportStation *_elem17 = [[TransportStation alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setStations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportStationSearchResponse"];
  if (__stations_isset) {
    if (__stations != nil) {
      [outProtocol writeFieldBeginWithName: @"stations" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__stations count]];
        int idx19;
        for (idx19 = 0; idx19 < [__stations count]; idx19++)
        {
          [[__stations objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__statusCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'statusCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportStationSearchResponse("];
  [ms appendString: @"stations:"];
  [ms appendFormat: @"%@", __stations];
  [ms appendString: @",statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportDefaultStationsResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStations: (NSMutableArray *) stations statusCode: (int) statusCode
{
  self = [super init];
  __stations = [stations retain_stub];
  __stations_isset = YES;
  __statusCode = statusCode;
  __statusCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"stations"])
  {
    __stations = [[decoder decodeObjectForKey: @"stations"] retain_stub];
    __stations_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__stations_isset)
  {
    [encoder encodeObject: __stations forKey: @"stations"];
  }
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
}

- (void) dealloc
{
  [__stations release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) stations {
  return [[__stations retain_stub] autorelease_stub];
}

- (void) setStations: (NSMutableArray *) stations {
  [stations retain_stub];
  [__stations release_stub];
  __stations = stations;
  __stations_isset = YES;
}

- (BOOL) stationsIsSet {
  return __stations_isset;
}

- (void) unsetStations {
  [__stations release_stub];
  __stations = nil;
  __stations_isset = NO;
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            TransportStation *_elem22 = [[TransportStation alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setStations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportDefaultStationsResponse"];
  if (__stations_isset) {
    if (__stations != nil) {
      [outProtocol writeFieldBeginWithName: @"stations" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__stations count]];
        int idx24;
        for (idx24 = 0; idx24 < [__stations count]; idx24++)
        {
          [[__stations objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__statusCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'statusCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportDefaultStationsResponse("];
  [ms appendString: @"stations:"];
  [ms appendFormat: @"%@", __stations];
  [ms appendString: @",statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportTripSearchResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTrips: (NSMutableArray *) trips statusCode: (int) statusCode
{
  self = [super init];
  __trips = [trips retain_stub];
  __trips_isset = YES;
  __statusCode = statusCode;
  __statusCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"trips"])
  {
    __trips = [[decoder decodeObjectForKey: @"trips"] retain_stub];
    __trips_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__trips_isset)
  {
    [encoder encodeObject: __trips forKey: @"trips"];
  }
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
}

- (void) dealloc
{
  [__trips release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) trips {
  return [[__trips retain_stub] autorelease_stub];
}

- (void) setTrips: (NSMutableArray *) trips {
  [trips retain_stub];
  [__trips release_stub];
  __trips = trips;
  __trips_isset = YES;
}

- (BOOL) tripsIsSet {
  return __trips_isset;
}

- (void) unsetTrips {
  [__trips release_stub];
  __trips = nil;
  __trips_isset = NO;
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            TransportTrip *_elem27 = [[TransportTrip alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setTrips: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportTripSearchResponse"];
  if (__trips_isset) {
    if (__trips != nil) {
      [outProtocol writeFieldBeginWithName: @"trips" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__trips count]];
        int idx29;
        for (idx29 = 0; idx29 < [__trips count]; idx29++)
        {
          [[__trips objectAtIndex: idx29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__statusCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'statusCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportTripSearchResponse("];
  [ms appendString: @"trips:"];
  [ms appendFormat: @"%@", __trips];
  [ms appendString: @",statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation transportConstants
+ (void) initialize {
}
@end

@interface autocomplete_args : NSObject <TBase, NSCoding> {
  NSString * __constraint;

  BOOL __constraint_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=constraint, setter=setConstraint:) NSString * constraint;
#endif

- (id) init;
- (id) initWithConstraint: (NSString *) constraint;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) constraint;
- (void) setConstraint: (NSString *) constraint;
#endif
- (BOOL) constraintIsSet;

@end

@implementation autocomplete_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithConstraint: (NSString *) constraint
{
  self = [super init];
  __constraint = [constraint retain_stub];
  __constraint_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"constraint"])
  {
    __constraint = [[decoder decodeObjectForKey: @"constraint"] retain_stub];
    __constraint_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__constraint_isset)
  {
    [encoder encodeObject: __constraint forKey: @"constraint"];
  }
}

- (void) dealloc
{
  [__constraint release_stub];
  [super dealloc_stub];
}

- (NSString *) constraint {
  return [[__constraint retain_stub] autorelease_stub];
}

- (void) setConstraint: (NSString *) constraint {
  [constraint retain_stub];
  [__constraint release_stub];
  __constraint = constraint;
  __constraint_isset = YES;
}

- (BOOL) constraintIsSet {
  return __constraint_isset;
}

- (void) unsetConstraint {
  [__constraint release_stub];
  __constraint = nil;
  __constraint_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConstraint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"autocomplete_args"];
  if (__constraint_isset) {
    if (__constraint != nil) {
      [outProtocol writeFieldBeginWithName: @"constraint" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __constraint];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"autocomplete_args("];
  [ms appendString: @"constraint:"];
  [ms appendFormat: @"\"%@\"", __constraint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Autocomplete_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Autocomplete_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            TransportStation *_elem32 = [[TransportStation alloc] init];
            [_elem32 read: inProtocol];
            [fieldValue addObject: _elem32];
            [_elem32 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Autocomplete_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx34;
        for (idx34 = 0; idx34 < [__success count]; idx34++)
        {
          [[__success objectAtIndex: idx34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Autocomplete_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getLocationsFromNames_args : NSObject <TBase, NSCoding> {
  NSMutableArray * __names;

  BOOL __names_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=names, setter=setNames:) NSMutableArray * names;
#endif

- (id) init;
- (id) initWithNames: (NSMutableArray *) names;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) names;
- (void) setNames: (NSMutableArray *) names;
#endif
- (BOOL) namesIsSet;

@end

@implementation getLocationsFromNames_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithNames: (NSMutableArray *) names
{
  self = [super init];
  __names = [names retain_stub];
  __names_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"names"])
  {
    __names = [[decoder decodeObjectForKey: @"names"] retain_stub];
    __names_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__names_isset)
  {
    [encoder encodeObject: __names forKey: @"names"];
  }
}

- (void) dealloc
{
  [__names release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) names {
  return [[__names retain_stub] autorelease_stub];
}

- (void) setNames: (NSMutableArray *) names {
  [names retain_stub];
  [__names release_stub];
  __names = names;
  __names_isset = YES;
}

- (BOOL) namesIsSet {
  return __names_isset;
}

- (void) unsetNames {
  [__names release_stub];
  __names = nil;
  __names_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            NSString * _elem37 = [inProtocol readString];
            [fieldValue addObject: _elem37];
          }
          [inProtocol readListEnd];
          [self setNames: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getLocationsFromNames_args"];
  if (__names_isset) {
    if (__names != nil) {
      [outProtocol writeFieldBeginWithName: @"names" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__names count]];
        int idx39;
        for (idx39 = 0; idx39 < [__names count]; idx39++)
        {
          [outProtocol writeString: [__names objectAtIndex: idx39]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getLocationsFromNames_args("];
  [ms appendString: @"names:"];
  [ms appendFormat: @"%@", __names];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetLocationsFromNames_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetLocationsFromNames_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            TransportStation *_elem42 = [[TransportStation alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLocationsFromNames_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx44;
        for (idx44 = 0; idx44 < [__success count]; idx44++)
        {
          [[__success objectAtIndex: idx44] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLocationsFromNames_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTrips_args : NSObject <TBase, NSCoding> {
  NSString * __from;
  NSString * __to;

  BOOL __from_isset;
  BOOL __to_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=from, setter=setFrom:) NSString * from;
@property (nonatomic, retain, getter=to, setter=setTo:) NSString * to;
#endif

- (id) init;
- (id) initWithFrom: (NSString *) from to: (NSString *) to;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) from;
- (void) setFrom: (NSString *) from;
#endif
- (BOOL) fromIsSet;

#if !__has_feature(objc_arc)
- (NSString *) to;
- (void) setTo: (NSString *) to;
#endif
- (BOOL) toIsSet;

@end

@implementation getTrips_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFrom: (NSString *) from to: (NSString *) to
{
  self = [super init];
  __from = [from retain_stub];
  __from_isset = YES;
  __to = [to retain_stub];
  __to_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain_stub];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain_stub];
    __to_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
}

- (void) dealloc
{
  [__from release_stub];
  [__to release_stub];
  [super dealloc_stub];
}

- (NSString *) from {
  return [[__from retain_stub] autorelease_stub];
}

- (void) setFrom: (NSString *) from {
  [from retain_stub];
  [__from release_stub];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release_stub];
  __from = nil;
  __from_isset = NO;
}

- (NSString *) to {
  return [[__to retain_stub] autorelease_stub];
}

- (void) setTo: (NSString *) to {
  [to retain_stub];
  [__to release_stub];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release_stub];
  __to = nil;
  __to_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFrom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTrips_args"];
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __from];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __to];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTrips_args("];
  [ms appendString: @"from:"];
  [ms appendFormat: @"\"%@\"", __from];
  [ms appendString: @",to:"];
  [ms appendFormat: @"\"%@\"", __to];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTrips_result : NSObject <TBase, NSCoding> {
  QueryTripsResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryTripsResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (QueryTripsResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QueryTripsResult *) success;
- (void) setSuccess: (QueryTripsResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetTrips_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QueryTripsResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (QueryTripsResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QueryTripsResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryTripsResult *fieldValue = [[QueryTripsResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTrips_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTrips_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface searchForStations_args : NSObject <TBase, NSCoding> {
  TransportStationSearchRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) TransportStationSearchRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (TransportStationSearchRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TransportStationSearchRequest *) request;
- (void) setRequest: (TransportStationSearchRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation searchForStations_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (TransportStationSearchRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (TransportStationSearchRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (TransportStationSearchRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TransportStationSearchRequest *fieldValue = [[TransportStationSearchRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"searchForStations_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"searchForStations_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SearchForStations_result : NSObject <TBase, NSCoding> {
  TransportStationSearchResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TransportStationSearchResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (TransportStationSearchResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TransportStationSearchResponse *) success;
- (void) setSuccess: (TransportStationSearchResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation SearchForStations_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TransportStationSearchResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TransportStationSearchResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TransportStationSearchResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TransportStationSearchResponse *fieldValue = [[TransportStationSearchResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchForStations_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchForStations_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getDefaultStations_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation getDefaultStations_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDefaultStations_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getDefaultStations_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetDefaultStations_result : NSObject <TBase, NSCoding> {
  TransportDefaultStationsResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TransportDefaultStationsResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (TransportDefaultStationsResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TransportDefaultStationsResponse *) success;
- (void) setSuccess: (TransportDefaultStationsResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetDefaultStations_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TransportDefaultStationsResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TransportDefaultStationsResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TransportDefaultStationsResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TransportDefaultStationsResponse *fieldValue = [[TransportDefaultStationsResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDefaultStations_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDefaultStations_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface searchForTrips_args : NSObject <TBase, NSCoding> {
  TransportTripSearchRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) TransportTripSearchRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (TransportTripSearchRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TransportTripSearchRequest *) request;
- (void) setRequest: (TransportTripSearchRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation searchForTrips_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (TransportTripSearchRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (TransportTripSearchRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (TransportTripSearchRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TransportTripSearchRequest *fieldValue = [[TransportTripSearchRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"searchForTrips_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"searchForTrips_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SearchForTrips_result : NSObject <TBase, NSCoding> {
  TransportTripSearchResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TransportTripSearchResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (TransportTripSearchResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TransportTripSearchResponse *) success;
- (void) setSuccess: (TransportTripSearchResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation SearchForTrips_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TransportTripSearchResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TransportTripSearchResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TransportTripSearchResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TransportTripSearchResponse *fieldValue = [[TransportTripSearchResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchForTrips_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchForTrips_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_autocomplete: (NSString *) constraint
{
  [outProtocol writeMessageBeginWithName: @"autocomplete" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"autocomplete_args"];
  if (constraint != nil)  {
    [outProtocol writeFieldBeginWithName: @"constraint" type: TType_STRING fieldID: 1];
    [outProtocol writeString: constraint];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_autocomplete
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Autocomplete_result * result = [[[Autocomplete_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"autocomplete failed: unknown result"];
}

- (NSMutableArray *) autocomplete: (NSString *) constraint
{
  [self send_autocomplete : constraint];
  return [self recv_autocomplete];
}

- (void) send_getLocationsFromNames: (NSMutableArray *) names
{
  [outProtocol writeMessageBeginWithName: @"getLocationsFromNames" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getLocationsFromNames_args"];
  if (names != nil)  {
    [outProtocol writeFieldBeginWithName: @"names" type: TType_LIST fieldID: 1];
    {
      [outProtocol writeListBeginWithElementType: TType_STRING size: [names count]];
      int idx46;
      for (idx46 = 0; idx46 < [names count]; idx46++)
      {
        [outProtocol writeString: [names objectAtIndex: idx46]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getLocationsFromNames
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetLocationsFromNames_result * result = [[[GetLocationsFromNames_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getLocationsFromNames failed: unknown result"];
}

- (NSMutableArray *) getLocationsFromNames: (NSMutableArray *) names
{
  [self send_getLocationsFromNames : names];
  return [self recv_getLocationsFromNames];
}

- (void) send_getTrips: (NSString *) from to: (NSString *) to
{
  [outProtocol writeMessageBeginWithName: @"getTrips" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTrips_args"];
  if (from != nil)  {
    [outProtocol writeFieldBeginWithName: @"from" type: TType_STRING fieldID: 1];
    [outProtocol writeString: from];
    [outProtocol writeFieldEnd];
  }
  if (to != nil)  {
    [outProtocol writeFieldBeginWithName: @"to" type: TType_STRING fieldID: 2];
    [outProtocol writeString: to];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (QueryTripsResult *) recv_getTrips
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTrips_result * result = [[[GetTrips_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTrips failed: unknown result"];
}

- (QueryTripsResult *) getTrips: (NSString *) from to: (NSString *) to
{
  [self send_getTrips : from to: to];
  return [self recv_getTrips];
}

- (void) send_searchForStations: (TransportStationSearchRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"searchForStations" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"searchForStations_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TransportStationSearchResponse *) recv_searchForStations
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SearchForStations_result * result = [[[SearchForStations_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"searchForStations failed: unknown result"];
}

- (TransportStationSearchResponse *) searchForStations: (TransportStationSearchRequest *) request
{
  [self send_searchForStations : request];
  return [self recv_searchForStations];
}

- (void) send_getDefaultStations
{
  [outProtocol writeMessageBeginWithName: @"getDefaultStations" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDefaultStations_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TransportDefaultStationsResponse *) recv_getDefaultStations
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetDefaultStations_result * result = [[[GetDefaultStations_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDefaultStations failed: unknown result"];
}

- (TransportDefaultStationsResponse *) getDefaultStations
{
  [self send_getDefaultStations];
  return [self recv_getDefaultStations];
}

- (void) send_searchForTrips: (TransportTripSearchRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"searchForTrips" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"searchForTrips_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TransportTripSearchResponse *) recv_searchForTrips
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SearchForTrips_result * result = [[[SearchForTrips_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"searchForTrips failed: unknown result"];
}

- (TransportTripSearchResponse *) searchForTrips: (TransportTripSearchRequest *) request
{
  [self send_searchForTrips : request];
  return [self recv_searchForTrips];
}

@end

@implementation TransportServiceProcessor

- (id) initWithTransportService: (id <TransportService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_autocomplete_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"autocomplete"];
  }
  {
    SEL s = @selector(process_getLocationsFromNames_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getLocationsFromNames"];
  }
  {
    SEL s = @selector(process_getTrips_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTrips"];
  }
  {
    SEL s = @selector(process_searchForStations_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"searchForStations"];
  }
  {
    SEL s = @selector(process_getDefaultStations_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getDefaultStations"];
  }
  {
    SEL s = @selector(process_searchForTrips_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"searchForTrips"];
  }
  return self;
}

- (id<TransportService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_autocomplete_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  autocomplete_args * args = [[autocomplete_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Autocomplete_result * result = [[Autocomplete_result alloc] init];
  [result setSuccess: [mService autocomplete: [args constraint]]];
  [outProtocol writeMessageBeginWithName: @"autocomplete"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getLocationsFromNames_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getLocationsFromNames_args * args = [[getLocationsFromNames_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetLocationsFromNames_result * result = [[GetLocationsFromNames_result alloc] init];
  [result setSuccess: [mService getLocationsFromNames: [args names]]];
  [outProtocol writeMessageBeginWithName: @"getLocationsFromNames"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getTrips_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTrips_args * args = [[getTrips_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTrips_result * result = [[GetTrips_result alloc] init];
  [result setSuccess: [mService getTrips: [args from] to: [args to]]];
  [outProtocol writeMessageBeginWithName: @"getTrips"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_searchForStations_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  searchForStations_args * args = [[searchForStations_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SearchForStations_result * result = [[SearchForStations_result alloc] init];
  [result setSuccess: [mService searchForStations: [args request]]];
  [outProtocol writeMessageBeginWithName: @"searchForStations"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getDefaultStations_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getDefaultStations_args * args = [[getDefaultStations_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetDefaultStations_result * result = [[GetDefaultStations_result alloc] init];
  [result setSuccess: [mService getDefaultStations]];
  [outProtocol writeMessageBeginWithName: @"getDefaultStations"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_searchForTrips_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  searchForTrips_args * args = [[searchForTrips_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SearchForTrips_result * result = [[SearchForTrips_result alloc] init];
  [result setSuccess: [mService searchForTrips: [args request]]];
  [outProtocol writeMessageBeginWithName: @"searchForTrips"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

