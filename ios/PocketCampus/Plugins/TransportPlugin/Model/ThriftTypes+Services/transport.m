/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "common.h"

#import "transport.h"

@implementation TransportStation

- (id) initWithType: (int) type id: (int32_t) id latitude: (int32_t) latitude longitude: (int32_t) longitude place: (NSString *) place name: (NSString *) name
{
  self = [super init];
  __type = type;
  __type_isset = YES;
  __id = id;
  __id_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __place = [place retain];
  __place_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeInt32ForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeInt32ForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"place"])
  {
    __place = [[decoder decodeObjectForKey: @"place"] retain];
    __place_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__latitude_isset)
  {
    [encoder encodeInt32: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeInt32: __longitude forKey: @"longitude"];
  }
  if (__place_isset)
  {
    [encoder encodeObject: __place forKey: @"place"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__place release];
  [__name release];
  [super dealloc];
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int32_t) latitude {
  return __latitude;
}

- (void) setLatitude: (int32_t) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (int32_t) longitude {
  return __longitude;
}

- (void) setLongitude: (int32_t) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (NSString *) place {
  return [[__place retain] autorelease];
}

- (void) setPlace: (NSString *) place {
  [place retain];
  [__place release];
  __place = place;
  __place_isset = YES;
}

- (BOOL) placeIsSet {
  return __place_isset;
}

- (void) unsetPlace {
  [__place release];
  __place = nil;
  __place_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlace: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportStation"];
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__place_isset) {
    if (__place != nil) {
      [outProtocol writeFieldBeginWithName: @"place" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __place];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportStation("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%i", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%i", __longitude];
  [ms appendString: @",place:"];
  [ms appendFormat: @"\"%@\"", __place];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Fare

- (id) initWithNetwork: (NSString *) network type: (int) type currency: (NSString *) currency fare: (double) fare unitName: (NSString *) unitName units: (NSString *) units
{
  self = [super init];
  __network = [network retain];
  __network_isset = YES;
  __type = type;
  __type_isset = YES;
  __currency = [currency retain];
  __currency_isset = YES;
  __fare = fare;
  __fare_isset = YES;
  __unitName = [unitName retain];
  __unitName_isset = YES;
  __units = [units retain];
  __units_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"network"])
  {
    __network = [[decoder decodeObjectForKey: @"network"] retain];
    __network_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"currency"])
  {
    __currency = [[decoder decodeObjectForKey: @"currency"] retain];
    __currency_isset = YES;
  }
  if ([decoder containsValueForKey: @"fare"])
  {
    __fare = [decoder decodeDoubleForKey: @"fare"];
    __fare_isset = YES;
  }
  if ([decoder containsValueForKey: @"unitName"])
  {
    __unitName = [[decoder decodeObjectForKey: @"unitName"] retain];
    __unitName_isset = YES;
  }
  if ([decoder containsValueForKey: @"units"])
  {
    __units = [[decoder decodeObjectForKey: @"units"] retain];
    __units_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__network_isset)
  {
    [encoder encodeObject: __network forKey: @"network"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__currency_isset)
  {
    [encoder encodeObject: __currency forKey: @"currency"];
  }
  if (__fare_isset)
  {
    [encoder encodeDouble: __fare forKey: @"fare"];
  }
  if (__unitName_isset)
  {
    [encoder encodeObject: __unitName forKey: @"unitName"];
  }
  if (__units_isset)
  {
    [encoder encodeObject: __units forKey: @"units"];
  }
}

- (void) dealloc
{
  [__network release];
  [__currency release];
  [__unitName release];
  [__units release];
  [super dealloc];
}

- (NSString *) network {
  return [[__network retain] autorelease];
}

- (void) setNetwork: (NSString *) network {
  [network retain];
  [__network release];
  __network = network;
  __network_isset = YES;
}

- (BOOL) networkIsSet {
  return __network_isset;
}

- (void) unsetNetwork {
  [__network release];
  __network = nil;
  __network_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) currency {
  return [[__currency retain] autorelease];
}

- (void) setCurrency: (NSString *) currency {
  [currency retain];
  [__currency release];
  __currency = currency;
  __currency_isset = YES;
}

- (BOOL) currencyIsSet {
  return __currency_isset;
}

- (void) unsetCurrency {
  [__currency release];
  __currency = nil;
  __currency_isset = NO;
}

- (double) fare {
  return __fare;
}

- (void) setFare: (double) fare {
  __fare = fare;
  __fare_isset = YES;
}

- (BOOL) fareIsSet {
  return __fare_isset;
}

- (void) unsetFare {
  __fare_isset = NO;
}

- (NSString *) unitName {
  return [[__unitName retain] autorelease];
}

- (void) setUnitName: (NSString *) unitName {
  [unitName retain];
  [__unitName release];
  __unitName = unitName;
  __unitName_isset = YES;
}

- (BOOL) unitNameIsSet {
  return __unitName_isset;
}

- (void) unsetUnitName {
  [__unitName release];
  __unitName = nil;
  __unitName_isset = NO;
}

- (NSString *) units {
  return [[__units retain] autorelease];
}

- (void) setUnits: (NSString *) units {
  [units retain];
  [__units release];
  __units = units;
  __units_isset = YES;
}

- (BOOL) unitsIsSet {
  return __units_isset;
}

- (void) unsetUnits {
  [__units release];
  __units = nil;
  __units_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNetwork: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCurrency: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setFare: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnitName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Fare"];
  if (__network_isset) {
    if (__network != nil) {
      [outProtocol writeFieldBeginWithName: @"network" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __network];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__currency_isset) {
    if (__currency != nil) {
      [outProtocol writeFieldBeginWithName: @"currency" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __currency];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fare_isset) {
    [outProtocol writeFieldBeginWithName: @"fare" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __fare];
    [outProtocol writeFieldEnd];
  }
  if (__unitName_isset) {
    if (__unitName != nil) {
      [outProtocol writeFieldBeginWithName: @"unitName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __unitName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__units_isset) {
    if (__units != nil) {
      [outProtocol writeFieldBeginWithName: @"units" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __units];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Fare("];
  [ms appendString: @"network:"];
  [ms appendFormat: @"\"%@\"", __network];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",currency:"];
  [ms appendFormat: @"\"%@\"", __currency];
  [ms appendString: @",fare:"];
  [ms appendFormat: @"%f", __fare];
  [ms appendString: @",unitName:"];
  [ms appendFormat: @"\"%@\"", __unitName];
  [ms appendString: @",units:"];
  [ms appendFormat: @"\"%@\"", __units];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GeoPoint

- (id) initWithLatitude: (int32_t) latitude longitude: (int32_t) longitude
{
  self = [super init];
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeInt32ForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeInt32ForKey: @"longitude"];
    __longitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__latitude_isset)
  {
    [encoder encodeInt32: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeInt32: __longitude forKey: @"longitude"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) latitude {
  return __latitude;
}

- (void) setLatitude: (int32_t) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (int32_t) longitude {
  return __longitude;
}

- (void) setLongitude: (int32_t) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Point"];
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __longitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GeoPoint("];
  [ms appendString: @"latitude:"];
  [ms appendFormat: @"%i", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%i", __longitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportLine

- (id) initWithName: (NSString *) name colors: (NSArray *) colors
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __colors = [colors retain];
  __colors_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"colors"])
  {
    __colors = [[decoder decodeObjectForKey: @"colors"] retain];
    __colors_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__colors_isset)
  {
    [encoder encodeObject: __colors forKey: @"colors"];
  }
}

- (void) dealloc
{
  [__name release];
  [__colors release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSArray *) colors {
  return [[__colors retain] autorelease];
}

- (void) setColors: (NSArray *) colors {
  [colors retain];
  [__colors release];
  __colors = colors;
  __colors_isset = YES;
}

- (BOOL) colorsIsSet {
  return __colors_isset;
}

- (void) unsetColors {
  [__colors release];
  __colors = nil;
  __colors_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setColors: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportLine"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__colors_isset) {
    if (__colors != nil) {
      [outProtocol writeFieldBeginWithName: @"colors" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__colors count]];
        int i4;
        for (i4 = 0; i4 < [__colors count]; i4++)
        {
          [outProtocol writeString: [__colors objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportLine("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",colors:"];
  [ms appendFormat: @"%@", __colors];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Stop

- (id) initWithLocation: (TransportStation *) location position: (NSString *) position time: (timestamp) time
{
  self = [super init];
  __location = [location retain];
  __location_isset = YES;
  __position = [position retain];
  __position_isset = YES;
  __time = time;
  __time_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"position"])
  {
    __position = [[decoder decodeObjectForKey: @"position"] retain];
    __position_isset = YES;
  }
  if ([decoder containsValueForKey: @"time"])
  {
    __time = [decoder decodeInt64ForKey: @"time"];
    __time_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__position_isset)
  {
    [encoder encodeObject: __position forKey: @"position"];
  }
  if (__time_isset)
  {
    [encoder encodeInt64: __time forKey: @"time"];
  }
}

- (void) dealloc
{
  [__location release];
  [__position release];
  [super dealloc];
}

- (TransportStation *) location {
  return [[__location retain] autorelease];
}

- (void) setLocation: (TransportStation *) location {
  [location retain];
  [__location release];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release];
  __location = nil;
  __location_isset = NO;
}

- (NSString *) position {
  return [[__position retain] autorelease];
}

- (void) setPosition: (NSString *) position {
  [position retain];
  [__position release];
  __position = position;
  __position_isset = YES;
}

- (BOOL) positionIsSet {
  return __position_isset;
}

- (void) unsetPosition {
  [__position release];
  __position = nil;
  __position_isset = NO;
}

- (int64_t) time {
  return __time;
}

- (void) setTime: (int64_t) time {
  __time = time;
  __time_isset = YES;
}

- (BOOL) timeIsSet {
  return __time_isset;
}

- (void) unsetTime {
  __time_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Stop"];
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 1];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__position_isset) {
    if (__position != nil) {
      [outProtocol writeFieldBeginWithName: @"position" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __position];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_isset) {
    [outProtocol writeFieldBeginWithName: @"time" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __time];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Stop("];
  [ms appendString: @"location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @",position:"];
  [ms appendFormat: @"\"%@\"", __position];
  [ms appendString: @",time:"];
  [ms appendFormat: @"%qi", __time];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportConnection

- (id) initWithDeparture: (TransportStation *) departure arrival: (TransportStation *) arrival path: (NSArray *) path line: (TransportLine *) line destination: (TransportStation *) destination departureTime: (timestamp) departureTime departurePosition: (NSString *) departurePosition arrivalTime: (timestamp) arrivalTime arrivalPosition: (NSString *) arrivalPosition intermediateStops: (NSArray *) intermediateStops foot: (BOOL) foot min: (int32_t) min
{
  self = [super init];
  __departure = [departure retain];
  __departure_isset = YES;
  __arrival = [arrival retain];
  __arrival_isset = YES;
  __path = [path retain];
  __path_isset = YES;
  __line = [line retain];
  __line_isset = YES;
  __destination = [destination retain];
  __destination_isset = YES;
  __departureTime = departureTime;
  __departureTime_isset = YES;
  __departurePosition = [departurePosition retain];
  __departurePosition_isset = YES;
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
  __arrivalPosition = [arrivalPosition retain];
  __arrivalPosition_isset = YES;
  __intermediateStops = [intermediateStops retain];
  __intermediateStops_isset = YES;
  __foot = foot;
  __foot_isset = YES;
  __min = min;
  __min_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"departure"])
  {
    __departure = [[decoder decodeObjectForKey: @"departure"] retain];
    __departure_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrival"])
  {
    __arrival = [[decoder decodeObjectForKey: @"arrival"] retain];
    __arrival_isset = YES;
  }
  if ([decoder containsValueForKey: @"path"])
  {
    __path = [[decoder decodeObjectForKey: @"path"] retain];
    __path_isset = YES;
  }
  if ([decoder containsValueForKey: @"line"])
  {
    __line = [[decoder decodeObjectForKey: @"line"] retain];
    __line_isset = YES;
  }
  if ([decoder containsValueForKey: @"destination"])
  {
    __destination = [[decoder decodeObjectForKey: @"destination"] retain];
    __destination_isset = YES;
  }
  if ([decoder containsValueForKey: @"departureTime"])
  {
    __departureTime = [decoder decodeInt64ForKey: @"departureTime"];
    __departureTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"departurePosition"])
  {
    __departurePosition = [[decoder decodeObjectForKey: @"departurePosition"] retain];
    __departurePosition_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalTime"])
  {
    __arrivalTime = [decoder decodeInt64ForKey: @"arrivalTime"];
    __arrivalTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalPosition"])
  {
    __arrivalPosition = [[decoder decodeObjectForKey: @"arrivalPosition"] retain];
    __arrivalPosition_isset = YES;
  }
  if ([decoder containsValueForKey: @"intermediateStops"])
  {
    __intermediateStops = [[decoder decodeObjectForKey: @"intermediateStops"] retain];
    __intermediateStops_isset = YES;
  }
  if ([decoder containsValueForKey: @"foot"])
  {
    __foot = [decoder decodeBoolForKey: @"foot"];
    __foot_isset = YES;
  }
  if ([decoder containsValueForKey: @"min"])
  {
    __min = [decoder decodeInt32ForKey: @"min"];
    __min_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__departure_isset)
  {
    [encoder encodeObject: __departure forKey: @"departure"];
  }
  if (__arrival_isset)
  {
    [encoder encodeObject: __arrival forKey: @"arrival"];
  }
  if (__path_isset)
  {
    [encoder encodeObject: __path forKey: @"path"];
  }
  if (__line_isset)
  {
    [encoder encodeObject: __line forKey: @"line"];
  }
  if (__destination_isset)
  {
    [encoder encodeObject: __destination forKey: @"destination"];
  }
  if (__departureTime_isset)
  {
    [encoder encodeInt64: __departureTime forKey: @"departureTime"];
  }
  if (__departurePosition_isset)
  {
    [encoder encodeObject: __departurePosition forKey: @"departurePosition"];
  }
  if (__arrivalTime_isset)
  {
    [encoder encodeInt64: __arrivalTime forKey: @"arrivalTime"];
  }
  if (__arrivalPosition_isset)
  {
    [encoder encodeObject: __arrivalPosition forKey: @"arrivalPosition"];
  }
  if (__intermediateStops_isset)
  {
    [encoder encodeObject: __intermediateStops forKey: @"intermediateStops"];
  }
  if (__foot_isset)
  {
    [encoder encodeBool: __foot forKey: @"foot"];
  }
  if (__min_isset)
  {
    [encoder encodeInt32: __min forKey: @"min"];
  }
}

- (void) dealloc
{
  [__departure release];
  [__arrival release];
  [__path release];
  [__line release];
  [__destination release];
  [__departurePosition release];
  [__arrivalPosition release];
  [__intermediateStops release];
  [super dealloc];
}

- (TransportStation *) departure {
  return [[__departure retain] autorelease];
}

- (void) setDeparture: (TransportStation *) departure {
  [departure retain];
  [__departure release];
  __departure = departure;
  __departure_isset = YES;
}

- (BOOL) departureIsSet {
  return __departure_isset;
}

- (void) unsetDeparture {
  [__departure release];
  __departure = nil;
  __departure_isset = NO;
}

- (TransportStation *) arrival {
  return [[__arrival retain] autorelease];
}

- (void) setArrival: (TransportStation *) arrival {
  [arrival retain];
  [__arrival release];
  __arrival = arrival;
  __arrival_isset = YES;
}

- (BOOL) arrivalIsSet {
  return __arrival_isset;
}

- (void) unsetArrival {
  [__arrival release];
  __arrival = nil;
  __arrival_isset = NO;
}

- (NSArray *) path {
  return [[__path retain] autorelease];
}

- (void) setPath: (NSArray *) path {
  [path retain];
  [__path release];
  __path = path;
  __path_isset = YES;
}

- (BOOL) pathIsSet {
  return __path_isset;
}

- (void) unsetPath {
  [__path release];
  __path = nil;
  __path_isset = NO;
}

- (TransportLine *) line {
  return [[__line retain] autorelease];
}

- (void) setLine: (TransportLine *) line {
  [line retain];
  [__line release];
  __line = line;
  __line_isset = YES;
}

- (BOOL) lineIsSet {
  return __line_isset;
}

- (void) unsetLine {
  [__line release];
  __line = nil;
  __line_isset = NO;
}

- (TransportStation *) destination {
  return [[__destination retain] autorelease];
}

- (void) setDestination: (TransportStation *) destination {
  [destination retain];
  [__destination release];
  __destination = destination;
  __destination_isset = YES;
}

- (BOOL) destinationIsSet {
  return __destination_isset;
}

- (void) unsetDestination {
  [__destination release];
  __destination = nil;
  __destination_isset = NO;
}

- (int64_t) departureTime {
  return __departureTime;
}

- (void) setDepartureTime: (int64_t) departureTime {
  __departureTime = departureTime;
  __departureTime_isset = YES;
}

- (BOOL) departureTimeIsSet {
  return __departureTime_isset;
}

- (void) unsetDepartureTime {
  __departureTime_isset = NO;
}

- (NSString *) departurePosition {
  return [[__departurePosition retain] autorelease];
}

- (void) setDeparturePosition: (NSString *) departurePosition {
  [departurePosition retain];
  [__departurePosition release];
  __departurePosition = departurePosition;
  __departurePosition_isset = YES;
}

- (BOOL) departurePositionIsSet {
  return __departurePosition_isset;
}

- (void) unsetDeparturePosition {
  [__departurePosition release];
  __departurePosition = nil;
  __departurePosition_isset = NO;
}

- (int64_t) arrivalTime {
  return __arrivalTime;
}

- (void) setArrivalTime: (int64_t) arrivalTime {
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
}

- (BOOL) arrivalTimeIsSet {
  return __arrivalTime_isset;
}

- (void) unsetArrivalTime {
  __arrivalTime_isset = NO;
}

- (NSString *) arrivalPosition {
  return [[__arrivalPosition retain] autorelease];
}

- (void) setArrivalPosition: (NSString *) arrivalPosition {
  [arrivalPosition retain];
  [__arrivalPosition release];
  __arrivalPosition = arrivalPosition;
  __arrivalPosition_isset = YES;
}

- (BOOL) arrivalPositionIsSet {
  return __arrivalPosition_isset;
}

- (void) unsetArrivalPosition {
  [__arrivalPosition release];
  __arrivalPosition = nil;
  __arrivalPosition_isset = NO;
}

- (NSArray *) intermediateStops {
  return [[__intermediateStops retain] autorelease];
}

- (void) setIntermediateStops: (NSArray *) intermediateStops {
  [intermediateStops retain];
  [__intermediateStops release];
  __intermediateStops = intermediateStops;
  __intermediateStops_isset = YES;
}

- (BOOL) intermediateStopsIsSet {
  return __intermediateStops_isset;
}

- (void) unsetIntermediateStops {
  [__intermediateStops release];
  __intermediateStops = nil;
  __intermediateStops_isset = NO;
}

- (BOOL) foot {
  return __foot;
}

- (void) setFoot: (BOOL) foot {
  __foot = foot;
  __foot_isset = YES;
}

- (BOOL) footIsSet {
  return __foot_isset;
}

- (void) unsetFoot {
  __foot_isset = NO;
}

- (int32_t) min {
  return __min;
}

- (void) setMin: (int32_t) min {
  __min = min;
  __min_isset = YES;
}

- (BOOL) minIsSet {
  return __min_isset;
}

- (void) unsetMin {
  __min_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setDeparture: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setArrival: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            GeoPoint *_elem7 = [[GeoPoint alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setPath: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          TransportLine *fieldValue = [[TransportLine alloc] init];
          [fieldValue read: inProtocol];
          [self setLine: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setDestination: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDepartureTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeparturePosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArrivalTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArrivalPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size8;
          [inProtocol readListBeginReturningElementType: NULL size: &_size8];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            Stop *_elem10 = [[Stop alloc] init];
            [_elem10 read: inProtocol];
            [fieldValue addObject: _elem10];
            [_elem10 release];
          }
          [inProtocol readListEnd];
          [self setIntermediateStops: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFoot: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportConnection"];
  if (__departure_isset) {
    if (__departure != nil) {
      [outProtocol writeFieldBeginWithName: @"departure" type: TType_STRUCT fieldID: 1];
      [__departure write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__arrival_isset) {
    if (__arrival != nil) {
      [outProtocol writeFieldBeginWithName: @"arrival" type: TType_STRUCT fieldID: 2];
      [__arrival write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__path_isset) {
    if (__path != nil) {
      [outProtocol writeFieldBeginWithName: @"path" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__path count]];
        int i12;
        for (i12 = 0; i12 < [__path count]; i12++)
        {
          [[__path objectAtIndex: i12] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__line_isset) {
    if (__line != nil) {
      [outProtocol writeFieldBeginWithName: @"line" type: TType_STRUCT fieldID: 4];
      [__line write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__destination_isset) {
    if (__destination != nil) {
      [outProtocol writeFieldBeginWithName: @"destination" type: TType_STRUCT fieldID: 5];
      [__destination write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__departureTime_isset) {
    [outProtocol writeFieldBeginWithName: @"departureTime" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __departureTime];
    [outProtocol writeFieldEnd];
  }
  if (__departurePosition_isset) {
    if (__departurePosition != nil) {
      [outProtocol writeFieldBeginWithName: @"departurePosition" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __departurePosition];
      [outProtocol writeFieldEnd];
    }
  }
  if (__arrivalTime_isset) {
    [outProtocol writeFieldBeginWithName: @"arrivalTime" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __arrivalTime];
    [outProtocol writeFieldEnd];
  }
  if (__arrivalPosition_isset) {
    if (__arrivalPosition != nil) {
      [outProtocol writeFieldBeginWithName: @"arrivalPosition" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __arrivalPosition];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intermediateStops_isset) {
    if (__intermediateStops != nil) {
      [outProtocol writeFieldBeginWithName: @"intermediateStops" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__intermediateStops count]];
        int i14;
        for (i14 = 0; i14 < [__intermediateStops count]; i14++)
        {
          [[__intermediateStops objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__foot_isset) {
    [outProtocol writeFieldBeginWithName: @"foot" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __foot];
    [outProtocol writeFieldEnd];
  }
  if (__min_isset) {
    [outProtocol writeFieldBeginWithName: @"min" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __min];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportConnection("];
  [ms appendString: @"departure:"];
  [ms appendFormat: @"%@", __departure];
  [ms appendString: @",arrival:"];
  [ms appendFormat: @"%@", __arrival];
  [ms appendString: @",path:"];
  [ms appendFormat: @"%@", __path];
  [ms appendString: @",line:"];
  [ms appendFormat: @"%@", __line];
  [ms appendString: @",destination:"];
  [ms appendFormat: @"%@", __destination];
  [ms appendString: @",departureTime:"];
  [ms appendFormat: @"%qi", __departureTime];
  [ms appendString: @",departurePosition:"];
  [ms appendFormat: @"\"%@\"", __departurePosition];
  [ms appendString: @",arrivalTime:"];
  [ms appendFormat: @"%qi", __arrivalTime];
  [ms appendString: @",arrivalPosition:"];
  [ms appendFormat: @"\"%@\"", __arrivalPosition];
  [ms appendString: @",intermediateStops:"];
  [ms appendFormat: @"%@", __intermediateStops];
  [ms appendString: @",foot:"];
  [ms appendFormat: @"%i", __foot];
  [ms appendString: @",min:"];
  [ms appendFormat: @"%i", __min];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportTrip

- (id) initWithId: (NSString *) id link: (NSString *) link departureTime: (timestamp) departureTime arrivalTime: (timestamp) arrivalTime from: (TransportStation *) from to: (TransportStation *) to parts: (NSArray *) parts fares: (NSArray *) fares
{
  self = [super init];
  __id = [id retain];
  __id_isset = YES;
  __link = [link retain];
  __link_isset = YES;
  __departureTime = departureTime;
  __departureTime_isset = YES;
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
  __from = [from retain];
  __from_isset = YES;
  __to = [to retain];
  __to_isset = YES;
  __parts = [parts retain];
  __parts_isset = YES;
  __fares = [fares retain];
  __fares_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"link"])
  {
    __link = [[decoder decodeObjectForKey: @"link"] retain];
    __link_isset = YES;
  }
  if ([decoder containsValueForKey: @"departureTime"])
  {
    __departureTime = [decoder decodeInt64ForKey: @"departureTime"];
    __departureTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalTime"])
  {
    __arrivalTime = [decoder decodeInt64ForKey: @"arrivalTime"];
    __arrivalTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain];
    __to_isset = YES;
  }
  if ([decoder containsValueForKey: @"parts"])
  {
    __parts = [[decoder decodeObjectForKey: @"parts"] retain];
    __parts_isset = YES;
  }
  if ([decoder containsValueForKey: @"fares"])
  {
    __fares = [[decoder decodeObjectForKey: @"fares"] retain];
    __fares_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__link_isset)
  {
    [encoder encodeObject: __link forKey: @"link"];
  }
  if (__departureTime_isset)
  {
    [encoder encodeInt64: __departureTime forKey: @"departureTime"];
  }
  if (__arrivalTime_isset)
  {
    [encoder encodeInt64: __arrivalTime forKey: @"arrivalTime"];
  }
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
  if (__parts_isset)
  {
    [encoder encodeObject: __parts forKey: @"parts"];
  }
  if (__fares_isset)
  {
    [encoder encodeObject: __fares forKey: @"fares"];
  }
}

- (void) dealloc
{
  [__id release];
  [__link release];
  [__from release];
  [__to release];
  [__parts release];
  [__fares release];
  [super dealloc];
}

- (NSString *) id {
  return [[__id retain] autorelease];
}

- (void) setId: (NSString *) id {
  [id retain];
  [__id release];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) link {
  return [[__link retain] autorelease];
}

- (void) setLink: (NSString *) link {
  [link retain];
  [__link release];
  __link = link;
  __link_isset = YES;
}

- (BOOL) linkIsSet {
  return __link_isset;
}

- (void) unsetLink {
  [__link release];
  __link = nil;
  __link_isset = NO;
}

- (int64_t) departureTime {
  return __departureTime;
}

- (void) setDepartureTime: (int64_t) departureTime {
  __departureTime = departureTime;
  __departureTime_isset = YES;
}

- (BOOL) departureTimeIsSet {
  return __departureTime_isset;
}

- (void) unsetDepartureTime {
  __departureTime_isset = NO;
}

- (int64_t) arrivalTime {
  return __arrivalTime;
}

- (void) setArrivalTime: (int64_t) arrivalTime {
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
}

- (BOOL) arrivalTimeIsSet {
  return __arrivalTime_isset;
}

- (void) unsetArrivalTime {
  __arrivalTime_isset = NO;
}

- (TransportStation *) from {
  return [[__from retain] autorelease];
}

- (void) setFrom: (TransportStation *) from {
  [from retain];
  [__from release];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release];
  __from = nil;
  __from_isset = NO;
}

- (TransportStation *) to {
  return [[__to retain] autorelease];
}

- (void) setTo: (TransportStation *) to {
  [to retain];
  [__to release];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release];
  __to = nil;
  __to_isset = NO;
}

- (NSArray *) parts {
  return [[__parts retain] autorelease];
}

- (void) setParts: (NSArray *) parts {
  [parts retain];
  [__parts release];
  __parts = parts;
  __parts_isset = YES;
}

- (BOOL) partsIsSet {
  return __parts_isset;
}

- (void) unsetParts {
  [__parts release];
  __parts = nil;
  __parts_isset = NO;
}

- (NSArray *) fares {
  return [[__fares retain] autorelease];
}

- (void) setFares: (NSArray *) fares {
  [fares retain];
  [__fares release];
  __fares = fares;
  __fares_isset = YES;
}

- (BOOL) faresIsSet {
  return __fares_isset;
}

- (void) unsetFares {
  [__fares release];
  __fares = nil;
  __fares_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDepartureTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArrivalTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setFrom: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setTo: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            TransportConnection *_elem17 = [[TransportConnection alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release];
          }
          [inProtocol readListEnd];
          [self setParts: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size18;
          [inProtocol readListBeginReturningElementType: NULL size: &_size18];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size18];
          int _i19;
          for (_i19 = 0; _i19 < _size18; ++_i19)
          {
            Fare *_elem20 = [[Fare alloc] init];
            [_elem20 read: inProtocol];
            [fieldValue addObject: _elem20];
            [_elem20 release];
          }
          [inProtocol readListEnd];
          [self setFares: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportTrip"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__link_isset) {
    if (__link != nil) {
      [outProtocol writeFieldBeginWithName: @"link" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __link];
      [outProtocol writeFieldEnd];
    }
  }
  if (__departureTime_isset) {
    [outProtocol writeFieldBeginWithName: @"departureTime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __departureTime];
    [outProtocol writeFieldEnd];
  }
  if (__arrivalTime_isset) {
    [outProtocol writeFieldBeginWithName: @"arrivalTime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __arrivalTime];
    [outProtocol writeFieldEnd];
  }
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRUCT fieldID: 5];
      [__from write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRUCT fieldID: 6];
      [__to write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__parts_isset) {
    if (__parts != nil) {
      [outProtocol writeFieldBeginWithName: @"parts" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__parts count]];
        int i22;
        for (i22 = 0; i22 < [__parts count]; i22++)
        {
          [[__parts objectAtIndex: i22] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__fares_isset) {
    if (__fares != nil) {
      [outProtocol writeFieldBeginWithName: @"fares" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__fares count]];
        int i24;
        for (i24 = 0; i24 < [__fares count]; i24++)
        {
          [[__fares objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportTrip("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",link:"];
  [ms appendFormat: @"\"%@\"", __link];
  [ms appendString: @",departureTime:"];
  [ms appendFormat: @"%qi", __departureTime];
  [ms appendString: @",arrivalTime:"];
  [ms appendFormat: @"%qi", __arrivalTime];
  [ms appendString: @",from:"];
  [ms appendFormat: @"%@", __from];
  [ms appendString: @",to:"];
  [ms appendFormat: @"%@", __to];
  [ms appendString: @",parts:"];
  [ms appendFormat: @"%@", __parts];
  [ms appendString: @",fares:"];
  [ms appendFormat: @"%@", __fares];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Departure

- (id) initWithPlannedTime: (timestamp) plannedTime predictedTime: (timestamp) predictedTime line: (NSString *) line lineColors: (NSArray *) lineColors lineLink: (NSString *) lineLink position: (NSString *) position destinationId: (int32_t) destinationId destination: (NSString *) destination message: (NSString *) message
{
  self = [super init];
  __plannedTime = plannedTime;
  __plannedTime_isset = YES;
  __predictedTime = predictedTime;
  __predictedTime_isset = YES;
  __line = [line retain];
  __line_isset = YES;
  __lineColors = [lineColors retain];
  __lineColors_isset = YES;
  __lineLink = [lineLink retain];
  __lineLink_isset = YES;
  __position = [position retain];
  __position_isset = YES;
  __destinationId = destinationId;
  __destinationId_isset = YES;
  __destination = [destination retain];
  __destination_isset = YES;
  __message = [message retain];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"plannedTime"])
  {
    __plannedTime = [decoder decodeInt64ForKey: @"plannedTime"];
    __plannedTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"predictedTime"])
  {
    __predictedTime = [decoder decodeInt64ForKey: @"predictedTime"];
    __predictedTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"line"])
  {
    __line = [[decoder decodeObjectForKey: @"line"] retain];
    __line_isset = YES;
  }
  if ([decoder containsValueForKey: @"lineColors"])
  {
    __lineColors = [[decoder decodeObjectForKey: @"lineColors"] retain];
    __lineColors_isset = YES;
  }
  if ([decoder containsValueForKey: @"lineLink"])
  {
    __lineLink = [[decoder decodeObjectForKey: @"lineLink"] retain];
    __lineLink_isset = YES;
  }
  if ([decoder containsValueForKey: @"position"])
  {
    __position = [[decoder decodeObjectForKey: @"position"] retain];
    __position_isset = YES;
  }
  if ([decoder containsValueForKey: @"destinationId"])
  {
    __destinationId = [decoder decodeInt32ForKey: @"destinationId"];
    __destinationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"destination"])
  {
    __destination = [[decoder decodeObjectForKey: @"destination"] retain];
    __destination_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__plannedTime_isset)
  {
    [encoder encodeInt64: __plannedTime forKey: @"plannedTime"];
  }
  if (__predictedTime_isset)
  {
    [encoder encodeInt64: __predictedTime forKey: @"predictedTime"];
  }
  if (__line_isset)
  {
    [encoder encodeObject: __line forKey: @"line"];
  }
  if (__lineColors_isset)
  {
    [encoder encodeObject: __lineColors forKey: @"lineColors"];
  }
  if (__lineLink_isset)
  {
    [encoder encodeObject: __lineLink forKey: @"lineLink"];
  }
  if (__position_isset)
  {
    [encoder encodeObject: __position forKey: @"position"];
  }
  if (__destinationId_isset)
  {
    [encoder encodeInt32: __destinationId forKey: @"destinationId"];
  }
  if (__destination_isset)
  {
    [encoder encodeObject: __destination forKey: @"destination"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__line release];
  [__lineColors release];
  [__lineLink release];
  [__position release];
  [__destination release];
  [__message release];
  [super dealloc];
}

- (int64_t) plannedTime {
  return __plannedTime;
}

- (void) setPlannedTime: (int64_t) plannedTime {
  __plannedTime = plannedTime;
  __plannedTime_isset = YES;
}

- (BOOL) plannedTimeIsSet {
  return __plannedTime_isset;
}

- (void) unsetPlannedTime {
  __plannedTime_isset = NO;
}

- (int64_t) predictedTime {
  return __predictedTime;
}

- (void) setPredictedTime: (int64_t) predictedTime {
  __predictedTime = predictedTime;
  __predictedTime_isset = YES;
}

- (BOOL) predictedTimeIsSet {
  return __predictedTime_isset;
}

- (void) unsetPredictedTime {
  __predictedTime_isset = NO;
}

- (NSString *) line {
  return [[__line retain] autorelease];
}

- (void) setLine: (NSString *) line {
  [line retain];
  [__line release];
  __line = line;
  __line_isset = YES;
}

- (BOOL) lineIsSet {
  return __line_isset;
}

- (void) unsetLine {
  [__line release];
  __line = nil;
  __line_isset = NO;
}

- (NSArray *) lineColors {
  return [[__lineColors retain] autorelease];
}

- (void) setLineColors: (NSArray *) lineColors {
  [lineColors retain];
  [__lineColors release];
  __lineColors = lineColors;
  __lineColors_isset = YES;
}

- (BOOL) lineColorsIsSet {
  return __lineColors_isset;
}

- (void) unsetLineColors {
  [__lineColors release];
  __lineColors = nil;
  __lineColors_isset = NO;
}

- (NSString *) lineLink {
  return [[__lineLink retain] autorelease];
}

- (void) setLineLink: (NSString *) lineLink {
  [lineLink retain];
  [__lineLink release];
  __lineLink = lineLink;
  __lineLink_isset = YES;
}

- (BOOL) lineLinkIsSet {
  return __lineLink_isset;
}

- (void) unsetLineLink {
  [__lineLink release];
  __lineLink = nil;
  __lineLink_isset = NO;
}

- (NSString *) position {
  return [[__position retain] autorelease];
}

- (void) setPosition: (NSString *) position {
  [position retain];
  [__position release];
  __position = position;
  __position_isset = YES;
}

- (BOOL) positionIsSet {
  return __position_isset;
}

- (void) unsetPosition {
  [__position release];
  __position = nil;
  __position_isset = NO;
}

- (int32_t) destinationId {
  return __destinationId;
}

- (void) setDestinationId: (int32_t) destinationId {
  __destinationId = destinationId;
  __destinationId_isset = YES;
}

- (BOOL) destinationIdIsSet {
  return __destinationId_isset;
}

- (void) unsetDestinationId {
  __destinationId_isset = NO;
}

- (NSString *) destination {
  return [[__destination retain] autorelease];
}

- (void) setDestination: (NSString *) destination {
  [destination retain];
  [__destination release];
  __destination = destination;
  __destination_isset = YES;
}

- (BOOL) destinationIsSet {
  return __destination_isset;
}

- (void) unsetDestination {
  [__destination release];
  __destination = nil;
  __destination_isset = NO;
}

- (NSString *) message {
  return [[__message retain] autorelease];
}

- (void) setMessage: (NSString *) message {
  [message retain];
  [__message release];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPlannedTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPredictedTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLine: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            int32_t _elem27 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem27]];
          }
          [inProtocol readListEnd];
          [self setLineColors: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLineLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDestinationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDestination: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Departure"];
  if (__plannedTime_isset) {
    [outProtocol writeFieldBeginWithName: @"plannedTime" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __plannedTime];
    [outProtocol writeFieldEnd];
  }
  if (__predictedTime_isset) {
    [outProtocol writeFieldBeginWithName: @"predictedTime" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __predictedTime];
    [outProtocol writeFieldEnd];
  }
  if (__line_isset) {
    if (__line != nil) {
      [outProtocol writeFieldBeginWithName: @"line" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __line];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lineColors_isset) {
    if (__lineColors != nil) {
      [outProtocol writeFieldBeginWithName: @"lineColors" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__lineColors count]];
        int i29;
        for (i29 = 0; i29 < [__lineColors count]; i29++)
        {
          [outProtocol writeI32: [[__lineColors objectAtIndex: i29] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__lineLink_isset) {
    if (__lineLink != nil) {
      [outProtocol writeFieldBeginWithName: @"lineLink" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __lineLink];
      [outProtocol writeFieldEnd];
    }
  }
  if (__position_isset) {
    if (__position != nil) {
      [outProtocol writeFieldBeginWithName: @"position" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __position];
      [outProtocol writeFieldEnd];
    }
  }
  if (__destinationId_isset) {
    [outProtocol writeFieldBeginWithName: @"destinationId" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __destinationId];
    [outProtocol writeFieldEnd];
  }
  if (__destination_isset) {
    if (__destination != nil) {
      [outProtocol writeFieldBeginWithName: @"destination" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __destination];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Departure("];
  [ms appendString: @"plannedTime:"];
  [ms appendFormat: @"%qi", __plannedTime];
  [ms appendString: @",predictedTime:"];
  [ms appendFormat: @"%qi", __predictedTime];
  [ms appendString: @",line:"];
  [ms appendFormat: @"\"%@\"", __line];
  [ms appendString: @",lineColors:"];
  [ms appendFormat: @"%@", __lineColors];
  [ms appendString: @",lineLink:"];
  [ms appendFormat: @"\"%@\"", __lineLink];
  [ms appendString: @",position:"];
  [ms appendFormat: @"\"%@\"", __position];
  [ms appendString: @",destinationId:"];
  [ms appendFormat: @"%i", __destinationId];
  [ms appendString: @",destination:"];
  [ms appendFormat: @"\"%@\"", __destination];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetConnectionDetailsResult

- (id) initWithCurrentDate: (timestamp) currentDate connection: (TransportTrip *) connection
{
  self = [super init];
  __currentDate = currentDate;
  __currentDate_isset = YES;
  __connection = [connection retain];
  __connection_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"currentDate"])
  {
    __currentDate = [decoder decodeInt64ForKey: @"currentDate"];
    __currentDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"connection"])
  {
    __connection = [[decoder decodeObjectForKey: @"connection"] retain];
    __connection_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__currentDate_isset)
  {
    [encoder encodeInt64: __currentDate forKey: @"currentDate"];
  }
  if (__connection_isset)
  {
    [encoder encodeObject: __connection forKey: @"connection"];
  }
}

- (void) dealloc
{
  [__connection release];
  [super dealloc];
}

- (int64_t) currentDate {
  return __currentDate;
}

- (void) setCurrentDate: (int64_t) currentDate {
  __currentDate = currentDate;
  __currentDate_isset = YES;
}

- (BOOL) currentDateIsSet {
  return __currentDate_isset;
}

- (void) unsetCurrentDate {
  __currentDate_isset = NO;
}

- (TransportTrip *) connection {
  return [[__connection retain] autorelease];
}

- (void) setConnection: (TransportTrip *) connection {
  [connection retain];
  [__connection release];
  __connection = connection;
  __connection_isset = YES;
}

- (BOOL) connectionIsSet {
  return __connection_isset;
}

- (void) unsetConnection {
  [__connection release];
  __connection = nil;
  __connection_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCurrentDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TransportTrip *fieldValue = [[TransportTrip alloc] init];
          [fieldValue read: inProtocol];
          [self setConnection: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetConnectionDetailsResult"];
  if (__currentDate_isset) {
    [outProtocol writeFieldBeginWithName: @"currentDate" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __currentDate];
    [outProtocol writeFieldEnd];
  }
  if (__connection_isset) {
    if (__connection != nil) {
      [outProtocol writeFieldBeginWithName: @"connection" type: TType_STRUCT fieldID: 2];
      [__connection write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetConnectionDetailsResult("];
  [ms appendString: @"currentDate:"];
  [ms appendFormat: @"%qi", __currentDate];
  [ms appendString: @",connection:"];
  [ms appendFormat: @"%@", __connection];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LineDestination

- (id) initWithLine: (NSString *) line lineColors: (NSArray *) lineColors destinationId: (int32_t) destinationId destination: (NSString *) destination
{
  self = [super init];
  __line = [line retain];
  __line_isset = YES;
  __lineColors = [lineColors retain];
  __lineColors_isset = YES;
  __destinationId = destinationId;
  __destinationId_isset = YES;
  __destination = [destination retain];
  __destination_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"line"])
  {
    __line = [[decoder decodeObjectForKey: @"line"] retain];
    __line_isset = YES;
  }
  if ([decoder containsValueForKey: @"lineColors"])
  {
    __lineColors = [[decoder decodeObjectForKey: @"lineColors"] retain];
    __lineColors_isset = YES;
  }
  if ([decoder containsValueForKey: @"destinationId"])
  {
    __destinationId = [decoder decodeInt32ForKey: @"destinationId"];
    __destinationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"destination"])
  {
    __destination = [[decoder decodeObjectForKey: @"destination"] retain];
    __destination_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__line_isset)
  {
    [encoder encodeObject: __line forKey: @"line"];
  }
  if (__lineColors_isset)
  {
    [encoder encodeObject: __lineColors forKey: @"lineColors"];
  }
  if (__destinationId_isset)
  {
    [encoder encodeInt32: __destinationId forKey: @"destinationId"];
  }
  if (__destination_isset)
  {
    [encoder encodeObject: __destination forKey: @"destination"];
  }
}

- (void) dealloc
{
  [__line release];
  [__lineColors release];
  [__destination release];
  [super dealloc];
}

- (NSString *) line {
  return [[__line retain] autorelease];
}

- (void) setLine: (NSString *) line {
  [line retain];
  [__line release];
  __line = line;
  __line_isset = YES;
}

- (BOOL) lineIsSet {
  return __line_isset;
}

- (void) unsetLine {
  [__line release];
  __line = nil;
  __line_isset = NO;
}

- (NSArray *) lineColors {
  return [[__lineColors retain] autorelease];
}

- (void) setLineColors: (NSArray *) lineColors {
  [lineColors retain];
  [__lineColors release];
  __lineColors = lineColors;
  __lineColors_isset = YES;
}

- (BOOL) lineColorsIsSet {
  return __lineColors_isset;
}

- (void) unsetLineColors {
  [__lineColors release];
  __lineColors = nil;
  __lineColors_isset = NO;
}

- (int32_t) destinationId {
  return __destinationId;
}

- (void) setDestinationId: (int32_t) destinationId {
  __destinationId = destinationId;
  __destinationId_isset = YES;
}

- (BOOL) destinationIdIsSet {
  return __destinationId_isset;
}

- (void) unsetDestinationId {
  __destinationId_isset = NO;
}

- (NSString *) destination {
  return [[__destination retain] autorelease];
}

- (void) setDestination: (NSString *) destination {
  [destination retain];
  [__destination release];
  __destination = destination;
  __destination_isset = YES;
}

- (BOOL) destinationIsSet {
  return __destination_isset;
}

- (void) unsetDestination {
  [__destination release];
  __destination = nil;
  __destination_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLine: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            NSString * _elem32 = [inProtocol readString];
            [fieldValue addObject: _elem32];
          }
          [inProtocol readListEnd];
          [self setLineColors: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDestinationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDestination: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LineDestination"];
  if (__line_isset) {
    if (__line != nil) {
      [outProtocol writeFieldBeginWithName: @"line" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __line];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lineColors_isset) {
    if (__lineColors != nil) {
      [outProtocol writeFieldBeginWithName: @"lineColors" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__lineColors count]];
        int i34;
        for (i34 = 0; i34 < [__lineColors count]; i34++)
        {
          [outProtocol writeString: [__lineColors objectAtIndex: i34]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__destinationId_isset) {
    [outProtocol writeFieldBeginWithName: @"destinationId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __destinationId];
    [outProtocol writeFieldEnd];
  }
  if (__destination_isset) {
    if (__destination != nil) {
      [outProtocol writeFieldBeginWithName: @"destination" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __destination];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LineDestination("];
  [ms appendString: @"line:"];
  [ms appendFormat: @"\"%@\"", __line];
  [ms appendString: @",lineColors:"];
  [ms appendFormat: @"%@", __lineColors];
  [ms appendString: @",destinationId:"];
  [ms appendFormat: @"%i", __destinationId];
  [ms appendString: @",destination:"];
  [ms appendFormat: @"\"%@\"", __destination];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NearbyStationsResult

- (id) initWithStatus: (int) status stations: (NSArray *) stations
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __stations = [stations retain];
  __stations_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"stations"])
  {
    __stations = [[decoder decodeObjectForKey: @"stations"] retain];
    __stations_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__stations_isset)
  {
    [encoder encodeObject: __stations forKey: @"stations"];
  }
}

- (void) dealloc
{
  [__stations release];
  [super dealloc];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSArray *) stations {
  return [[__stations retain] autorelease];
}

- (void) setStations: (NSArray *) stations {
  [stations retain];
  [__stations release];
  __stations = stations;
  __stations_isset = YES;
}

- (BOOL) stationsIsSet {
  return __stations_isset;
}

- (void) unsetStations {
  [__stations release];
  __stations = nil;
  __stations_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            TransportStation *_elem37 = [[TransportStation alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release];
          }
          [inProtocol readListEnd];
          [self setStations: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NearbyStationsResult"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__stations_isset) {
    if (__stations != nil) {
      [outProtocol writeFieldBeginWithName: @"stations" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__stations count]];
        int i39;
        for (i39 = 0; i39 < [__stations count]; i39++)
        {
          [[__stations objectAtIndex: i39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NearbyStationsResult("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",stations:"];
  [ms appendFormat: @"%@", __stations];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryTripsResult

- (id) initWithAmbiguousFrom: (NSArray *) ambiguousFrom ambiguousVia: (NSArray *) ambiguousVia ambiguousTo: (NSArray *) ambiguousTo queryUri: (NSString *) queryUri from: (TransportStation *) from via: (TransportStation *) via to: (TransportStation *) to context: (NSString *) context connections: (NSArray *) connections
{
  self = [super init];
  __ambiguousFrom = [ambiguousFrom retain];
  __ambiguousFrom_isset = YES;
  __ambiguousVia = [ambiguousVia retain];
  __ambiguousVia_isset = YES;
  __ambiguousTo = [ambiguousTo retain];
  __ambiguousTo_isset = YES;
  __queryUri = [queryUri retain];
  __queryUri_isset = YES;
  __from = [from retain];
  __from_isset = YES;
  __via = [via retain];
  __via_isset = YES;
  __to = [to retain];
  __to_isset = YES;
  __context = [context retain];
  __context_isset = YES;
  __connections = [connections retain];
  __connections_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ambiguousFrom"])
  {
    __ambiguousFrom = [[decoder decodeObjectForKey: @"ambiguousFrom"] retain];
    __ambiguousFrom_isset = YES;
  }
  if ([decoder containsValueForKey: @"ambiguousVia"])
  {
    __ambiguousVia = [[decoder decodeObjectForKey: @"ambiguousVia"] retain];
    __ambiguousVia_isset = YES;
  }
  if ([decoder containsValueForKey: @"ambiguousTo"])
  {
    __ambiguousTo = [[decoder decodeObjectForKey: @"ambiguousTo"] retain];
    __ambiguousTo_isset = YES;
  }
  if ([decoder containsValueForKey: @"queryUri"])
  {
    __queryUri = [[decoder decodeObjectForKey: @"queryUri"] retain];
    __queryUri_isset = YES;
  }
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"via"])
  {
    __via = [[decoder decodeObjectForKey: @"via"] retain];
    __via_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain];
    __to_isset = YES;
  }
  if ([decoder containsValueForKey: @"context"])
  {
    __context = [[decoder decodeObjectForKey: @"context"] retain];
    __context_isset = YES;
  }
  if ([decoder containsValueForKey: @"connections"])
  {
    __connections = [[decoder decodeObjectForKey: @"connections"] retain];
    __connections_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ambiguousFrom_isset)
  {
    [encoder encodeObject: __ambiguousFrom forKey: @"ambiguousFrom"];
  }
  if (__ambiguousVia_isset)
  {
    [encoder encodeObject: __ambiguousVia forKey: @"ambiguousVia"];
  }
  if (__ambiguousTo_isset)
  {
    [encoder encodeObject: __ambiguousTo forKey: @"ambiguousTo"];
  }
  if (__queryUri_isset)
  {
    [encoder encodeObject: __queryUri forKey: @"queryUri"];
  }
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__via_isset)
  {
    [encoder encodeObject: __via forKey: @"via"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
  if (__context_isset)
  {
    [encoder encodeObject: __context forKey: @"context"];
  }
  if (__connections_isset)
  {
    [encoder encodeObject: __connections forKey: @"connections"];
  }
}

- (void) dealloc
{
  [__ambiguousFrom release];
  [__ambiguousVia release];
  [__ambiguousTo release];
  [__queryUri release];
  [__from release];
  [__via release];
  [__to release];
  [__context release];
  [__connections release];
  [super dealloc];
}

- (NSArray *) ambiguousFrom {
  return [[__ambiguousFrom retain] autorelease];
}

- (void) setAmbiguousFrom: (NSArray *) ambiguousFrom {
  [ambiguousFrom retain];
  [__ambiguousFrom release];
  __ambiguousFrom = ambiguousFrom;
  __ambiguousFrom_isset = YES;
}

- (BOOL) ambiguousFromIsSet {
  return __ambiguousFrom_isset;
}

- (void) unsetAmbiguousFrom {
  [__ambiguousFrom release];
  __ambiguousFrom = nil;
  __ambiguousFrom_isset = NO;
}

- (NSArray *) ambiguousVia {
  return [[__ambiguousVia retain] autorelease];
}

- (void) setAmbiguousVia: (NSArray *) ambiguousVia {
  [ambiguousVia retain];
  [__ambiguousVia release];
  __ambiguousVia = ambiguousVia;
  __ambiguousVia_isset = YES;
}

- (BOOL) ambiguousViaIsSet {
  return __ambiguousVia_isset;
}

- (void) unsetAmbiguousVia {
  [__ambiguousVia release];
  __ambiguousVia = nil;
  __ambiguousVia_isset = NO;
}

- (NSArray *) ambiguousTo {
  return [[__ambiguousTo retain] autorelease];
}

- (void) setAmbiguousTo: (NSArray *) ambiguousTo {
  [ambiguousTo retain];
  [__ambiguousTo release];
  __ambiguousTo = ambiguousTo;
  __ambiguousTo_isset = YES;
}

- (BOOL) ambiguousToIsSet {
  return __ambiguousTo_isset;
}

- (void) unsetAmbiguousTo {
  [__ambiguousTo release];
  __ambiguousTo = nil;
  __ambiguousTo_isset = NO;
}

- (NSString *) queryUri {
  return [[__queryUri retain] autorelease];
}

- (void) setQueryUri: (NSString *) queryUri {
  [queryUri retain];
  [__queryUri release];
  __queryUri = queryUri;
  __queryUri_isset = YES;
}

- (BOOL) queryUriIsSet {
  return __queryUri_isset;
}

- (void) unsetQueryUri {
  [__queryUri release];
  __queryUri = nil;
  __queryUri_isset = NO;
}

- (TransportStation *) from {
  return [[__from retain] autorelease];
}

- (void) setFrom: (TransportStation *) from {
  [from retain];
  [__from release];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release];
  __from = nil;
  __from_isset = NO;
}

- (TransportStation *) via {
  return [[__via retain] autorelease];
}

- (void) setVia: (TransportStation *) via {
  [via retain];
  [__via release];
  __via = via;
  __via_isset = YES;
}

- (BOOL) viaIsSet {
  return __via_isset;
}

- (void) unsetVia {
  [__via release];
  __via = nil;
  __via_isset = NO;
}

- (TransportStation *) to {
  return [[__to retain] autorelease];
}

- (void) setTo: (TransportStation *) to {
  [to retain];
  [__to release];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release];
  __to = nil;
  __to_isset = NO;
}

- (NSString *) context {
  return [[__context retain] autorelease];
}

- (void) setContext: (NSString *) context {
  [context retain];
  [__context release];
  __context = context;
  __context_isset = YES;
}

- (BOOL) contextIsSet {
  return __context_isset;
}

- (void) unsetContext {
  [__context release];
  __context = nil;
  __context_isset = NO;
}

- (NSArray *) connections {
  return [[__connections retain] autorelease];
}

- (void) setConnections: (NSArray *) connections {
  [connections retain];
  [__connections release];
  __connections = connections;
  __connections_isset = YES;
}

- (BOOL) connectionsIsSet {
  return __connections_isset;
}

- (void) unsetConnections {
  [__connections release];
  __connections = nil;
  __connections_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            TransportStation *_elem42 = [[TransportStation alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release];
          }
          [inProtocol readListEnd];
          [self setAmbiguousFrom: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size43;
          [inProtocol readListBeginReturningElementType: NULL size: &_size43];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size43];
          int _i44;
          for (_i44 = 0; _i44 < _size43; ++_i44)
          {
            TransportStation *_elem45 = [[TransportStation alloc] init];
            [_elem45 read: inProtocol];
            [fieldValue addObject: _elem45];
            [_elem45 release];
          }
          [inProtocol readListEnd];
          [self setAmbiguousVia: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size46;
          [inProtocol readListBeginReturningElementType: NULL size: &_size46];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size46];
          int _i47;
          for (_i47 = 0; _i47 < _size46; ++_i47)
          {
            TransportStation *_elem48 = [[TransportStation alloc] init];
            [_elem48 read: inProtocol];
            [fieldValue addObject: _elem48];
            [_elem48 release];
          }
          [inProtocol readListEnd];
          [self setAmbiguousTo: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQueryUri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setFrom: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setVia: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setTo: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContext: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size49;
          [inProtocol readListBeginReturningElementType: NULL size: &_size49];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size49];
          int _i50;
          for (_i50 = 0; _i50 < _size49; ++_i50)
          {
            TransportTrip *_elem51 = [[TransportTrip alloc] init];
            [_elem51 read: inProtocol];
            [fieldValue addObject: _elem51];
            [_elem51 release];
          }
          [inProtocol readListEnd];
          [self setConnections: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryTripsResult"];
  if (__ambiguousFrom_isset) {
    if (__ambiguousFrom != nil) {
      [outProtocol writeFieldBeginWithName: @"ambiguousFrom" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__ambiguousFrom count]];
        int i53;
        for (i53 = 0; i53 < [__ambiguousFrom count]; i53++)
        {
          [[__ambiguousFrom objectAtIndex: i53] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__ambiguousVia_isset) {
    if (__ambiguousVia != nil) {
      [outProtocol writeFieldBeginWithName: @"ambiguousVia" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__ambiguousVia count]];
        int i55;
        for (i55 = 0; i55 < [__ambiguousVia count]; i55++)
        {
          [[__ambiguousVia objectAtIndex: i55] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__ambiguousTo_isset) {
    if (__ambiguousTo != nil) {
      [outProtocol writeFieldBeginWithName: @"ambiguousTo" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__ambiguousTo count]];
        int i57;
        for (i57 = 0; i57 < [__ambiguousTo count]; i57++)
        {
          [[__ambiguousTo objectAtIndex: i57] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__queryUri_isset) {
    if (__queryUri != nil) {
      [outProtocol writeFieldBeginWithName: @"queryUri" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __queryUri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRUCT fieldID: 5];
      [__from write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__via_isset) {
    if (__via != nil) {
      [outProtocol writeFieldBeginWithName: @"via" type: TType_STRUCT fieldID: 6];
      [__via write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRUCT fieldID: 7];
      [__to write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__context_isset) {
    if (__context != nil) {
      [outProtocol writeFieldBeginWithName: @"context" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __context];
      [outProtocol writeFieldEnd];
    }
  }
  if (__connections_isset) {
    if (__connections != nil) {
      [outProtocol writeFieldBeginWithName: @"connections" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__connections count]];
        int i59;
        for (i59 = 0; i59 < [__connections count]; i59++)
        {
          [[__connections objectAtIndex: i59] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryTripsResult("];
  [ms appendString: @"ambiguousFrom:"];
  [ms appendFormat: @"%@", __ambiguousFrom];
  [ms appendString: @",ambiguousVia:"];
  [ms appendFormat: @"%@", __ambiguousVia];
  [ms appendString: @",ambiguousTo:"];
  [ms appendFormat: @"%@", __ambiguousTo];
  [ms appendString: @",queryUri:"];
  [ms appendFormat: @"\"%@\"", __queryUri];
  [ms appendString: @",from:"];
  [ms appendFormat: @"%@", __from];
  [ms appendString: @",via:"];
  [ms appendFormat: @"%@", __via];
  [ms appendString: @",to:"];
  [ms appendFormat: @"%@", __to];
  [ms appendString: @",context:"];
  [ms appendFormat: @"\"%@\"", __context];
  [ms appendString: @",connections:"];
  [ms appendFormat: @"%@", __connections];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation StationDepartures

- (id) initWithLocation: (TransportStation *) location departures: (NSArray *) departures lines: (NSArray *) lines
{
  self = [super init];
  __location = [location retain];
  __location_isset = YES;
  __departures = [departures retain];
  __departures_isset = YES;
  __lines = [lines retain];
  __lines_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"departures"])
  {
    __departures = [[decoder decodeObjectForKey: @"departures"] retain];
    __departures_isset = YES;
  }
  if ([decoder containsValueForKey: @"lines"])
  {
    __lines = [[decoder decodeObjectForKey: @"lines"] retain];
    __lines_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__departures_isset)
  {
    [encoder encodeObject: __departures forKey: @"departures"];
  }
  if (__lines_isset)
  {
    [encoder encodeObject: __lines forKey: @"lines"];
  }
}

- (void) dealloc
{
  [__location release];
  [__departures release];
  [__lines release];
  [super dealloc];
}

- (TransportStation *) location {
  return [[__location retain] autorelease];
}

- (void) setLocation: (TransportStation *) location {
  [location retain];
  [__location release];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release];
  __location = nil;
  __location_isset = NO;
}

- (NSArray *) departures {
  return [[__departures retain] autorelease];
}

- (void) setDepartures: (NSArray *) departures {
  [departures retain];
  [__departures release];
  __departures = departures;
  __departures_isset = YES;
}

- (BOOL) departuresIsSet {
  return __departures_isset;
}

- (void) unsetDepartures {
  [__departures release];
  __departures = nil;
  __departures_isset = NO;
}

- (NSArray *) lines {
  return [[__lines retain] autorelease];
}

- (void) setLines: (NSArray *) lines {
  [lines retain];
  [__lines release];
  __lines = lines;
  __lines_isset = YES;
}

- (BOOL) linesIsSet {
  return __lines_isset;
}

- (void) unsetLines {
  [__lines release];
  __lines = nil;
  __lines_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            Departure *_elem62 = [[Departure alloc] init];
            [_elem62 read: inProtocol];
            [fieldValue addObject: _elem62];
            [_elem62 release];
          }
          [inProtocol readListEnd];
          [self setDepartures: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size63;
          [inProtocol readListBeginReturningElementType: NULL size: &_size63];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size63];
          int _i64;
          for (_i64 = 0; _i64 < _size63; ++_i64)
          {
            LineDestination *_elem65 = [[LineDestination alloc] init];
            [_elem65 read: inProtocol];
            [fieldValue addObject: _elem65];
            [_elem65 release];
          }
          [inProtocol readListEnd];
          [self setLines: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StationDepartures"];
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 1];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__departures_isset) {
    if (__departures != nil) {
      [outProtocol writeFieldBeginWithName: @"departures" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__departures count]];
        int i67;
        for (i67 = 0; i67 < [__departures count]; i67++)
        {
          [[__departures objectAtIndex: i67] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__lines_isset) {
    if (__lines != nil) {
      [outProtocol writeFieldBeginWithName: @"lines" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__lines count]];
        int i69;
        for (i69 = 0; i69 < [__lines count]; i69++)
        {
          [[__lines objectAtIndex: i69] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StationDepartures("];
  [ms appendString: @"location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @",departures:"];
  [ms appendFormat: @"%@", __departures];
  [ms appendString: @",lines:"];
  [ms appendFormat: @"%@", __lines];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryDepartureResult

- (id) initWithStatus: (int) status stationDepartures: (NSArray *) stationDepartures
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __stationDepartures = [stationDepartures retain];
  __stationDepartures_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"stationDepartures"])
  {
    __stationDepartures = [[decoder decodeObjectForKey: @"stationDepartures"] retain];
    __stationDepartures_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__stationDepartures_isset)
  {
    [encoder encodeObject: __stationDepartures forKey: @"stationDepartures"];
  }
}

- (void) dealloc
{
  [__stationDepartures release];
  [super dealloc];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSArray *) stationDepartures {
  return [[__stationDepartures retain] autorelease];
}

- (void) setStationDepartures: (NSArray *) stationDepartures {
  [stationDepartures retain];
  [__stationDepartures release];
  __stationDepartures = stationDepartures;
  __stationDepartures_isset = YES;
}

- (BOOL) stationDeparturesIsSet {
  return __stationDepartures_isset;
}

- (void) unsetStationDepartures {
  [__stationDepartures release];
  __stationDepartures = nil;
  __stationDepartures_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size70;
          [inProtocol readListBeginReturningElementType: NULL size: &_size70];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size70];
          int _i71;
          for (_i71 = 0; _i71 < _size70; ++_i71)
          {
            StationDepartures *_elem72 = [[StationDepartures alloc] init];
            [_elem72 read: inProtocol];
            [fieldValue addObject: _elem72];
            [_elem72 release];
          }
          [inProtocol readListEnd];
          [self setStationDepartures: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryDepartureResult"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__stationDepartures_isset) {
    if (__stationDepartures != nil) {
      [outProtocol writeFieldBeginWithName: @"stationDepartures" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__stationDepartures count]];
        int i74;
        for (i74 = 0; i74 < [__stationDepartures count]; i74++)
        {
          [[__stationDepartures objectAtIndex: i74] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryDepartureResult("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",stationDepartures:"];
  [ms appendFormat: @"%@", __stationDepartures];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RailwayNode

- (id) initWithTags_: (NSDictionary *) tags_ lat_: (int32_t) lat_ lon_: (int32_t) lon_ ref_: (int32_t) ref_ num_: (int32_t) num_ distFromPrevious_: (double) distFromPrevious_ previousRef_: (int32_t) previousRef_ uicRef_: (int32_t) uicRef_
{
  self = [super init];
  __tags_ = [tags_ retain];
  __tags__isset = YES;
  __lat_ = lat_;
  __lat__isset = YES;
  __lon_ = lon_;
  __lon__isset = YES;
  __ref_ = ref_;
  __ref__isset = YES;
  __num_ = num_;
  __num__isset = YES;
  __distFromPrevious_ = distFromPrevious_;
  __distFromPrevious__isset = YES;
  __previousRef_ = previousRef_;
  __previousRef__isset = YES;
  __uicRef_ = uicRef_;
  __uicRef__isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tags_"])
  {
    __tags_ = [[decoder decodeObjectForKey: @"tags_"] retain];
    __tags__isset = YES;
  }
  if ([decoder containsValueForKey: @"lat_"])
  {
    __lat_ = [decoder decodeInt32ForKey: @"lat_"];
    __lat__isset = YES;
  }
  if ([decoder containsValueForKey: @"lon_"])
  {
    __lon_ = [decoder decodeInt32ForKey: @"lon_"];
    __lon__isset = YES;
  }
  if ([decoder containsValueForKey: @"ref_"])
  {
    __ref_ = [decoder decodeInt32ForKey: @"ref_"];
    __ref__isset = YES;
  }
  if ([decoder containsValueForKey: @"num_"])
  {
    __num_ = [decoder decodeInt32ForKey: @"num_"];
    __num__isset = YES;
  }
  if ([decoder containsValueForKey: @"distFromPrevious_"])
  {
    __distFromPrevious_ = [decoder decodeDoubleForKey: @"distFromPrevious_"];
    __distFromPrevious__isset = YES;
  }
  if ([decoder containsValueForKey: @"previousRef_"])
  {
    __previousRef_ = [decoder decodeInt32ForKey: @"previousRef_"];
    __previousRef__isset = YES;
  }
  if ([decoder containsValueForKey: @"uicRef_"])
  {
    __uicRef_ = [decoder decodeInt32ForKey: @"uicRef_"];
    __uicRef__isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tags__isset)
  {
    [encoder encodeObject: __tags_ forKey: @"tags_"];
  }
  if (__lat__isset)
  {
    [encoder encodeInt32: __lat_ forKey: @"lat_"];
  }
  if (__lon__isset)
  {
    [encoder encodeInt32: __lon_ forKey: @"lon_"];
  }
  if (__ref__isset)
  {
    [encoder encodeInt32: __ref_ forKey: @"ref_"];
  }
  if (__num__isset)
  {
    [encoder encodeInt32: __num_ forKey: @"num_"];
  }
  if (__distFromPrevious__isset)
  {
    [encoder encodeDouble: __distFromPrevious_ forKey: @"distFromPrevious_"];
  }
  if (__previousRef__isset)
  {
    [encoder encodeInt32: __previousRef_ forKey: @"previousRef_"];
  }
  if (__uicRef__isset)
  {
    [encoder encodeInt32: __uicRef_ forKey: @"uicRef_"];
  }
}

- (void) dealloc
{
  [__tags_ release];
  [super dealloc];
}

- (NSDictionary *) tags_ {
  return [[__tags_ retain] autorelease];
}

- (void) setTags_: (NSDictionary *) tags_ {
  [tags_ retain];
  [__tags_ release];
  __tags_ = tags_;
  __tags__isset = YES;
}

- (BOOL) tags_IsSet {
  return __tags__isset;
}

- (void) unsetTags_ {
  [__tags_ release];
  __tags_ = nil;
  __tags__isset = NO;
}

- (int32_t) lat_ {
  return __lat_;
}

- (void) setLat_: (int32_t) lat_ {
  __lat_ = lat_;
  __lat__isset = YES;
}

- (BOOL) lat_IsSet {
  return __lat__isset;
}

- (void) unsetLat_ {
  __lat__isset = NO;
}

- (int32_t) lon_ {
  return __lon_;
}

- (void) setLon_: (int32_t) lon_ {
  __lon_ = lon_;
  __lon__isset = YES;
}

- (BOOL) lon_IsSet {
  return __lon__isset;
}

- (void) unsetLon_ {
  __lon__isset = NO;
}

- (int32_t) ref_ {
  return __ref_;
}

- (void) setRef_: (int32_t) ref_ {
  __ref_ = ref_;
  __ref__isset = YES;
}

- (BOOL) ref_IsSet {
  return __ref__isset;
}

- (void) unsetRef_ {
  __ref__isset = NO;
}

- (int32_t) num_ {
  return __num_;
}

- (void) setNum_: (int32_t) num_ {
  __num_ = num_;
  __num__isset = YES;
}

- (BOOL) num_IsSet {
  return __num__isset;
}

- (void) unsetNum_ {
  __num__isset = NO;
}

- (double) distFromPrevious_ {
  return __distFromPrevious_;
}

- (void) setDistFromPrevious_: (double) distFromPrevious_ {
  __distFromPrevious_ = distFromPrevious_;
  __distFromPrevious__isset = YES;
}

- (BOOL) distFromPrevious_IsSet {
  return __distFromPrevious__isset;
}

- (void) unsetDistFromPrevious_ {
  __distFromPrevious__isset = NO;
}

- (int32_t) previousRef_ {
  return __previousRef_;
}

- (void) setPreviousRef_: (int32_t) previousRef_ {
  __previousRef_ = previousRef_;
  __previousRef__isset = YES;
}

- (BOOL) previousRef_IsSet {
  return __previousRef__isset;
}

- (void) unsetPreviousRef_ {
  __previousRef__isset = NO;
}

- (int32_t) uicRef_ {
  return __uicRef_;
}

- (void) setUicRef_: (int32_t) uicRef_ {
  __uicRef_ = uicRef_;
  __uicRef__isset = YES;
}

- (BOOL) uicRef_IsSet {
  return __uicRef__isset;
}

- (void) unsetUicRef_ {
  __uicRef__isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_MAP) {
          int _size75;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size75];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size75];
          int _i76;
          for (_i76 = 0; _i76 < _size75; ++_i76)
          {
            NSString * _key77 = [inProtocol readString];
            NSString * _val78 = [inProtocol readString];
            [fieldValue setObject: _val78 forKey: _key77];
          }
          [inProtocol readMapEnd];
          [self setTags_: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLat_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLon_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRef_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNum_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setDistFromPrevious_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPreviousRef_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUicRef_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RailwayNode"];
  if (__tags__isset) {
    if (__tags_ != nil) {
      [outProtocol writeFieldBeginWithName: @"tags_" type: TType_MAP fieldID: 1];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__tags_ count]];
        NSEnumerator * _iter79 = [__tags_ keyEnumerator];
        id key80;
        while ((key80 = [_iter79 nextObject]))
        {
          [outProtocol writeString: key80];
          [outProtocol writeString: [__tags_ objectForKey: key80]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__lat__isset) {
    [outProtocol writeFieldBeginWithName: @"lat_" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __lat_];
    [outProtocol writeFieldEnd];
  }
  if (__lon__isset) {
    [outProtocol writeFieldBeginWithName: @"lon_" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __lon_];
    [outProtocol writeFieldEnd];
  }
  if (__ref__isset) {
    [outProtocol writeFieldBeginWithName: @"ref_" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __ref_];
    [outProtocol writeFieldEnd];
  }
  if (__num__isset) {
    [outProtocol writeFieldBeginWithName: @"num_" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __num_];
    [outProtocol writeFieldEnd];
  }
  if (__distFromPrevious__isset) {
    [outProtocol writeFieldBeginWithName: @"distFromPrevious_" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __distFromPrevious_];
    [outProtocol writeFieldEnd];
  }
  if (__previousRef__isset) {
    [outProtocol writeFieldBeginWithName: @"previousRef_" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __previousRef_];
    [outProtocol writeFieldEnd];
  }
  if (__uicRef__isset) {
    [outProtocol writeFieldBeginWithName: @"uicRef_" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __uicRef_];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RailwayNode("];
  [ms appendString: @"tags_:"];
  [ms appendFormat: @"%@", __tags_];
  [ms appendString: @",lat_:"];
  [ms appendFormat: @"%i", __lat_];
  [ms appendString: @",lon_:"];
  [ms appendFormat: @"%i", __lon_];
  [ms appendString: @",ref_:"];
  [ms appendFormat: @"%i", __ref_];
  [ms appendString: @",num_:"];
  [ms appendFormat: @"%i", __num_];
  [ms appendString: @",distFromPrevious_:"];
  [ms appendFormat: @"%f", __distFromPrevious_];
  [ms appendString: @",previousRef_:"];
  [ms appendFormat: @"%i", __previousRef_];
  [ms appendString: @",uicRef_:"];
  [ms appendFormat: @"%i", __uicRef_];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RailwayNd

- (id) initWithNum: (int32_t) num ref: (int32_t) ref
{
  self = [super init];
  __num = num;
  __num_isset = YES;
  __ref = ref;
  __ref_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [decoder decodeInt32ForKey: @"num"];
    __num_isset = YES;
  }
  if ([decoder containsValueForKey: @"ref"])
  {
    __ref = [decoder decodeInt32ForKey: @"ref"];
    __ref_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__num_isset)
  {
    [encoder encodeInt32: __num forKey: @"num"];
  }
  if (__ref_isset)
  {
    [encoder encodeInt32: __ref forKey: @"ref"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) num {
  return __num;
}

- (void) setNum: (int32_t) num {
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  __num_isset = NO;
}

- (int32_t) ref {
  return __ref;
}

- (void) setRef: (int32_t) ref {
  __ref = ref;
  __ref_isset = YES;
}

- (BOOL) refIsSet {
  return __ref_isset;
}

- (void) unsetRef {
  __ref_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRef: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RailwayNd"];
  if (__num_isset) {
    [outProtocol writeFieldBeginWithName: @"num" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __num];
    [outProtocol writeFieldEnd];
  }
  if (__ref_isset) {
    [outProtocol writeFieldBeginWithName: @"ref" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __ref];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RailwayNd("];
  [ms appendString: @"num:"];
  [ms appendFormat: @"%i", __num];
  [ms appendString: @",ref:"];
  [ms appendFormat: @"%i", __ref];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RailwayWay

- (id) initWithNds: (NSSet *) nds num: (int32_t) num
{
  self = [super init];
  __nds = [nds retain];
  __nds_isset = YES;
  __num = num;
  __num_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"nds"])
  {
    __nds = [[decoder decodeObjectForKey: @"nds"] retain];
    __nds_isset = YES;
  }
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [decoder decodeInt32ForKey: @"num"];
    __num_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__nds_isset)
  {
    [encoder encodeObject: __nds forKey: @"nds"];
  }
  if (__num_isset)
  {
    [encoder encodeInt32: __num forKey: @"num"];
  }
}

- (void) dealloc
{
  [__nds release];
  [super dealloc];
}

- (NSSet *) nds {
  return [[__nds retain] autorelease];
}

- (void) setNds: (NSSet *) nds {
  [nds retain];
  [__nds release];
  __nds = nds;
  __nds_isset = YES;
}

- (BOOL) ndsIsSet {
  return __nds_isset;
}

- (void) unsetNds {
  [__nds release];
  __nds = nil;
  __nds_isset = NO;
}

- (int32_t) num {
  return __num;
}

- (void) setNum: (int32_t) num {
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  __num_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_SET) {
          int _size81;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size81];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size81];
          int _i82;
          for (_i82 = 0; _i82 < _size81; ++_i82)
          {
            RailwayNd *_elem83 = [[RailwayNd alloc] init];
            [_elem83 read: inProtocol];
            [fieldValue addObject: _elem83];
            [_elem83 release];
          }
          [inProtocol readSetEnd];
          [self setNds: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RailwayWay"];
  if (__nds_isset) {
    if (__nds != nil) {
      [outProtocol writeFieldBeginWithName: @"nds" type: TType_SET fieldID: 1];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRUCT size: [__nds count]];
        NSEnumerator * _iter84 = [__nds objectEnumerator];
        id obj85;
        while ((obj85 = [_iter84 nextObject]))
        {
          [obj85 write: outProtocol];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__num_isset) {
    [outProtocol writeFieldBeginWithName: @"num" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __num];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RailwayWay("];
  [ms appendString: @"nds:"];
  [ms appendFormat: @"%@", __nds];
  [ms appendString: @",num:"];
  [ms appendFormat: @"%i", __num];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RailwayMember

- (id) initWithType_: (NSString *) type_ ref_: (int32_t) ref_ role_: (NSString *) role_ num_: (int32_t) num_
{
  self = [super init];
  __type_ = [type_ retain];
  __type__isset = YES;
  __ref_ = ref_;
  __ref__isset = YES;
  __role_ = [role_ retain];
  __role__isset = YES;
  __num_ = num_;
  __num__isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type_"])
  {
    __type_ = [[decoder decodeObjectForKey: @"type_"] retain];
    __type__isset = YES;
  }
  if ([decoder containsValueForKey: @"ref_"])
  {
    __ref_ = [decoder decodeInt32ForKey: @"ref_"];
    __ref__isset = YES;
  }
  if ([decoder containsValueForKey: @"role_"])
  {
    __role_ = [[decoder decodeObjectForKey: @"role_"] retain];
    __role__isset = YES;
  }
  if ([decoder containsValueForKey: @"num_"])
  {
    __num_ = [decoder decodeInt32ForKey: @"num_"];
    __num__isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type__isset)
  {
    [encoder encodeObject: __type_ forKey: @"type_"];
  }
  if (__ref__isset)
  {
    [encoder encodeInt32: __ref_ forKey: @"ref_"];
  }
  if (__role__isset)
  {
    [encoder encodeObject: __role_ forKey: @"role_"];
  }
  if (__num__isset)
  {
    [encoder encodeInt32: __num_ forKey: @"num_"];
  }
}

- (void) dealloc
{
  [__type_ release];
  [__role_ release];
  [super dealloc];
}

- (NSString *) type_ {
  return [[__type_ retain] autorelease];
}

- (void) setType_: (NSString *) type_ {
  [type_ retain];
  [__type_ release];
  __type_ = type_;
  __type__isset = YES;
}

- (BOOL) type_IsSet {
  return __type__isset;
}

- (void) unsetType_ {
  [__type_ release];
  __type_ = nil;
  __type__isset = NO;
}

- (int32_t) ref_ {
  return __ref_;
}

- (void) setRef_: (int32_t) ref_ {
  __ref_ = ref_;
  __ref__isset = YES;
}

- (BOOL) ref_IsSet {
  return __ref__isset;
}

- (void) unsetRef_ {
  __ref__isset = NO;
}

- (NSString *) role_ {
  return [[__role_ retain] autorelease];
}

- (void) setRole_: (NSString *) role_ {
  [role_ retain];
  [__role_ release];
  __role_ = role_;
  __role__isset = YES;
}

- (BOOL) role_IsSet {
  return __role__isset;
}

- (void) unsetRole_ {
  [__role_ release];
  __role_ = nil;
  __role__isset = NO;
}

- (int32_t) num_ {
  return __num_;
}

- (void) setNum_: (int32_t) num_ {
  __num_ = num_;
  __num__isset = YES;
}

- (BOOL) num_IsSet {
  return __num__isset;
}

- (void) unsetNum_ {
  __num__isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRef_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRole_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNum_: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RailwayMember"];
  if (__type__isset) {
    if (__type_ != nil) {
      [outProtocol writeFieldBeginWithName: @"type_" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __type_];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ref__isset) {
    [outProtocol writeFieldBeginWithName: @"ref_" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __ref_];
    [outProtocol writeFieldEnd];
  }
  if (__role__isset) {
    if (__role_ != nil) {
      [outProtocol writeFieldBeginWithName: @"role_" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __role_];
      [outProtocol writeFieldEnd];
    }
  }
  if (__num__isset) {
    [outProtocol writeFieldBeginWithName: @"num_" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __num_];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RailwayMember("];
  [ms appendString: @"type_:"];
  [ms appendFormat: @"\"%@\"", __type_];
  [ms appendString: @",ref_:"];
  [ms appendFormat: @"%i", __ref_];
  [ms appendString: @",role_:"];
  [ms appendFormat: @"\"%@\"", __role_];
  [ms appendString: @",num_:"];
  [ms appendFormat: @"%i", __num_];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Railway

- (id) initWithNodes_: (NSDictionary *) nodes_ ways_: (NSDictionary *) ways_ members_: (NSSet *) members_ railway_: (NSSet *) railway_ stopNodes_: (NSDictionary *) stopNodes_
{
  self = [super init];
  __nodes_ = [nodes_ retain];
  __nodes__isset = YES;
  __ways_ = [ways_ retain];
  __ways__isset = YES;
  __members_ = [members_ retain];
  __members__isset = YES;
  __railway_ = [railway_ retain];
  __railway__isset = YES;
  __stopNodes_ = [stopNodes_ retain];
  __stopNodes__isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"nodes_"])
  {
    __nodes_ = [[decoder decodeObjectForKey: @"nodes_"] retain];
    __nodes__isset = YES;
  }
  if ([decoder containsValueForKey: @"ways_"])
  {
    __ways_ = [[decoder decodeObjectForKey: @"ways_"] retain];
    __ways__isset = YES;
  }
  if ([decoder containsValueForKey: @"members_"])
  {
    __members_ = [[decoder decodeObjectForKey: @"members_"] retain];
    __members__isset = YES;
  }
  if ([decoder containsValueForKey: @"railway_"])
  {
    __railway_ = [[decoder decodeObjectForKey: @"railway_"] retain];
    __railway__isset = YES;
  }
  if ([decoder containsValueForKey: @"stopNodes_"])
  {
    __stopNodes_ = [[decoder decodeObjectForKey: @"stopNodes_"] retain];
    __stopNodes__isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__nodes__isset)
  {
    [encoder encodeObject: __nodes_ forKey: @"nodes_"];
  }
  if (__ways__isset)
  {
    [encoder encodeObject: __ways_ forKey: @"ways_"];
  }
  if (__members__isset)
  {
    [encoder encodeObject: __members_ forKey: @"members_"];
  }
  if (__railway__isset)
  {
    [encoder encodeObject: __railway_ forKey: @"railway_"];
  }
  if (__stopNodes__isset)
  {
    [encoder encodeObject: __stopNodes_ forKey: @"stopNodes_"];
  }
}

- (void) dealloc
{
  [__nodes_ release];
  [__ways_ release];
  [__members_ release];
  [__railway_ release];
  [__stopNodes_ release];
  [super dealloc];
}

- (NSDictionary *) nodes_ {
  return [[__nodes_ retain] autorelease];
}

- (void) setNodes_: (NSDictionary *) nodes_ {
  [nodes_ retain];
  [__nodes_ release];
  __nodes_ = nodes_;
  __nodes__isset = YES;
}

- (BOOL) nodes_IsSet {
  return __nodes__isset;
}

- (void) unsetNodes_ {
  [__nodes_ release];
  __nodes_ = nil;
  __nodes__isset = NO;
}

- (NSDictionary *) ways_ {
  return [[__ways_ retain] autorelease];
}

- (void) setWays_: (NSDictionary *) ways_ {
  [ways_ retain];
  [__ways_ release];
  __ways_ = ways_;
  __ways__isset = YES;
}

- (BOOL) ways_IsSet {
  return __ways__isset;
}

- (void) unsetWays_ {
  [__ways_ release];
  __ways_ = nil;
  __ways__isset = NO;
}

- (NSSet *) members_ {
  return [[__members_ retain] autorelease];
}

- (void) setMembers_: (NSSet *) members_ {
  [members_ retain];
  [__members_ release];
  __members_ = members_;
  __members__isset = YES;
}

- (BOOL) members_IsSet {
  return __members__isset;
}

- (void) unsetMembers_ {
  [__members_ release];
  __members_ = nil;
  __members__isset = NO;
}

- (NSSet *) railway_ {
  return [[__railway_ retain] autorelease];
}

- (void) setRailway_: (NSSet *) railway_ {
  [railway_ retain];
  [__railway_ release];
  __railway_ = railway_;
  __railway__isset = YES;
}

- (BOOL) railway_IsSet {
  return __railway__isset;
}

- (void) unsetRailway_ {
  [__railway_ release];
  __railway_ = nil;
  __railway__isset = NO;
}

- (NSDictionary *) stopNodes_ {
  return [[__stopNodes_ retain] autorelease];
}

- (void) setStopNodes_: (NSDictionary *) stopNodes_ {
  [stopNodes_ retain];
  [__stopNodes_ release];
  __stopNodes_ = stopNodes_;
  __stopNodes__isset = YES;
}

- (BOOL) stopNodes_IsSet {
  return __stopNodes__isset;
}

- (void) unsetStopNodes_ {
  [__stopNodes_ release];
  __stopNodes_ = nil;
  __stopNodes__isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_MAP) {
          int _size86;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size86];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size86];
          int _i87;
          for (_i87 = 0; _i87 < _size86; ++_i87)
          {
            int32_t _key88 = [inProtocol readI32];
            RailwayNode *_val89 = [[RailwayNode alloc] init];
            [_val89 read: inProtocol];
            [fieldValue setObject: _val89 forKey: [NSNumber numberWithLong: _key88]];
            [_val89 release];
          }
          [inProtocol readMapEnd];
          [self setNodes_: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_MAP) {
          int _size90;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size90];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size90];
          int _i91;
          for (_i91 = 0; _i91 < _size90; ++_i91)
          {
            int32_t _key92 = [inProtocol readI32];
            RailwayWay *_val93 = [[RailwayWay alloc] init];
            [_val93 read: inProtocol];
            [fieldValue setObject: _val93 forKey: [NSNumber numberWithLong: _key92]];
            [_val93 release];
          }
          [inProtocol readMapEnd];
          [self setWays_: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_SET) {
          int _size94;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size94];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size94];
          int _i95;
          for (_i95 = 0; _i95 < _size94; ++_i95)
          {
            RailwayMember *_elem96 = [[RailwayMember alloc] init];
            [_elem96 read: inProtocol];
            [fieldValue addObject: _elem96];
            [_elem96 release];
          }
          [inProtocol readSetEnd];
          [self setMembers_: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_SET) {
          int _size97;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size97];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size97];
          int _i98;
          for (_i98 = 0; _i98 < _size97; ++_i98)
          {
            RailwayNode *_elem99 = [[RailwayNode alloc] init];
            [_elem99 read: inProtocol];
            [fieldValue addObject: _elem99];
            [_elem99 release];
          }
          [inProtocol readSetEnd];
          [self setRailway_: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_MAP) {
          int _size100;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size100];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size100];
          int _i101;
          for (_i101 = 0; _i101 < _size100; ++_i101)
          {
            int32_t _key102 = [inProtocol readI32];
            RailwayNode *_val103 = [[RailwayNode alloc] init];
            [_val103 read: inProtocol];
            [fieldValue setObject: _val103 forKey: [NSNumber numberWithLong: _key102]];
            [_val103 release];
          }
          [inProtocol readMapEnd];
          [self setStopNodes_: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Railway"];
  if (__nodes__isset) {
    if (__nodes_ != nil) {
      [outProtocol writeFieldBeginWithName: @"nodes_" type: TType_MAP fieldID: 1];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRUCT size: [__nodes_ count]];
        NSEnumerator * _iter104 = [__nodes_ keyEnumerator];
        id key105;
        while ((key105 = [_iter104 nextObject]))
        {
          [outProtocol writeI32: [key105 longValue]];
          [[__nodes_ objectForKey: key105] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__ways__isset) {
    if (__ways_ != nil) {
      [outProtocol writeFieldBeginWithName: @"ways_" type: TType_MAP fieldID: 2];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRUCT size: [__ways_ count]];
        NSEnumerator * _iter106 = [__ways_ keyEnumerator];
        id key107;
        while ((key107 = [_iter106 nextObject]))
        {
          [outProtocol writeI32: [key107 longValue]];
          [[__ways_ objectForKey: key107] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__members__isset) {
    if (__members_ != nil) {
      [outProtocol writeFieldBeginWithName: @"members_" type: TType_SET fieldID: 3];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRUCT size: [__members_ count]];
        NSEnumerator * _iter108 = [__members_ objectEnumerator];
        id obj109;
        while ((obj109 = [_iter108 nextObject]))
        {
          [obj109 write: outProtocol];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__railway__isset) {
    if (__railway_ != nil) {
      [outProtocol writeFieldBeginWithName: @"railway_" type: TType_SET fieldID: 4];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRUCT size: [__railway_ count]];
        NSEnumerator * _iter110 = [__railway_ objectEnumerator];
        id obj111;
        while ((obj111 = [_iter110 nextObject]))
        {
          [obj111 write: outProtocol];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__stopNodes__isset) {
    if (__stopNodes_ != nil) {
      [outProtocol writeFieldBeginWithName: @"stopNodes_" type: TType_MAP fieldID: 5];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRUCT size: [__stopNodes_ count]];
        NSEnumerator * _iter112 = [__stopNodes_ keyEnumerator];
        id key113;
        while ((key113 = [_iter112 nextObject]))
        {
          [outProtocol writeI32: [key113 longValue]];
          [[__stopNodes_ objectForKey: key113] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Railway("];
  [ms appendString: @"nodes_:"];
  [ms appendFormat: @"%@", __nodes_];
  [ms appendString: @",ways_:"];
  [ms appendFormat: @"%@", __ways_];
  [ms appendString: @",members_:"];
  [ms appendFormat: @"%@", __members_];
  [ms appendString: @",railway_:"];
  [ms appendFormat: @"%@", __railway_];
  [ms appendString: @",stopNodes_:"];
  [ms appendFormat: @"%@", __stopNodes_];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation transportConstants
+ (void) initialize {
}
@end

@interface transport_autocomplete_args : NSObject <NSCoding> {
  NSString * __constraint;

  BOOL __constraint_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=constraint, setter=setConstraint:) NSString * constraint;
#endif

- (id) initWithConstraint: (NSString *) constraint;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) constraint;
- (void) setConstraint: (NSString *) constraint;
- (BOOL) constraintIsSet;

@end

@implementation transport_autocomplete_args

- (id) initWithConstraint: (NSString *) constraint
{
  self = [super init];
  __constraint = [constraint retain];
  __constraint_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"constraint"])
  {
    __constraint = [[decoder decodeObjectForKey: @"constraint"] retain];
    __constraint_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__constraint_isset)
  {
    [encoder encodeObject: __constraint forKey: @"constraint"];
  }
}

- (void) dealloc
{
  [__constraint release];
  [super dealloc];
}

- (NSString *) constraint {
  return [[__constraint retain] autorelease];
}

- (void) setConstraint: (NSString *) constraint {
  [constraint retain];
  [__constraint release];
  __constraint = constraint;
  __constraint_isset = YES;
}

- (BOOL) constraintIsSet {
  return __constraint_isset;
}

- (void) unsetConstraint {
  [__constraint release];
  __constraint = nil;
  __constraint_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConstraint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"autocomplete_args"];
  if (__constraint_isset) {
    if (__constraint != nil) {
      [outProtocol writeFieldBeginWithName: @"constraint" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __constraint];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"transport_autocomplete_args("];
  [ms appendString: @"constraint:"];
  [ms appendFormat: @"\"%@\"", __constraint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Transport_Autocomplete_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation Transport_Autocomplete_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size114;
          [inProtocol readListBeginReturningElementType: NULL size: &_size114];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size114];
          int _i115;
          for (_i115 = 0; _i115 < _size114; ++_i115)
          {
            TransportStation *_elem116 = [[TransportStation alloc] init];
            [_elem116 read: inProtocol];
            [fieldValue addObject: _elem116];
            [_elem116 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Autocomplete_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i118;
        for (i118 = 0; i118 < [__success count]; i118++)
        {
          [[__success objectAtIndex: i118] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Transport_Autocomplete_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getLocationsFromIDs_args : NSObject <NSCoding> {
  NSArray * __ids;

  BOOL __ids_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ids, setter=setIds:) NSArray * ids;
#endif

- (id) initWithIds: (NSArray *) ids;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) ids;
- (void) setIds: (NSArray *) ids;
- (BOOL) idsIsSet;

@end

@implementation getLocationsFromIDs_args

- (id) initWithIds: (NSArray *) ids
{
  self = [super init];
  __ids = [ids retain];
  __ids_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ids"])
  {
    __ids = [[decoder decodeObjectForKey: @"ids"] retain];
    __ids_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ids_isset)
  {
    [encoder encodeObject: __ids forKey: @"ids"];
  }
}

- (void) dealloc
{
  [__ids release];
  [super dealloc];
}

- (NSArray *) ids {
  return [[__ids retain] autorelease];
}

- (void) setIds: (NSArray *) ids {
  [ids retain];
  [__ids release];
  __ids = ids;
  __ids_isset = YES;
}

- (BOOL) idsIsSet {
  return __ids_isset;
}

- (void) unsetIds {
  [__ids release];
  __ids = nil;
  __ids_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size119;
          [inProtocol readListBeginReturningElementType: NULL size: &_size119];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size119];
          int _i120;
          for (_i120 = 0; _i120 < _size119; ++_i120)
          {
            int32_t _elem121 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem121]];
          }
          [inProtocol readListEnd];
          [self setIds: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getLocationsFromIDs_args"];
  if (__ids_isset) {
    if (__ids != nil) {
      [outProtocol writeFieldBeginWithName: @"ids" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__ids count]];
        int i123;
        for (i123 = 0; i123 < [__ids count]; i123++)
        {
          [outProtocol writeI32: [[__ids objectAtIndex: i123] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getLocationsFromIDs_args("];
  [ms appendString: @"ids:"];
  [ms appendFormat: @"%@", __ids];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetLocationsFromIDs_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetLocationsFromIDs_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size124;
          [inProtocol readListBeginReturningElementType: NULL size: &_size124];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size124];
          int _i125;
          for (_i125 = 0; _i125 < _size124; ++_i125)
          {
            TransportStation *_elem126 = [[TransportStation alloc] init];
            [_elem126 read: inProtocol];
            [fieldValue addObject: _elem126];
            [_elem126 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLocationsFromIDs_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i128;
        for (i128 = 0; i128 < [__success count]; i128++)
        {
          [[__success objectAtIndex: i128] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLocationsFromIDs_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getLocationsFromNames_args : NSObject <NSCoding> {
  NSArray * __names;

  BOOL __names_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=names, setter=setNames:) NSArray * names;
#endif

- (id) initWithNames: (NSArray *) names;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) names;
- (void) setNames: (NSArray *) names;
- (BOOL) namesIsSet;

@end

@implementation getLocationsFromNames_args

- (id) initWithNames: (NSArray *) names
{
  self = [super init];
  __names = [names retain];
  __names_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"names"])
  {
    __names = [[decoder decodeObjectForKey: @"names"] retain];
    __names_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__names_isset)
  {
    [encoder encodeObject: __names forKey: @"names"];
  }
}

- (void) dealloc
{
  [__names release];
  [super dealloc];
}

- (NSArray *) names {
  return [[__names retain] autorelease];
}

- (void) setNames: (NSArray *) names {
  [names retain];
  [__names release];
  __names = names;
  __names_isset = YES;
}

- (BOOL) namesIsSet {
  return __names_isset;
}

- (void) unsetNames {
  [__names release];
  __names = nil;
  __names_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size129;
          [inProtocol readListBeginReturningElementType: NULL size: &_size129];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size129];
          int _i130;
          for (_i130 = 0; _i130 < _size129; ++_i130)
          {
            NSString * _elem131 = [inProtocol readString];
            [fieldValue addObject: _elem131];
          }
          [inProtocol readListEnd];
          [self setNames: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getLocationsFromNames_args"];
  if (__names_isset) {
    if (__names != nil) {
      [outProtocol writeFieldBeginWithName: @"names" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__names count]];
        int i133;
        for (i133 = 0; i133 < [__names count]; i133++)
        {
          [outProtocol writeString: [__names objectAtIndex: i133]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getLocationsFromNames_args("];
  [ms appendString: @"names:"];
  [ms appendFormat: @"%@", __names];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetLocationsFromNames_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetLocationsFromNames_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size134;
          [inProtocol readListBeginReturningElementType: NULL size: &_size134];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size134];
          int _i135;
          for (_i135 = 0; _i135 < _size134; ++_i135)
          {
            TransportStation *_elem136 = [[TransportStation alloc] init];
            [_elem136 read: inProtocol];
            [fieldValue addObject: _elem136];
            [_elem136 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLocationsFromNames_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i138;
        for (i138 = 0; i138 < [__success count]; i138++)
        {
          [[__success objectAtIndex: i138] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLocationsFromNames_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface nextDepartures_args : NSObject <NSCoding> {
  NSString * __stationID;

  BOOL __stationID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=stationID, setter=setStationID:) NSString * stationID;
#endif

- (id) initWithStationID: (NSString *) stationID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) stationID;
- (void) setStationID: (NSString *) stationID;
- (BOOL) stationIDIsSet;

@end

@implementation nextDepartures_args

- (id) initWithStationID: (NSString *) stationID
{
  self = [super init];
  __stationID = [stationID retain];
  __stationID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"stationID"])
  {
    __stationID = [[decoder decodeObjectForKey: @"stationID"] retain];
    __stationID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__stationID_isset)
  {
    [encoder encodeObject: __stationID forKey: @"stationID"];
  }
}

- (void) dealloc
{
  [__stationID release];
  [super dealloc];
}

- (NSString *) stationID {
  return [[__stationID retain] autorelease];
}

- (void) setStationID: (NSString *) stationID {
  [stationID retain];
  [__stationID release];
  __stationID = stationID;
  __stationID_isset = YES;
}

- (BOOL) stationIDIsSet {
  return __stationID_isset;
}

- (void) unsetStationID {
  [__stationID release];
  __stationID = nil;
  __stationID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStationID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"nextDepartures_args"];
  if (__stationID_isset) {
    if (__stationID != nil) {
      [outProtocol writeFieldBeginWithName: @"stationID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __stationID];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"nextDepartures_args("];
  [ms appendString: @"stationID:"];
  [ms appendFormat: @"\"%@\"", __stationID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NextDepartures_result : NSObject <NSCoding> {
  QueryDepartureResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryDepartureResult * success;
#endif

- (id) initWithSuccess: (QueryDepartureResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (QueryDepartureResult *) success;
- (void) setSuccess: (QueryDepartureResult *) success;
- (BOOL) successIsSet;

@end

@implementation NextDepartures_result

- (id) initWithSuccess: (QueryDepartureResult *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (QueryDepartureResult *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (QueryDepartureResult *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryDepartureResult *fieldValue = [[QueryDepartureResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NextDepartures_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NextDepartures_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTrips_args : NSObject <NSCoding> {
  NSString * __from;
  NSString * __to;

  BOOL __from_isset;
  BOOL __to_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=from, setter=setFrom:) NSString * from;
@property (nonatomic, retain, getter=to, setter=setTo:) NSString * to;
#endif

- (id) initWithFrom: (NSString *) from to: (NSString *) to;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) from;
- (void) setFrom: (NSString *) from;
- (BOOL) fromIsSet;

- (NSString *) to;
- (void) setTo: (NSString *) to;
- (BOOL) toIsSet;

@end

@implementation getTrips_args

- (id) initWithFrom: (NSString *) from to: (NSString *) to
{
  self = [super init];
  __from = [from retain];
  __from_isset = YES;
  __to = [to retain];
  __to_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain];
    __to_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
}

- (void) dealloc
{
  [__from release];
  [__to release];
  [super dealloc];
}

- (NSString *) from {
  return [[__from retain] autorelease];
}

- (void) setFrom: (NSString *) from {
  [from retain];
  [__from release];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release];
  __from = nil;
  __from_isset = NO;
}

- (NSString *) to {
  return [[__to retain] autorelease];
}

- (void) setTo: (NSString *) to {
  [to retain];
  [__to release];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release];
  __to = nil;
  __to_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFrom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTrips_args"];
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __from];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __to];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTrips_args("];
  [ms appendString: @"from:"];
  [ms appendFormat: @"\"%@\"", __from];
  [ms appendString: @",to:"];
  [ms appendFormat: @"\"%@\"", __to];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTrips_result : NSObject <NSCoding> {
  QueryTripsResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryTripsResult * success;
#endif

- (id) initWithSuccess: (QueryTripsResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (QueryTripsResult *) success;
- (void) setSuccess: (QueryTripsResult *) success;
- (BOOL) successIsSet;

@end

@implementation GetTrips_result

- (id) initWithSuccess: (QueryTripsResult *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (QueryTripsResult *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (QueryTripsResult *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryTripsResult *fieldValue = [[QueryTripsResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTrips_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTrips_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTripsAtTime_args : NSObject <NSCoding> {
  NSString * __from;
  NSString * __to;
  timestamp __time;
  BOOL __isDeparture;

  BOOL __from_isset;
  BOOL __to_isset;
  BOOL __time_isset;
  BOOL __isDeparture_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=from, setter=setFrom:) NSString * from;
@property (nonatomic, retain, getter=to, setter=setTo:) NSString * to;
@property (nonatomic, getter=time, setter=setTime:) timestamp time;
@property (nonatomic, getter=isDeparture, setter=setIsDeparture:) BOOL isDeparture;
#endif

- (id) initWithFrom: (NSString *) from to: (NSString *) to time: (timestamp) time isDeparture: (BOOL) isDeparture;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) from;
- (void) setFrom: (NSString *) from;
- (BOOL) fromIsSet;

- (NSString *) to;
- (void) setTo: (NSString *) to;
- (BOOL) toIsSet;

- (timestamp) time;
- (void) setTime: (timestamp) time;
- (BOOL) timeIsSet;

- (BOOL) isDeparture;
- (void) setIsDeparture: (BOOL) isDeparture;
- (BOOL) isDepartureIsSet;

@end

@implementation getTripsAtTime_args

- (id) initWithFrom: (NSString *) from to: (NSString *) to time: (timestamp) time isDeparture: (BOOL) isDeparture
{
  self = [super init];
  __from = [from retain];
  __from_isset = YES;
  __to = [to retain];
  __to_isset = YES;
  __time = time;
  __time_isset = YES;
  __isDeparture = isDeparture;
  __isDeparture_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain];
    __to_isset = YES;
  }
  if ([decoder containsValueForKey: @"time"])
  {
    __time = [decoder decodeInt64ForKey: @"time"];
    __time_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDeparture"])
  {
    __isDeparture = [decoder decodeBoolForKey: @"isDeparture"];
    __isDeparture_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
  if (__time_isset)
  {
    [encoder encodeInt64: __time forKey: @"time"];
  }
  if (__isDeparture_isset)
  {
    [encoder encodeBool: __isDeparture forKey: @"isDeparture"];
  }
}

- (void) dealloc
{
  [__from release];
  [__to release];
  [super dealloc];
}

- (NSString *) from {
  return [[__from retain] autorelease];
}

- (void) setFrom: (NSString *) from {
  [from retain];
  [__from release];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release];
  __from = nil;
  __from_isset = NO;
}

- (NSString *) to {
  return [[__to retain] autorelease];
}

- (void) setTo: (NSString *) to {
  [to retain];
  [__to release];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release];
  __to = nil;
  __to_isset = NO;
}

- (int64_t) time {
  return __time;
}

- (void) setTime: (int64_t) time {
  __time = time;
  __time_isset = YES;
}

- (BOOL) timeIsSet {
  return __time_isset;
}

- (void) unsetTime {
  __time_isset = NO;
}

- (BOOL) isDeparture {
  return __isDeparture;
}

- (void) setIsDeparture: (BOOL) isDeparture {
  __isDeparture = isDeparture;
  __isDeparture_isset = YES;
}

- (BOOL) isDepartureIsSet {
  return __isDeparture_isset;
}

- (void) unsetIsDeparture {
  __isDeparture_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFrom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsDeparture: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTripsAtTime_args"];
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __from];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __to];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_isset) {
    [outProtocol writeFieldBeginWithName: @"time" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __time];
    [outProtocol writeFieldEnd];
  }
  if (__isDeparture_isset) {
    [outProtocol writeFieldBeginWithName: @"isDeparture" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __isDeparture];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTripsAtTime_args("];
  [ms appendString: @"from:"];
  [ms appendFormat: @"\"%@\"", __from];
  [ms appendString: @",to:"];
  [ms appendFormat: @"\"%@\"", __to];
  [ms appendString: @",time:"];
  [ms appendFormat: @"%qi", __time];
  [ms appendString: @",isDeparture:"];
  [ms appendFormat: @"%i", __isDeparture];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTripsAtTime_result : NSObject <NSCoding> {
  QueryTripsResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryTripsResult * success;
#endif

- (id) initWithSuccess: (QueryTripsResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (QueryTripsResult *) success;
- (void) setSuccess: (QueryTripsResult *) success;
- (BOOL) successIsSet;

@end

@implementation GetTripsAtTime_result

- (id) initWithSuccess: (QueryTripsResult *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (QueryTripsResult *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (QueryTripsResult *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryTripsResult *fieldValue = [[QueryTripsResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTripsAtTime_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTripsAtTime_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTripsFromStationsIDs_args : NSObject <NSCoding> {
  NSString * __fromID;
  NSString * __toID;

  BOOL __fromID_isset;
  BOOL __toID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=fromID, setter=setFromID:) NSString * fromID;
@property (nonatomic, retain, getter=toID, setter=setToID:) NSString * toID;
#endif

- (id) initWithFromID: (NSString *) fromID toID: (NSString *) toID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) fromID;
- (void) setFromID: (NSString *) fromID;
- (BOOL) fromIDIsSet;

- (NSString *) toID;
- (void) setToID: (NSString *) toID;
- (BOOL) toIDIsSet;

@end

@implementation getTripsFromStationsIDs_args

- (id) initWithFromID: (NSString *) fromID toID: (NSString *) toID
{
  self = [super init];
  __fromID = [fromID retain];
  __fromID_isset = YES;
  __toID = [toID retain];
  __toID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"fromID"])
  {
    __fromID = [[decoder decodeObjectForKey: @"fromID"] retain];
    __fromID_isset = YES;
  }
  if ([decoder containsValueForKey: @"toID"])
  {
    __toID = [[decoder decodeObjectForKey: @"toID"] retain];
    __toID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__fromID_isset)
  {
    [encoder encodeObject: __fromID forKey: @"fromID"];
  }
  if (__toID_isset)
  {
    [encoder encodeObject: __toID forKey: @"toID"];
  }
}

- (void) dealloc
{
  [__fromID release];
  [__toID release];
  [super dealloc];
}

- (NSString *) fromID {
  return [[__fromID retain] autorelease];
}

- (void) setFromID: (NSString *) fromID {
  [fromID retain];
  [__fromID release];
  __fromID = fromID;
  __fromID_isset = YES;
}

- (BOOL) fromIDIsSet {
  return __fromID_isset;
}

- (void) unsetFromID {
  [__fromID release];
  __fromID = nil;
  __fromID_isset = NO;
}

- (NSString *) toID {
  return [[__toID retain] autorelease];
}

- (void) setToID: (NSString *) toID {
  [toID retain];
  [__toID release];
  __toID = toID;
  __toID_isset = YES;
}

- (BOOL) toIDIsSet {
  return __toID_isset;
}

- (void) unsetToID {
  [__toID release];
  __toID = nil;
  __toID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFromID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTripsFromStationsIDs_args"];
  if (__fromID_isset) {
    if (__fromID != nil) {
      [outProtocol writeFieldBeginWithName: @"fromID" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __fromID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__toID_isset) {
    if (__toID != nil) {
      [outProtocol writeFieldBeginWithName: @"toID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __toID];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTripsFromStationsIDs_args("];
  [ms appendString: @"fromID:"];
  [ms appendFormat: @"\"%@\"", __fromID];
  [ms appendString: @",toID:"];
  [ms appendFormat: @"\"%@\"", __toID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTripsFromStationsIDs_result : NSObject <NSCoding> {
  QueryTripsResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryTripsResult * success;
#endif

- (id) initWithSuccess: (QueryTripsResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (QueryTripsResult *) success;
- (void) setSuccess: (QueryTripsResult *) success;
- (BOOL) successIsSet;

@end

@implementation GetTripsFromStationsIDs_result

- (id) initWithSuccess: (QueryTripsResult *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (QueryTripsResult *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (QueryTripsResult *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryTripsResult *fieldValue = [[QueryTripsResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTripsFromStationsIDs_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTripsFromStationsIDs_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_autocomplete: (NSString *) constraint
{
  [outProtocol writeMessageBeginWithName: @"autocomplete" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"autocomplete_args"];
  if (constraint != nil)  {
    [outProtocol writeFieldBeginWithName: @"constraint" type: TType_STRING fieldID: 1];
    [outProtocol writeString: constraint];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_autocomplete
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Transport_Autocomplete_result * result = [[[Transport_Autocomplete_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"autocomplete failed: unknown result"];
}

- (NSArray *) autocomplete: (NSString *) constraint
{
  [self send_autocomplete: constraint];
  return [self recv_autocomplete];
}

- (void) send_getLocationsFromIDs: (NSArray *) ids
{
  [outProtocol writeMessageBeginWithName: @"getLocationsFromIDs" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getLocationsFromIDs_args"];
  if (ids != nil)  {
    [outProtocol writeFieldBeginWithName: @"ids" type: TType_LIST fieldID: 1];
    {
      [outProtocol writeListBeginWithElementType: TType_I32 size: [ids count]];
      int i140;
      for (i140 = 0; i140 < [ids count]; i140++)
      {
        [outProtocol writeI32: [[ids objectAtIndex: i140] longValue]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getLocationsFromIDs
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetLocationsFromIDs_result * result = [[[GetLocationsFromIDs_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getLocationsFromIDs failed: unknown result"];
}

- (NSArray *) getLocationsFromIDs: (NSArray *) ids
{
  [self send_getLocationsFromIDs: ids];
  return [self recv_getLocationsFromIDs];
}

- (void) send_getLocationsFromNames: (NSArray *) names
{
  [outProtocol writeMessageBeginWithName: @"getLocationsFromNames" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getLocationsFromNames_args"];
  if (names != nil)  {
    [outProtocol writeFieldBeginWithName: @"names" type: TType_LIST fieldID: 1];
    {
      [outProtocol writeListBeginWithElementType: TType_STRING size: [names count]];
      int i142;
      for (i142 = 0; i142 < [names count]; i142++)
      {
        [outProtocol writeString: [names objectAtIndex: i142]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getLocationsFromNames
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetLocationsFromNames_result * result = [[[GetLocationsFromNames_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getLocationsFromNames failed: unknown result"];
}

- (NSArray *) getLocationsFromNames: (NSArray *) names
{
  [self send_getLocationsFromNames: names];
  return [self recv_getLocationsFromNames];
}

- (void) send_nextDepartures: (NSString *) stationID
{
  [outProtocol writeMessageBeginWithName: @"nextDepartures" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"nextDepartures_args"];
  if (stationID != nil)  {
    [outProtocol writeFieldBeginWithName: @"stationID" type: TType_STRING fieldID: 2];
    [outProtocol writeString: stationID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (QueryDepartureResult *) recv_nextDepartures
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  NextDepartures_result * result = [[[NextDepartures_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"nextDepartures failed: unknown result"];
}

- (QueryDepartureResult *) nextDepartures: (NSString *) stationID
{
  [self send_nextDepartures: stationID];
  return [self recv_nextDepartures];
}

- (void) send_getTrips: (NSString *) from : (NSString *) to
{
  [outProtocol writeMessageBeginWithName: @"getTrips" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTrips_args"];
  if (from != nil)  {
    [outProtocol writeFieldBeginWithName: @"from" type: TType_STRING fieldID: 1];
    [outProtocol writeString: from];
    [outProtocol writeFieldEnd];
  }
  if (to != nil)  {
    [outProtocol writeFieldBeginWithName: @"to" type: TType_STRING fieldID: 2];
    [outProtocol writeString: to];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (QueryTripsResult *) recv_getTrips
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTrips_result * result = [[[GetTrips_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTrips failed: unknown result"];
}

- (QueryTripsResult *) getTrips: (NSString *) from : (NSString *) to
{
  [self send_getTrips: from : to];
  return [self recv_getTrips];
}

- (void) send_getTripsAtTime: (NSString *) from : (NSString *) to : (timestamp) time : (BOOL) isDeparture
{
  [outProtocol writeMessageBeginWithName: @"getTripsAtTime" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTripsAtTime_args"];
  if (from != nil)  {
    [outProtocol writeFieldBeginWithName: @"from" type: TType_STRING fieldID: 1];
    [outProtocol writeString: from];
    [outProtocol writeFieldEnd];
  }
  if (to != nil)  {
    [outProtocol writeFieldBeginWithName: @"to" type: TType_STRING fieldID: 2];
    [outProtocol writeString: to];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"time" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: time];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"isDeparture" type: TType_BOOL fieldID: 4];
  [outProtocol writeBool: isDeparture];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (QueryTripsResult *) recv_getTripsAtTime
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTripsAtTime_result * result = [[[GetTripsAtTime_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTripsAtTime failed: unknown result"];
}

- (QueryTripsResult *) getTripsAtTime: (NSString *) from : (NSString *) to : (timestamp) time : (BOOL) isDeparture
{
  [self send_getTripsAtTime: from : to : time : isDeparture];
  return [self recv_getTripsAtTime];
}

- (void) send_getTripsFromStationsIDs: (NSString *) fromID : (NSString *) toID
{
  [outProtocol writeMessageBeginWithName: @"getTripsFromStationsIDs" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTripsFromStationsIDs_args"];
  if (fromID != nil)  {
    [outProtocol writeFieldBeginWithName: @"fromID" type: TType_STRING fieldID: 1];
    [outProtocol writeString: fromID];
    [outProtocol writeFieldEnd];
  }
  if (toID != nil)  {
    [outProtocol writeFieldBeginWithName: @"toID" type: TType_STRING fieldID: 2];
    [outProtocol writeString: toID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (QueryTripsResult *) recv_getTripsFromStationsIDs
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTripsFromStationsIDs_result * result = [[[GetTripsFromStationsIDs_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTripsFromStationsIDs failed: unknown result"];
}

- (QueryTripsResult *) getTripsFromStationsIDs: (NSString *) fromID : (NSString *) toID
{
  [self send_getTripsFromStationsIDs: fromID : toID];
  return [self recv_getTripsFromStationsIDs];
}

@end

@implementation TransportServiceProcessor

- (id) initWithTransportService: (id <TransportService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_autocomplete_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"autocomplete"];
  }
  {
    SEL s = @selector(process_getLocationsFromIDs_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getLocationsFromIDs"];
  }
  {
    SEL s = @selector(process_getLocationsFromNames_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getLocationsFromNames"];
  }
  {
    SEL s = @selector(process_nextDepartures_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"nextDepartures"];
  }
  {
    SEL s = @selector(process_getTrips_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTrips"];
  }
  {
    SEL s = @selector(process_getTripsAtTime_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTripsAtTime"];
  }
  {
    SEL s = @selector(process_getTripsFromStationsIDs_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTripsFromStationsIDs"];
  }
  return self;
}

- (id<TransportService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_autocomplete_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  transport_autocomplete_args * args = [[transport_autocomplete_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Transport_Autocomplete_result * result = [[Transport_Autocomplete_result alloc] init];
  [result setSuccess: [mService autocomplete: [args constraint]]];
  [outProtocol writeMessageBeginWithName: @"autocomplete"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getLocationsFromIDs_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getLocationsFromIDs_args * args = [[getLocationsFromIDs_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetLocationsFromIDs_result * result = [[GetLocationsFromIDs_result alloc] init];
  [result setSuccess: [mService getLocationsFromIDs: [args ids]]];
  [outProtocol writeMessageBeginWithName: @"getLocationsFromIDs"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getLocationsFromNames_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getLocationsFromNames_args * args = [[getLocationsFromNames_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetLocationsFromNames_result * result = [[GetLocationsFromNames_result alloc] init];
  [result setSuccess: [mService getLocationsFromNames: [args names]]];
  [outProtocol writeMessageBeginWithName: @"getLocationsFromNames"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_nextDepartures_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  nextDepartures_args * args = [[nextDepartures_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  NextDepartures_result * result = [[NextDepartures_result alloc] init];
  [result setSuccess: [mService nextDepartures: [args stationID]]];
  [outProtocol writeMessageBeginWithName: @"nextDepartures"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getTrips_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTrips_args * args = [[getTrips_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTrips_result * result = [[GetTrips_result alloc] init];
  [result setSuccess: [mService getTrips: [args from]: [args to]]];
  [outProtocol writeMessageBeginWithName: @"getTrips"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getTripsAtTime_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTripsAtTime_args * args = [[getTripsAtTime_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTripsAtTime_result * result = [[GetTripsAtTime_result alloc] init];
  [result setSuccess: [mService getTripsAtTime: [args from]: [args to]: [args time]: [args isDeparture]]];
  [outProtocol writeMessageBeginWithName: @"getTripsAtTime"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getTripsFromStationsIDs_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTripsFromStationsIDs_args * args = [[getTripsFromStationsIDs_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTripsFromStationsIDs_result * result = [[GetTripsFromStationsIDs_result alloc] init];
  [result setSuccess: [mService getTripsFromStationsIDs: [args fromID]: [args toID]]];
  [outProtocol writeMessageBeginWithName: @"getTripsFromStationsIDs"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

