/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "transport.h"


@implementation transportConstants
+ (void) initialize {
}
@end

@implementation TransportStation

- (id) initWithLatitude: (int32_t) latitude longitude: (int32_t) longitude name: (NSString *) name
{
  self = [super init];
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeInt32ForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeInt32ForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__latitude_isset)
  {
    [encoder encodeInt32: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeInt32: __longitude forKey: @"longitude"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__name release];
  [super dealloc];
}

- (int32_t) latitude {
  return __latitude;
}

- (void) setLatitude: (int32_t) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (int32_t) longitude {
  return __longitude;
}

- (void) setLongitude: (int32_t) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportStation"];
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportStation("];
  [ms appendString: @"latitude:"];
  [ms appendFormat: @"%i", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%i", __longitude];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportLine

- (id) initWithName: (NSString *) name _UNUSED: (NSArray *) _UNUSED
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  ___UNUSED = [_UNUSED retain];
  ___UNUSED_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"_UNUSED"])
  {
    ___UNUSED = [[decoder decodeObjectForKey: @"_UNUSED"] retain];
    ___UNUSED_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (___UNUSED_isset)
  {
    [encoder encodeObject: ___UNUSED forKey: @"_UNUSED"];
  }
}

- (void) dealloc
{
  [__name release];
  [___UNUSED release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSArray *) _UNUSED {
  return [[___UNUSED retain] autorelease];
}

- (void) set_UNUSED: (NSArray *) _UNUSED {
  [_UNUSED retain];
  [___UNUSED release];
  ___UNUSED = _UNUSED;
  ___UNUSED_isset = YES;
}

- (BOOL) _UNUSEDIsSet {
  return ___UNUSED_isset;
}

- (void) unset_UNUSED {
  [___UNUSED release];
  ___UNUSED = nil;
  ___UNUSED_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self set_UNUSED: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportLine"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (___UNUSED_isset) {
    if (___UNUSED != nil) {
      [outProtocol writeFieldBeginWithName: @"_UNUSED" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [___UNUSED count]];
        int i4;
        for (i4 = 0; i4 < [___UNUSED count]; i4++)
        {
          [outProtocol writeString: [___UNUSED objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportLine("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",_UNUSED:"];
  [ms appendFormat: @"%@", ___UNUSED];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportConnection

- (id) initWithDeparture: (TransportStation *) departure arrival: (TransportStation *) arrival line: (TransportLine *) line departureTime: (int64_t) departureTime departurePosition: (NSString *) departurePosition arrivalTime: (int64_t) arrivalTime arrivalPosition: (NSString *) arrivalPosition
{
  self = [super init];
  __departure = [departure retain];
  __departure_isset = YES;
  __arrival = [arrival retain];
  __arrival_isset = YES;
  __line = [line retain];
  __line_isset = YES;
  __departureTime = departureTime;
  __departureTime_isset = YES;
  __departurePosition = [departurePosition retain];
  __departurePosition_isset = YES;
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
  __arrivalPosition = [arrivalPosition retain];
  __arrivalPosition_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"departure"])
  {
    __departure = [[decoder decodeObjectForKey: @"departure"] retain];
    __departure_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrival"])
  {
    __arrival = [[decoder decodeObjectForKey: @"arrival"] retain];
    __arrival_isset = YES;
  }
  if ([decoder containsValueForKey: @"line"])
  {
    __line = [[decoder decodeObjectForKey: @"line"] retain];
    __line_isset = YES;
  }
  if ([decoder containsValueForKey: @"departureTime"])
  {
    __departureTime = [decoder decodeInt64ForKey: @"departureTime"];
    __departureTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"departurePosition"])
  {
    __departurePosition = [[decoder decodeObjectForKey: @"departurePosition"] retain];
    __departurePosition_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalTime"])
  {
    __arrivalTime = [decoder decodeInt64ForKey: @"arrivalTime"];
    __arrivalTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalPosition"])
  {
    __arrivalPosition = [[decoder decodeObjectForKey: @"arrivalPosition"] retain];
    __arrivalPosition_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__departure_isset)
  {
    [encoder encodeObject: __departure forKey: @"departure"];
  }
  if (__arrival_isset)
  {
    [encoder encodeObject: __arrival forKey: @"arrival"];
  }
  if (__line_isset)
  {
    [encoder encodeObject: __line forKey: @"line"];
  }
  if (__departureTime_isset)
  {
    [encoder encodeInt64: __departureTime forKey: @"departureTime"];
  }
  if (__departurePosition_isset)
  {
    [encoder encodeObject: __departurePosition forKey: @"departurePosition"];
  }
  if (__arrivalTime_isset)
  {
    [encoder encodeInt64: __arrivalTime forKey: @"arrivalTime"];
  }
  if (__arrivalPosition_isset)
  {
    [encoder encodeObject: __arrivalPosition forKey: @"arrivalPosition"];
  }
}

- (void) dealloc
{
  [__departure release];
  [__arrival release];
  [__line release];
  [__departurePosition release];
  [__arrivalPosition release];
  [super dealloc];
}

- (TransportStation *) departure {
  return [[__departure retain] autorelease];
}

- (void) setDeparture: (TransportStation *) departure {
  [departure retain];
  [__departure release];
  __departure = departure;
  __departure_isset = YES;
}

- (BOOL) departureIsSet {
  return __departure_isset;
}

- (void) unsetDeparture {
  [__departure release];
  __departure = nil;
  __departure_isset = NO;
}

- (TransportStation *) arrival {
  return [[__arrival retain] autorelease];
}

- (void) setArrival: (TransportStation *) arrival {
  [arrival retain];
  [__arrival release];
  __arrival = arrival;
  __arrival_isset = YES;
}

- (BOOL) arrivalIsSet {
  return __arrival_isset;
}

- (void) unsetArrival {
  [__arrival release];
  __arrival = nil;
  __arrival_isset = NO;
}

- (TransportLine *) line {
  return [[__line retain] autorelease];
}

- (void) setLine: (TransportLine *) line {
  [line retain];
  [__line release];
  __line = line;
  __line_isset = YES;
}

- (BOOL) lineIsSet {
  return __line_isset;
}

- (void) unsetLine {
  [__line release];
  __line = nil;
  __line_isset = NO;
}

- (int64_t) departureTime {
  return __departureTime;
}

- (void) setDepartureTime: (int64_t) departureTime {
  __departureTime = departureTime;
  __departureTime_isset = YES;
}

- (BOOL) departureTimeIsSet {
  return __departureTime_isset;
}

- (void) unsetDepartureTime {
  __departureTime_isset = NO;
}

- (NSString *) departurePosition {
  return [[__departurePosition retain] autorelease];
}

- (void) setDeparturePosition: (NSString *) departurePosition {
  [departurePosition retain];
  [__departurePosition release];
  __departurePosition = departurePosition;
  __departurePosition_isset = YES;
}

- (BOOL) departurePositionIsSet {
  return __departurePosition_isset;
}

- (void) unsetDeparturePosition {
  [__departurePosition release];
  __departurePosition = nil;
  __departurePosition_isset = NO;
}

- (int64_t) arrivalTime {
  return __arrivalTime;
}

- (void) setArrivalTime: (int64_t) arrivalTime {
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
}

- (BOOL) arrivalTimeIsSet {
  return __arrivalTime_isset;
}

- (void) unsetArrivalTime {
  __arrivalTime_isset = NO;
}

- (NSString *) arrivalPosition {
  return [[__arrivalPosition retain] autorelease];
}

- (void) setArrivalPosition: (NSString *) arrivalPosition {
  [arrivalPosition retain];
  [__arrivalPosition release];
  __arrivalPosition = arrivalPosition;
  __arrivalPosition_isset = YES;
}

- (BOOL) arrivalPositionIsSet {
  return __arrivalPosition_isset;
}

- (void) unsetArrivalPosition {
  [__arrivalPosition release];
  __arrivalPosition = nil;
  __arrivalPosition_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setDeparture: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setArrival: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          TransportLine *fieldValue = [[TransportLine alloc] init];
          [fieldValue read: inProtocol];
          [self setLine: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDepartureTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeparturePosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArrivalTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArrivalPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportConnection"];
  if (__departure_isset) {
    if (__departure != nil) {
      [outProtocol writeFieldBeginWithName: @"departure" type: TType_STRUCT fieldID: 1];
      [__departure write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__arrival_isset) {
    if (__arrival != nil) {
      [outProtocol writeFieldBeginWithName: @"arrival" type: TType_STRUCT fieldID: 2];
      [__arrival write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__line_isset) {
    if (__line != nil) {
      [outProtocol writeFieldBeginWithName: @"line" type: TType_STRUCT fieldID: 4];
      [__line write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__departureTime_isset) {
    [outProtocol writeFieldBeginWithName: @"departureTime" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __departureTime];
    [outProtocol writeFieldEnd];
  }
  if (__departurePosition_isset) {
    if (__departurePosition != nil) {
      [outProtocol writeFieldBeginWithName: @"departurePosition" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __departurePosition];
      [outProtocol writeFieldEnd];
    }
  }
  if (__arrivalTime_isset) {
    [outProtocol writeFieldBeginWithName: @"arrivalTime" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __arrivalTime];
    [outProtocol writeFieldEnd];
  }
  if (__arrivalPosition_isset) {
    if (__arrivalPosition != nil) {
      [outProtocol writeFieldBeginWithName: @"arrivalPosition" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __arrivalPosition];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportConnection("];
  [ms appendString: @"departure:"];
  [ms appendFormat: @"%@", __departure];
  [ms appendString: @",arrival:"];
  [ms appendFormat: @"%@", __arrival];
  [ms appendString: @",line:"];
  [ms appendFormat: @"%@", __line];
  [ms appendString: @",departureTime:"];
  [ms appendFormat: @"%qi", __departureTime];
  [ms appendString: @",departurePosition:"];
  [ms appendFormat: @"\"%@\"", __departurePosition];
  [ms appendString: @",arrivalTime:"];
  [ms appendFormat: @"%qi", __arrivalTime];
  [ms appendString: @",arrivalPosition:"];
  [ms appendFormat: @"\"%@\"", __arrivalPosition];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportTrip

- (id) initWith_UNUSED: (NSString *) _UNUSED departureTime: (int64_t) departureTime arrivalTime: (int64_t) arrivalTime from: (TransportStation *) from to: (TransportStation *) to parts: (NSArray *) parts
{
  self = [super init];
  ___UNUSED = [_UNUSED retain];
  ___UNUSED_isset = YES;
  __departureTime = departureTime;
  __departureTime_isset = YES;
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
  __from = [from retain];
  __from_isset = YES;
  __to = [to retain];
  __to_isset = YES;
  __parts = [parts retain];
  __parts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"_UNUSED"])
  {
    ___UNUSED = [[decoder decodeObjectForKey: @"_UNUSED"] retain];
    ___UNUSED_isset = YES;
  }
  if ([decoder containsValueForKey: @"departureTime"])
  {
    __departureTime = [decoder decodeInt64ForKey: @"departureTime"];
    __departureTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalTime"])
  {
    __arrivalTime = [decoder decodeInt64ForKey: @"arrivalTime"];
    __arrivalTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain];
    __to_isset = YES;
  }
  if ([decoder containsValueForKey: @"parts"])
  {
    __parts = [[decoder decodeObjectForKey: @"parts"] retain];
    __parts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (___UNUSED_isset)
  {
    [encoder encodeObject: ___UNUSED forKey: @"_UNUSED"];
  }
  if (__departureTime_isset)
  {
    [encoder encodeInt64: __departureTime forKey: @"departureTime"];
  }
  if (__arrivalTime_isset)
  {
    [encoder encodeInt64: __arrivalTime forKey: @"arrivalTime"];
  }
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
  if (__parts_isset)
  {
    [encoder encodeObject: __parts forKey: @"parts"];
  }
}

- (void) dealloc
{
  [___UNUSED release];
  [__from release];
  [__to release];
  [__parts release];
  [super dealloc];
}

- (NSString *) _UNUSED {
  return [[___UNUSED retain] autorelease];
}

- (void) set_UNUSED: (NSString *) _UNUSED {
  [_UNUSED retain];
  [___UNUSED release];
  ___UNUSED = _UNUSED;
  ___UNUSED_isset = YES;
}

- (BOOL) _UNUSEDIsSet {
  return ___UNUSED_isset;
}

- (void) unset_UNUSED {
  [___UNUSED release];
  ___UNUSED = nil;
  ___UNUSED_isset = NO;
}

- (int64_t) departureTime {
  return __departureTime;
}

- (void) setDepartureTime: (int64_t) departureTime {
  __departureTime = departureTime;
  __departureTime_isset = YES;
}

- (BOOL) departureTimeIsSet {
  return __departureTime_isset;
}

- (void) unsetDepartureTime {
  __departureTime_isset = NO;
}

- (int64_t) arrivalTime {
  return __arrivalTime;
}

- (void) setArrivalTime: (int64_t) arrivalTime {
  __arrivalTime = arrivalTime;
  __arrivalTime_isset = YES;
}

- (BOOL) arrivalTimeIsSet {
  return __arrivalTime_isset;
}

- (void) unsetArrivalTime {
  __arrivalTime_isset = NO;
}

- (TransportStation *) from {
  return [[__from retain] autorelease];
}

- (void) setFrom: (TransportStation *) from {
  [from retain];
  [__from release];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release];
  __from = nil;
  __from_isset = NO;
}

- (TransportStation *) to {
  return [[__to retain] autorelease];
}

- (void) setTo: (TransportStation *) to {
  [to retain];
  [__to release];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release];
  __to = nil;
  __to_isset = NO;
}

- (NSArray *) parts {
  return [[__parts retain] autorelease];
}

- (void) setParts: (NSArray *) parts {
  [parts retain];
  [__parts release];
  __parts = parts;
  __parts_isset = YES;
}

- (BOOL) partsIsSet {
  return __parts_isset;
}

- (void) unsetParts {
  [__parts release];
  __parts = nil;
  __parts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self set_UNUSED: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDepartureTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArrivalTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setFrom: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setTo: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            TransportConnection *_elem7 = [[TransportConnection alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setParts: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransportTrip"];
  if (___UNUSED_isset) {
    if (___UNUSED != nil) {
      [outProtocol writeFieldBeginWithName: @"_UNUSED" type: TType_STRING fieldID: 1];
      [outProtocol writeString: ___UNUSED];
      [outProtocol writeFieldEnd];
    }
  }
  if (__departureTime_isset) {
    [outProtocol writeFieldBeginWithName: @"departureTime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __departureTime];
    [outProtocol writeFieldEnd];
  }
  if (__arrivalTime_isset) {
    [outProtocol writeFieldBeginWithName: @"arrivalTime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __arrivalTime];
    [outProtocol writeFieldEnd];
  }
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRUCT fieldID: 5];
      [__from write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRUCT fieldID: 6];
      [__to write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__parts_isset) {
    if (__parts != nil) {
      [outProtocol writeFieldBeginWithName: @"parts" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__parts count]];
        int i9;
        for (i9 = 0; i9 < [__parts count]; i9++)
        {
          [[__parts objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransportTrip("];
  [ms appendString: @"_UNUSED:"];
  [ms appendFormat: @"\"%@\"", ___UNUSED];
  [ms appendString: @",departureTime:"];
  [ms appendFormat: @"%qi", __departureTime];
  [ms appendString: @",arrivalTime:"];
  [ms appendFormat: @"%qi", __arrivalTime];
  [ms appendString: @",from:"];
  [ms appendFormat: @"%@", __from];
  [ms appendString: @",to:"];
  [ms appendFormat: @"%@", __to];
  [ms appendString: @",parts:"];
  [ms appendFormat: @"%@", __parts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryTripsResult

- (id) initWithFrom: (TransportStation *) from to: (TransportStation *) to connections: (NSArray *) connections
{
  self = [super init];
  __from = [from retain];
  __from_isset = YES;
  __to = [to retain];
  __to_isset = YES;
  __connections = [connections retain];
  __connections_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain];
    __to_isset = YES;
  }
  if ([decoder containsValueForKey: @"connections"])
  {
    __connections = [[decoder decodeObjectForKey: @"connections"] retain];
    __connections_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
  if (__connections_isset)
  {
    [encoder encodeObject: __connections forKey: @"connections"];
  }
}

- (void) dealloc
{
  [__from release];
  [__to release];
  [__connections release];
  [super dealloc];
}

- (TransportStation *) from {
  return [[__from retain] autorelease];
}

- (void) setFrom: (TransportStation *) from {
  [from retain];
  [__from release];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release];
  __from = nil;
  __from_isset = NO;
}

- (TransportStation *) to {
  return [[__to retain] autorelease];
}

- (void) setTo: (TransportStation *) to {
  [to retain];
  [__to release];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release];
  __to = nil;
  __to_isset = NO;
}

- (NSArray *) connections {
  return [[__connections retain] autorelease];
}

- (void) setConnections: (NSArray *) connections {
  [connections retain];
  [__connections release];
  __connections = connections;
  __connections_isset = YES;
}

- (BOOL) connectionsIsSet {
  return __connections_isset;
}

- (void) unsetConnections {
  [__connections release];
  __connections = nil;
  __connections_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 5:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setFrom: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          TransportStation *fieldValue = [[TransportStation alloc] init];
          [fieldValue read: inProtocol];
          [self setTo: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            TransportTrip *_elem12 = [[TransportTrip alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release];
          }
          [inProtocol readListEnd];
          [self setConnections: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryTripsResult"];
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRUCT fieldID: 5];
      [__from write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRUCT fieldID: 7];
      [__to write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__connections_isset) {
    if (__connections != nil) {
      [outProtocol writeFieldBeginWithName: @"connections" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__connections count]];
        int i14;
        for (i14 = 0; i14 < [__connections count]; i14++)
        {
          [[__connections objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryTripsResult("];
  [ms appendString: @"from:"];
  [ms appendFormat: @"%@", __from];
  [ms appendString: @",to:"];
  [ms appendFormat: @"%@", __to];
  [ms appendString: @",connections:"];
  [ms appendFormat: @"%@", __connections];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface autocomplete_args : NSObject <NSCoding> {
  NSString * __constraint;

  BOOL __constraint_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=constraint, setter=setConstraint:) NSString * constraint;
#endif

- (id) initWithConstraint: (NSString *) constraint;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) constraint;
- (void) setConstraint: (NSString *) constraint;
- (BOOL) constraintIsSet;

@end

@implementation autocomplete_args

- (id) initWithConstraint: (NSString *) constraint
{
  self = [super init];
  __constraint = [constraint retain];
  __constraint_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"constraint"])
  {
    __constraint = [[decoder decodeObjectForKey: @"constraint"] retain];
    __constraint_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__constraint_isset)
  {
    [encoder encodeObject: __constraint forKey: @"constraint"];
  }
}

- (void) dealloc
{
  [__constraint release];
  [super dealloc];
}

- (NSString *) constraint {
  return [[__constraint retain] autorelease];
}

- (void) setConstraint: (NSString *) constraint {
  [constraint retain];
  [__constraint release];
  __constraint = constraint;
  __constraint_isset = YES;
}

- (BOOL) constraintIsSet {
  return __constraint_isset;
}

- (void) unsetConstraint {
  [__constraint release];
  __constraint = nil;
  __constraint_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConstraint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"autocomplete_args"];
  if (__constraint_isset) {
    if (__constraint != nil) {
      [outProtocol writeFieldBeginWithName: @"constraint" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __constraint];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"autocomplete_args("];
  [ms appendString: @"constraint:"];
  [ms appendFormat: @"\"%@\"", __constraint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Autocomplete_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation Autocomplete_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            TransportStation *_elem17 = [[TransportStation alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Autocomplete_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i19;
        for (i19 = 0; i19 < [__success count]; i19++)
        {
          [[__success objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Autocomplete_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getLocationsFromNames_args : NSObject <NSCoding> {
  NSArray * __names;

  BOOL __names_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=names, setter=setNames:) NSArray * names;
#endif

- (id) initWithNames: (NSArray *) names;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) names;
- (void) setNames: (NSArray *) names;
- (BOOL) namesIsSet;

@end

@implementation getLocationsFromNames_args

- (id) initWithNames: (NSArray *) names
{
  self = [super init];
  __names = [names retain];
  __names_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"names"])
  {
    __names = [[decoder decodeObjectForKey: @"names"] retain];
    __names_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__names_isset)
  {
    [encoder encodeObject: __names forKey: @"names"];
  }
}

- (void) dealloc
{
  [__names release];
  [super dealloc];
}

- (NSArray *) names {
  return [[__names retain] autorelease];
}

- (void) setNames: (NSArray *) names {
  [names retain];
  [__names release];
  __names = names;
  __names_isset = YES;
}

- (BOOL) namesIsSet {
  return __names_isset;
}

- (void) unsetNames {
  [__names release];
  __names = nil;
  __names_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            NSString * _elem22 = [inProtocol readString];
            [fieldValue addObject: _elem22];
          }
          [inProtocol readListEnd];
          [self setNames: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getLocationsFromNames_args"];
  if (__names_isset) {
    if (__names != nil) {
      [outProtocol writeFieldBeginWithName: @"names" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__names count]];
        int i24;
        for (i24 = 0; i24 < [__names count]; i24++)
        {
          [outProtocol writeString: [__names objectAtIndex: i24]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getLocationsFromNames_args("];
  [ms appendString: @"names:"];
  [ms appendFormat: @"%@", __names];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetLocationsFromNames_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetLocationsFromNames_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            TransportStation *_elem27 = [[TransportStation alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLocationsFromNames_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i29;
        for (i29 = 0; i29 < [__success count]; i29++)
        {
          [[__success objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLocationsFromNames_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTrips_args : NSObject <NSCoding> {
  NSString * __from;
  NSString * __to;

  BOOL __from_isset;
  BOOL __to_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=from, setter=setFrom:) NSString * from;
@property (nonatomic, retain, getter=to, setter=setTo:) NSString * to;
#endif

- (id) initWithFrom: (NSString *) from to: (NSString *) to;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) from;
- (void) setFrom: (NSString *) from;
- (BOOL) fromIsSet;

- (NSString *) to;
- (void) setTo: (NSString *) to;
- (BOOL) toIsSet;

@end

@implementation getTrips_args

- (id) initWithFrom: (NSString *) from to: (NSString *) to
{
  self = [super init];
  __from = [from retain];
  __from_isset = YES;
  __to = [to retain];
  __to_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"from"])
  {
    __from = [[decoder decodeObjectForKey: @"from"] retain];
    __from_isset = YES;
  }
  if ([decoder containsValueForKey: @"to"])
  {
    __to = [[decoder decodeObjectForKey: @"to"] retain];
    __to_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__from_isset)
  {
    [encoder encodeObject: __from forKey: @"from"];
  }
  if (__to_isset)
  {
    [encoder encodeObject: __to forKey: @"to"];
  }
}

- (void) dealloc
{
  [__from release];
  [__to release];
  [super dealloc];
}

- (NSString *) from {
  return [[__from retain] autorelease];
}

- (void) setFrom: (NSString *) from {
  [from retain];
  [__from release];
  __from = from;
  __from_isset = YES;
}

- (BOOL) fromIsSet {
  return __from_isset;
}

- (void) unsetFrom {
  [__from release];
  __from = nil;
  __from_isset = NO;
}

- (NSString *) to {
  return [[__to retain] autorelease];
}

- (void) setTo: (NSString *) to {
  [to retain];
  [__to release];
  __to = to;
  __to_isset = YES;
}

- (BOOL) toIsSet {
  return __to_isset;
}

- (void) unsetTo {
  [__to release];
  __to = nil;
  __to_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFrom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTrips_args"];
  if (__from_isset) {
    if (__from != nil) {
      [outProtocol writeFieldBeginWithName: @"from" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __from];
      [outProtocol writeFieldEnd];
    }
  }
  if (__to_isset) {
    if (__to != nil) {
      [outProtocol writeFieldBeginWithName: @"to" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __to];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTrips_args("];
  [ms appendString: @"from:"];
  [ms appendFormat: @"\"%@\"", __from];
  [ms appendString: @",to:"];
  [ms appendFormat: @"\"%@\"", __to];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTrips_result : NSObject <NSCoding> {
  QueryTripsResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryTripsResult * success;
#endif

- (id) initWithSuccess: (QueryTripsResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (QueryTripsResult *) success;
- (void) setSuccess: (QueryTripsResult *) success;
- (BOOL) successIsSet;

@end

@implementation GetTrips_result

- (id) initWithSuccess: (QueryTripsResult *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (QueryTripsResult *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (QueryTripsResult *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryTripsResult *fieldValue = [[QueryTripsResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTrips_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTrips_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransportServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_autocomplete: (NSString *) constraint
{
  [outProtocol writeMessageBeginWithName: @"autocomplete" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"autocomplete_args"];
  if (constraint != nil)  {
    [outProtocol writeFieldBeginWithName: @"constraint" type: TType_STRING fieldID: 1];
    [outProtocol writeString: constraint];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_autocomplete
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Autocomplete_result * result = [[[Autocomplete_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"autocomplete failed: unknown result"];
}

- (NSArray *) autocomplete: (NSString *) constraint
{
  [self send_autocomplete: constraint];
  return [self recv_autocomplete];
}

- (void) send_getLocationsFromNames: (NSArray *) names
{
  [outProtocol writeMessageBeginWithName: @"getLocationsFromNames" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getLocationsFromNames_args"];
  if (names != nil)  {
    [outProtocol writeFieldBeginWithName: @"names" type: TType_LIST fieldID: 1];
    {
      [outProtocol writeListBeginWithElementType: TType_STRING size: [names count]];
      int i31;
      for (i31 = 0; i31 < [names count]; i31++)
      {
        [outProtocol writeString: [names objectAtIndex: i31]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getLocationsFromNames
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetLocationsFromNames_result * result = [[[GetLocationsFromNames_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getLocationsFromNames failed: unknown result"];
}

- (NSArray *) getLocationsFromNames: (NSArray *) names
{
  [self send_getLocationsFromNames: names];
  return [self recv_getLocationsFromNames];
}

- (void) send_getTrips: (NSString *) from : (NSString *) to
{
  [outProtocol writeMessageBeginWithName: @"getTrips" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTrips_args"];
  if (from != nil)  {
    [outProtocol writeFieldBeginWithName: @"from" type: TType_STRING fieldID: 1];
    [outProtocol writeString: from];
    [outProtocol writeFieldEnd];
  }
  if (to != nil)  {
    [outProtocol writeFieldBeginWithName: @"to" type: TType_STRING fieldID: 2];
    [outProtocol writeString: to];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (QueryTripsResult *) recv_getTrips
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTrips_result * result = [[[GetTrips_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTrips failed: unknown result"];
}

- (QueryTripsResult *) getTrips: (NSString *) from : (NSString *) to
{
  [self send_getTrips: from : to];
  return [self recv_getTrips];
}

@end

@implementation TransportServiceProcessor

- (id) initWithTransportService: (id <TransportService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_autocomplete_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"autocomplete"];
  }
  {
    SEL s = @selector(process_getLocationsFromNames_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getLocationsFromNames"];
  }
  {
    SEL s = @selector(process_getTrips_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTrips"];
  }
  return self;
}

- (id<TransportService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_autocomplete_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  autocomplete_args * args = [[autocomplete_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Autocomplete_result * result = [[Autocomplete_result alloc] init];
  [result setSuccess: [mService autocomplete: [args constraint]]];
  [outProtocol writeMessageBeginWithName: @"autocomplete"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getLocationsFromNames_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getLocationsFromNames_args * args = [[getLocationsFromNames_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetLocationsFromNames_result * result = [[GetLocationsFromNames_result alloc] init];
  [result setSuccess: [mService getLocationsFromNames: [args names]]];
  [outProtocol writeMessageBeginWithName: @"getLocationsFromNames"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getTrips_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTrips_args * args = [[getTrips_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTrips_result * result = [[GetTrips_result alloc] init];
  [result setSuccess: [mService getTrips: [args from]: [args to]]];
  [outProtocol writeMessageBeginWithName: @"getTrips"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

