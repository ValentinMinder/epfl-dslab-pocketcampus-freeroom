/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "map.h"

#import "food.h"


@implementation foodConstants
+ (void) initialize {
}
@end

@implementation Restaurant

- (id) initWithRestaurantId: (int64_t) restaurantId name: (NSString *) name
{
  self = [super init];
  __restaurantId = restaurantId;
  __restaurantId_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"restaurantId"])
  {
    __restaurantId = [decoder decodeInt64ForKey: @"restaurantId"];
    __restaurantId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__restaurantId_isset)
  {
    [encoder encodeInt64: __restaurantId forKey: @"restaurantId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__name release];
  [super dealloc];
}

- (int64_t) restaurantId {
  return __restaurantId;
}

- (void) setRestaurantId: (int64_t) restaurantId {
  __restaurantId = restaurantId;
  __restaurantId_isset = YES;
}

- (BOOL) restaurantIdIsSet {
  return __restaurantId_isset;
}

- (void) unsetRestaurantId {
  __restaurantId_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRestaurantId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Restaurant"];
  if (__restaurantId_isset) {
    [outProtocol writeFieldBeginWithName: @"restaurantId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __restaurantId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Restaurant("];
  [ms appendString: @"restaurantId:"];
  [ms appendFormat: @"%qi", __restaurantId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Rating

- (id) initWithRatingValue: (double) ratingValue numberOfVotes: (int32_t) numberOfVotes sumOfRatings: (double) sumOfRatings
{
  self = [super init];
  __ratingValue = ratingValue;
  __ratingValue_isset = YES;
  __numberOfVotes = numberOfVotes;
  __numberOfVotes_isset = YES;
  __sumOfRatings = sumOfRatings;
  __sumOfRatings_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ratingValue"])
  {
    __ratingValue = [decoder decodeDoubleForKey: @"ratingValue"];
    __ratingValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"numberOfVotes"])
  {
    __numberOfVotes = [decoder decodeInt32ForKey: @"numberOfVotes"];
    __numberOfVotes_isset = YES;
  }
  if ([decoder containsValueForKey: @"sumOfRatings"])
  {
    __sumOfRatings = [decoder decodeDoubleForKey: @"sumOfRatings"];
    __sumOfRatings_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ratingValue_isset)
  {
    [encoder encodeDouble: __ratingValue forKey: @"ratingValue"];
  }
  if (__numberOfVotes_isset)
  {
    [encoder encodeInt32: __numberOfVotes forKey: @"numberOfVotes"];
  }
  if (__sumOfRatings_isset)
  {
    [encoder encodeDouble: __sumOfRatings forKey: @"sumOfRatings"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (double) ratingValue {
  return __ratingValue;
}

- (void) setRatingValue: (double) ratingValue {
  __ratingValue = ratingValue;
  __ratingValue_isset = YES;
}

- (BOOL) ratingValueIsSet {
  return __ratingValue_isset;
}

- (void) unsetRatingValue {
  __ratingValue_isset = NO;
}

- (int32_t) numberOfVotes {
  return __numberOfVotes;
}

- (void) setNumberOfVotes: (int32_t) numberOfVotes {
  __numberOfVotes = numberOfVotes;
  __numberOfVotes_isset = YES;
}

- (BOOL) numberOfVotesIsSet {
  return __numberOfVotes_isset;
}

- (void) unsetNumberOfVotes {
  __numberOfVotes_isset = NO;
}

- (double) sumOfRatings {
  return __sumOfRatings;
}

- (void) setSumOfRatings: (double) sumOfRatings {
  __sumOfRatings = sumOfRatings;
  __sumOfRatings_isset = YES;
}

- (BOOL) sumOfRatingsIsSet {
  return __sumOfRatings_isset;
}

- (void) unsetSumOfRatings {
  __sumOfRatings_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setRatingValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumberOfVotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSumOfRatings: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Rating"];
  if (__ratingValue_isset) {
    [outProtocol writeFieldBeginWithName: @"ratingValue" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __ratingValue];
    [outProtocol writeFieldEnd];
  }
  if (__numberOfVotes_isset) {
    [outProtocol writeFieldBeginWithName: @"numberOfVotes" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __numberOfVotes];
    [outProtocol writeFieldEnd];
  }
  if (__sumOfRatings_isset) {
    [outProtocol writeFieldBeginWithName: @"sumOfRatings" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __sumOfRatings];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Rating("];
  [ms appendString: @"ratingValue:"];
  [ms appendFormat: @"%f", __ratingValue];
  [ms appendString: @",numberOfVotes:"];
  [ms appendFormat: @"%i", __numberOfVotes];
  [ms appendString: @",sumOfRatings:"];
  [ms appendFormat: @"%f", __sumOfRatings];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Meal

- (id) initWithMealId: (int64_t) mealId name: (NSString *) name mealDescription: (NSString *) mealDescription restaurant: (Restaurant *) restaurant rating: (Rating *) rating
{
  self = [super init];
  __mealId = mealId;
  __mealId_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __mealDescription = [mealDescription retain];
  __mealDescription_isset = YES;
  __restaurant = [restaurant retain];
  __restaurant_isset = YES;
  __rating = [rating retain];
  __rating_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mealId"])
  {
    __mealId = [decoder decodeInt64ForKey: @"mealId"];
    __mealId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"mealDescription"])
  {
    __mealDescription = [[decoder decodeObjectForKey: @"mealDescription"] retain];
    __mealDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"restaurant"])
  {
    __restaurant = [[decoder decodeObjectForKey: @"restaurant"] retain];
    __restaurant_isset = YES;
  }
  if ([decoder containsValueForKey: @"rating"])
  {
    __rating = [[decoder decodeObjectForKey: @"rating"] retain];
    __rating_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mealId_isset)
  {
    [encoder encodeInt64: __mealId forKey: @"mealId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__mealDescription_isset)
  {
    [encoder encodeObject: __mealDescription forKey: @"mealDescription"];
  }
  if (__restaurant_isset)
  {
    [encoder encodeObject: __restaurant forKey: @"restaurant"];
  }
  if (__rating_isset)
  {
    [encoder encodeObject: __rating forKey: @"rating"];
  }
}

- (void) dealloc
{
  [__name release];
  [__mealDescription release];
  [__restaurant release];
  [__rating release];
  [super dealloc];
}

- (int64_t) mealId {
  return __mealId;
}

- (void) setMealId: (int64_t) mealId {
  __mealId = mealId;
  __mealId_isset = YES;
}

- (BOOL) mealIdIsSet {
  return __mealId_isset;
}

- (void) unsetMealId {
  __mealId_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) mealDescription {
  return [[__mealDescription retain] autorelease];
}

- (void) setMealDescription: (NSString *) mealDescription {
  [mealDescription retain];
  [__mealDescription release];
  __mealDescription = mealDescription;
  __mealDescription_isset = YES;
}

- (BOOL) mealDescriptionIsSet {
  return __mealDescription_isset;
}

- (void) unsetMealDescription {
  [__mealDescription release];
  __mealDescription = nil;
  __mealDescription_isset = NO;
}

- (Restaurant *) restaurant {
  return [[__restaurant retain] autorelease];
}

- (void) setRestaurant: (Restaurant *) restaurant {
  [restaurant retain];
  [__restaurant release];
  __restaurant = restaurant;
  __restaurant_isset = YES;
}

- (BOOL) restaurantIsSet {
  return __restaurant_isset;
}

- (void) unsetRestaurant {
  [__restaurant release];
  __restaurant = nil;
  __restaurant_isset = NO;
}

- (Rating *) rating {
  return [[__rating retain] autorelease];
}

- (void) setRating: (Rating *) rating {
  [rating retain];
  [__rating release];
  __rating = rating;
  __rating_isset = YES;
}

- (BOOL) ratingIsSet {
  return __rating_isset;
}

- (void) unsetRating {
  [__rating release];
  __rating = nil;
  __rating_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMealId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMealDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Restaurant *fieldValue = [[Restaurant alloc] init];
          [fieldValue read: inProtocol];
          [self setRestaurant: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Rating *fieldValue = [[Rating alloc] init];
          [fieldValue read: inProtocol];
          [self setRating: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Meal"];
  if (__mealId_isset) {
    [outProtocol writeFieldBeginWithName: @"mealId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __mealId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mealDescription_isset) {
    if (__mealDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"mealDescription" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mealDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__restaurant_isset) {
    if (__restaurant != nil) {
      [outProtocol writeFieldBeginWithName: @"restaurant" type: TType_STRUCT fieldID: 4];
      [__restaurant write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rating_isset) {
    if (__rating != nil) {
      [outProtocol writeFieldBeginWithName: @"rating" type: TType_STRUCT fieldID: 5];
      [__rating write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Meal("];
  [ms appendString: @"mealId:"];
  [ms appendFormat: @"%qi", __mealId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",mealDescription:"];
  [ms appendFormat: @"\"%@\"", __mealDescription];
  [ms appendString: @",restaurant:"];
  [ms appendFormat: @"%@", __restaurant];
  [ms appendString: @",rating:"];
  [ms appendFormat: @"%@", __rating];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EpflRating

- (id) initWithRatingValue: (double) ratingValue voteCount: (int32_t) voteCount
{
  self = [super init];
  __ratingValue = ratingValue;
  __ratingValue_isset = YES;
  __voteCount = voteCount;
  __voteCount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ratingValue"])
  {
    __ratingValue = [decoder decodeDoubleForKey: @"ratingValue"];
    __ratingValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"voteCount"])
  {
    __voteCount = [decoder decodeInt32ForKey: @"voteCount"];
    __voteCount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ratingValue_isset)
  {
    [encoder encodeDouble: __ratingValue forKey: @"ratingValue"];
  }
  if (__voteCount_isset)
  {
    [encoder encodeInt32: __voteCount forKey: @"voteCount"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (double) ratingValue {
  return __ratingValue;
}

- (void) setRatingValue: (double) ratingValue {
  __ratingValue = ratingValue;
  __ratingValue_isset = YES;
}

- (BOOL) ratingValueIsSet {
  return __ratingValue_isset;
}

- (void) unsetRatingValue {
  __ratingValue_isset = NO;
}

- (int32_t) voteCount {
  return __voteCount;
}

- (void) setVoteCount: (int32_t) voteCount {
  __voteCount = voteCount;
  __voteCount_isset = YES;
}

- (BOOL) voteCountIsSet {
  return __voteCount_isset;
}

- (void) unsetVoteCount {
  __voteCount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setRatingValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVoteCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EpflRating"];
  if (__ratingValue_isset) {
    [outProtocol writeFieldBeginWithName: @"ratingValue" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __ratingValue];
    [outProtocol writeFieldEnd];
  }
  if (__voteCount_isset) {
    [outProtocol writeFieldBeginWithName: @"voteCount" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __voteCount];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EpflRating("];
  [ms appendString: @"ratingValue:"];
  [ms appendFormat: @"%f", __ratingValue];
  [ms appendString: @",voteCount:"];
  [ms appendFormat: @"%i", __voteCount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EpflMeal

- (id) initWithMId: (int64_t) mId mName: (NSString *) mName mDescription: (NSString *) mDescription mPrices: (NSDictionary *) mPrices mHalfPortionPrice: (double) mHalfPortionPrice mTypes: (NSArray *) mTypes mRating: (EpflRating *) mRating
{
  self = [super init];
  __mId = mId;
  __mId_isset = YES;
  __mName = [mName retain];
  __mName_isset = YES;
  __mDescription = [mDescription retain];
  __mDescription_isset = YES;
  __mPrices = [mPrices retain];
  __mPrices_isset = YES;
  __mHalfPortionPrice = mHalfPortionPrice;
  __mHalfPortionPrice_isset = YES;
  __mTypes = [mTypes retain];
  __mTypes_isset = YES;
  __mRating = [mRating retain];
  __mRating_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mId"])
  {
    __mId = [decoder decodeInt64ForKey: @"mId"];
    __mId_isset = YES;
  }
  if ([decoder containsValueForKey: @"mName"])
  {
    __mName = [[decoder decodeObjectForKey: @"mName"] retain];
    __mName_isset = YES;
  }
  if ([decoder containsValueForKey: @"mDescription"])
  {
    __mDescription = [[decoder decodeObjectForKey: @"mDescription"] retain];
    __mDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"mPrices"])
  {
    __mPrices = [[decoder decodeObjectForKey: @"mPrices"] retain];
    __mPrices_isset = YES;
  }
  if ([decoder containsValueForKey: @"mHalfPortionPrice"])
  {
    __mHalfPortionPrice = [decoder decodeDoubleForKey: @"mHalfPortionPrice"];
    __mHalfPortionPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"mTypes"])
  {
    __mTypes = [[decoder decodeObjectForKey: @"mTypes"] retain];
    __mTypes_isset = YES;
  }
  if ([decoder containsValueForKey: @"mRating"])
  {
    __mRating = [[decoder decodeObjectForKey: @"mRating"] retain];
    __mRating_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mId_isset)
  {
    [encoder encodeInt64: __mId forKey: @"mId"];
  }
  if (__mName_isset)
  {
    [encoder encodeObject: __mName forKey: @"mName"];
  }
  if (__mDescription_isset)
  {
    [encoder encodeObject: __mDescription forKey: @"mDescription"];
  }
  if (__mPrices_isset)
  {
    [encoder encodeObject: __mPrices forKey: @"mPrices"];
  }
  if (__mHalfPortionPrice_isset)
  {
    [encoder encodeDouble: __mHalfPortionPrice forKey: @"mHalfPortionPrice"];
  }
  if (__mTypes_isset)
  {
    [encoder encodeObject: __mTypes forKey: @"mTypes"];
  }
  if (__mRating_isset)
  {
    [encoder encodeObject: __mRating forKey: @"mRating"];
  }
}

- (void) dealloc
{
  [__mName release];
  [__mDescription release];
  [__mPrices release];
  [__mTypes release];
  [__mRating release];
  [super dealloc];
}

- (int64_t) mId {
  return __mId;
}

- (void) setMId: (int64_t) mId {
  __mId = mId;
  __mId_isset = YES;
}

- (BOOL) mIdIsSet {
  return __mId_isset;
}

- (void) unsetMId {
  __mId_isset = NO;
}

- (NSString *) mName {
  return [[__mName retain] autorelease];
}

- (void) setMName: (NSString *) mName {
  [mName retain];
  [__mName release];
  __mName = mName;
  __mName_isset = YES;
}

- (BOOL) mNameIsSet {
  return __mName_isset;
}

- (void) unsetMName {
  [__mName release];
  __mName = nil;
  __mName_isset = NO;
}

- (NSString *) mDescription {
  return [[__mDescription retain] autorelease];
}

- (void) setMDescription: (NSString *) mDescription {
  [mDescription retain];
  [__mDescription release];
  __mDescription = mDescription;
  __mDescription_isset = YES;
}

- (BOOL) mDescriptionIsSet {
  return __mDescription_isset;
}

- (void) unsetMDescription {
  [__mDescription release];
  __mDescription = nil;
  __mDescription_isset = NO;
}

- (NSDictionary *) mPrices {
  return [[__mPrices retain] autorelease];
}

- (void) setMPrices: (NSDictionary *) mPrices {
  [mPrices retain];
  [__mPrices release];
  __mPrices = mPrices;
  __mPrices_isset = YES;
}

- (BOOL) mPricesIsSet {
  return __mPrices_isset;
}

- (void) unsetMPrices {
  [__mPrices release];
  __mPrices = nil;
  __mPrices_isset = NO;
}

- (double) mHalfPortionPrice {
  return __mHalfPortionPrice;
}

- (void) setMHalfPortionPrice: (double) mHalfPortionPrice {
  __mHalfPortionPrice = mHalfPortionPrice;
  __mHalfPortionPrice_isset = YES;
}

- (BOOL) mHalfPortionPriceIsSet {
  return __mHalfPortionPrice_isset;
}

- (void) unsetMHalfPortionPrice {
  __mHalfPortionPrice_isset = NO;
}

- (NSArray *) mTypes {
  return [[__mTypes retain] autorelease];
}

- (void) setMTypes: (NSArray *) mTypes {
  [mTypes retain];
  [__mTypes release];
  __mTypes = mTypes;
  __mTypes_isset = YES;
}

- (BOOL) mTypesIsSet {
  return __mTypes_isset;
}

- (void) unsetMTypes {
  [__mTypes release];
  __mTypes = nil;
  __mTypes_isset = NO;
}

- (EpflRating *) mRating {
  return [[__mRating retain] autorelease];
}

- (void) setMRating: (EpflRating *) mRating {
  [mRating retain];
  [__mRating release];
  __mRating = mRating;
  __mRating_isset = YES;
}

- (BOOL) mRatingIsSet {
  return __mRating_isset;
}

- (void) unsetMRating {
  [__mRating release];
  __mRating = nil;
  __mRating_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            int _key2 = [inProtocol readI32];
            double _val3 = [inProtocol readDouble];
            [fieldValue setObject: [NSNumber numberWithDouble: _val3] forKey: [NSNumber numberWithInt: _key2]];
          }
          [inProtocol readMapEnd];
          [self setMPrices: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setMHalfPortionPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size4;
          [inProtocol readListBeginReturningElementType: NULL size: &_size4];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size4];
          int _i5;
          for (_i5 = 0; _i5 < _size4; ++_i5)
          {
            int _elem6 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithInt: _elem6]];
          }
          [inProtocol readListEnd];
          [self setMTypes: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          EpflRating *fieldValue = [[EpflRating alloc] init];
          [fieldValue read: inProtocol];
          [self setMRating: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EpflMeal"];
  if (__mId_isset) {
    [outProtocol writeFieldBeginWithName: @"mId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __mId];
    [outProtocol writeFieldEnd];
  }
  if (__mName_isset) {
    if (__mName != nil) {
      [outProtocol writeFieldBeginWithName: @"mName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mDescription_isset) {
    if (__mDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"mDescription" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mPrices_isset) {
    if (__mPrices != nil) {
      [outProtocol writeFieldBeginWithName: @"mPrices" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_DOUBLE size: [__mPrices count]];
        NSEnumerator * _iter7 = [__mPrices keyEnumerator];
        id key8;
        while ((key8 = [_iter7 nextObject]))
        {
          [outProtocol writeI32: [key8 intValue]];
          [outProtocol writeDouble: [[__mPrices objectForKey: key8] doubleValue]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__mHalfPortionPrice_isset) {
    [outProtocol writeFieldBeginWithName: @"mHalfPortionPrice" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __mHalfPortionPrice];
    [outProtocol writeFieldEnd];
  }
  if (__mTypes_isset) {
    if (__mTypes != nil) {
      [outProtocol writeFieldBeginWithName: @"mTypes" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__mTypes count]];
        int i10;
        for (i10 = 0; i10 < [__mTypes count]; i10++)
        {
          [outProtocol writeI32: [[__mTypes objectAtIndex: i10] intValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__mRating_isset) {
    if (__mRating != nil) {
      [outProtocol writeFieldBeginWithName: @"mRating" type: TType_STRUCT fieldID: 7];
      [__mRating write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EpflMeal("];
  [ms appendString: @"mId:"];
  [ms appendFormat: @"%qi", __mId];
  [ms appendString: @",mName:"];
  [ms appendFormat: @"\"%@\"", __mName];
  [ms appendString: @",mDescription:"];
  [ms appendFormat: @"\"%@\"", __mDescription];
  [ms appendString: @",mPrices:"];
  [ms appendFormat: @"%@", __mPrices];
  [ms appendString: @",mHalfPortionPrice:"];
  [ms appendFormat: @"%f", __mHalfPortionPrice];
  [ms appendString: @",mTypes:"];
  [ms appendFormat: @"%@", __mTypes];
  [ms appendString: @",mRating:"];
  [ms appendFormat: @"%@", __mRating];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EpflRestaurant

- (id) initWithRId: (int64_t) rId rName: (NSString *) rName rMeals: (NSArray *) rMeals rLocation: (MapItem *) rLocation rRating: (EpflRating *) rRating
{
  self = [super init];
  __rId = rId;
  __rId_isset = YES;
  __rName = [rName retain];
  __rName_isset = YES;
  __rMeals = [rMeals retain];
  __rMeals_isset = YES;
  __rLocation = [rLocation retain];
  __rLocation_isset = YES;
  __rRating = [rRating retain];
  __rRating_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"rId"])
  {
    __rId = [decoder decodeInt64ForKey: @"rId"];
    __rId_isset = YES;
  }
  if ([decoder containsValueForKey: @"rName"])
  {
    __rName = [[decoder decodeObjectForKey: @"rName"] retain];
    __rName_isset = YES;
  }
  if ([decoder containsValueForKey: @"rMeals"])
  {
    __rMeals = [[decoder decodeObjectForKey: @"rMeals"] retain];
    __rMeals_isset = YES;
  }
  if ([decoder containsValueForKey: @"rLocation"])
  {
    __rLocation = [[decoder decodeObjectForKey: @"rLocation"] retain];
    __rLocation_isset = YES;
  }
  if ([decoder containsValueForKey: @"rRating"])
  {
    __rRating = [[decoder decodeObjectForKey: @"rRating"] retain];
    __rRating_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__rId_isset)
  {
    [encoder encodeInt64: __rId forKey: @"rId"];
  }
  if (__rName_isset)
  {
    [encoder encodeObject: __rName forKey: @"rName"];
  }
  if (__rMeals_isset)
  {
    [encoder encodeObject: __rMeals forKey: @"rMeals"];
  }
  if (__rLocation_isset)
  {
    [encoder encodeObject: __rLocation forKey: @"rLocation"];
  }
  if (__rRating_isset)
  {
    [encoder encodeObject: __rRating forKey: @"rRating"];
  }
}

- (void) dealloc
{
  [__rName release];
  [__rMeals release];
  [__rLocation release];
  [__rRating release];
  [super dealloc];
}

- (int64_t) rId {
  return __rId;
}

- (void) setRId: (int64_t) rId {
  __rId = rId;
  __rId_isset = YES;
}

- (BOOL) rIdIsSet {
  return __rId_isset;
}

- (void) unsetRId {
  __rId_isset = NO;
}

- (NSString *) rName {
  return [[__rName retain] autorelease];
}

- (void) setRName: (NSString *) rName {
  [rName retain];
  [__rName release];
  __rName = rName;
  __rName_isset = YES;
}

- (BOOL) rNameIsSet {
  return __rName_isset;
}

- (void) unsetRName {
  [__rName release];
  __rName = nil;
  __rName_isset = NO;
}

- (NSArray *) rMeals {
  return [[__rMeals retain] autorelease];
}

- (void) setRMeals: (NSArray *) rMeals {
  [rMeals retain];
  [__rMeals release];
  __rMeals = rMeals;
  __rMeals_isset = YES;
}

- (BOOL) rMealsIsSet {
  return __rMeals_isset;
}

- (void) unsetRMeals {
  [__rMeals release];
  __rMeals = nil;
  __rMeals_isset = NO;
}

- (MapItem *) rLocation {
  return [[__rLocation retain] autorelease];
}

- (void) setRLocation: (MapItem *) rLocation {
  [rLocation retain];
  [__rLocation release];
  __rLocation = rLocation;
  __rLocation_isset = YES;
}

- (BOOL) rLocationIsSet {
  return __rLocation_isset;
}

- (void) unsetRLocation {
  [__rLocation release];
  __rLocation = nil;
  __rLocation_isset = NO;
}

- (EpflRating *) rRating {
  return [[__rRating retain] autorelease];
}

- (void) setRRating: (EpflRating *) rRating {
  [rRating retain];
  [__rRating release];
  __rRating = rRating;
  __rRating_isset = YES;
}

- (BOOL) rRatingIsSet {
  return __rRating_isset;
}

- (void) unsetRRating {
  [__rRating release];
  __rRating = nil;
  __rRating_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            EpflMeal *_elem13 = [[EpflMeal alloc] init];
            [_elem13 read: inProtocol];
            [fieldValue addObject: _elem13];
            [_elem13 release];
          }
          [inProtocol readListEnd];
          [self setRMeals: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          MapItem *fieldValue = [[MapItem alloc] init];
          [fieldValue read: inProtocol];
          [self setRLocation: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          EpflRating *fieldValue = [[EpflRating alloc] init];
          [fieldValue read: inProtocol];
          [self setRRating: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EpflRestaurant"];
  if (__rId_isset) {
    [outProtocol writeFieldBeginWithName: @"rId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __rId];
    [outProtocol writeFieldEnd];
  }
  if (__rName_isset) {
    if (__rName != nil) {
      [outProtocol writeFieldBeginWithName: @"rName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __rName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rMeals_isset) {
    if (__rMeals != nil) {
      [outProtocol writeFieldBeginWithName: @"rMeals" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__rMeals count]];
        int i15;
        for (i15 = 0; i15 < [__rMeals count]; i15++)
        {
          [[__rMeals objectAtIndex: i15] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__rLocation_isset) {
    if (__rLocation != nil) {
      [outProtocol writeFieldBeginWithName: @"rLocation" type: TType_STRUCT fieldID: 4];
      [__rLocation write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rRating_isset) {
    if (__rRating != nil) {
      [outProtocol writeFieldBeginWithName: @"rRating" type: TType_STRUCT fieldID: 5];
      [__rRating write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EpflRestaurant("];
  [ms appendString: @"rId:"];
  [ms appendFormat: @"%qi", __rId];
  [ms appendString: @",rName:"];
  [ms appendFormat: @"\"%@\"", __rName];
  [ms appendString: @",rMeals:"];
  [ms appendFormat: @"%@", __rMeals];
  [ms appendString: @",rLocation:"];
  [ms appendFormat: @"%@", __rLocation];
  [ms appendString: @",rRating:"];
  [ms appendFormat: @"%@", __rRating];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FoodRequest

- (id) initWithDeviceLanguage: (NSString *) deviceLanguage mealTime: (int) mealTime mealDate: (int64_t) mealDate deviceId: (NSString *) deviceId
{
  self = [super init];
  __deviceLanguage = [deviceLanguage retain];
  __deviceLanguage_isset = YES;
  __mealTime = mealTime;
  __mealTime_isset = YES;
  __mealDate = mealDate;
  __mealDate_isset = YES;
  __deviceId = [deviceId retain];
  __deviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceLanguage"])
  {
    __deviceLanguage = [[decoder decodeObjectForKey: @"deviceLanguage"] retain];
    __deviceLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"mealTime"])
  {
    __mealTime = [decoder decodeIntForKey: @"mealTime"];
    __mealTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"mealDate"])
  {
    __mealDate = [decoder decodeInt64ForKey: @"mealDate"];
    __mealDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain];
    __deviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceLanguage_isset)
  {
    [encoder encodeObject: __deviceLanguage forKey: @"deviceLanguage"];
  }
  if (__mealTime_isset)
  {
    [encoder encodeInt: __mealTime forKey: @"mealTime"];
  }
  if (__mealDate_isset)
  {
    [encoder encodeInt64: __mealDate forKey: @"mealDate"];
  }
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
}

- (void) dealloc
{
  [__deviceLanguage release];
  [__deviceId release];
  [super dealloc];
}

- (NSString *) deviceLanguage {
  return [[__deviceLanguage retain] autorelease];
}

- (void) setDeviceLanguage: (NSString *) deviceLanguage {
  [deviceLanguage retain];
  [__deviceLanguage release];
  __deviceLanguage = deviceLanguage;
  __deviceLanguage_isset = YES;
}

- (BOOL) deviceLanguageIsSet {
  return __deviceLanguage_isset;
}

- (void) unsetDeviceLanguage {
  [__deviceLanguage release];
  __deviceLanguage = nil;
  __deviceLanguage_isset = NO;
}

- (int) mealTime {
  return __mealTime;
}

- (void) setMealTime: (int) mealTime {
  __mealTime = mealTime;
  __mealTime_isset = YES;
}

- (BOOL) mealTimeIsSet {
  return __mealTime_isset;
}

- (void) unsetMealTime {
  __mealTime_isset = NO;
}

- (int64_t) mealDate {
  return __mealDate;
}

- (void) setMealDate: (int64_t) mealDate {
  __mealDate = mealDate;
  __mealDate_isset = YES;
}

- (BOOL) mealDateIsSet {
  return __mealDate_isset;
}

- (void) unsetMealDate {
  __mealDate_isset = NO;
}

- (NSString *) deviceId {
  return [[__deviceId retain] autorelease];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain];
  [__deviceId release];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setMealTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMealDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FoodRequest"];
  if (__deviceLanguage_isset) {
    if (__deviceLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceLanguage" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __deviceLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mealTime_isset) {
    [outProtocol writeFieldBeginWithName: @"mealTime" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __mealTime];
    [outProtocol writeFieldEnd];
  }
  if (__mealDate_isset) {
    [outProtocol writeFieldBeginWithName: @"mealDate" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __mealDate];
    [outProtocol writeFieldEnd];
  }
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FoodRequest("];
  [ms appendString: @"deviceLanguage:"];
  [ms appendFormat: @"\"%@\"", __deviceLanguage];
  [ms appendString: @",mealTime:"];
  [ms appendFormat: @"%i", __mealTime];
  [ms appendString: @",mealDate:"];
  [ms appendFormat: @"%qi", __mealDate];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FoodResponse

- (id) initWithMatchingFood: (NSArray *) matchingFood
{
  self = [super init];
  __matchingFood = [matchingFood retain];
  __matchingFood_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"matchingFood"])
  {
    __matchingFood = [[decoder decodeObjectForKey: @"matchingFood"] retain];
    __matchingFood_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__matchingFood_isset)
  {
    [encoder encodeObject: __matchingFood forKey: @"matchingFood"];
  }
}

- (void) dealloc
{
  [__matchingFood release];
  [super dealloc];
}

- (NSArray *) matchingFood {
  return [[__matchingFood retain] autorelease];
}

- (void) setMatchingFood: (NSArray *) matchingFood {
  [matchingFood retain];
  [__matchingFood release];
  __matchingFood = matchingFood;
  __matchingFood_isset = YES;
}

- (BOOL) matchingFoodIsSet {
  return __matchingFood_isset;
}

- (void) unsetMatchingFood {
  [__matchingFood release];
  __matchingFood = nil;
  __matchingFood_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            EpflRestaurant *_elem18 = [[EpflRestaurant alloc] init];
            [_elem18 read: inProtocol];
            [fieldValue addObject: _elem18];
            [_elem18 release];
          }
          [inProtocol readListEnd];
          [self setMatchingFood: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FoodResponse"];
  if (__matchingFood_isset) {
    if (__matchingFood != nil) {
      [outProtocol writeFieldBeginWithName: @"matchingFood" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__matchingFood count]];
        int i20;
        for (i20 = 0; i20 < [__matchingFood count]; i20++)
        {
          [[__matchingFood objectAtIndex: i20] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FoodResponse("];
  [ms appendString: @"matchingFood:"];
  [ms appendFormat: @"%@", __matchingFood];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation VoteRequest

- (id) initWithMealId: (int64_t) mealId rating: (double) rating deviceId: (NSString *) deviceId
{
  self = [super init];
  __mealId = mealId;
  __mealId_isset = YES;
  __rating = rating;
  __rating_isset = YES;
  __deviceId = [deviceId retain];
  __deviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mealId"])
  {
    __mealId = [decoder decodeInt64ForKey: @"mealId"];
    __mealId_isset = YES;
  }
  if ([decoder containsValueForKey: @"rating"])
  {
    __rating = [decoder decodeDoubleForKey: @"rating"];
    __rating_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain];
    __deviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mealId_isset)
  {
    [encoder encodeInt64: __mealId forKey: @"mealId"];
  }
  if (__rating_isset)
  {
    [encoder encodeDouble: __rating forKey: @"rating"];
  }
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
}

- (void) dealloc
{
  [__deviceId release];
  [super dealloc];
}

- (int64_t) mealId {
  return __mealId;
}

- (void) setMealId: (int64_t) mealId {
  __mealId = mealId;
  __mealId_isset = YES;
}

- (BOOL) mealIdIsSet {
  return __mealId_isset;
}

- (void) unsetMealId {
  __mealId_isset = NO;
}

- (double) rating {
  return __rating;
}

- (void) setRating: (double) rating {
  __rating = rating;
  __rating_isset = YES;
}

- (BOOL) ratingIsSet {
  return __rating_isset;
}

- (void) unsetRating {
  __rating_isset = NO;
}

- (NSString *) deviceId {
  return [[__deviceId retain] autorelease];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain];
  [__deviceId release];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMealId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VoteRequest"];
  if (__mealId_isset) {
    [outProtocol writeFieldBeginWithName: @"mealId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __mealId];
    [outProtocol writeFieldEnd];
  }
  if (__rating_isset) {
    [outProtocol writeFieldBeginWithName: @"rating" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __rating];
    [outProtocol writeFieldEnd];
  }
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VoteRequest("];
  [ms appendString: @"mealId:"];
  [ms appendFormat: @"%qi", __mealId];
  [ms appendString: @",rating:"];
  [ms appendFormat: @"%f", __rating];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation VoteResponse

- (id) initWithSubmitStatus: (int) submitStatus
{
  self = [super init];
  __submitStatus = submitStatus;
  __submitStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"submitStatus"])
  {
    __submitStatus = [decoder decodeIntForKey: @"submitStatus"];
    __submitStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__submitStatus_isset)
  {
    [encoder encodeInt: __submitStatus forKey: @"submitStatus"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int) submitStatus {
  return __submitStatus;
}

- (void) setSubmitStatus: (int) submitStatus {
  __submitStatus = submitStatus;
  __submitStatus_isset = YES;
}

- (BOOL) submitStatusIsSet {
  return __submitStatus_isset;
}

- (void) unsetSubmitStatus {
  __submitStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSubmitStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VoteResponse"];
  if (__submitStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"submitStatus" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __submitStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VoteResponse("];
  [ms appendString: @"submitStatus:"];
  [ms appendFormat: @"%i", __submitStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMeals_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getMeals_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMeals_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMeals_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMeals_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetMeals_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size21;
          [inProtocol readListBeginReturningElementType: NULL size: &_size21];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            Meal *_elem23 = [[Meal alloc] init];
            [_elem23 read: inProtocol];
            [fieldValue addObject: _elem23];
            [_elem23 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMeals_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i25;
        for (i25 = 0; i25 < [__success count]; i25++)
        {
          [[__success objectAtIndex: i25] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMeals_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getRatings_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getRatings_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getRatings_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getRatings_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetRatings_result : NSObject <NSCoding> {
  NSDictionary * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSDictionary * success;
#endif

- (id) initWithSuccess: (NSDictionary *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSDictionary *) success;
- (void) setSuccess: (NSDictionary *) success;
- (BOOL) successIsSet;

@end

@implementation GetRatings_result

- (id) initWithSuccess: (NSDictionary *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSDictionary *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSDictionary *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size26;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size26];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size26];
          int _i27;
          for (_i27 = 0; _i27 < _size26; ++_i27)
          {
            int64_t _key28 = [inProtocol readI64];
            Rating *_val29 = [[Rating alloc] init];
            [_val29 read: inProtocol];
            [fieldValue setObject: _val29 forKey: [NSNumber numberWithLongLong: _key28]];
            [_val29 release];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRatings_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_STRUCT size: [__success count]];
        NSEnumerator * _iter30 = [__success keyEnumerator];
        id key31;
        while ((key31 = [_iter30 nextObject]))
        {
          [outProtocol writeI64: [key31 longLongValue]];
          [[__success objectForKey: key31] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRatings_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setRating_args : NSObject <NSCoding> {
  int64_t __mealId;
  double __rating;
  NSString * __deviceId;

  BOOL __mealId_isset;
  BOOL __rating_isset;
  BOOL __deviceId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=mealId, setter=setMealId:) int64_t mealId;
@property (nonatomic, getter=rating, setter=setRating:) double rating;
@property (nonatomic, retain, getter=deviceId, setter=setDeviceId:) NSString * deviceId;
#endif

- (id) initWithMealId: (int64_t) mealId rating: (double) rating deviceId: (NSString *) deviceId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int64_t) mealId;
- (void) setMealId: (int64_t) mealId;
- (BOOL) mealIdIsSet;

- (double) rating;
- (void) setRating: (double) rating;
- (BOOL) ratingIsSet;

- (NSString *) deviceId;
- (void) setDeviceId: (NSString *) deviceId;
- (BOOL) deviceIdIsSet;

@end

@implementation setRating_args

- (id) initWithMealId: (int64_t) mealId rating: (double) rating deviceId: (NSString *) deviceId
{
  self = [super init];
  __mealId = mealId;
  __mealId_isset = YES;
  __rating = rating;
  __rating_isset = YES;
  __deviceId = [deviceId retain];
  __deviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mealId"])
  {
    __mealId = [decoder decodeInt64ForKey: @"mealId"];
    __mealId_isset = YES;
  }
  if ([decoder containsValueForKey: @"rating"])
  {
    __rating = [decoder decodeDoubleForKey: @"rating"];
    __rating_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain];
    __deviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mealId_isset)
  {
    [encoder encodeInt64: __mealId forKey: @"mealId"];
  }
  if (__rating_isset)
  {
    [encoder encodeDouble: __rating forKey: @"rating"];
  }
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
}

- (void) dealloc
{
  [__deviceId release];
  [super dealloc];
}

- (int64_t) mealId {
  return __mealId;
}

- (void) setMealId: (int64_t) mealId {
  __mealId = mealId;
  __mealId_isset = YES;
}

- (BOOL) mealIdIsSet {
  return __mealId_isset;
}

- (void) unsetMealId {
  __mealId_isset = NO;
}

- (double) rating {
  return __rating;
}

- (void) setRating: (double) rating {
  __rating = rating;
  __rating_isset = YES;
}

- (BOOL) ratingIsSet {
  return __rating_isset;
}

- (void) unsetRating {
  __rating_isset = NO;
}

- (NSString *) deviceId {
  return [[__deviceId retain] autorelease];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain];
  [__deviceId release];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMealId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setRating_args"];
  if (__mealId_isset) {
    [outProtocol writeFieldBeginWithName: @"mealId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __mealId];
    [outProtocol writeFieldEnd];
  }
  if (__rating_isset) {
    [outProtocol writeFieldBeginWithName: @"rating" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __rating];
    [outProtocol writeFieldEnd];
  }
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setRating_args("];
  [ms appendString: @"mealId:"];
  [ms appendFormat: @"%qi", __mealId];
  [ms appendString: @",rating:"];
  [ms appendFormat: @"%f", __rating];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetRating_result : NSObject <NSCoding> {
  int __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int success;
#endif

- (id) initWithSuccess: (int) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int) success;
- (void) setSuccess: (int) success;
- (BOOL) successIsSet;

@end

@implementation SetRating_result

- (id) initWithSuccess: (int) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int) success {
  return __success;
}

- (void) setSuccess: (int) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetRating_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetRating_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getFood_args : NSObject <NSCoding> {
  FoodRequest * __foodReq;

  BOOL __foodReq_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=foodReq, setter=setFoodReq:) FoodRequest * foodReq;
#endif

- (id) initWithFoodReq: (FoodRequest *) foodReq;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (FoodRequest *) foodReq;
- (void) setFoodReq: (FoodRequest *) foodReq;
- (BOOL) foodReqIsSet;

@end

@implementation getFood_args

- (id) initWithFoodReq: (FoodRequest *) foodReq
{
  self = [super init];
  __foodReq = [foodReq retain];
  __foodReq_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"foodReq"])
  {
    __foodReq = [[decoder decodeObjectForKey: @"foodReq"] retain];
    __foodReq_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__foodReq_isset)
  {
    [encoder encodeObject: __foodReq forKey: @"foodReq"];
  }
}

- (void) dealloc
{
  [__foodReq release];
  [super dealloc];
}

- (FoodRequest *) foodReq {
  return [[__foodReq retain] autorelease];
}

- (void) setFoodReq: (FoodRequest *) foodReq {
  [foodReq retain];
  [__foodReq release];
  __foodReq = foodReq;
  __foodReq_isset = YES;
}

- (BOOL) foodReqIsSet {
  return __foodReq_isset;
}

- (void) unsetFoodReq {
  [__foodReq release];
  __foodReq = nil;
  __foodReq_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          FoodRequest *fieldValue = [[FoodRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setFoodReq: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getFood_args"];
  if (__foodReq_isset) {
    if (__foodReq != nil) {
      [outProtocol writeFieldBeginWithName: @"foodReq" type: TType_STRUCT fieldID: 1];
      [__foodReq write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getFood_args("];
  [ms appendString: @"foodReq:"];
  [ms appendFormat: @"%@", __foodReq];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetFood_result : NSObject <NSCoding> {
  FoodResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) FoodResponse * success;
#endif

- (id) initWithSuccess: (FoodResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (FoodResponse *) success;
- (void) setSuccess: (FoodResponse *) success;
- (BOOL) successIsSet;

@end

@implementation GetFood_result

- (id) initWithSuccess: (FoodResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (FoodResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (FoodResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          FoodResponse *fieldValue = [[FoodResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFood_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFood_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface vote_args : NSObject <NSCoding> {
  VoteRequest * __voteReq;

  BOOL __voteReq_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=voteReq, setter=setVoteReq:) VoteRequest * voteReq;
#endif

- (id) initWithVoteReq: (VoteRequest *) voteReq;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (VoteRequest *) voteReq;
- (void) setVoteReq: (VoteRequest *) voteReq;
- (BOOL) voteReqIsSet;

@end

@implementation vote_args

- (id) initWithVoteReq: (VoteRequest *) voteReq
{
  self = [super init];
  __voteReq = [voteReq retain];
  __voteReq_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"voteReq"])
  {
    __voteReq = [[decoder decodeObjectForKey: @"voteReq"] retain];
    __voteReq_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__voteReq_isset)
  {
    [encoder encodeObject: __voteReq forKey: @"voteReq"];
  }
}

- (void) dealloc
{
  [__voteReq release];
  [super dealloc];
}

- (VoteRequest *) voteReq {
  return [[__voteReq retain] autorelease];
}

- (void) setVoteReq: (VoteRequest *) voteReq {
  [voteReq retain];
  [__voteReq release];
  __voteReq = voteReq;
  __voteReq_isset = YES;
}

- (BOOL) voteReqIsSet {
  return __voteReq_isset;
}

- (void) unsetVoteReq {
  [__voteReq release];
  __voteReq = nil;
  __voteReq_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          VoteRequest *fieldValue = [[VoteRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setVoteReq: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"vote_args"];
  if (__voteReq_isset) {
    if (__voteReq != nil) {
      [outProtocol writeFieldBeginWithName: @"voteReq" type: TType_STRUCT fieldID: 1];
      [__voteReq write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"vote_args("];
  [ms appendString: @"voteReq:"];
  [ms appendFormat: @"%@", __voteReq];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Vote_result : NSObject <NSCoding> {
  VoteResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) VoteResponse * success;
#endif

- (id) initWithSuccess: (VoteResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (VoteResponse *) success;
- (void) setSuccess: (VoteResponse *) success;
- (BOOL) successIsSet;

@end

@implementation Vote_result

- (id) initWithSuccess: (VoteResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (VoteResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (VoteResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          VoteResponse *fieldValue = [[VoteResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Vote_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Vote_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FoodServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getMeals
{
  [outProtocol writeMessageBeginWithName: @"getMeals" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMeals_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getMeals
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMeals_result * result = [[[GetMeals_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMeals failed: unknown result"];
}

- (NSArray *) getMeals
{
  [self send_getMeals];
  return [self recv_getMeals];
}

- (void) send_getRatings
{
  [outProtocol writeMessageBeginWithName: @"getRatings" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getRatings_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSDictionary *) recv_getRatings
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetRatings_result * result = [[[GetRatings_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getRatings failed: unknown result"];
}

- (NSDictionary *) getRatings
{
  [self send_getRatings];
  return [self recv_getRatings];
}

- (void) send_setRating: (int64_t) mealId : (double) rating : (NSString *) deviceId
{
  [outProtocol writeMessageBeginWithName: @"setRating" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setRating_args"];
  [outProtocol writeFieldBeginWithName: @"mealId" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: mealId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"rating" type: TType_DOUBLE fieldID: 2];
  [outProtocol writeDouble: rating];
  [outProtocol writeFieldEnd];
  if (deviceId != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 3];
    [outProtocol writeString: deviceId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int) recv_setRating
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SetRating_result * result = [[[SetRating_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setRating failed: unknown result"];
}

- (int) setRating: (int64_t) mealId : (double) rating : (NSString *) deviceId
{
  [self send_setRating: mealId : rating : deviceId];
  return [self recv_setRating];
}

- (void) send_getFood: (FoodRequest *) foodReq
{
  [outProtocol writeMessageBeginWithName: @"getFood" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getFood_args"];
  if (foodReq != nil)  {
    [outProtocol writeFieldBeginWithName: @"foodReq" type: TType_STRUCT fieldID: 1];
    [foodReq write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (FoodResponse *) recv_getFood
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetFood_result * result = [[[GetFood_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getFood failed: unknown result"];
}

- (FoodResponse *) getFood: (FoodRequest *) foodReq
{
  [self send_getFood: foodReq];
  return [self recv_getFood];
}

- (void) send_vote: (VoteRequest *) voteReq
{
  [outProtocol writeMessageBeginWithName: @"vote" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"vote_args"];
  if (voteReq != nil)  {
    [outProtocol writeFieldBeginWithName: @"voteReq" type: TType_STRUCT fieldID: 1];
    [voteReq write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (VoteResponse *) recv_vote
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Vote_result * result = [[[Vote_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"vote failed: unknown result"];
}

- (VoteResponse *) vote: (VoteRequest *) voteReq
{
  [self send_vote: voteReq];
  return [self recv_vote];
}

@end

@implementation FoodServiceProcessor

- (id) initWithFoodService: (id <FoodService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_getMeals_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMeals"];
  }
  {
    SEL s = @selector(process_getRatings_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getRatings"];
  }
  {
    SEL s = @selector(process_setRating_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setRating"];
  }
  {
    SEL s = @selector(process_getFood_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getFood"];
  }
  {
    SEL s = @selector(process_vote_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"vote"];
  }
  return self;
}

- (id<FoodService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getMeals_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMeals_args * args = [[getMeals_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMeals_result * result = [[GetMeals_result alloc] init];
  [result setSuccess: [mService getMeals]];
  [outProtocol writeMessageBeginWithName: @"getMeals"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getRatings_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getRatings_args * args = [[getRatings_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetRatings_result * result = [[GetRatings_result alloc] init];
  [result setSuccess: [mService getRatings]];
  [outProtocol writeMessageBeginWithName: @"getRatings"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_setRating_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  setRating_args * args = [[setRating_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SetRating_result * result = [[SetRating_result alloc] init];
  [result setSuccess: [mService setRating: [args mealId]: [args rating]: [args deviceId]]];
  [outProtocol writeMessageBeginWithName: @"setRating"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getFood_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getFood_args * args = [[getFood_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetFood_result * result = [[GetFood_result alloc] init];
  [result setSuccess: [mService getFood: [args foodReq]]];
  [outProtocol writeMessageBeginWithName: @"getFood"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_vote_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  vote_args * args = [[vote_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Vote_result * result = [[Vote_result alloc] init];
  [result setSuccess: [mService vote: [args voteReq]]];
  [outProtocol writeMessageBeginWithName: @"vote"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

