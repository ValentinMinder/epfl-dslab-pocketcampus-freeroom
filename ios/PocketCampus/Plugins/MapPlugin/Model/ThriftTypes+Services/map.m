/* 
 * Copyright (c) 2014, PocketCampus.Org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 	* Redistributions of source code must retain the above copyright
 * 	  notice, this list of conditions and the following disclaimer.
 * 	* Redistributions in binary form must reproduce the above copyright
 * 	  notice, this list of conditions and the following disclaimer in the
 * 	  documentation and/or other materials provided with the distribution.
 * 	* Neither the name of PocketCampus.Org nor the
 * 	  names of its contributors may be used to endorse or promote products
 * 	  derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */


/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "map.h"


@implementation mapConstants
+ (void) initialize {
}
@end

@implementation MapLayer

- (id) initWithName: (NSString *) name drawableUrl: (NSString *) drawableUrl layerId: (int64_t) layerId cacheInSeconds: (int32_t) cacheInSeconds displayable: (BOOL) displayable
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __drawableUrl = [drawableUrl retain];
  __drawableUrl_isset = YES;
  __layerId = layerId;
  __layerId_isset = YES;
  __cacheInSeconds = cacheInSeconds;
  __cacheInSeconds_isset = YES;
  __displayable = displayable;
  __displayable_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"drawableUrl"])
  {
    __drawableUrl = [[decoder decodeObjectForKey: @"drawableUrl"] retain];
    __drawableUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"layerId"])
  {
    __layerId = [decoder decodeInt64ForKey: @"layerId"];
    __layerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"cacheInSeconds"])
  {
    __cacheInSeconds = [decoder decodeInt32ForKey: @"cacheInSeconds"];
    __cacheInSeconds_isset = YES;
  }
  if ([decoder containsValueForKey: @"displayable"])
  {
    __displayable = [decoder decodeBoolForKey: @"displayable"];
    __displayable_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__drawableUrl_isset)
  {
    [encoder encodeObject: __drawableUrl forKey: @"drawableUrl"];
  }
  if (__layerId_isset)
  {
    [encoder encodeInt64: __layerId forKey: @"layerId"];
  }
  if (__cacheInSeconds_isset)
  {
    [encoder encodeInt32: __cacheInSeconds forKey: @"cacheInSeconds"];
  }
  if (__displayable_isset)
  {
    [encoder encodeBool: __displayable forKey: @"displayable"];
  }
}

- (void) dealloc
{
  [__name release];
  [__drawableUrl release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) drawableUrl {
  return [[__drawableUrl retain] autorelease];
}

- (void) setDrawableUrl: (NSString *) drawableUrl {
  [drawableUrl retain];
  [__drawableUrl release];
  __drawableUrl = drawableUrl;
  __drawableUrl_isset = YES;
}

- (BOOL) drawableUrlIsSet {
  return __drawableUrl_isset;
}

- (void) unsetDrawableUrl {
  [__drawableUrl release];
  __drawableUrl = nil;
  __drawableUrl_isset = NO;
}

- (int64_t) layerId {
  return __layerId;
}

- (void) setLayerId: (int64_t) layerId {
  __layerId = layerId;
  __layerId_isset = YES;
}

- (BOOL) layerIdIsSet {
  return __layerId_isset;
}

- (void) unsetLayerId {
  __layerId_isset = NO;
}

- (int32_t) cacheInSeconds {
  return __cacheInSeconds;
}

- (void) setCacheInSeconds: (int32_t) cacheInSeconds {
  __cacheInSeconds = cacheInSeconds;
  __cacheInSeconds_isset = YES;
}

- (BOOL) cacheInSecondsIsSet {
  return __cacheInSeconds_isset;
}

- (void) unsetCacheInSeconds {
  __cacheInSeconds_isset = NO;
}

- (BOOL) displayable {
  return __displayable;
}

- (void) setDisplayable: (BOOL) displayable {
  __displayable = displayable;
  __displayable_isset = YES;
}

- (BOOL) displayableIsSet {
  return __displayable_isset;
}

- (void) unsetDisplayable {
  __displayable_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrawableUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLayerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCacheInSeconds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDisplayable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MapLayer"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drawableUrl_isset) {
    if (__drawableUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"drawableUrl" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __drawableUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__layerId_isset) {
    [outProtocol writeFieldBeginWithName: @"layerId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __layerId];
    [outProtocol writeFieldEnd];
  }
  if (__cacheInSeconds_isset) {
    [outProtocol writeFieldBeginWithName: @"cacheInSeconds" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __cacheInSeconds];
    [outProtocol writeFieldEnd];
  }
  if (__displayable_isset) {
    [outProtocol writeFieldBeginWithName: @"displayable" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __displayable];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MapLayer("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",drawableUrl:"];
  [ms appendFormat: @"\"%@\"", __drawableUrl];
  [ms appendString: @",layerId:"];
  [ms appendFormat: @"%qi", __layerId];
  [ms appendString: @",cacheInSeconds:"];
  [ms appendFormat: @"%i", __cacheInSeconds];
  [ms appendString: @",displayable:"];
  [ms appendFormat: @"%i", __displayable];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MapItem

- (id) initWithTitle: (NSString *) title description: (NSString *) description latitude: (double) latitude longitude: (double) longitude layerId: (int64_t) layerId itemId: (int64_t) itemId floor: (int32_t) floor category: (NSString *) category
{
  self = [super init];
  __title = [title retain];
  __title_isset = YES;
  __description = [description retain];
  __description_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __layerId = layerId;
  __layerId_isset = YES;
  __itemId = itemId;
  __itemId_isset = YES;
  __floor = floor;
  __floor_isset = YES;
  __category = [category retain];
  __category_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"description"])
  {
    __description = [[decoder decodeObjectForKey: @"description"] retain];
    __description_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"layerId"])
  {
    __layerId = [decoder decodeInt64ForKey: @"layerId"];
    __layerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemId"])
  {
    __itemId = [decoder decodeInt64ForKey: @"itemId"];
    __itemId_isset = YES;
  }
  if ([decoder containsValueForKey: @"floor"])
  {
    __floor = [decoder decodeInt32ForKey: @"floor"];
    __floor_isset = YES;
  }
  if ([decoder containsValueForKey: @"category"])
  {
    __category = [[decoder decodeObjectForKey: @"category"] retain];
    __category_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__description_isset)
  {
    [encoder encodeObject: __description forKey: @"description"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__layerId_isset)
  {
    [encoder encodeInt64: __layerId forKey: @"layerId"];
  }
  if (__itemId_isset)
  {
    [encoder encodeInt64: __itemId forKey: @"itemId"];
  }
  if (__floor_isset)
  {
    [encoder encodeInt32: __floor forKey: @"floor"];
  }
  if (__category_isset)
  {
    [encoder encodeObject: __category forKey: @"category"];
  }
}

- (void) dealloc
{
  [__title release];
  [__description release];
  [__category release];
  [super dealloc];
}

- (NSString *) title {
  return [[__title retain] autorelease];
}

- (void) setTitle: (NSString *) title {
  [title retain];
  [__title release];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) description {
  return [[__description retain] autorelease];
}

- (void) setDescription: (NSString *) description {
  [description retain];
  [__description release];
  __description = description;
  __description_isset = YES;
}

- (BOOL) descriptionIsSet {
  return __description_isset;
}

- (void) unsetDescription {
  [__description release];
  __description = nil;
  __description_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (int64_t) layerId {
  return __layerId;
}

- (void) setLayerId: (int64_t) layerId {
  __layerId = layerId;
  __layerId_isset = YES;
}

- (BOOL) layerIdIsSet {
  return __layerId_isset;
}

- (void) unsetLayerId {
  __layerId_isset = NO;
}

- (int64_t) itemId {
  return __itemId;
}

- (void) setItemId: (int64_t) itemId {
  __itemId = itemId;
  __itemId_isset = YES;
}

- (BOOL) itemIdIsSet {
  return __itemId_isset;
}

- (void) unsetItemId {
  __itemId_isset = NO;
}

- (int32_t) floor {
  return __floor;
}

- (void) setFloor: (int32_t) floor {
  __floor = floor;
  __floor_isset = YES;
}

- (BOOL) floorIsSet {
  return __floor_isset;
}

- (void) unsetFloor {
  __floor_isset = NO;
}

- (NSString *) category {
  return [[__category retain] autorelease];
}

- (void) setCategory: (NSString *) category {
  [category retain];
  [__category release];
  __category = category;
  __category_isset = YES;
}

- (BOOL) categoryIsSet {
  return __category_isset;
}

- (void) unsetCategory {
  [__category release];
  __category = nil;
  __category_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLayerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFloor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCategory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MapItem"];
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__description_isset) {
    if (__description != nil) {
      [outProtocol writeFieldBeginWithName: @"description" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __description];
      [outProtocol writeFieldEnd];
    }
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__layerId_isset) {
    [outProtocol writeFieldBeginWithName: @"layerId" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __layerId];
    [outProtocol writeFieldEnd];
  }
  if (__itemId_isset) {
    [outProtocol writeFieldBeginWithName: @"itemId" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __itemId];
    [outProtocol writeFieldEnd];
  }
  if (__floor_isset) {
    [outProtocol writeFieldBeginWithName: @"floor" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __floor];
    [outProtocol writeFieldEnd];
  }
  if (__category_isset) {
    if (__category != nil) {
      [outProtocol writeFieldBeginWithName: @"category" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __category];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) descriptionObject {
  NSMutableString * ms = [NSMutableString stringWithString: @"MapItem("];
  [ms appendString: @"title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",description:"];
  [ms appendFormat: @"\"%@\"", __description];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",layerId:"];
  [ms appendFormat: @"%qi", __layerId];
  [ms appendString: @",itemId:"];
  [ms appendFormat: @"%qi", __itemId];
  [ms appendString: @",floor:"];
  [ms appendFormat: @"%i", __floor];
  [ms appendString: @",category:"];
  [ms appendFormat: @"\"%@\"", __category];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getLayerList_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getLayerList_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getLayerList_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getLayerList_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetLayerList_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetLayerList_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            MapLayer *_elem2 = [[MapLayer alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLayerList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [[__success objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLayerList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getLayerItems_args : NSObject <NSCoding> {
  int64_t __layerId;

  BOOL __layerId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=layerId, setter=setLayerId:) int64_t layerId;
#endif

- (id) initWithLayerId: (int64_t) layerId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int64_t) layerId;
- (void) setLayerId: (int64_t) layerId;
- (BOOL) layerIdIsSet;

@end

@implementation getLayerItems_args

- (id) initWithLayerId: (int64_t) layerId
{
  self = [super init];
  __layerId = layerId;
  __layerId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"layerId"])
  {
    __layerId = [decoder decodeInt64ForKey: @"layerId"];
    __layerId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__layerId_isset)
  {
    [encoder encodeInt64: __layerId forKey: @"layerId"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int64_t) layerId {
  return __layerId;
}

- (void) setLayerId: (int64_t) layerId {
  __layerId = layerId;
  __layerId_isset = YES;
}

- (BOOL) layerIdIsSet {
  return __layerId_isset;
}

- (void) unsetLayerId {
  __layerId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLayerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getLayerItems_args"];
  if (__layerId_isset) {
    [outProtocol writeFieldBeginWithName: @"layerId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __layerId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getLayerItems_args("];
  [ms appendString: @"layerId:"];
  [ms appendFormat: @"%qi", __layerId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetLayerItems_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetLayerItems_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            MapItem *_elem7 = [[MapItem alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLayerItems_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLayerItems_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface search_args : NSObject <NSCoding> {
  NSString * __query;

  BOOL __query_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=query, setter=setQuery:) NSString * query;
#endif

- (id) initWithQuery: (NSString *) query;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) query;
- (void) setQuery: (NSString *) query;
- (BOOL) queryIsSet;

@end

@implementation search_args

- (id) initWithQuery: (NSString *) query
{
  self = [super init];
  __query = [query retain];
  __query_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"query"])
  {
    __query = [[decoder decodeObjectForKey: @"query"] retain];
    __query_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__query_isset)
  {
    [encoder encodeObject: __query forKey: @"query"];
  }
}

- (void) dealloc
{
  [__query release];
  [super dealloc];
}

- (NSString *) query {
  return [[__query retain] autorelease];
}

- (void) setQuery: (NSString *) query {
  [query retain];
  [__query release];
  __query = query;
  __query_isset = YES;
}

- (BOOL) queryIsSet {
  return __query_isset;
}

- (void) unsetQuery {
  [__query release];
  __query = nil;
  __query_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQuery: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"search_args"];
  if (__query_isset) {
    if (__query != nil) {
      [outProtocol writeFieldBeginWithName: @"query" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __query];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"search_args("];
  [ms appendString: @"query:"];
  [ms appendFormat: @"\"%@\"", __query];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Search_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation Search_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            MapItem *_elem12 = [[MapItem alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Search_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i14;
        for (i14 = 0; i14 < [__success count]; i14++)
        {
          [[__success objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Search_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MapServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getLayerList
{
  [outProtocol writeMessageBeginWithName: @"getLayerList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getLayerList_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getLayerList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetLayerList_result * result = [[[GetLayerList_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getLayerList failed: unknown result"];
}

- (NSArray *) getLayerList
{
  [self send_getLayerList];
  return [self recv_getLayerList];
}

- (void) send_getLayerItems: (int64_t) layerId
{
  [outProtocol writeMessageBeginWithName: @"getLayerItems" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getLayerItems_args"];
  [outProtocol writeFieldBeginWithName: @"layerId" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: layerId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getLayerItems
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetLayerItems_result * result = [[[GetLayerItems_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getLayerItems failed: unknown result"];
}

- (NSArray *) getLayerItems: (int64_t) layerId
{
  [self send_getLayerItems: layerId];
  return [self recv_getLayerItems];
}

- (void) send_search: (NSString *) query
{
  [outProtocol writeMessageBeginWithName: @"search" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"search_args"];
  if (query != nil)  {
    [outProtocol writeFieldBeginWithName: @"query" type: TType_STRING fieldID: 1];
    [outProtocol writeString: query];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_search
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Search_result * result = [[[Search_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"search failed: unknown result"];
}

- (NSArray *) search: (NSString *) query
{
  [self send_search: query];
  return [self recv_search];
}

@end

@implementation MapServiceProcessor

- (id) initWithMapService: (id <MapService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_getLayerList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getLayerList"];
  }
  {
    SEL s = @selector(process_getLayerItems_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getLayerItems"];
  }
  {
    SEL s = @selector(process_search_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"search"];
  }
  return self;
}

- (id<MapService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getLayerList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getLayerList_args * args = [[getLayerList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetLayerList_result * result = [[GetLayerList_result alloc] init];
  [result setSuccess: [mService getLayerList]];
  [outProtocol writeMessageBeginWithName: @"getLayerList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getLayerItems_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getLayerItems_args * args = [[getLayerItems_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetLayerItems_result * result = [[GetLayerItems_result alloc] init];
  [result setSuccess: [mService getLayerItems: [args layerId]]];
  [outProtocol writeMessageBeginWithName: @"getLayerItems"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_search_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  search_args * args = [[search_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Search_result * result = [[Search_result alloc] init];
  [result setSuccess: [mService search: [args query]]];
  [outProtocol writeMessageBeginWithName: @"search"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

