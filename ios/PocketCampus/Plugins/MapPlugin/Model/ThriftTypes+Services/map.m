/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "map.h"

@implementation MapLayer

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLayerId: (int64_t) layerId name: (NSString *) name nameForQuery: (NSString *) nameForQuery nameForQueryAllFloors: (NSString *) nameForQueryAllFloors
{
  self = [super init];
  __layerId = layerId;
  __layerId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __nameForQuery = [nameForQuery retain_stub];
  __nameForQuery_isset = YES;
  __nameForQueryAllFloors = [nameForQueryAllFloors retain_stub];
  __nameForQueryAllFloors_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"layerId"])
  {
    __layerId = [decoder decodeInt64ForKey: @"layerId"];
    __layerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"nameForQuery"])
  {
    __nameForQuery = [[decoder decodeObjectForKey: @"nameForQuery"] retain_stub];
    __nameForQuery_isset = YES;
  }
  if ([decoder containsValueForKey: @"nameForQueryAllFloors"])
  {
    __nameForQueryAllFloors = [[decoder decodeObjectForKey: @"nameForQueryAllFloors"] retain_stub];
    __nameForQueryAllFloors_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__layerId_isset)
  {
    [encoder encodeInt64: __layerId forKey: @"layerId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__nameForQuery_isset)
  {
    [encoder encodeObject: __nameForQuery forKey: @"nameForQuery"];
  }
  if (__nameForQueryAllFloors_isset)
  {
    [encoder encodeObject: __nameForQueryAllFloors forKey: @"nameForQueryAllFloors"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__nameForQuery release_stub];
  [__nameForQueryAllFloors release_stub];
  [super dealloc_stub];
}

- (int64_t) layerId {
  return __layerId;
}

- (void) setLayerId: (int64_t) layerId {
  __layerId = layerId;
  __layerId_isset = YES;
}

- (BOOL) layerIdIsSet {
  return __layerId_isset;
}

- (void) unsetLayerId {
  __layerId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) nameForQuery {
  return [[__nameForQuery retain_stub] autorelease_stub];
}

- (void) setNameForQuery: (NSString *) nameForQuery {
  [nameForQuery retain_stub];
  [__nameForQuery release_stub];
  __nameForQuery = nameForQuery;
  __nameForQuery_isset = YES;
}

- (BOOL) nameForQueryIsSet {
  return __nameForQuery_isset;
}

- (void) unsetNameForQuery {
  [__nameForQuery release_stub];
  __nameForQuery = nil;
  __nameForQuery_isset = NO;
}

- (NSString *) nameForQueryAllFloors {
  return [[__nameForQueryAllFloors retain_stub] autorelease_stub];
}

- (void) setNameForQueryAllFloors: (NSString *) nameForQueryAllFloors {
  [nameForQueryAllFloors retain_stub];
  [__nameForQueryAllFloors release_stub];
  __nameForQueryAllFloors = nameForQueryAllFloors;
  __nameForQueryAllFloors_isset = YES;
}

- (BOOL) nameForQueryAllFloorsIsSet {
  return __nameForQueryAllFloors_isset;
}

- (void) unsetNameForQueryAllFloors {
  [__nameForQueryAllFloors release_stub];
  __nameForQueryAllFloors = nil;
  __nameForQueryAllFloors_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLayerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNameForQuery: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNameForQueryAllFloors: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MapLayer"];
  if (__layerId_isset) {
    [outProtocol writeFieldBeginWithName: @"layerId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __layerId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nameForQuery_isset) {
    if (__nameForQuery != nil) {
      [outProtocol writeFieldBeginWithName: @"nameForQuery" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __nameForQuery];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nameForQueryAllFloors_isset) {
    if (__nameForQueryAllFloors != nil) {
      [outProtocol writeFieldBeginWithName: @"nameForQueryAllFloors" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __nameForQueryAllFloors];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__layerId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'layerId' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MapLayer("];
  [ms appendString: @"layerId:"];
  [ms appendFormat: @"%qi", __layerId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",nameForQuery:"];
  [ms appendFormat: @"\"%@\"", __nameForQuery];
  [ms appendString: @",nameForQueryAllFloors:"];
  [ms appendFormat: @"\"%@\"", __nameForQueryAllFloors];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MapLayersResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatusCode: (int) statusCode layers: (NSMutableDictionary *) layers
{
  self = [super init];
  __statusCode = statusCode;
  __statusCode_isset = YES;
  __layers = [layers retain_stub];
  __layers_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"layers"])
  {
    __layers = [[decoder decodeObjectForKey: @"layers"] retain_stub];
    __layers_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
  if (__layers_isset)
  {
    [encoder encodeObject: __layers forKey: @"layers"];
  }
}

- (void) dealloc
{
  [__layers release_stub];
  [super dealloc_stub];
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (NSMutableDictionary *) layers {
  return [[__layers retain_stub] autorelease_stub];
}

- (void) setLayers: (NSMutableDictionary *) layers {
  [layers retain_stub];
  [__layers release_stub];
  __layers = layers;
  __layers_isset = YES;
}

- (BOOL) layersIsSet {
  return __layers_isset;
}

- (void) unsetLayers {
  [__layers release_stub];
  __layers = nil;
  __layers_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            int64_t _key2 = [inProtocol readI64];
            MapLayer *_val3 = [[MapLayer alloc] init];
            [_val3 read: inProtocol];
            [fieldValue setObject: _val3 forKey: [NSNumber numberWithLongLong: _key2]];
            [_val3 release_stub];
          }
          [inProtocol readMapEnd];
          [self setLayers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MapLayersResponse"];
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  if (__layers_isset) {
    if (__layers != nil) {
      [outProtocol writeFieldBeginWithName: @"layers" type: TType_MAP fieldID: 2];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_STRUCT size: [__layers count]];
        NSEnumerator * _iter4 = [__layers keyEnumerator];
        id key5;
        while ((key5 = [_iter4 nextObject]))
        {
          [outProtocol writeI64: [key5 longLongValue]];
          [[__layers objectForKey: key5] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__statusCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'statusCode' is not set."];
  }
  if (!__layers_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'layers' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MapLayersResponse("];
  [ms appendString: @"statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @",layers:"];
  [ms appendFormat: @"%@", __layers];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MapItem

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTitle: (NSString *) title description: (NSString *) description latitude: (double) latitude longitude: (double) longitude layerId: (int64_t) layerId itemId: (int64_t) itemId floor: (int32_t) floor category: (NSString *) category
{
  self = [super init];
  __title = [title retain_stub];
  __title_isset = YES;
  __description = [description retain_stub];
  __description_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __layerId = layerId;
  __layerId_isset = YES;
  __itemId = itemId;
  __itemId_isset = YES;
  __floor = floor;
  __floor_isset = YES;
  __category = [category retain_stub];
  __category_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"description"])
  {
    __description = [[decoder decodeObjectForKey: @"description"] retain_stub];
    __description_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"layerId"])
  {
    __layerId = [decoder decodeInt64ForKey: @"layerId"];
    __layerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemId"])
  {
    __itemId = [decoder decodeInt64ForKey: @"itemId"];
    __itemId_isset = YES;
  }
  if ([decoder containsValueForKey: @"floor"])
  {
    __floor = [decoder decodeInt32ForKey: @"floor"];
    __floor_isset = YES;
  }
  if ([decoder containsValueForKey: @"category"])
  {
    __category = [[decoder decodeObjectForKey: @"category"] retain_stub];
    __category_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__description_isset)
  {
    [encoder encodeObject: __description forKey: @"description"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__layerId_isset)
  {
    [encoder encodeInt64: __layerId forKey: @"layerId"];
  }
  if (__itemId_isset)
  {
    [encoder encodeInt64: __itemId forKey: @"itemId"];
  }
  if (__floor_isset)
  {
    [encoder encodeInt32: __floor forKey: @"floor"];
  }
  if (__category_isset)
  {
    [encoder encodeObject: __category forKey: @"category"];
  }
}

- (void) dealloc
{
  [__title release_stub];
  [__description release_stub];
  [__category release_stub];
  [super dealloc_stub];
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) description {
  return [[__description retain_stub] autorelease_stub];
}

- (void) setDescription: (NSString *) description {
  [description retain_stub];
  [__description release_stub];
  __description = description;
  __description_isset = YES;
}

- (BOOL) descriptionIsSet {
  return __description_isset;
}

- (void) unsetDescription {
  [__description release_stub];
  __description = nil;
  __description_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (int64_t) layerId {
  return __layerId;
}

- (void) setLayerId: (int64_t) layerId {
  __layerId = layerId;
  __layerId_isset = YES;
}

- (BOOL) layerIdIsSet {
  return __layerId_isset;
}

- (void) unsetLayerId {
  __layerId_isset = NO;
}

- (int64_t) itemId {
  return __itemId;
}

- (void) setItemId: (int64_t) itemId {
  __itemId = itemId;
  __itemId_isset = YES;
}

- (BOOL) itemIdIsSet {
  return __itemId_isset;
}

- (void) unsetItemId {
  __itemId_isset = NO;
}

- (int32_t) floor {
  return __floor;
}

- (void) setFloor: (int32_t) floor {
  __floor = floor;
  __floor_isset = YES;
}

- (BOOL) floorIsSet {
  return __floor_isset;
}

- (void) unsetFloor {
  __floor_isset = NO;
}

- (NSString *) category {
  return [[__category retain_stub] autorelease_stub];
}

- (void) setCategory: (NSString *) category {
  [category retain_stub];
  [__category release_stub];
  __category = category;
  __category_isset = YES;
}

- (BOOL) categoryIsSet {
  return __category_isset;
}

- (void) unsetCategory {
  [__category release_stub];
  __category = nil;
  __category_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLayerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFloor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCategory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MapItem"];
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__description_isset) {
    if (__description != nil) {
      [outProtocol writeFieldBeginWithName: @"description" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __description];
      [outProtocol writeFieldEnd];
    }
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__layerId_isset) {
    [outProtocol writeFieldBeginWithName: @"layerId" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __layerId];
    [outProtocol writeFieldEnd];
  }
  if (__itemId_isset) {
    [outProtocol writeFieldBeginWithName: @"itemId" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __itemId];
    [outProtocol writeFieldEnd];
  }
  if (__floor_isset) {
    [outProtocol writeFieldBeginWithName: @"floor" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __floor];
    [outProtocol writeFieldEnd];
  }
  if (__category_isset) {
    if (__category != nil) {
      [outProtocol writeFieldBeginWithName: @"category" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __category];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__title_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'title' is not set."];
  }
  if (!__latitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'latitude' is not set."];
  }
  if (!__longitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'longitude' is not set."];
  }
  if (!__layerId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'layerId' is not set."];
  }
  if (!__itemId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'itemId' is not set."];
  }
}

- (NSString *) descriptionObject {
  NSMutableString * ms = [NSMutableString stringWithString: @"MapItem("];
  [ms appendString: @"title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",description:"];
  [ms appendFormat: @"\"%@\"", __description];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",layerId:"];
  [ms appendFormat: @"%qi", __layerId];
  [ms appendString: @",itemId:"];
  [ms appendFormat: @"%qi", __itemId];
  [ms appendString: @",floor:"];
  [ms appendFormat: @"%i", __floor];
  [ms appendString: @",category:"];
  [ms appendFormat: @"\"%@\"", __category];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static int64_t MapLayerIdMyPrint = 1;
static int64_t MapLayerIdCamiproChargers = 2;
static int64_t MapLayerIdCamiproTerminals = 3;
static int64_t MapLayerIdPublicParkingLots = 4;
static int64_t MapLayerIdRestaurants = 5;
static int64_t MapLayerIdATMs = 6;

@implementation mapConstants
+ (void) initialize {
}
+ (int64_t) MapLayerIdMyPrint{
  return MapLayerIdMyPrint;
}
+ (int64_t) MapLayerIdCamiproChargers{
  return MapLayerIdCamiproChargers;
}
+ (int64_t) MapLayerIdCamiproTerminals{
  return MapLayerIdCamiproTerminals;
}
+ (int64_t) MapLayerIdPublicParkingLots{
  return MapLayerIdPublicParkingLots;
}
+ (int64_t) MapLayerIdRestaurants{
  return MapLayerIdRestaurants;
}
+ (int64_t) MapLayerIdATMs{
  return MapLayerIdATMs;
}
@end

@interface getLayers_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation getLayers_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getLayers_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getLayers_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetLayers_result : NSObject <TBase, NSCoding> {
  MapLayersResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MapLayersResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (MapLayersResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (MapLayersResponse *) success;
- (void) setSuccess: (MapLayersResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetLayers_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (MapLayersResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (MapLayersResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (MapLayersResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MapLayersResponse *fieldValue = [[MapLayersResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLayers_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLayers_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface search_args : NSObject <TBase, NSCoding> {
  NSString * __query;

  BOOL __query_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=query, setter=setQuery:) NSString * query;
#endif

- (id) init;
- (id) initWithQuery: (NSString *) query;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) query;
- (void) setQuery: (NSString *) query;
#endif
- (BOOL) queryIsSet;

@end

@implementation search_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithQuery: (NSString *) query
{
  self = [super init];
  __query = [query retain_stub];
  __query_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"query"])
  {
    __query = [[decoder decodeObjectForKey: @"query"] retain_stub];
    __query_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__query_isset)
  {
    [encoder encodeObject: __query forKey: @"query"];
  }
}

- (void) dealloc
{
  [__query release_stub];
  [super dealloc_stub];
}

- (NSString *) query {
  return [[__query retain_stub] autorelease_stub];
}

- (void) setQuery: (NSString *) query {
  [query retain_stub];
  [__query release_stub];
  __query = query;
  __query_isset = YES;
}

- (BOOL) queryIsSet {
  return __query_isset;
}

- (void) unsetQuery {
  [__query release_stub];
  __query = nil;
  __query_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQuery: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"search_args"];
  if (__query_isset) {
    if (__query != nil) {
      [outProtocol writeFieldBeginWithName: @"query" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __query];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"search_args("];
  [ms appendString: @"query:"];
  [ms appendFormat: @"\"%@\"", __query];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Search_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Search_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            MapItem *_elem8 = [[MapItem alloc] init];
            [_elem8 read: inProtocol];
            [fieldValue addObject: _elem8];
            [_elem8 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Search_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx10;
        for (idx10 = 0; idx10 < [__success count]; idx10++)
        {
          [[__success objectAtIndex: idx10] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Search_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MapServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getLayers
{
  [outProtocol writeMessageBeginWithName: @"getLayers" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getLayers_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MapLayersResponse *) recv_getLayers
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetLayers_result * result = [[[GetLayers_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getLayers failed: unknown result"];
}

- (MapLayersResponse *) getLayers
{
  [self send_getLayers];
  return [self recv_getLayers];
}

- (void) send_search: (NSString *) query
{
  [outProtocol writeMessageBeginWithName: @"search" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"search_args"];
  if (query != nil)  {
    [outProtocol writeFieldBeginWithName: @"query" type: TType_STRING fieldID: 1];
    [outProtocol writeString: query];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_search
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Search_result * result = [[[Search_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"search failed: unknown result"];
}

- (NSMutableArray *) search: (NSString *) query
{
  [self send_search : query];
  return [self recv_search];
}

@end

@implementation MapServiceProcessor

- (id) initWithMapService: (id <MapService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getLayers_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getLayers"];
  }
  {
    SEL s = @selector(process_search_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"search"];
  }
  return self;
}

- (id<MapService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getLayers_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getLayers_args * args = [[getLayers_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetLayers_result * result = [[GetLayers_result alloc] init];
  [result setSuccess: [mService getLayers]];
  [outProtocol writeMessageBeginWithName: @"getLayers"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_search_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  search_args * args = [[search_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Search_result * result = [[Search_result alloc] init];
  [result setSuccess: [mService search: [args query]]];
  [outProtocol writeMessageBeginWithName: @"search"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

