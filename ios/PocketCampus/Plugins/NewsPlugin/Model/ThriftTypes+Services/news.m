/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "news.h"


@implementation newsConstants
+ (void) initialize {
}
@end

@implementation NewsItem

- (id) initWithNewsItemId: (int64_t) newsItemId title: (NSString *) title link: (NSString *) link feed: (NSString *) feed pubDate: (int64_t) pubDate imageUrl: (NSString *) imageUrl
{
  self = [super init];
  __newsItemId = newsItemId;
  __newsItemId_isset = YES;
  __title = [title retain];
  __title_isset = YES;
  __link = [link retain];
  __link_isset = YES;
  __feed = [feed retain];
  __feed_isset = YES;
  __pubDate = pubDate;
  __pubDate_isset = YES;
  __imageUrl = [imageUrl retain];
  __imageUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"newsItemId"])
  {
    __newsItemId = [decoder decodeInt64ForKey: @"newsItemId"];
    __newsItemId_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"link"])
  {
    __link = [[decoder decodeObjectForKey: @"link"] retain];
    __link_isset = YES;
  }
  if ([decoder containsValueForKey: @"feed"])
  {
    __feed = [[decoder decodeObjectForKey: @"feed"] retain];
    __feed_isset = YES;
  }
  if ([decoder containsValueForKey: @"pubDate"])
  {
    __pubDate = [decoder decodeInt64ForKey: @"pubDate"];
    __pubDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"imageUrl"])
  {
    __imageUrl = [[decoder decodeObjectForKey: @"imageUrl"] retain];
    __imageUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__newsItemId_isset)
  {
    [encoder encodeInt64: __newsItemId forKey: @"newsItemId"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__link_isset)
  {
    [encoder encodeObject: __link forKey: @"link"];
  }
  if (__feed_isset)
  {
    [encoder encodeObject: __feed forKey: @"feed"];
  }
  if (__pubDate_isset)
  {
    [encoder encodeInt64: __pubDate forKey: @"pubDate"];
  }
  if (__imageUrl_isset)
  {
    [encoder encodeObject: __imageUrl forKey: @"imageUrl"];
  }
}

- (void) dealloc
{
  [__title release];
  [__link release];
  [__feed release];
  [__imageUrl release];
  [super dealloc];
}

- (int64_t) newsItemId {
  return __newsItemId;
}

- (void) setNewsItemId: (int64_t) newsItemId {
  __newsItemId = newsItemId;
  __newsItemId_isset = YES;
}

- (BOOL) newsItemIdIsSet {
  return __newsItemId_isset;
}

- (void) unsetNewsItemId {
  __newsItemId_isset = NO;
}

- (NSString *) title {
  return [[__title retain] autorelease];
}

- (void) setTitle: (NSString *) title {
  [title retain];
  [__title release];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) link {
  return [[__link retain] autorelease];
}

- (void) setLink: (NSString *) link {
  [link retain];
  [__link release];
  __link = link;
  __link_isset = YES;
}

- (BOOL) linkIsSet {
  return __link_isset;
}

- (void) unsetLink {
  [__link release];
  __link = nil;
  __link_isset = NO;
}

- (NSString *) feed {
  return [[__feed retain] autorelease];
}

- (void) setFeed: (NSString *) feed {
  [feed retain];
  [__feed release];
  __feed = feed;
  __feed_isset = YES;
}

- (BOOL) feedIsSet {
  return __feed_isset;
}

- (void) unsetFeed {
  [__feed release];
  __feed = nil;
  __feed_isset = NO;
}

- (int64_t) pubDate {
  return __pubDate;
}

- (void) setPubDate: (int64_t) pubDate {
  __pubDate = pubDate;
  __pubDate_isset = YES;
}

- (BOOL) pubDateIsSet {
  return __pubDate_isset;
}

- (void) unsetPubDate {
  __pubDate_isset = NO;
}

- (NSString *) imageUrl {
  return [[__imageUrl retain] autorelease];
}

- (void) setImageUrl: (NSString *) imageUrl {
  [imageUrl retain];
  [__imageUrl release];
  __imageUrl = imageUrl;
  __imageUrl_isset = YES;
}

- (BOOL) imageUrlIsSet {
  return __imageUrl_isset;
}

- (void) unsetImageUrl {
  [__imageUrl release];
  __imageUrl = nil;
  __imageUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNewsItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPubDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImageUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsItem"];
  if (__newsItemId_isset) {
    [outProtocol writeFieldBeginWithName: @"newsItemId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __newsItemId];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__link_isset) {
    if (__link != nil) {
      [outProtocol writeFieldBeginWithName: @"link" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __link];
      [outProtocol writeFieldEnd];
    }
  }
  if (__feed_isset) {
    if (__feed != nil) {
      [outProtocol writeFieldBeginWithName: @"feed" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __feed];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pubDate_isset) {
    [outProtocol writeFieldBeginWithName: @"pubDate" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __pubDate];
    [outProtocol writeFieldEnd];
  }
  if (__imageUrl_isset) {
    if (__imageUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imageUrl" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __imageUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsItem("];
  [ms appendString: @"newsItemId:"];
  [ms appendFormat: @"%qi", __newsItemId];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",link:"];
  [ms appendFormat: @"\"%@\"", __link];
  [ms appendString: @",feed:"];
  [ms appendFormat: @"\"%@\"", __feed];
  [ms appendString: @",pubDate:"];
  [ms appendFormat: @"%qi", __pubDate];
  [ms appendString: @",imageUrl:"];
  [ms appendFormat: @"\"%@\"", __imageUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Feed

- (id) initWithFeedId: (int64_t) feedId title: (NSString *) title link: (NSString *) link description: (NSString *) description items: (NSArray *) items
{
  self = [super init];
  __feedId = feedId;
  __feedId_isset = YES;
  __title = [title retain];
  __title_isset = YES;
  __link = [link retain];
  __link_isset = YES;
  __description = [description retain];
  __description_isset = YES;
  __items = [items retain];
  __items_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"feedId"])
  {
    __feedId = [decoder decodeInt64ForKey: @"feedId"];
    __feedId_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"link"])
  {
    __link = [[decoder decodeObjectForKey: @"link"] retain];
    __link_isset = YES;
  }
  if ([decoder containsValueForKey: @"description"])
  {
    __description = [[decoder decodeObjectForKey: @"description"] retain];
    __description_isset = YES;
  }
  if ([decoder containsValueForKey: @"items"])
  {
    __items = [[decoder decodeObjectForKey: @"items"] retain];
    __items_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__feedId_isset)
  {
    [encoder encodeInt64: __feedId forKey: @"feedId"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__link_isset)
  {
    [encoder encodeObject: __link forKey: @"link"];
  }
  if (__description_isset)
  {
    [encoder encodeObject: __description forKey: @"description"];
  }
  if (__items_isset)
  {
    [encoder encodeObject: __items forKey: @"items"];
  }
}

- (void) dealloc
{
  [__title release];
  [__link release];
  [__description release];
  [__items release];
  [super dealloc];
}

- (int64_t) feedId {
  return __feedId;
}

- (void) setFeedId: (int64_t) feedId {
  __feedId = feedId;
  __feedId_isset = YES;
}

- (BOOL) feedIdIsSet {
  return __feedId_isset;
}

- (void) unsetFeedId {
  __feedId_isset = NO;
}

- (NSString *) title {
  return [[__title retain] autorelease];
}

- (void) setTitle: (NSString *) title {
  [title retain];
  [__title release];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) link {
  return [[__link retain] autorelease];
}

- (void) setLink: (NSString *) link {
  [link retain];
  [__link release];
  __link = link;
  __link_isset = YES;
}

- (BOOL) linkIsSet {
  return __link_isset;
}

- (void) unsetLink {
  [__link release];
  __link = nil;
  __link_isset = NO;
}

- (NSString *) description {
  return [[__description retain] autorelease];
}

- (void) setDescription: (NSString *) description {
  [description retain];
  [__description release];
  __description = description;
  __description_isset = YES;
}

- (BOOL) descriptionIsSet {
  return __description_isset;
}

- (void) unsetDescription {
  [__description release];
  __description = nil;
  __description_isset = NO;
}

- (NSArray *) items {
  return [[__items retain] autorelease];
}

- (void) setItems: (NSArray *) items {
  [items retain];
  [__items release];
  __items = items;
  __items_isset = YES;
}

- (BOOL) itemsIsSet {
  return __items_isset;
}

- (void) unsetItems {
  [__items release];
  __items = nil;
  __items_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFeedId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NewsItem *_elem2 = [[NewsItem alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setItems: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Feed"];
  if (__feedId_isset) {
    [outProtocol writeFieldBeginWithName: @"feedId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __feedId];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__link_isset) {
    if (__link != nil) {
      [outProtocol writeFieldBeginWithName: @"link" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __link];
      [outProtocol writeFieldEnd];
    }
  }
  if (__description_isset) {
    if (__description != nil) {
      [outProtocol writeFieldBeginWithName: @"description" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __description];
      [outProtocol writeFieldEnd];
    }
  }
  if (__items_isset) {
    if (__items != nil) {
      [outProtocol writeFieldBeginWithName: @"items" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__items count]];
        int i4;
        for (i4 = 0; i4 < [__items count]; i4++)
        {
          [[__items objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) descriptionObject {
  NSMutableString * ms = [NSMutableString stringWithString: @"Feed("];
  [ms appendString: @"feedId:"];
  [ms appendFormat: @"%qi", __feedId];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",link:"];
  [ms appendFormat: @"\"%@\"", __link];
  [ms appendString: @",description:"];
  [ms appendFormat: @"\"%@\"", __description];
  [ms appendString: @",items:"];
  [ms appendFormat: @"%@", __items];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsFeedItem

- (id) initWithItemId: (int32_t) itemId title: (NSString *) title date: (int64_t) date imageUrl: (NSString *) imageUrl
{
  self = [super init];
  __itemId = itemId;
  __itemId_isset = YES;
  __title = [title retain];
  __title_isset = YES;
  __date = date;
  __date_isset = YES;
  __imageUrl = [imageUrl retain];
  __imageUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"itemId"])
  {
    __itemId = [decoder decodeInt32ForKey: @"itemId"];
    __itemId_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [decoder decodeInt64ForKey: @"date"];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"imageUrl"])
  {
    __imageUrl = [[decoder decodeObjectForKey: @"imageUrl"] retain];
    __imageUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__itemId_isset)
  {
    [encoder encodeInt32: __itemId forKey: @"itemId"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__date_isset)
  {
    [encoder encodeInt64: __date forKey: @"date"];
  }
  if (__imageUrl_isset)
  {
    [encoder encodeObject: __imageUrl forKey: @"imageUrl"];
  }
}

- (void) dealloc
{
  [__title release];
  [__imageUrl release];
  [super dealloc];
}

- (int32_t) itemId {
  return __itemId;
}

- (void) setItemId: (int32_t) itemId {
  __itemId = itemId;
  __itemId_isset = YES;
}

- (BOOL) itemIdIsSet {
  return __itemId_isset;
}

- (void) unsetItemId {
  __itemId_isset = NO;
}

- (NSString *) title {
  return [[__title retain] autorelease];
}

- (void) setTitle: (NSString *) title {
  [title retain];
  [__title release];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release];
  __title = nil;
  __title_isset = NO;
}

- (int64_t) date {
  return __date;
}

- (void) setDate: (int64_t) date {
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  __date_isset = NO;
}

- (NSString *) imageUrl {
  return [[__imageUrl retain] autorelease];
}

- (void) setImageUrl: (NSString *) imageUrl {
  [imageUrl retain];
  [__imageUrl release];
  __imageUrl = imageUrl;
  __imageUrl_isset = YES;
}

- (BOOL) imageUrlIsSet {
  return __imageUrl_isset;
}

- (void) unsetImageUrl {
  [__imageUrl release];
  __imageUrl = nil;
  __imageUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImageUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsFeedItem"];
  if (__itemId_isset) {
    [outProtocol writeFieldBeginWithName: @"itemId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __itemId];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    [outProtocol writeFieldBeginWithName: @"date" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __date];
    [outProtocol writeFieldEnd];
  }
  if (__imageUrl_isset) {
    if (__imageUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imageUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __imageUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsFeedItem("];
  [ms appendString: @"itemId:"];
  [ms appendFormat: @"%i", __itemId];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",date:"];
  [ms appendFormat: @"%qi", __date];
  [ms appendString: @",imageUrl:"];
  [ms appendFormat: @"\"%@\"", __imageUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsFeed

- (id) initWithName: (NSString *) name items: (NSArray *) items
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __items = [items retain];
  __items_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"items"])
  {
    __items = [[decoder decodeObjectForKey: @"items"] retain];
    __items_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__items_isset)
  {
    [encoder encodeObject: __items forKey: @"items"];
  }
}

- (void) dealloc
{
  [__name release];
  [__items release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSArray *) items {
  return [[__items retain] autorelease];
}

- (void) setItems: (NSArray *) items {
  [items retain];
  [__items release];
  __items = items;
  __items_isset = YES;
}

- (BOOL) itemsIsSet {
  return __items_isset;
}

- (void) unsetItems {
  [__items release];
  __items = nil;
  __items_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NewsFeedItem *_elem7 = [[NewsFeedItem alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setItems: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsFeed"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__items_isset) {
    if (__items != nil) {
      [outProtocol writeFieldBeginWithName: @"items" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__items count]];
        int i9;
        for (i9 = 0; i9 < [__items count]; i9++)
        {
          [[__items objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsFeed("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",items:"];
  [ms appendFormat: @"%@", __items];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsFeedItemContent

- (id) initWithFeedName: (NSString *) feedName title: (NSString *) title link: (NSString *) link content: (NSString *) content imageUrl: (NSString *) imageUrl
{
  self = [super init];
  __feedName = [feedName retain];
  __feedName_isset = YES;
  __title = [title retain];
  __title_isset = YES;
  __link = [link retain];
  __link_isset = YES;
  __content = [content retain];
  __content_isset = YES;
  __imageUrl = [imageUrl retain];
  __imageUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"feedName"])
  {
    __feedName = [[decoder decodeObjectForKey: @"feedName"] retain];
    __feedName_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"link"])
  {
    __link = [[decoder decodeObjectForKey: @"link"] retain];
    __link_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"imageUrl"])
  {
    __imageUrl = [[decoder decodeObjectForKey: @"imageUrl"] retain];
    __imageUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__feedName_isset)
  {
    [encoder encodeObject: __feedName forKey: @"feedName"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__link_isset)
  {
    [encoder encodeObject: __link forKey: @"link"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__imageUrl_isset)
  {
    [encoder encodeObject: __imageUrl forKey: @"imageUrl"];
  }
}

- (void) dealloc
{
  [__feedName release];
  [__title release];
  [__link release];
  [__content release];
  [__imageUrl release];
  [super dealloc];
}

- (NSString *) feedName {
  return [[__feedName retain] autorelease];
}

- (void) setFeedName: (NSString *) feedName {
  [feedName retain];
  [__feedName release];
  __feedName = feedName;
  __feedName_isset = YES;
}

- (BOOL) feedNameIsSet {
  return __feedName_isset;
}

- (void) unsetFeedName {
  [__feedName release];
  __feedName = nil;
  __feedName_isset = NO;
}

- (NSString *) title {
  return [[__title retain] autorelease];
}

- (void) setTitle: (NSString *) title {
  [title retain];
  [__title release];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) link {
  return [[__link retain] autorelease];
}

- (void) setLink: (NSString *) link {
  [link retain];
  [__link release];
  __link = link;
  __link_isset = YES;
}

- (BOOL) linkIsSet {
  return __link_isset;
}

- (void) unsetLink {
  [__link release];
  __link = nil;
  __link_isset = NO;
}

- (NSString *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NSString *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (NSString *) imageUrl {
  return [[__imageUrl retain] autorelease];
}

- (void) setImageUrl: (NSString *) imageUrl {
  [imageUrl retain];
  [__imageUrl release];
  __imageUrl = imageUrl;
  __imageUrl_isset = YES;
}

- (BOOL) imageUrlIsSet {
  return __imageUrl_isset;
}

- (void) unsetImageUrl {
  [__imageUrl release];
  __imageUrl = nil;
  __imageUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeedName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImageUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsFeedItemContent"];
  if (__feedName_isset) {
    if (__feedName != nil) {
      [outProtocol writeFieldBeginWithName: @"feedName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __feedName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__link_isset) {
    if (__link != nil) {
      [outProtocol writeFieldBeginWithName: @"link" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __link];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imageUrl_isset) {
    if (__imageUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imageUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __imageUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsFeedItemContent("];
  [ms appendString: @"feedName:"];
  [ms appendFormat: @"\"%@\"", __feedName];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",link:"];
  [ms appendFormat: @"\"%@\"", __link];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",imageUrl:"];
  [ms appendFormat: @"\"%@\"", __imageUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsFeedsRequest

- (id) initWithLanguage: (NSString *) language generalFeedIncluded: (BOOL) generalFeedIncluded
{
  self = [super init];
  __language = [language retain];
  __language_isset = YES;
  __generalFeedIncluded = generalFeedIncluded;
  __generalFeedIncluded_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"language"])
  {
    __language = [[decoder decodeObjectForKey: @"language"] retain];
    __language_isset = YES;
  }
  if ([decoder containsValueForKey: @"generalFeedIncluded"])
  {
    __generalFeedIncluded = [decoder decodeBoolForKey: @"generalFeedIncluded"];
    __generalFeedIncluded_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__language_isset)
  {
    [encoder encodeObject: __language forKey: @"language"];
  }
  if (__generalFeedIncluded_isset)
  {
    [encoder encodeBool: __generalFeedIncluded forKey: @"generalFeedIncluded"];
  }
}

- (void) dealloc
{
  [__language release];
  [super dealloc];
}

- (NSString *) language {
  return [[__language retain] autorelease];
}

- (void) setLanguage: (NSString *) language {
  [language retain];
  [__language release];
  __language = language;
  __language_isset = YES;
}

- (BOOL) languageIsSet {
  return __language_isset;
}

- (void) unsetLanguage {
  [__language release];
  __language = nil;
  __language_isset = NO;
}

- (BOOL) generalFeedIncluded {
  return __generalFeedIncluded;
}

- (void) setGeneralFeedIncluded: (BOOL) generalFeedIncluded {
  __generalFeedIncluded = generalFeedIncluded;
  __generalFeedIncluded_isset = YES;
}

- (BOOL) generalFeedIncludedIsSet {
  return __generalFeedIncluded_isset;
}

- (void) unsetGeneralFeedIncluded {
  __generalFeedIncluded_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setGeneralFeedIncluded: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsFeedsRequest"];
  if (__language_isset) {
    if (__language != nil) {
      [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __language];
      [outProtocol writeFieldEnd];
    }
  }
  if (__generalFeedIncluded_isset) {
    [outProtocol writeFieldBeginWithName: @"generalFeedIncluded" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __generalFeedIncluded];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsFeedsRequest("];
  [ms appendString: @"language:"];
  [ms appendFormat: @"\"%@\"", __language];
  [ms appendString: @",generalFeedIncluded:"];
  [ms appendFormat: @"%i", __generalFeedIncluded];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsFeedsResponse

- (id) initWithStatusCode: (int) statusCode feeds: (NSArray *) feeds
{
  self = [super init];
  __statusCode = statusCode;
  __statusCode_isset = YES;
  __feeds = [feeds retain];
  __feeds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"feeds"])
  {
    __feeds = [[decoder decodeObjectForKey: @"feeds"] retain];
    __feeds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
  if (__feeds_isset)
  {
    [encoder encodeObject: __feeds forKey: @"feeds"];
  }
}

- (void) dealloc
{
  [__feeds release];
  [super dealloc];
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (NSArray *) feeds {
  return [[__feeds retain] autorelease];
}

- (void) setFeeds: (NSArray *) feeds {
  [feeds retain];
  [__feeds release];
  __feeds = feeds;
  __feeds_isset = YES;
}

- (BOOL) feedsIsSet {
  return __feeds_isset;
}

- (void) unsetFeeds {
  [__feeds release];
  __feeds = nil;
  __feeds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NewsFeed *_elem12 = [[NewsFeed alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release];
          }
          [inProtocol readListEnd];
          [self setFeeds: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsFeedsResponse"];
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  if (__feeds_isset) {
    if (__feeds != nil) {
      [outProtocol writeFieldBeginWithName: @"feeds" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__feeds count]];
        int i14;
        for (i14 = 0; i14 < [__feeds count]; i14++)
        {
          [[__feeds objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsFeedsResponse("];
  [ms appendString: @"statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @",feeds:"];
  [ms appendFormat: @"%@", __feeds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsFeedItemContentRequest

- (id) initWithLanguage: (NSString *) language itemId: (int32_t) itemId
{
  self = [super init];
  __language = [language retain];
  __language_isset = YES;
  __itemId = itemId;
  __itemId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"language"])
  {
    __language = [[decoder decodeObjectForKey: @"language"] retain];
    __language_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemId"])
  {
    __itemId = [decoder decodeInt32ForKey: @"itemId"];
    __itemId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__language_isset)
  {
    [encoder encodeObject: __language forKey: @"language"];
  }
  if (__itemId_isset)
  {
    [encoder encodeInt32: __itemId forKey: @"itemId"];
  }
}

- (void) dealloc
{
  [__language release];
  [super dealloc];
}

- (NSString *) language {
  return [[__language retain] autorelease];
}

- (void) setLanguage: (NSString *) language {
  [language retain];
  [__language release];
  __language = language;
  __language_isset = YES;
}

- (BOOL) languageIsSet {
  return __language_isset;
}

- (void) unsetLanguage {
  [__language release];
  __language = nil;
  __language_isset = NO;
}

- (int32_t) itemId {
  return __itemId;
}

- (void) setItemId: (int32_t) itemId {
  __itemId = itemId;
  __itemId_isset = YES;
}

- (BOOL) itemIdIsSet {
  return __itemId_isset;
}

- (void) unsetItemId {
  __itemId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsFeedItemContentRequest"];
  if (__language_isset) {
    if (__language != nil) {
      [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __language];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemId_isset) {
    [outProtocol writeFieldBeginWithName: @"itemId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __itemId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsFeedItemContentRequest("];
  [ms appendString: @"language:"];
  [ms appendFormat: @"\"%@\"", __language];
  [ms appendString: @",itemId:"];
  [ms appendFormat: @"%i", __itemId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsFeedItemContentResponse

- (id) initWithStatusCode: (int) statusCode content: (NewsFeedItemContent *) content
{
  self = [super init];
  __statusCode = statusCode;
  __statusCode_isset = YES;
  __content = [content retain];
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__content release];
  [super dealloc];
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (NewsFeedItemContent *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NewsFeedItemContent *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NewsFeedItemContent *fieldValue = [[NewsFeedItemContent alloc] init];
          [fieldValue read: inProtocol];
          [self setContent: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewsFeedItemContentResponse"];
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRUCT fieldID: 2];
      [__content write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewsFeedItemContentResponse("];
  [ms appendString: @"statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @",content:"];
  [ms appendFormat: @"%@", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getNewsItems_args : NSObject <NSCoding> {
  NSString * __language;

  BOOL __language_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=language, setter=setLanguage:) NSString * language;
#endif

- (id) initWithLanguage: (NSString *) language;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) language;
- (void) setLanguage: (NSString *) language;
- (BOOL) languageIsSet;

@end

@implementation getNewsItems_args

- (id) initWithLanguage: (NSString *) language
{
  self = [super init];
  __language = [language retain];
  __language_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"language"])
  {
    __language = [[decoder decodeObjectForKey: @"language"] retain];
    __language_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__language_isset)
  {
    [encoder encodeObject: __language forKey: @"language"];
  }
}

- (void) dealloc
{
  [__language release];
  [super dealloc];
}

- (NSString *) language {
  return [[__language retain] autorelease];
}

- (void) setLanguage: (NSString *) language {
  [language retain];
  [__language release];
  __language = language;
  __language_isset = YES;
}

- (BOOL) languageIsSet {
  return __language_isset;
}

- (void) unsetLanguage {
  [__language release];
  __language = nil;
  __language_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getNewsItems_args"];
  if (__language_isset) {
    if (__language != nil) {
      [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __language];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getNewsItems_args("];
  [ms appendString: @"language:"];
  [ms appendFormat: @"\"%@\"", __language];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetNewsItems_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetNewsItems_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NewsItem *_elem17 = [[NewsItem alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNewsItems_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i19;
        for (i19 = 0; i19 < [__success count]; i19++)
        {
          [[__success objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNewsItems_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getNewsItemContent_args : NSObject <NSCoding> {
  int64_t __newsItemId;

  BOOL __newsItemId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=newsItemId, setter=setNewsItemId:) int64_t newsItemId;
#endif

- (id) initWithNewsItemId: (int64_t) newsItemId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int64_t) newsItemId;
- (void) setNewsItemId: (int64_t) newsItemId;
- (BOOL) newsItemIdIsSet;

@end

@implementation getNewsItemContent_args

- (id) initWithNewsItemId: (int64_t) newsItemId
{
  self = [super init];
  __newsItemId = newsItemId;
  __newsItemId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"newsItemId"])
  {
    __newsItemId = [decoder decodeInt64ForKey: @"newsItemId"];
    __newsItemId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__newsItemId_isset)
  {
    [encoder encodeInt64: __newsItemId forKey: @"newsItemId"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int64_t) newsItemId {
  return __newsItemId;
}

- (void) setNewsItemId: (int64_t) newsItemId {
  __newsItemId = newsItemId;
  __newsItemId_isset = YES;
}

- (BOOL) newsItemIdIsSet {
  return __newsItemId_isset;
}

- (void) unsetNewsItemId {
  __newsItemId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNewsItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getNewsItemContent_args"];
  if (__newsItemId_isset) {
    [outProtocol writeFieldBeginWithName: @"newsItemId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __newsItemId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getNewsItemContent_args("];
  [ms appendString: @"newsItemId:"];
  [ms appendFormat: @"%qi", __newsItemId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetNewsItemContent_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) success;
- (void) setSuccess: (NSString *) success;
- (BOOL) successIsSet;

@end

@implementation GetNewsItemContent_result

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSString *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSString *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNewsItemContent_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetNewsItemContent_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getFeedUrls_args : NSObject <NSCoding> {
  NSString * __language;

  BOOL __language_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=language, setter=setLanguage:) NSString * language;
#endif

- (id) initWithLanguage: (NSString *) language;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) language;
- (void) setLanguage: (NSString *) language;
- (BOOL) languageIsSet;

@end

@implementation getFeedUrls_args

- (id) initWithLanguage: (NSString *) language
{
  self = [super init];
  __language = [language retain];
  __language_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"language"])
  {
    __language = [[decoder decodeObjectForKey: @"language"] retain];
    __language_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__language_isset)
  {
    [encoder encodeObject: __language forKey: @"language"];
  }
}

- (void) dealloc
{
  [__language release];
  [super dealloc];
}

- (NSString *) language {
  return [[__language retain] autorelease];
}

- (void) setLanguage: (NSString *) language {
  [language retain];
  [__language release];
  __language = language;
  __language_isset = YES;
}

- (BOOL) languageIsSet {
  return __language_isset;
}

- (void) unsetLanguage {
  [__language release];
  __language = nil;
  __language_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getFeedUrls_args"];
  if (__language_isset) {
    if (__language != nil) {
      [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __language];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getFeedUrls_args("];
  [ms appendString: @"language:"];
  [ms appendFormat: @"\"%@\"", __language];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetFeedUrls_result : NSObject <NSCoding> {
  NSDictionary * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSDictionary * success;
#endif

- (id) initWithSuccess: (NSDictionary *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSDictionary *) success;
- (void) setSuccess: (NSDictionary *) success;
- (BOOL) successIsSet;

@end

@implementation GetFeedUrls_result

- (id) initWithSuccess: (NSDictionary *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSDictionary *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSDictionary *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size20;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size20];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            NSString * _key22 = [inProtocol readString];
            NSString * _val23 = [inProtocol readString];
            [fieldValue setObject: _val23 forKey: _key22];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFeedUrls_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__success count]];
        NSEnumerator * _iter24 = [__success keyEnumerator];
        id key25;
        while ((key25 = [_iter24 nextObject]))
        {
          [outProtocol writeString: key25];
          [outProtocol writeString: [__success objectForKey: key25]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFeedUrls_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getFeeds_args : NSObject <NSCoding> {
  NSString * __language;

  BOOL __language_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=language, setter=setLanguage:) NSString * language;
#endif

- (id) initWithLanguage: (NSString *) language;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) language;
- (void) setLanguage: (NSString *) language;
- (BOOL) languageIsSet;

@end

@implementation getFeeds_args

- (id) initWithLanguage: (NSString *) language
{
  self = [super init];
  __language = [language retain];
  __language_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"language"])
  {
    __language = [[decoder decodeObjectForKey: @"language"] retain];
    __language_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__language_isset)
  {
    [encoder encodeObject: __language forKey: @"language"];
  }
}

- (void) dealloc
{
  [__language release];
  [super dealloc];
}

- (NSString *) language {
  return [[__language retain] autorelease];
}

- (void) setLanguage: (NSString *) language {
  [language retain];
  [__language release];
  __language = language;
  __language_isset = YES;
}

- (BOOL) languageIsSet {
  return __language_isset;
}

- (void) unsetLanguage {
  [__language release];
  __language = nil;
  __language_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getFeeds_args"];
  if (__language_isset) {
    if (__language != nil) {
      [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __language];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getFeeds_args("];
  [ms appendString: @"language:"];
  [ms appendFormat: @"\"%@\"", __language];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetFeeds_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetFeeds_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size26;
          [inProtocol readListBeginReturningElementType: NULL size: &_size26];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size26];
          int _i27;
          for (_i27 = 0; _i27 < _size26; ++_i27)
          {
            Feed *_elem28 = [[Feed alloc] init];
            [_elem28 read: inProtocol];
            [fieldValue addObject: _elem28];
            [_elem28 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFeeds_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i30;
        for (i30 = 0; i30 < [__success count]; i30++)
        {
          [[__success objectAtIndex: i30] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFeeds_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getAllFeeds_args : NSObject <NSCoding> {
  NewsFeedsRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) NewsFeedsRequest * request;
#endif

- (id) initWithRequest: (NewsFeedsRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NewsFeedsRequest *) request;
- (void) setRequest: (NewsFeedsRequest *) request;
- (BOOL) requestIsSet;

@end

@implementation getAllFeeds_args

- (id) initWithRequest: (NewsFeedsRequest *) request
{
  self = [super init];
  __request = [request retain];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release];
  [super dealloc];
}

- (NewsFeedsRequest *) request {
  return [[__request retain] autorelease];
}

- (void) setRequest: (NewsFeedsRequest *) request {
  [request retain];
  [__request release];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NewsFeedsRequest *fieldValue = [[NewsFeedsRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getAllFeeds_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getAllFeeds_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetAllFeeds_result : NSObject <NSCoding> {
  NewsFeedsResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NewsFeedsResponse * success;
#endif

- (id) initWithSuccess: (NewsFeedsResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NewsFeedsResponse *) success;
- (void) setSuccess: (NewsFeedsResponse *) success;
- (BOOL) successIsSet;

@end

@implementation GetAllFeeds_result

- (id) initWithSuccess: (NewsFeedsResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NewsFeedsResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NewsFeedsResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NewsFeedsResponse *fieldValue = [[NewsFeedsResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAllFeeds_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAllFeeds_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getFeedItemContent_args : NSObject <NSCoding> {
  NewsFeedItemContentRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) NewsFeedItemContentRequest * request;
#endif

- (id) initWithRequest: (NewsFeedItemContentRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NewsFeedItemContentRequest *) request;
- (void) setRequest: (NewsFeedItemContentRequest *) request;
- (BOOL) requestIsSet;

@end

@implementation getFeedItemContent_args

- (id) initWithRequest: (NewsFeedItemContentRequest *) request
{
  self = [super init];
  __request = [request retain];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release];
  [super dealloc];
}

- (NewsFeedItemContentRequest *) request {
  return [[__request retain] autorelease];
}

- (void) setRequest: (NewsFeedItemContentRequest *) request {
  [request retain];
  [__request release];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NewsFeedItemContentRequest *fieldValue = [[NewsFeedItemContentRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getFeedItemContent_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getFeedItemContent_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetFeedItemContent_result : NSObject <NSCoding> {
  NewsFeedItemContentResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NewsFeedItemContentResponse * success;
#endif

- (id) initWithSuccess: (NewsFeedItemContentResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NewsFeedItemContentResponse *) success;
- (void) setSuccess: (NewsFeedItemContentResponse *) success;
- (BOOL) successIsSet;

@end

@implementation GetFeedItemContent_result

- (id) initWithSuccess: (NewsFeedItemContentResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NewsFeedItemContentResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NewsFeedItemContentResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NewsFeedItemContentResponse *fieldValue = [[NewsFeedItemContentResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFeedItemContent_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFeedItemContent_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewsServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getNewsItems: (NSString *) language
{
  [outProtocol writeMessageBeginWithName: @"getNewsItems" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getNewsItems_args"];
  if (language != nil)  {
    [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 1];
    [outProtocol writeString: language];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getNewsItems
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetNewsItems_result * result = [[[GetNewsItems_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getNewsItems failed: unknown result"];
}

- (NSArray *) getNewsItems: (NSString *) language
{
  [self send_getNewsItems: language];
  return [self recv_getNewsItems];
}

- (void) send_getNewsItemContent: (int64_t) newsItemId
{
  [outProtocol writeMessageBeginWithName: @"getNewsItemContent" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getNewsItemContent_args"];
  [outProtocol writeFieldBeginWithName: @"newsItemId" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: newsItemId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_getNewsItemContent
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetNewsItemContent_result * result = [[[GetNewsItemContent_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getNewsItemContent failed: unknown result"];
}

- (NSString *) getNewsItemContent: (int64_t) newsItemId
{
  [self send_getNewsItemContent: newsItemId];
  return [self recv_getNewsItemContent];
}

- (void) send_getFeedUrls: (NSString *) language
{
  [outProtocol writeMessageBeginWithName: @"getFeedUrls" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getFeedUrls_args"];
  if (language != nil)  {
    [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 1];
    [outProtocol writeString: language];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSDictionary *) recv_getFeedUrls
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetFeedUrls_result * result = [[[GetFeedUrls_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getFeedUrls failed: unknown result"];
}

- (NSDictionary *) getFeedUrls: (NSString *) language
{
  [self send_getFeedUrls: language];
  return [self recv_getFeedUrls];
}

- (void) send_getFeeds: (NSString *) language
{
  [outProtocol writeMessageBeginWithName: @"getFeeds" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getFeeds_args"];
  if (language != nil)  {
    [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 1];
    [outProtocol writeString: language];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getFeeds
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetFeeds_result * result = [[[GetFeeds_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getFeeds failed: unknown result"];
}

- (NSArray *) getFeeds: (NSString *) language
{
  [self send_getFeeds: language];
  return [self recv_getFeeds];
}

- (void) send_getAllFeeds: (NewsFeedsRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getAllFeeds" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getAllFeeds_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NewsFeedsResponse *) recv_getAllFeeds
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetAllFeeds_result * result = [[[GetAllFeeds_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getAllFeeds failed: unknown result"];
}

- (NewsFeedsResponse *) getAllFeeds: (NewsFeedsRequest *) request
{
  [self send_getAllFeeds: request];
  return [self recv_getAllFeeds];
}

- (void) send_getFeedItemContent: (NewsFeedItemContentRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getFeedItemContent" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getFeedItemContent_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NewsFeedItemContentResponse *) recv_getFeedItemContent
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetFeedItemContent_result * result = [[[GetFeedItemContent_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getFeedItemContent failed: unknown result"];
}

- (NewsFeedItemContentResponse *) getFeedItemContent: (NewsFeedItemContentRequest *) request
{
  [self send_getFeedItemContent: request];
  return [self recv_getFeedItemContent];
}

@end

@implementation NewsServiceProcessor

- (id) initWithNewsService: (id <NewsService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_getNewsItems_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getNewsItems"];
  }
  {
    SEL s = @selector(process_getNewsItemContent_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getNewsItemContent"];
  }
  {
    SEL s = @selector(process_getFeedUrls_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getFeedUrls"];
  }
  {
    SEL s = @selector(process_getFeeds_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getFeeds"];
  }
  {
    SEL s = @selector(process_getAllFeeds_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getAllFeeds"];
  }
  {
    SEL s = @selector(process_getFeedItemContent_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getFeedItemContent"];
  }
  return self;
}

- (id<NewsService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getNewsItems_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getNewsItems_args * args = [[getNewsItems_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetNewsItems_result * result = [[GetNewsItems_result alloc] init];
  [result setSuccess: [mService getNewsItems: [args language]]];
  [outProtocol writeMessageBeginWithName: @"getNewsItems"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getNewsItemContent_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getNewsItemContent_args * args = [[getNewsItemContent_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetNewsItemContent_result * result = [[GetNewsItemContent_result alloc] init];
  [result setSuccess: [mService getNewsItemContent: [args newsItemId]]];
  [outProtocol writeMessageBeginWithName: @"getNewsItemContent"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getFeedUrls_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getFeedUrls_args * args = [[getFeedUrls_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetFeedUrls_result * result = [[GetFeedUrls_result alloc] init];
  [result setSuccess: [mService getFeedUrls: [args language]]];
  [outProtocol writeMessageBeginWithName: @"getFeedUrls"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getFeeds_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getFeeds_args * args = [[getFeeds_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetFeeds_result * result = [[GetFeeds_result alloc] init];
  [result setSuccess: [mService getFeeds: [args language]]];
  [outProtocol writeMessageBeginWithName: @"getFeeds"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getAllFeeds_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getAllFeeds_args * args = [[getAllFeeds_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetAllFeeds_result * result = [[GetAllFeeds_result alloc] init];
  [result setSuccess: [mService getAllFeeds: [args request]]];
  [outProtocol writeMessageBeginWithName: @"getAllFeeds"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getFeedItemContent_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getFeedItemContent_args * args = [[getFeedItemContent_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetFeedItemContent_result * result = [[GetFeedItemContent_result alloc] init];
  [result setSuccess: [mService getFeedItemContent: [args request]]];
  [outProtocol writeMessageBeginWithName: @"getFeedItemContent"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

