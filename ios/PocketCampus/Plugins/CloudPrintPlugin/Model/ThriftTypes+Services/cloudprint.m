/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "cloudprint.h"


@implementation cloudprintConstants
+ (void) initialize {
}
@end

@implementation CloudPrintPageRange

- (id) initWithPageFrom: (int32_t) pageFrom pageTo: (int32_t) pageTo
{
  self = [super init];
  __pageFrom = pageFrom;
  __pageFrom_isset = YES;
  __pageTo = pageTo;
  __pageTo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pageFrom"])
  {
    __pageFrom = [decoder decodeInt32ForKey: @"pageFrom"];
    __pageFrom_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageTo"])
  {
    __pageTo = [decoder decodeInt32ForKey: @"pageTo"];
    __pageTo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pageFrom_isset)
  {
    [encoder encodeInt32: __pageFrom forKey: @"pageFrom"];
  }
  if (__pageTo_isset)
  {
    [encoder encodeInt32: __pageTo forKey: @"pageTo"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) pageFrom {
  return __pageFrom;
}

- (void) setPageFrom: (int32_t) pageFrom {
  __pageFrom = pageFrom;
  __pageFrom_isset = YES;
}

- (BOOL) pageFromIsSet {
  return __pageFrom_isset;
}

- (void) unsetPageFrom {
  __pageFrom_isset = NO;
}

- (int32_t) pageTo {
  return __pageTo;
}

- (void) setPageTo: (int32_t) pageTo {
  __pageTo = pageTo;
  __pageTo_isset = YES;
}

- (BOOL) pageToIsSet {
  return __pageTo_isset;
}

- (void) unsetPageTo {
  __pageTo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageFrom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageTo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CloudPrintPageRange"];
  if (__pageFrom_isset) {
    [outProtocol writeFieldBeginWithName: @"pageFrom" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __pageFrom];
    [outProtocol writeFieldEnd];
  }
  if (__pageTo_isset) {
    [outProtocol writeFieldBeginWithName: @"pageTo" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __pageTo];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CloudPrintPageRange("];
  [ms appendString: @"pageFrom:"];
  [ms appendFormat: @"%i", __pageFrom];
  [ms appendString: @",pageTo:"];
  [ms appendFormat: @"%i", __pageTo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PrintDocumentRequest

- (id) initWithDocumentId: (int64_t) documentId doubleSided: (BOOL) doubleSided blackAndWhite: (BOOL) blackAndWhite numberOfCopies: (int32_t) numberOfCopies pageSelection: (CloudPrintPageRange *) pageSelection
{
  self = [super init];
  __documentId = documentId;
  __documentId_isset = YES;
  __doubleSided = doubleSided;
  __doubleSided_isset = YES;
  __blackAndWhite = blackAndWhite;
  __blackAndWhite_isset = YES;
  __numberOfCopies = numberOfCopies;
  __numberOfCopies_isset = YES;
  __pageSelection = [pageSelection retain];
  __pageSelection_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"documentId"])
  {
    __documentId = [decoder decodeInt64ForKey: @"documentId"];
    __documentId_isset = YES;
  }
  if ([decoder containsValueForKey: @"doubleSided"])
  {
    __doubleSided = [decoder decodeBoolForKey: @"doubleSided"];
    __doubleSided_isset = YES;
  }
  if ([decoder containsValueForKey: @"blackAndWhite"])
  {
    __blackAndWhite = [decoder decodeBoolForKey: @"blackAndWhite"];
    __blackAndWhite_isset = YES;
  }
  if ([decoder containsValueForKey: @"numberOfCopies"])
  {
    __numberOfCopies = [decoder decodeInt32ForKey: @"numberOfCopies"];
    __numberOfCopies_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageSelection"])
  {
    __pageSelection = [[decoder decodeObjectForKey: @"pageSelection"] retain];
    __pageSelection_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__documentId_isset)
  {
    [encoder encodeInt64: __documentId forKey: @"documentId"];
  }
  if (__doubleSided_isset)
  {
    [encoder encodeBool: __doubleSided forKey: @"doubleSided"];
  }
  if (__blackAndWhite_isset)
  {
    [encoder encodeBool: __blackAndWhite forKey: @"blackAndWhite"];
  }
  if (__numberOfCopies_isset)
  {
    [encoder encodeInt32: __numberOfCopies forKey: @"numberOfCopies"];
  }
  if (__pageSelection_isset)
  {
    [encoder encodeObject: __pageSelection forKey: @"pageSelection"];
  }
}

- (void) dealloc
{
  [__pageSelection release];
  [super dealloc];
}

- (int64_t) documentId {
  return __documentId;
}

- (void) setDocumentId: (int64_t) documentId {
  __documentId = documentId;
  __documentId_isset = YES;
}

- (BOOL) documentIdIsSet {
  return __documentId_isset;
}

- (void) unsetDocumentId {
  __documentId_isset = NO;
}

- (BOOL) doubleSided {
  return __doubleSided;
}

- (void) setDoubleSided: (BOOL) doubleSided {
  __doubleSided = doubleSided;
  __doubleSided_isset = YES;
}

- (BOOL) doubleSidedIsSet {
  return __doubleSided_isset;
}

- (void) unsetDoubleSided {
  __doubleSided_isset = NO;
}

- (BOOL) blackAndWhite {
  return __blackAndWhite;
}

- (void) setBlackAndWhite: (BOOL) blackAndWhite {
  __blackAndWhite = blackAndWhite;
  __blackAndWhite_isset = YES;
}

- (BOOL) blackAndWhiteIsSet {
  return __blackAndWhite_isset;
}

- (void) unsetBlackAndWhite {
  __blackAndWhite_isset = NO;
}

- (int32_t) numberOfCopies {
  return __numberOfCopies;
}

- (void) setNumberOfCopies: (int32_t) numberOfCopies {
  __numberOfCopies = numberOfCopies;
  __numberOfCopies_isset = YES;
}

- (BOOL) numberOfCopiesIsSet {
  return __numberOfCopies_isset;
}

- (void) unsetNumberOfCopies {
  __numberOfCopies_isset = NO;
}

- (CloudPrintPageRange *) pageSelection {
  return [[__pageSelection retain] autorelease];
}

- (void) setPageSelection: (CloudPrintPageRange *) pageSelection {
  [pageSelection retain];
  [__pageSelection release];
  __pageSelection = pageSelection;
  __pageSelection_isset = YES;
}

- (BOOL) pageSelectionIsSet {
  return __pageSelection_isset;
}

- (void) unsetPageSelection {
  [__pageSelection release];
  __pageSelection = nil;
  __pageSelection_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDocumentId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDoubleSided: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setBlackAndWhite: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumberOfCopies: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          CloudPrintPageRange *fieldValue = [[CloudPrintPageRange alloc] init];
          [fieldValue read: inProtocol];
          [self setPageSelection: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PrintDocumentRequest"];
  if (__documentId_isset) {
    [outProtocol writeFieldBeginWithName: @"documentId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __documentId];
    [outProtocol writeFieldEnd];
  }
  if (__doubleSided_isset) {
    [outProtocol writeFieldBeginWithName: @"doubleSided" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __doubleSided];
    [outProtocol writeFieldEnd];
  }
  if (__blackAndWhite_isset) {
    [outProtocol writeFieldBeginWithName: @"blackAndWhite" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __blackAndWhite];
    [outProtocol writeFieldEnd];
  }
  if (__numberOfCopies_isset) {
    [outProtocol writeFieldBeginWithName: @"numberOfCopies" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __numberOfCopies];
    [outProtocol writeFieldEnd];
  }
  if (__pageSelection_isset) {
    if (__pageSelection != nil) {
      [outProtocol writeFieldBeginWithName: @"pageSelection" type: TType_STRUCT fieldID: 5];
      [__pageSelection write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PrintDocumentRequest("];
  [ms appendString: @"documentId:"];
  [ms appendFormat: @"%qi", __documentId];
  [ms appendString: @",doubleSided:"];
  [ms appendFormat: @"%i", __doubleSided];
  [ms appendString: @",blackAndWhite:"];
  [ms appendFormat: @"%i", __blackAndWhite];
  [ms appendString: @",numberOfCopies:"];
  [ms appendFormat: @"%i", __numberOfCopies];
  [ms appendString: @",pageSelection:"];
  [ms appendFormat: @"%@", __pageSelection];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PrintDocumentResponse

- (id) initWithStatusCode: (int) statusCode
{
  self = [super init];
  __statusCode = statusCode;
  __statusCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PrintDocumentResponse"];
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PrintDocumentResponse("];
  [ms appendString: @"statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface printDocument_args : NSObject <NSCoding> {
  PrintDocumentRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) PrintDocumentRequest * request;
#endif

- (id) initWithRequest: (PrintDocumentRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (PrintDocumentRequest *) request;
- (void) setRequest: (PrintDocumentRequest *) request;
- (BOOL) requestIsSet;

@end

@implementation printDocument_args

- (id) initWithRequest: (PrintDocumentRequest *) request
{
  self = [super init];
  __request = [request retain];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release];
  [super dealloc];
}

- (PrintDocumentRequest *) request {
  return [[__request retain] autorelease];
}

- (void) setRequest: (PrintDocumentRequest *) request {
  [request retain];
  [__request release];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          PrintDocumentRequest *fieldValue = [[PrintDocumentRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"printDocument_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"printDocument_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PrintDocument_result : NSObject <NSCoding> {
  PrintDocumentResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) PrintDocumentResponse * success;
#endif

- (id) initWithSuccess: (PrintDocumentResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (PrintDocumentResponse *) success;
- (void) setSuccess: (PrintDocumentResponse *) success;
- (BOOL) successIsSet;

@end

@implementation PrintDocument_result

- (id) initWithSuccess: (PrintDocumentResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (PrintDocumentResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (PrintDocumentResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          PrintDocumentResponse *fieldValue = [[PrintDocumentResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PrintDocument_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PrintDocument_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CloudPrintServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_printDocument: (PrintDocumentRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"printDocument" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"printDocument_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (PrintDocumentResponse *) recv_printDocument
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  PrintDocument_result * result = [[[PrintDocument_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"printDocument failed: unknown result"];
}

- (PrintDocumentResponse *) printDocument: (PrintDocumentRequest *) request
{
  [self send_printDocument: request];
  return [self recv_printDocument];
}

@end

@implementation CloudPrintServiceProcessor

- (id) initWithCloudPrintService: (id <CloudPrintService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_printDocument_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"printDocument"];
  }
  return self;
}

- (id<CloudPrintService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_printDocument_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  printDocument_args * args = [[printDocument_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  PrintDocument_result * result = [[PrintDocument_result alloc] init];
  [result setSuccess: [mService printDocument: [args request]]];
  [outProtocol writeMessageBeginWithName: @"printDocument"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

