/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "events.h"

@implementation EventItem

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEventId: (int64_t) eventId startDate: (int64_t) startDate endDate: (int64_t) endDate fullDay: (BOOL) fullDay eventPicture: (NSString *) eventPicture eventTitle: (NSString *) eventTitle eventPlace: (NSString *) eventPlace eventSpeaker: (NSString *) eventSpeaker eventDetails: (NSString *) eventDetails eventThumbnail: (NSString *) eventThumbnail eventUri: (NSString *) eventUri vcalUid: (NSString *) vcalUid locationHref: (NSString *) locationHref detailsLink: (NSString *) detailsLink secondLine: (NSString *) secondLine timeSnippet: (NSString *) timeSnippet hideTitle: (BOOL) hideTitle hideThumbnail: (BOOL) hideThumbnail hideEventInfo: (BOOL) hideEventInfo eventCateg: (int32_t) eventCateg eventTags: (NSMutableArray *) eventTags childrenPools: (NSMutableArray *) childrenPools parentPool: (int64_t) parentPool
{
  self = [super init];
  __eventId = eventId;
  __eventId_isset = YES;
  __startDate = startDate;
  __startDate_isset = YES;
  __endDate = endDate;
  __endDate_isset = YES;
  __fullDay = fullDay;
  __fullDay_isset = YES;
  __eventPicture = [eventPicture retain_stub];
  __eventPicture_isset = YES;
  __eventTitle = [eventTitle retain_stub];
  __eventTitle_isset = YES;
  __eventPlace = [eventPlace retain_stub];
  __eventPlace_isset = YES;
  __eventSpeaker = [eventSpeaker retain_stub];
  __eventSpeaker_isset = YES;
  __eventDetails = [eventDetails retain_stub];
  __eventDetails_isset = YES;
  __eventThumbnail = [eventThumbnail retain_stub];
  __eventThumbnail_isset = YES;
  __eventUri = [eventUri retain_stub];
  __eventUri_isset = YES;
  __vcalUid = [vcalUid retain_stub];
  __vcalUid_isset = YES;
  __locationHref = [locationHref retain_stub];
  __locationHref_isset = YES;
  __detailsLink = [detailsLink retain_stub];
  __detailsLink_isset = YES;
  __secondLine = [secondLine retain_stub];
  __secondLine_isset = YES;
  __timeSnippet = [timeSnippet retain_stub];
  __timeSnippet_isset = YES;
  __hideTitle = hideTitle;
  __hideTitle_isset = YES;
  __hideThumbnail = hideThumbnail;
  __hideThumbnail_isset = YES;
  __hideEventInfo = hideEventInfo;
  __hideEventInfo_isset = YES;
  __eventCateg = eventCateg;
  __eventCateg_isset = YES;
  __eventTags = [eventTags retain_stub];
  __eventTags_isset = YES;
  __childrenPools = [childrenPools retain_stub];
  __childrenPools_isset = YES;
  __parentPool = parentPool;
  __parentPool_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"eventId"])
  {
    __eventId = [decoder decodeInt64ForKey: @"eventId"];
    __eventId_isset = YES;
  }
  if ([decoder containsValueForKey: @"startDate"])
  {
    __startDate = [decoder decodeInt64ForKey: @"startDate"];
    __startDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"endDate"])
  {
    __endDate = [decoder decodeInt64ForKey: @"endDate"];
    __endDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"fullDay"])
  {
    __fullDay = [decoder decodeBoolForKey: @"fullDay"];
    __fullDay_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventPicture"])
  {
    __eventPicture = [[decoder decodeObjectForKey: @"eventPicture"] retain_stub];
    __eventPicture_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventTitle"])
  {
    __eventTitle = [[decoder decodeObjectForKey: @"eventTitle"] retain_stub];
    __eventTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventPlace"])
  {
    __eventPlace = [[decoder decodeObjectForKey: @"eventPlace"] retain_stub];
    __eventPlace_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventSpeaker"])
  {
    __eventSpeaker = [[decoder decodeObjectForKey: @"eventSpeaker"] retain_stub];
    __eventSpeaker_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventDetails"])
  {
    __eventDetails = [[decoder decodeObjectForKey: @"eventDetails"] retain_stub];
    __eventDetails_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventThumbnail"])
  {
    __eventThumbnail = [[decoder decodeObjectForKey: @"eventThumbnail"] retain_stub];
    __eventThumbnail_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventUri"])
  {
    __eventUri = [[decoder decodeObjectForKey: @"eventUri"] retain_stub];
    __eventUri_isset = YES;
  }
  if ([decoder containsValueForKey: @"vcalUid"])
  {
    __vcalUid = [[decoder decodeObjectForKey: @"vcalUid"] retain_stub];
    __vcalUid_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationHref"])
  {
    __locationHref = [[decoder decodeObjectForKey: @"locationHref"] retain_stub];
    __locationHref_isset = YES;
  }
  if ([decoder containsValueForKey: @"detailsLink"])
  {
    __detailsLink = [[decoder decodeObjectForKey: @"detailsLink"] retain_stub];
    __detailsLink_isset = YES;
  }
  if ([decoder containsValueForKey: @"secondLine"])
  {
    __secondLine = [[decoder decodeObjectForKey: @"secondLine"] retain_stub];
    __secondLine_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeSnippet"])
  {
    __timeSnippet = [[decoder decodeObjectForKey: @"timeSnippet"] retain_stub];
    __timeSnippet_isset = YES;
  }
  if ([decoder containsValueForKey: @"hideTitle"])
  {
    __hideTitle = [decoder decodeBoolForKey: @"hideTitle"];
    __hideTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"hideThumbnail"])
  {
    __hideThumbnail = [decoder decodeBoolForKey: @"hideThumbnail"];
    __hideThumbnail_isset = YES;
  }
  if ([decoder containsValueForKey: @"hideEventInfo"])
  {
    __hideEventInfo = [decoder decodeBoolForKey: @"hideEventInfo"];
    __hideEventInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventCateg"])
  {
    __eventCateg = [decoder decodeInt32ForKey: @"eventCateg"];
    __eventCateg_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventTags"])
  {
    __eventTags = [[decoder decodeObjectForKey: @"eventTags"] retain_stub];
    __eventTags_isset = YES;
  }
  if ([decoder containsValueForKey: @"childrenPools"])
  {
    __childrenPools = [[decoder decodeObjectForKey: @"childrenPools"] retain_stub];
    __childrenPools_isset = YES;
  }
  if ([decoder containsValueForKey: @"parentPool"])
  {
    __parentPool = [decoder decodeInt64ForKey: @"parentPool"];
    __parentPool_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__eventId_isset)
  {
    [encoder encodeInt64: __eventId forKey: @"eventId"];
  }
  if (__startDate_isset)
  {
    [encoder encodeInt64: __startDate forKey: @"startDate"];
  }
  if (__endDate_isset)
  {
    [encoder encodeInt64: __endDate forKey: @"endDate"];
  }
  if (__fullDay_isset)
  {
    [encoder encodeBool: __fullDay forKey: @"fullDay"];
  }
  if (__eventPicture_isset)
  {
    [encoder encodeObject: __eventPicture forKey: @"eventPicture"];
  }
  if (__eventTitle_isset)
  {
    [encoder encodeObject: __eventTitle forKey: @"eventTitle"];
  }
  if (__eventPlace_isset)
  {
    [encoder encodeObject: __eventPlace forKey: @"eventPlace"];
  }
  if (__eventSpeaker_isset)
  {
    [encoder encodeObject: __eventSpeaker forKey: @"eventSpeaker"];
  }
  if (__eventDetails_isset)
  {
    [encoder encodeObject: __eventDetails forKey: @"eventDetails"];
  }
  if (__eventThumbnail_isset)
  {
    [encoder encodeObject: __eventThumbnail forKey: @"eventThumbnail"];
  }
  if (__eventUri_isset)
  {
    [encoder encodeObject: __eventUri forKey: @"eventUri"];
  }
  if (__vcalUid_isset)
  {
    [encoder encodeObject: __vcalUid forKey: @"vcalUid"];
  }
  if (__locationHref_isset)
  {
    [encoder encodeObject: __locationHref forKey: @"locationHref"];
  }
  if (__detailsLink_isset)
  {
    [encoder encodeObject: __detailsLink forKey: @"detailsLink"];
  }
  if (__secondLine_isset)
  {
    [encoder encodeObject: __secondLine forKey: @"secondLine"];
  }
  if (__timeSnippet_isset)
  {
    [encoder encodeObject: __timeSnippet forKey: @"timeSnippet"];
  }
  if (__hideTitle_isset)
  {
    [encoder encodeBool: __hideTitle forKey: @"hideTitle"];
  }
  if (__hideThumbnail_isset)
  {
    [encoder encodeBool: __hideThumbnail forKey: @"hideThumbnail"];
  }
  if (__hideEventInfo_isset)
  {
    [encoder encodeBool: __hideEventInfo forKey: @"hideEventInfo"];
  }
  if (__eventCateg_isset)
  {
    [encoder encodeInt32: __eventCateg forKey: @"eventCateg"];
  }
  if (__eventTags_isset)
  {
    [encoder encodeObject: __eventTags forKey: @"eventTags"];
  }
  if (__childrenPools_isset)
  {
    [encoder encodeObject: __childrenPools forKey: @"childrenPools"];
  }
  if (__parentPool_isset)
  {
    [encoder encodeInt64: __parentPool forKey: @"parentPool"];
  }
}

- (void) dealloc
{
  [__eventPicture release_stub];
  [__eventTitle release_stub];
  [__eventPlace release_stub];
  [__eventSpeaker release_stub];
  [__eventDetails release_stub];
  [__eventThumbnail release_stub];
  [__eventUri release_stub];
  [__vcalUid release_stub];
  [__locationHref release_stub];
  [__detailsLink release_stub];
  [__secondLine release_stub];
  [__timeSnippet release_stub];
  [__eventTags release_stub];
  [__childrenPools release_stub];
  [super dealloc_stub];
}

- (int64_t) eventId {
  return __eventId;
}

- (void) setEventId: (int64_t) eventId {
  __eventId = eventId;
  __eventId_isset = YES;
}

- (BOOL) eventIdIsSet {
  return __eventId_isset;
}

- (void) unsetEventId {
  __eventId_isset = NO;
}

- (int64_t) startDate {
  return __startDate;
}

- (void) setStartDate: (int64_t) startDate {
  __startDate = startDate;
  __startDate_isset = YES;
}

- (BOOL) startDateIsSet {
  return __startDate_isset;
}

- (void) unsetStartDate {
  __startDate_isset = NO;
}

- (int64_t) endDate {
  return __endDate;
}

- (void) setEndDate: (int64_t) endDate {
  __endDate = endDate;
  __endDate_isset = YES;
}

- (BOOL) endDateIsSet {
  return __endDate_isset;
}

- (void) unsetEndDate {
  __endDate_isset = NO;
}

- (BOOL) fullDay {
  return __fullDay;
}

- (void) setFullDay: (BOOL) fullDay {
  __fullDay = fullDay;
  __fullDay_isset = YES;
}

- (BOOL) fullDayIsSet {
  return __fullDay_isset;
}

- (void) unsetFullDay {
  __fullDay_isset = NO;
}

- (NSString *) eventPicture {
  return [[__eventPicture retain_stub] autorelease_stub];
}

- (void) setEventPicture: (NSString *) eventPicture {
  [eventPicture retain_stub];
  [__eventPicture release_stub];
  __eventPicture = eventPicture;
  __eventPicture_isset = YES;
}

- (BOOL) eventPictureIsSet {
  return __eventPicture_isset;
}

- (void) unsetEventPicture {
  [__eventPicture release_stub];
  __eventPicture = nil;
  __eventPicture_isset = NO;
}

- (NSString *) eventTitle {
  return [[__eventTitle retain_stub] autorelease_stub];
}

- (void) setEventTitle: (NSString *) eventTitle {
  [eventTitle retain_stub];
  [__eventTitle release_stub];
  __eventTitle = eventTitle;
  __eventTitle_isset = YES;
}

- (BOOL) eventTitleIsSet {
  return __eventTitle_isset;
}

- (void) unsetEventTitle {
  [__eventTitle release_stub];
  __eventTitle = nil;
  __eventTitle_isset = NO;
}

- (NSString *) eventPlace {
  return [[__eventPlace retain_stub] autorelease_stub];
}

- (void) setEventPlace: (NSString *) eventPlace {
  [eventPlace retain_stub];
  [__eventPlace release_stub];
  __eventPlace = eventPlace;
  __eventPlace_isset = YES;
}

- (BOOL) eventPlaceIsSet {
  return __eventPlace_isset;
}

- (void) unsetEventPlace {
  [__eventPlace release_stub];
  __eventPlace = nil;
  __eventPlace_isset = NO;
}

- (NSString *) eventSpeaker {
  return [[__eventSpeaker retain_stub] autorelease_stub];
}

- (void) setEventSpeaker: (NSString *) eventSpeaker {
  [eventSpeaker retain_stub];
  [__eventSpeaker release_stub];
  __eventSpeaker = eventSpeaker;
  __eventSpeaker_isset = YES;
}

- (BOOL) eventSpeakerIsSet {
  return __eventSpeaker_isset;
}

- (void) unsetEventSpeaker {
  [__eventSpeaker release_stub];
  __eventSpeaker = nil;
  __eventSpeaker_isset = NO;
}

- (NSString *) eventDetails {
  return [[__eventDetails retain_stub] autorelease_stub];
}

- (void) setEventDetails: (NSString *) eventDetails {
  [eventDetails retain_stub];
  [__eventDetails release_stub];
  __eventDetails = eventDetails;
  __eventDetails_isset = YES;
}

- (BOOL) eventDetailsIsSet {
  return __eventDetails_isset;
}

- (void) unsetEventDetails {
  [__eventDetails release_stub];
  __eventDetails = nil;
  __eventDetails_isset = NO;
}

- (NSString *) eventThumbnail {
  return [[__eventThumbnail retain_stub] autorelease_stub];
}

- (void) setEventThumbnail: (NSString *) eventThumbnail {
  [eventThumbnail retain_stub];
  [__eventThumbnail release_stub];
  __eventThumbnail = eventThumbnail;
  __eventThumbnail_isset = YES;
}

- (BOOL) eventThumbnailIsSet {
  return __eventThumbnail_isset;
}

- (void) unsetEventThumbnail {
  [__eventThumbnail release_stub];
  __eventThumbnail = nil;
  __eventThumbnail_isset = NO;
}

- (NSString *) eventUri {
  return [[__eventUri retain_stub] autorelease_stub];
}

- (void) setEventUri: (NSString *) eventUri {
  [eventUri retain_stub];
  [__eventUri release_stub];
  __eventUri = eventUri;
  __eventUri_isset = YES;
}

- (BOOL) eventUriIsSet {
  return __eventUri_isset;
}

- (void) unsetEventUri {
  [__eventUri release_stub];
  __eventUri = nil;
  __eventUri_isset = NO;
}

- (NSString *) vcalUid {
  return [[__vcalUid retain_stub] autorelease_stub];
}

- (void) setVcalUid: (NSString *) vcalUid {
  [vcalUid retain_stub];
  [__vcalUid release_stub];
  __vcalUid = vcalUid;
  __vcalUid_isset = YES;
}

- (BOOL) vcalUidIsSet {
  return __vcalUid_isset;
}

- (void) unsetVcalUid {
  [__vcalUid release_stub];
  __vcalUid = nil;
  __vcalUid_isset = NO;
}

- (NSString *) locationHref {
  return [[__locationHref retain_stub] autorelease_stub];
}

- (void) setLocationHref: (NSString *) locationHref {
  [locationHref retain_stub];
  [__locationHref release_stub];
  __locationHref = locationHref;
  __locationHref_isset = YES;
}

- (BOOL) locationHrefIsSet {
  return __locationHref_isset;
}

- (void) unsetLocationHref {
  [__locationHref release_stub];
  __locationHref = nil;
  __locationHref_isset = NO;
}

- (NSString *) detailsLink {
  return [[__detailsLink retain_stub] autorelease_stub];
}

- (void) setDetailsLink: (NSString *) detailsLink {
  [detailsLink retain_stub];
  [__detailsLink release_stub];
  __detailsLink = detailsLink;
  __detailsLink_isset = YES;
}

- (BOOL) detailsLinkIsSet {
  return __detailsLink_isset;
}

- (void) unsetDetailsLink {
  [__detailsLink release_stub];
  __detailsLink = nil;
  __detailsLink_isset = NO;
}

- (NSString *) secondLine {
  return [[__secondLine retain_stub] autorelease_stub];
}

- (void) setSecondLine: (NSString *) secondLine {
  [secondLine retain_stub];
  [__secondLine release_stub];
  __secondLine = secondLine;
  __secondLine_isset = YES;
}

- (BOOL) secondLineIsSet {
  return __secondLine_isset;
}

- (void) unsetSecondLine {
  [__secondLine release_stub];
  __secondLine = nil;
  __secondLine_isset = NO;
}

- (NSString *) timeSnippet {
  return [[__timeSnippet retain_stub] autorelease_stub];
}

- (void) setTimeSnippet: (NSString *) timeSnippet {
  [timeSnippet retain_stub];
  [__timeSnippet release_stub];
  __timeSnippet = timeSnippet;
  __timeSnippet_isset = YES;
}

- (BOOL) timeSnippetIsSet {
  return __timeSnippet_isset;
}

- (void) unsetTimeSnippet {
  [__timeSnippet release_stub];
  __timeSnippet = nil;
  __timeSnippet_isset = NO;
}

- (BOOL) hideTitle {
  return __hideTitle;
}

- (void) setHideTitle: (BOOL) hideTitle {
  __hideTitle = hideTitle;
  __hideTitle_isset = YES;
}

- (BOOL) hideTitleIsSet {
  return __hideTitle_isset;
}

- (void) unsetHideTitle {
  __hideTitle_isset = NO;
}

- (BOOL) hideThumbnail {
  return __hideThumbnail;
}

- (void) setHideThumbnail: (BOOL) hideThumbnail {
  __hideThumbnail = hideThumbnail;
  __hideThumbnail_isset = YES;
}

- (BOOL) hideThumbnailIsSet {
  return __hideThumbnail_isset;
}

- (void) unsetHideThumbnail {
  __hideThumbnail_isset = NO;
}

- (BOOL) hideEventInfo {
  return __hideEventInfo;
}

- (void) setHideEventInfo: (BOOL) hideEventInfo {
  __hideEventInfo = hideEventInfo;
  __hideEventInfo_isset = YES;
}

- (BOOL) hideEventInfoIsSet {
  return __hideEventInfo_isset;
}

- (void) unsetHideEventInfo {
  __hideEventInfo_isset = NO;
}

- (int32_t) eventCateg {
  return __eventCateg;
}

- (void) setEventCateg: (int32_t) eventCateg {
  __eventCateg = eventCateg;
  __eventCateg_isset = YES;
}

- (BOOL) eventCategIsSet {
  return __eventCateg_isset;
}

- (void) unsetEventCateg {
  __eventCateg_isset = NO;
}

- (NSMutableArray *) eventTags {
  return [[__eventTags retain_stub] autorelease_stub];
}

- (void) setEventTags: (NSMutableArray *) eventTags {
  [eventTags retain_stub];
  [__eventTags release_stub];
  __eventTags = eventTags;
  __eventTags_isset = YES;
}

- (BOOL) eventTagsIsSet {
  return __eventTags_isset;
}

- (void) unsetEventTags {
  [__eventTags release_stub];
  __eventTags = nil;
  __eventTags_isset = NO;
}

- (NSMutableArray *) childrenPools {
  return [[__childrenPools retain_stub] autorelease_stub];
}

- (void) setChildrenPools: (NSMutableArray *) childrenPools {
  [childrenPools retain_stub];
  [__childrenPools release_stub];
  __childrenPools = childrenPools;
  __childrenPools_isset = YES;
}

- (BOOL) childrenPoolsIsSet {
  return __childrenPools_isset;
}

- (void) unsetChildrenPools {
  [__childrenPools release_stub];
  __childrenPools = nil;
  __childrenPools_isset = NO;
}

- (int64_t) parentPool {
  return __parentPool;
}

- (void) setParentPool: (int64_t) parentPool {
  __parentPool = parentPool;
  __parentPool_isset = YES;
}

- (BOOL) parentPoolIsSet {
  return __parentPool_isset;
}

- (void) unsetParentPool {
  __parentPool_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEventId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEndDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFullDay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEventPicture: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEventTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEventPlace: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEventSpeaker: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEventDetails: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEventThumbnail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEventUri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVcalUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocationHref: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDetailsLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSecondLine: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeSnippet: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHideTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHideThumbnail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHideEventInfo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEventCateg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setEventTags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            int64_t _elem5 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem5]];
          }
          [inProtocol readListEnd];
          [self setChildrenPools: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setParentPool: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventItem"];
  if (__eventId_isset) {
    [outProtocol writeFieldBeginWithName: @"eventId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __eventId];
    [outProtocol writeFieldEnd];
  }
  if (__startDate_isset) {
    [outProtocol writeFieldBeginWithName: @"startDate" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __startDate];
    [outProtocol writeFieldEnd];
  }
  if (__endDate_isset) {
    [outProtocol writeFieldBeginWithName: @"endDate" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __endDate];
    [outProtocol writeFieldEnd];
  }
  if (__fullDay_isset) {
    [outProtocol writeFieldBeginWithName: @"fullDay" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __fullDay];
    [outProtocol writeFieldEnd];
  }
  if (__eventPicture_isset) {
    if (__eventPicture != nil) {
      [outProtocol writeFieldBeginWithName: @"eventPicture" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __eventPicture];
      [outProtocol writeFieldEnd];
    }
  }
  if (__eventTitle_isset) {
    if (__eventTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"eventTitle" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __eventTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__eventPlace_isset) {
    if (__eventPlace != nil) {
      [outProtocol writeFieldBeginWithName: @"eventPlace" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __eventPlace];
      [outProtocol writeFieldEnd];
    }
  }
  if (__eventSpeaker_isset) {
    if (__eventSpeaker != nil) {
      [outProtocol writeFieldBeginWithName: @"eventSpeaker" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __eventSpeaker];
      [outProtocol writeFieldEnd];
    }
  }
  if (__eventDetails_isset) {
    if (__eventDetails != nil) {
      [outProtocol writeFieldBeginWithName: @"eventDetails" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __eventDetails];
      [outProtocol writeFieldEnd];
    }
  }
  if (__eventThumbnail_isset) {
    if (__eventThumbnail != nil) {
      [outProtocol writeFieldBeginWithName: @"eventThumbnail" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __eventThumbnail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__eventUri_isset) {
    if (__eventUri != nil) {
      [outProtocol writeFieldBeginWithName: @"eventUri" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __eventUri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__vcalUid_isset) {
    if (__vcalUid != nil) {
      [outProtocol writeFieldBeginWithName: @"vcalUid" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __vcalUid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locationHref_isset) {
    if (__locationHref != nil) {
      [outProtocol writeFieldBeginWithName: @"locationHref" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __locationHref];
      [outProtocol writeFieldEnd];
    }
  }
  if (__detailsLink_isset) {
    if (__detailsLink != nil) {
      [outProtocol writeFieldBeginWithName: @"detailsLink" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __detailsLink];
      [outProtocol writeFieldEnd];
    }
  }
  if (__secondLine_isset) {
    if (__secondLine != nil) {
      [outProtocol writeFieldBeginWithName: @"secondLine" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __secondLine];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeSnippet_isset) {
    if (__timeSnippet != nil) {
      [outProtocol writeFieldBeginWithName: @"timeSnippet" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __timeSnippet];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hideTitle_isset) {
    [outProtocol writeFieldBeginWithName: @"hideTitle" type: TType_BOOL fieldID: 21];
    [outProtocol writeBool: __hideTitle];
    [outProtocol writeFieldEnd];
  }
  if (__hideThumbnail_isset) {
    [outProtocol writeFieldBeginWithName: @"hideThumbnail" type: TType_BOOL fieldID: 22];
    [outProtocol writeBool: __hideThumbnail];
    [outProtocol writeFieldEnd];
  }
  if (__hideEventInfo_isset) {
    [outProtocol writeFieldBeginWithName: @"hideEventInfo" type: TType_BOOL fieldID: 23];
    [outProtocol writeBool: __hideEventInfo];
    [outProtocol writeFieldEnd];
  }
  if (__eventCateg_isset) {
    [outProtocol writeFieldBeginWithName: @"eventCateg" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __eventCateg];
    [outProtocol writeFieldEnd];
  }
  if (__eventTags_isset) {
    if (__eventTags != nil) {
      [outProtocol writeFieldBeginWithName: @"eventTags" type: TType_LIST fieldID: 15];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__eventTags count]];
        int idx7;
        for (idx7 = 0; idx7 < [__eventTags count]; idx7++)
        {
          [outProtocol writeString: [__eventTags objectAtIndex: idx7]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__childrenPools_isset) {
    if (__childrenPools != nil) {
      [outProtocol writeFieldBeginWithName: @"childrenPools" type: TType_LIST fieldID: 30];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__childrenPools count]];
        int idx9;
        for (idx9 = 0; idx9 < [__childrenPools count]; idx9++)
        {
          [outProtocol writeI64: [[__childrenPools objectAtIndex: idx9] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__parentPool_isset) {
    [outProtocol writeFieldBeginWithName: @"parentPool" type: TType_I64 fieldID: 31];
    [outProtocol writeI64: __parentPool];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__eventId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'eventId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EventItem("];
  [ms appendString: @"eventId:"];
  [ms appendFormat: @"%qi", __eventId];
  [ms appendString: @",startDate:"];
  [ms appendFormat: @"%qi", __startDate];
  [ms appendString: @",endDate:"];
  [ms appendFormat: @"%qi", __endDate];
  [ms appendString: @",fullDay:"];
  [ms appendFormat: @"%i", __fullDay];
  [ms appendString: @",eventPicture:"];
  [ms appendFormat: @"\"%@\"", __eventPicture];
  [ms appendString: @",eventTitle:"];
  [ms appendFormat: @"\"%@\"", __eventTitle];
  [ms appendString: @",eventPlace:"];
  [ms appendFormat: @"\"%@\"", __eventPlace];
  [ms appendString: @",eventSpeaker:"];
  [ms appendFormat: @"\"%@\"", __eventSpeaker];
  [ms appendString: @",eventDetails:"];
  [ms appendFormat: @"\"%@\"", __eventDetails];
  [ms appendString: @",eventThumbnail:"];
  [ms appendFormat: @"\"%@\"", __eventThumbnail];
  [ms appendString: @",eventUri:"];
  [ms appendFormat: @"\"%@\"", __eventUri];
  [ms appendString: @",vcalUid:"];
  [ms appendFormat: @"\"%@\"", __vcalUid];
  [ms appendString: @",locationHref:"];
  [ms appendFormat: @"\"%@\"", __locationHref];
  [ms appendString: @",detailsLink:"];
  [ms appendFormat: @"\"%@\"", __detailsLink];
  [ms appendString: @",secondLine:"];
  [ms appendFormat: @"\"%@\"", __secondLine];
  [ms appendString: @",timeSnippet:"];
  [ms appendFormat: @"\"%@\"", __timeSnippet];
  [ms appendString: @",hideTitle:"];
  [ms appendFormat: @"%i", __hideTitle];
  [ms appendString: @",hideThumbnail:"];
  [ms appendFormat: @"%i", __hideThumbnail];
  [ms appendString: @",hideEventInfo:"];
  [ms appendFormat: @"%i", __hideEventInfo];
  [ms appendString: @",eventCateg:"];
  [ms appendFormat: @"%i", __eventCateg];
  [ms appendString: @",eventTags:"];
  [ms appendFormat: @"%@", __eventTags];
  [ms appendString: @",childrenPools:"];
  [ms appendFormat: @"%@", __childrenPools];
  [ms appendString: @",parentPool:"];
  [ms appendFormat: @"%qi", __parentPool];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EventPool

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPoolId: (int64_t) poolId poolPicture: (NSString *) poolPicture poolTitle: (NSString *) poolTitle poolPlace: (NSString *) poolPlace poolDetails: (NSString *) poolDetails disableStar: (BOOL) disableStar disableFilterByCateg: (BOOL) disableFilterByCateg disableFilterByTags: (BOOL) disableFilterByTags enableScan: (BOOL) enableScan noResultText: (NSString *) noResultText refreshOnBack: (BOOL) refreshOnBack sendStarredItems: (BOOL) sendStarredItems overrideLink: (NSString *) overrideLink childrenEvents: (NSMutableArray *) childrenEvents parentEvent: (int64_t) parentEvent
{
  self = [super init];
  __poolId = poolId;
  __poolId_isset = YES;
  __poolPicture = [poolPicture retain_stub];
  __poolPicture_isset = YES;
  __poolTitle = [poolTitle retain_stub];
  __poolTitle_isset = YES;
  __poolPlace = [poolPlace retain_stub];
  __poolPlace_isset = YES;
  __poolDetails = [poolDetails retain_stub];
  __poolDetails_isset = YES;
  __disableStar = disableStar;
  __disableStar_isset = YES;
  __disableFilterByCateg = disableFilterByCateg;
  __disableFilterByCateg_isset = YES;
  __disableFilterByTags = disableFilterByTags;
  __disableFilterByTags_isset = YES;
  __enableScan = enableScan;
  __enableScan_isset = YES;
  __noResultText = [noResultText retain_stub];
  __noResultText_isset = YES;
  __refreshOnBack = refreshOnBack;
  __refreshOnBack_isset = YES;
  __sendStarredItems = sendStarredItems;
  __sendStarredItems_isset = YES;
  __overrideLink = [overrideLink retain_stub];
  __overrideLink_isset = YES;
  __childrenEvents = [childrenEvents retain_stub];
  __childrenEvents_isset = YES;
  __parentEvent = parentEvent;
  __parentEvent_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"poolId"])
  {
    __poolId = [decoder decodeInt64ForKey: @"poolId"];
    __poolId_isset = YES;
  }
  if ([decoder containsValueForKey: @"poolPicture"])
  {
    __poolPicture = [[decoder decodeObjectForKey: @"poolPicture"] retain_stub];
    __poolPicture_isset = YES;
  }
  if ([decoder containsValueForKey: @"poolTitle"])
  {
    __poolTitle = [[decoder decodeObjectForKey: @"poolTitle"] retain_stub];
    __poolTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"poolPlace"])
  {
    __poolPlace = [[decoder decodeObjectForKey: @"poolPlace"] retain_stub];
    __poolPlace_isset = YES;
  }
  if ([decoder containsValueForKey: @"poolDetails"])
  {
    __poolDetails = [[decoder decodeObjectForKey: @"poolDetails"] retain_stub];
    __poolDetails_isset = YES;
  }
  if ([decoder containsValueForKey: @"disableStar"])
  {
    __disableStar = [decoder decodeBoolForKey: @"disableStar"];
    __disableStar_isset = YES;
  }
  if ([decoder containsValueForKey: @"disableFilterByCateg"])
  {
    __disableFilterByCateg = [decoder decodeBoolForKey: @"disableFilterByCateg"];
    __disableFilterByCateg_isset = YES;
  }
  if ([decoder containsValueForKey: @"disableFilterByTags"])
  {
    __disableFilterByTags = [decoder decodeBoolForKey: @"disableFilterByTags"];
    __disableFilterByTags_isset = YES;
  }
  if ([decoder containsValueForKey: @"enableScan"])
  {
    __enableScan = [decoder decodeBoolForKey: @"enableScan"];
    __enableScan_isset = YES;
  }
  if ([decoder containsValueForKey: @"noResultText"])
  {
    __noResultText = [[decoder decodeObjectForKey: @"noResultText"] retain_stub];
    __noResultText_isset = YES;
  }
  if ([decoder containsValueForKey: @"refreshOnBack"])
  {
    __refreshOnBack = [decoder decodeBoolForKey: @"refreshOnBack"];
    __refreshOnBack_isset = YES;
  }
  if ([decoder containsValueForKey: @"sendStarredItems"])
  {
    __sendStarredItems = [decoder decodeBoolForKey: @"sendStarredItems"];
    __sendStarredItems_isset = YES;
  }
  if ([decoder containsValueForKey: @"overrideLink"])
  {
    __overrideLink = [[decoder decodeObjectForKey: @"overrideLink"] retain_stub];
    __overrideLink_isset = YES;
  }
  if ([decoder containsValueForKey: @"childrenEvents"])
  {
    __childrenEvents = [[decoder decodeObjectForKey: @"childrenEvents"] retain_stub];
    __childrenEvents_isset = YES;
  }
  if ([decoder containsValueForKey: @"parentEvent"])
  {
    __parentEvent = [decoder decodeInt64ForKey: @"parentEvent"];
    __parentEvent_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__poolId_isset)
  {
    [encoder encodeInt64: __poolId forKey: @"poolId"];
  }
  if (__poolPicture_isset)
  {
    [encoder encodeObject: __poolPicture forKey: @"poolPicture"];
  }
  if (__poolTitle_isset)
  {
    [encoder encodeObject: __poolTitle forKey: @"poolTitle"];
  }
  if (__poolPlace_isset)
  {
    [encoder encodeObject: __poolPlace forKey: @"poolPlace"];
  }
  if (__poolDetails_isset)
  {
    [encoder encodeObject: __poolDetails forKey: @"poolDetails"];
  }
  if (__disableStar_isset)
  {
    [encoder encodeBool: __disableStar forKey: @"disableStar"];
  }
  if (__disableFilterByCateg_isset)
  {
    [encoder encodeBool: __disableFilterByCateg forKey: @"disableFilterByCateg"];
  }
  if (__disableFilterByTags_isset)
  {
    [encoder encodeBool: __disableFilterByTags forKey: @"disableFilterByTags"];
  }
  if (__enableScan_isset)
  {
    [encoder encodeBool: __enableScan forKey: @"enableScan"];
  }
  if (__noResultText_isset)
  {
    [encoder encodeObject: __noResultText forKey: @"noResultText"];
  }
  if (__refreshOnBack_isset)
  {
    [encoder encodeBool: __refreshOnBack forKey: @"refreshOnBack"];
  }
  if (__sendStarredItems_isset)
  {
    [encoder encodeBool: __sendStarredItems forKey: @"sendStarredItems"];
  }
  if (__overrideLink_isset)
  {
    [encoder encodeObject: __overrideLink forKey: @"overrideLink"];
  }
  if (__childrenEvents_isset)
  {
    [encoder encodeObject: __childrenEvents forKey: @"childrenEvents"];
  }
  if (__parentEvent_isset)
  {
    [encoder encodeInt64: __parentEvent forKey: @"parentEvent"];
  }
}

- (void) dealloc
{
  [__poolPicture release_stub];
  [__poolTitle release_stub];
  [__poolPlace release_stub];
  [__poolDetails release_stub];
  [__noResultText release_stub];
  [__overrideLink release_stub];
  [__childrenEvents release_stub];
  [super dealloc_stub];
}

- (int64_t) poolId {
  return __poolId;
}

- (void) setPoolId: (int64_t) poolId {
  __poolId = poolId;
  __poolId_isset = YES;
}

- (BOOL) poolIdIsSet {
  return __poolId_isset;
}

- (void) unsetPoolId {
  __poolId_isset = NO;
}

- (NSString *) poolPicture {
  return [[__poolPicture retain_stub] autorelease_stub];
}

- (void) setPoolPicture: (NSString *) poolPicture {
  [poolPicture retain_stub];
  [__poolPicture release_stub];
  __poolPicture = poolPicture;
  __poolPicture_isset = YES;
}

- (BOOL) poolPictureIsSet {
  return __poolPicture_isset;
}

- (void) unsetPoolPicture {
  [__poolPicture release_stub];
  __poolPicture = nil;
  __poolPicture_isset = NO;
}

- (NSString *) poolTitle {
  return [[__poolTitle retain_stub] autorelease_stub];
}

- (void) setPoolTitle: (NSString *) poolTitle {
  [poolTitle retain_stub];
  [__poolTitle release_stub];
  __poolTitle = poolTitle;
  __poolTitle_isset = YES;
}

- (BOOL) poolTitleIsSet {
  return __poolTitle_isset;
}

- (void) unsetPoolTitle {
  [__poolTitle release_stub];
  __poolTitle = nil;
  __poolTitle_isset = NO;
}

- (NSString *) poolPlace {
  return [[__poolPlace retain_stub] autorelease_stub];
}

- (void) setPoolPlace: (NSString *) poolPlace {
  [poolPlace retain_stub];
  [__poolPlace release_stub];
  __poolPlace = poolPlace;
  __poolPlace_isset = YES;
}

- (BOOL) poolPlaceIsSet {
  return __poolPlace_isset;
}

- (void) unsetPoolPlace {
  [__poolPlace release_stub];
  __poolPlace = nil;
  __poolPlace_isset = NO;
}

- (NSString *) poolDetails {
  return [[__poolDetails retain_stub] autorelease_stub];
}

- (void) setPoolDetails: (NSString *) poolDetails {
  [poolDetails retain_stub];
  [__poolDetails release_stub];
  __poolDetails = poolDetails;
  __poolDetails_isset = YES;
}

- (BOOL) poolDetailsIsSet {
  return __poolDetails_isset;
}

- (void) unsetPoolDetails {
  [__poolDetails release_stub];
  __poolDetails = nil;
  __poolDetails_isset = NO;
}

- (BOOL) disableStar {
  return __disableStar;
}

- (void) setDisableStar: (BOOL) disableStar {
  __disableStar = disableStar;
  __disableStar_isset = YES;
}

- (BOOL) disableStarIsSet {
  return __disableStar_isset;
}

- (void) unsetDisableStar {
  __disableStar_isset = NO;
}

- (BOOL) disableFilterByCateg {
  return __disableFilterByCateg;
}

- (void) setDisableFilterByCateg: (BOOL) disableFilterByCateg {
  __disableFilterByCateg = disableFilterByCateg;
  __disableFilterByCateg_isset = YES;
}

- (BOOL) disableFilterByCategIsSet {
  return __disableFilterByCateg_isset;
}

- (void) unsetDisableFilterByCateg {
  __disableFilterByCateg_isset = NO;
}

- (BOOL) disableFilterByTags {
  return __disableFilterByTags;
}

- (void) setDisableFilterByTags: (BOOL) disableFilterByTags {
  __disableFilterByTags = disableFilterByTags;
  __disableFilterByTags_isset = YES;
}

- (BOOL) disableFilterByTagsIsSet {
  return __disableFilterByTags_isset;
}

- (void) unsetDisableFilterByTags {
  __disableFilterByTags_isset = NO;
}

- (BOOL) enableScan {
  return __enableScan;
}

- (void) setEnableScan: (BOOL) enableScan {
  __enableScan = enableScan;
  __enableScan_isset = YES;
}

- (BOOL) enableScanIsSet {
  return __enableScan_isset;
}

- (void) unsetEnableScan {
  __enableScan_isset = NO;
}

- (NSString *) noResultText {
  return [[__noResultText retain_stub] autorelease_stub];
}

- (void) setNoResultText: (NSString *) noResultText {
  [noResultText retain_stub];
  [__noResultText release_stub];
  __noResultText = noResultText;
  __noResultText_isset = YES;
}

- (BOOL) noResultTextIsSet {
  return __noResultText_isset;
}

- (void) unsetNoResultText {
  [__noResultText release_stub];
  __noResultText = nil;
  __noResultText_isset = NO;
}

- (BOOL) refreshOnBack {
  return __refreshOnBack;
}

- (void) setRefreshOnBack: (BOOL) refreshOnBack {
  __refreshOnBack = refreshOnBack;
  __refreshOnBack_isset = YES;
}

- (BOOL) refreshOnBackIsSet {
  return __refreshOnBack_isset;
}

- (void) unsetRefreshOnBack {
  __refreshOnBack_isset = NO;
}

- (BOOL) sendStarredItems {
  return __sendStarredItems;
}

- (void) setSendStarredItems: (BOOL) sendStarredItems {
  __sendStarredItems = sendStarredItems;
  __sendStarredItems_isset = YES;
}

- (BOOL) sendStarredItemsIsSet {
  return __sendStarredItems_isset;
}

- (void) unsetSendStarredItems {
  __sendStarredItems_isset = NO;
}

- (NSString *) overrideLink {
  return [[__overrideLink retain_stub] autorelease_stub];
}

- (void) setOverrideLink: (NSString *) overrideLink {
  [overrideLink retain_stub];
  [__overrideLink release_stub];
  __overrideLink = overrideLink;
  __overrideLink_isset = YES;
}

- (BOOL) overrideLinkIsSet {
  return __overrideLink_isset;
}

- (void) unsetOverrideLink {
  [__overrideLink release_stub];
  __overrideLink = nil;
  __overrideLink_isset = NO;
}

- (NSMutableArray *) childrenEvents {
  return [[__childrenEvents retain_stub] autorelease_stub];
}

- (void) setChildrenEvents: (NSMutableArray *) childrenEvents {
  [childrenEvents retain_stub];
  [__childrenEvents release_stub];
  __childrenEvents = childrenEvents;
  __childrenEvents_isset = YES;
}

- (BOOL) childrenEventsIsSet {
  return __childrenEvents_isset;
}

- (void) unsetChildrenEvents {
  [__childrenEvents release_stub];
  __childrenEvents = nil;
  __childrenEvents_isset = NO;
}

- (int64_t) parentEvent {
  return __parentEvent;
}

- (void) setParentEvent: (int64_t) parentEvent {
  __parentEvent = parentEvent;
  __parentEvent_isset = YES;
}

- (BOOL) parentEventIsSet {
  return __parentEvent_isset;
}

- (void) unsetParentEvent {
  __parentEvent_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPoolId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPoolPicture: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPoolTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPoolPlace: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPoolDetails: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDisableStar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDisableFilterByCateg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDisableFilterByTags: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnableScan: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNoResultText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRefreshOnBack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSendStarredItems: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOverrideLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            int64_t _elem12 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem12]];
          }
          [inProtocol readListEnd];
          [self setChildrenEvents: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setParentEvent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventPool"];
  if (__poolId_isset) {
    [outProtocol writeFieldBeginWithName: @"poolId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __poolId];
    [outProtocol writeFieldEnd];
  }
  if (__poolPicture_isset) {
    if (__poolPicture != nil) {
      [outProtocol writeFieldBeginWithName: @"poolPicture" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __poolPicture];
      [outProtocol writeFieldEnd];
    }
  }
  if (__poolTitle_isset) {
    if (__poolTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"poolTitle" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __poolTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__poolPlace_isset) {
    if (__poolPlace != nil) {
      [outProtocol writeFieldBeginWithName: @"poolPlace" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __poolPlace];
      [outProtocol writeFieldEnd];
    }
  }
  if (__poolDetails_isset) {
    if (__poolDetails != nil) {
      [outProtocol writeFieldBeginWithName: @"poolDetails" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __poolDetails];
      [outProtocol writeFieldEnd];
    }
  }
  if (__disableStar_isset) {
    [outProtocol writeFieldBeginWithName: @"disableStar" type: TType_BOOL fieldID: 10];
    [outProtocol writeBool: __disableStar];
    [outProtocol writeFieldEnd];
  }
  if (__disableFilterByCateg_isset) {
    [outProtocol writeFieldBeginWithName: @"disableFilterByCateg" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __disableFilterByCateg];
    [outProtocol writeFieldEnd];
  }
  if (__disableFilterByTags_isset) {
    [outProtocol writeFieldBeginWithName: @"disableFilterByTags" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __disableFilterByTags];
    [outProtocol writeFieldEnd];
  }
  if (__enableScan_isset) {
    [outProtocol writeFieldBeginWithName: @"enableScan" type: TType_BOOL fieldID: 13];
    [outProtocol writeBool: __enableScan];
    [outProtocol writeFieldEnd];
  }
  if (__noResultText_isset) {
    if (__noResultText != nil) {
      [outProtocol writeFieldBeginWithName: @"noResultText" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __noResultText];
      [outProtocol writeFieldEnd];
    }
  }
  if (__refreshOnBack_isset) {
    [outProtocol writeFieldBeginWithName: @"refreshOnBack" type: TType_BOOL fieldID: 16];
    [outProtocol writeBool: __refreshOnBack];
    [outProtocol writeFieldEnd];
  }
  if (__sendStarredItems_isset) {
    [outProtocol writeFieldBeginWithName: @"sendStarredItems" type: TType_BOOL fieldID: 19];
    [outProtocol writeBool: __sendStarredItems];
    [outProtocol writeFieldEnd];
  }
  if (__overrideLink_isset) {
    if (__overrideLink != nil) {
      [outProtocol writeFieldBeginWithName: @"overrideLink" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __overrideLink];
      [outProtocol writeFieldEnd];
    }
  }
  if (__childrenEvents_isset) {
    if (__childrenEvents != nil) {
      [outProtocol writeFieldBeginWithName: @"childrenEvents" type: TType_LIST fieldID: 15];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__childrenEvents count]];
        int idx14;
        for (idx14 = 0; idx14 < [__childrenEvents count]; idx14++)
        {
          [outProtocol writeI64: [[__childrenEvents objectAtIndex: idx14] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__parentEvent_isset) {
    [outProtocol writeFieldBeginWithName: @"parentEvent" type: TType_I64 fieldID: 17];
    [outProtocol writeI64: __parentEvent];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__poolId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'poolId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EventPool("];
  [ms appendString: @"poolId:"];
  [ms appendFormat: @"%qi", __poolId];
  [ms appendString: @",poolPicture:"];
  [ms appendFormat: @"\"%@\"", __poolPicture];
  [ms appendString: @",poolTitle:"];
  [ms appendFormat: @"\"%@\"", __poolTitle];
  [ms appendString: @",poolPlace:"];
  [ms appendFormat: @"\"%@\"", __poolPlace];
  [ms appendString: @",poolDetails:"];
  [ms appendFormat: @"\"%@\"", __poolDetails];
  [ms appendString: @",disableStar:"];
  [ms appendFormat: @"%i", __disableStar];
  [ms appendString: @",disableFilterByCateg:"];
  [ms appendFormat: @"%i", __disableFilterByCateg];
  [ms appendString: @",disableFilterByTags:"];
  [ms appendFormat: @"%i", __disableFilterByTags];
  [ms appendString: @",enableScan:"];
  [ms appendFormat: @"%i", __enableScan];
  [ms appendString: @",noResultText:"];
  [ms appendFormat: @"\"%@\"", __noResultText];
  [ms appendString: @",refreshOnBack:"];
  [ms appendFormat: @"%i", __refreshOnBack];
  [ms appendString: @",sendStarredItems:"];
  [ms appendFormat: @"%i", __sendStarredItems];
  [ms appendString: @",overrideLink:"];
  [ms appendFormat: @"\"%@\"", __overrideLink];
  [ms appendString: @",childrenEvents:"];
  [ms appendFormat: @"%@", __childrenEvents];
  [ms appendString: @",parentEvent:"];
  [ms appendFormat: @"%qi", __parentEvent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EventItemRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEventItemId: (int64_t) eventItemId userToken: (NSString *) userToken userTickets: (NSMutableArray *) userTickets lang: (NSString *) lang
{
  self = [super init];
  __eventItemId = eventItemId;
  __eventItemId_isset = YES;
  __userToken = [userToken retain_stub];
  __userToken_isset = YES;
  __userTickets = [userTickets retain_stub];
  __userTickets_isset = YES;
  __lang = [lang retain_stub];
  __lang_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"eventItemId"])
  {
    __eventItemId = [decoder decodeInt64ForKey: @"eventItemId"];
    __eventItemId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userToken"])
  {
    __userToken = [[decoder decodeObjectForKey: @"userToken"] retain_stub];
    __userToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"userTickets"])
  {
    __userTickets = [[decoder decodeObjectForKey: @"userTickets"] retain_stub];
    __userTickets_isset = YES;
  }
  if ([decoder containsValueForKey: @"lang"])
  {
    __lang = [[decoder decodeObjectForKey: @"lang"] retain_stub];
    __lang_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__eventItemId_isset)
  {
    [encoder encodeInt64: __eventItemId forKey: @"eventItemId"];
  }
  if (__userToken_isset)
  {
    [encoder encodeObject: __userToken forKey: @"userToken"];
  }
  if (__userTickets_isset)
  {
    [encoder encodeObject: __userTickets forKey: @"userTickets"];
  }
  if (__lang_isset)
  {
    [encoder encodeObject: __lang forKey: @"lang"];
  }
}

- (void) dealloc
{
  [__userToken release_stub];
  [__userTickets release_stub];
  [__lang release_stub];
  [super dealloc_stub];
}

- (int64_t) eventItemId {
  return __eventItemId;
}

- (void) setEventItemId: (int64_t) eventItemId {
  __eventItemId = eventItemId;
  __eventItemId_isset = YES;
}

- (BOOL) eventItemIdIsSet {
  return __eventItemId_isset;
}

- (void) unsetEventItemId {
  __eventItemId_isset = NO;
}

- (NSString *) userToken {
  return [[__userToken retain_stub] autorelease_stub];
}

- (void) setUserToken: (NSString *) userToken {
  [userToken retain_stub];
  [__userToken release_stub];
  __userToken = userToken;
  __userToken_isset = YES;
}

- (BOOL) userTokenIsSet {
  return __userToken_isset;
}

- (void) unsetUserToken {
  [__userToken release_stub];
  __userToken = nil;
  __userToken_isset = NO;
}

- (NSMutableArray *) userTickets {
  return [[__userTickets retain_stub] autorelease_stub];
}

- (void) setUserTickets: (NSMutableArray *) userTickets {
  [userTickets retain_stub];
  [__userTickets release_stub];
  __userTickets = userTickets;
  __userTickets_isset = YES;
}

- (BOOL) userTicketsIsSet {
  return __userTickets_isset;
}

- (void) unsetUserTickets {
  [__userTickets release_stub];
  __userTickets = nil;
  __userTickets_isset = NO;
}

- (NSString *) lang {
  return [[__lang retain_stub] autorelease_stub];
}

- (void) setLang: (NSString *) lang {
  [lang retain_stub];
  [__lang release_stub];
  __lang = lang;
  __lang_isset = YES;
}

- (BOOL) langIsSet {
  return __lang_isset;
}

- (void) unsetLang {
  [__lang release_stub];
  __lang = nil;
  __lang_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEventItemId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NSString * _elem17 = [inProtocol readString];
            [fieldValue addObject: _elem17];
          }
          [inProtocol readListEnd];
          [self setUserTickets: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLang: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventItemRequest"];
  if (__eventItemId_isset) {
    [outProtocol writeFieldBeginWithName: @"eventItemId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __eventItemId];
    [outProtocol writeFieldEnd];
  }
  if (__userToken_isset) {
    if (__userToken != nil) {
      [outProtocol writeFieldBeginWithName: @"userToken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userTickets_isset) {
    if (__userTickets != nil) {
      [outProtocol writeFieldBeginWithName: @"userTickets" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__userTickets count]];
        int idx19;
        for (idx19 = 0; idx19 < [__userTickets count]; idx19++)
        {
          [outProtocol writeString: [__userTickets objectAtIndex: idx19]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__lang_isset) {
    if (__lang != nil) {
      [outProtocol writeFieldBeginWithName: @"lang" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __lang];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__eventItemId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'eventItemId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EventItemRequest("];
  [ms appendString: @"eventItemId:"];
  [ms appendFormat: @"%qi", __eventItemId];
  [ms appendString: @",userToken:"];
  [ms appendFormat: @"\"%@\"", __userToken];
  [ms appendString: @",userTickets:"];
  [ms appendFormat: @"%@", __userTickets];
  [ms appendString: @",lang:"];
  [ms appendFormat: @"\"%@\"", __lang];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EventPoolRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEventPoolId: (int64_t) eventPoolId userToken: (NSString *) userToken userTickets: (NSMutableArray *) userTickets starredEventItems: (NSMutableArray *) starredEventItems lang: (NSString *) lang period: (int32_t) period periodInHours: (int32_t) periodInHours fetchPast: (BOOL) fetchPast
{
  self = [super init];
  __eventPoolId = eventPoolId;
  __eventPoolId_isset = YES;
  __userToken = [userToken retain_stub];
  __userToken_isset = YES;
  __userTickets = [userTickets retain_stub];
  __userTickets_isset = YES;
  __starredEventItems = [starredEventItems retain_stub];
  __starredEventItems_isset = YES;
  __lang = [lang retain_stub];
  __lang_isset = YES;
  __period = period;
  __period_isset = YES;
  __periodInHours = periodInHours;
  __periodInHours_isset = YES;
  __fetchPast = fetchPast;
  __fetchPast_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"eventPoolId"])
  {
    __eventPoolId = [decoder decodeInt64ForKey: @"eventPoolId"];
    __eventPoolId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userToken"])
  {
    __userToken = [[decoder decodeObjectForKey: @"userToken"] retain_stub];
    __userToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"userTickets"])
  {
    __userTickets = [[decoder decodeObjectForKey: @"userTickets"] retain_stub];
    __userTickets_isset = YES;
  }
  if ([decoder containsValueForKey: @"starredEventItems"])
  {
    __starredEventItems = [[decoder decodeObjectForKey: @"starredEventItems"] retain_stub];
    __starredEventItems_isset = YES;
  }
  if ([decoder containsValueForKey: @"lang"])
  {
    __lang = [[decoder decodeObjectForKey: @"lang"] retain_stub];
    __lang_isset = YES;
  }
  if ([decoder containsValueForKey: @"period"])
  {
    __period = [decoder decodeInt32ForKey: @"period"];
    __period_isset = YES;
  }
  if ([decoder containsValueForKey: @"periodInHours"])
  {
    __periodInHours = [decoder decodeInt32ForKey: @"periodInHours"];
    __periodInHours_isset = YES;
  }
  if ([decoder containsValueForKey: @"fetchPast"])
  {
    __fetchPast = [decoder decodeBoolForKey: @"fetchPast"];
    __fetchPast_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__eventPoolId_isset)
  {
    [encoder encodeInt64: __eventPoolId forKey: @"eventPoolId"];
  }
  if (__userToken_isset)
  {
    [encoder encodeObject: __userToken forKey: @"userToken"];
  }
  if (__userTickets_isset)
  {
    [encoder encodeObject: __userTickets forKey: @"userTickets"];
  }
  if (__starredEventItems_isset)
  {
    [encoder encodeObject: __starredEventItems forKey: @"starredEventItems"];
  }
  if (__lang_isset)
  {
    [encoder encodeObject: __lang forKey: @"lang"];
  }
  if (__period_isset)
  {
    [encoder encodeInt32: __period forKey: @"period"];
  }
  if (__periodInHours_isset)
  {
    [encoder encodeInt32: __periodInHours forKey: @"periodInHours"];
  }
  if (__fetchPast_isset)
  {
    [encoder encodeBool: __fetchPast forKey: @"fetchPast"];
  }
}

- (void) dealloc
{
  [__userToken release_stub];
  [__userTickets release_stub];
  [__starredEventItems release_stub];
  [__lang release_stub];
  [super dealloc_stub];
}

- (int64_t) eventPoolId {
  return __eventPoolId;
}

- (void) setEventPoolId: (int64_t) eventPoolId {
  __eventPoolId = eventPoolId;
  __eventPoolId_isset = YES;
}

- (BOOL) eventPoolIdIsSet {
  return __eventPoolId_isset;
}

- (void) unsetEventPoolId {
  __eventPoolId_isset = NO;
}

- (NSString *) userToken {
  return [[__userToken retain_stub] autorelease_stub];
}

- (void) setUserToken: (NSString *) userToken {
  [userToken retain_stub];
  [__userToken release_stub];
  __userToken = userToken;
  __userToken_isset = YES;
}

- (BOOL) userTokenIsSet {
  return __userToken_isset;
}

- (void) unsetUserToken {
  [__userToken release_stub];
  __userToken = nil;
  __userToken_isset = NO;
}

- (NSMutableArray *) userTickets {
  return [[__userTickets retain_stub] autorelease_stub];
}

- (void) setUserTickets: (NSMutableArray *) userTickets {
  [userTickets retain_stub];
  [__userTickets release_stub];
  __userTickets = userTickets;
  __userTickets_isset = YES;
}

- (BOOL) userTicketsIsSet {
  return __userTickets_isset;
}

- (void) unsetUserTickets {
  [__userTickets release_stub];
  __userTickets = nil;
  __userTickets_isset = NO;
}

- (NSMutableArray *) starredEventItems {
  return [[__starredEventItems retain_stub] autorelease_stub];
}

- (void) setStarredEventItems: (NSMutableArray *) starredEventItems {
  [starredEventItems retain_stub];
  [__starredEventItems release_stub];
  __starredEventItems = starredEventItems;
  __starredEventItems_isset = YES;
}

- (BOOL) starredEventItemsIsSet {
  return __starredEventItems_isset;
}

- (void) unsetStarredEventItems {
  [__starredEventItems release_stub];
  __starredEventItems = nil;
  __starredEventItems_isset = NO;
}

- (NSString *) lang {
  return [[__lang retain_stub] autorelease_stub];
}

- (void) setLang: (NSString *) lang {
  [lang retain_stub];
  [__lang release_stub];
  __lang = lang;
  __lang_isset = YES;
}

- (BOOL) langIsSet {
  return __lang_isset;
}

- (void) unsetLang {
  [__lang release_stub];
  __lang = nil;
  __lang_isset = NO;
}

- (int32_t) period {
  return __period;
}

- (void) setPeriod: (int32_t) period {
  __period = period;
  __period_isset = YES;
}

- (BOOL) periodIsSet {
  return __period_isset;
}

- (void) unsetPeriod {
  __period_isset = NO;
}

- (int32_t) periodInHours {
  return __periodInHours;
}

- (void) setPeriodInHours: (int32_t) periodInHours {
  __periodInHours = periodInHours;
  __periodInHours_isset = YES;
}

- (BOOL) periodInHoursIsSet {
  return __periodInHours_isset;
}

- (void) unsetPeriodInHours {
  __periodInHours_isset = NO;
}

- (BOOL) fetchPast {
  return __fetchPast;
}

- (void) setFetchPast: (BOOL) fetchPast {
  __fetchPast = fetchPast;
  __fetchPast_isset = YES;
}

- (BOOL) fetchPastIsSet {
  return __fetchPast_isset;
}

- (void) unsetFetchPast {
  __fetchPast_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEventPoolId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            NSString * _elem22 = [inProtocol readString];
            [fieldValue addObject: _elem22];
          }
          [inProtocol readListEnd];
          [self setUserTickets: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size23;
          [inProtocol readListBeginReturningElementType: NULL size: &_size23];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size23];
          int _i24;
          for (_i24 = 0; _i24 < _size23; ++_i24)
          {
            int64_t _elem25 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem25]];
          }
          [inProtocol readListEnd];
          [self setStarredEventItems: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLang: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPeriod: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPeriodInHours: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFetchPast: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventPoolRequest"];
  if (__eventPoolId_isset) {
    [outProtocol writeFieldBeginWithName: @"eventPoolId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __eventPoolId];
    [outProtocol writeFieldEnd];
  }
  if (__userToken_isset) {
    if (__userToken != nil) {
      [outProtocol writeFieldBeginWithName: @"userToken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userTickets_isset) {
    if (__userTickets != nil) {
      [outProtocol writeFieldBeginWithName: @"userTickets" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__userTickets count]];
        int idx27;
        for (idx27 = 0; idx27 < [__userTickets count]; idx27++)
        {
          [outProtocol writeString: [__userTickets objectAtIndex: idx27]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__starredEventItems_isset) {
    if (__starredEventItems != nil) {
      [outProtocol writeFieldBeginWithName: @"starredEventItems" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__starredEventItems count]];
        int idx29;
        for (idx29 = 0; idx29 < [__starredEventItems count]; idx29++)
        {
          [outProtocol writeI64: [[__starredEventItems objectAtIndex: idx29] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__lang_isset) {
    if (__lang != nil) {
      [outProtocol writeFieldBeginWithName: @"lang" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __lang];
      [outProtocol writeFieldEnd];
    }
  }
  if (__period_isset) {
    [outProtocol writeFieldBeginWithName: @"period" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __period];
    [outProtocol writeFieldEnd];
  }
  if (__periodInHours_isset) {
    [outProtocol writeFieldBeginWithName: @"periodInHours" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __periodInHours];
    [outProtocol writeFieldEnd];
  }
  if (__fetchPast_isset) {
    [outProtocol writeFieldBeginWithName: @"fetchPast" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __fetchPast];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__eventPoolId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'eventPoolId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EventPoolRequest("];
  [ms appendString: @"eventPoolId:"];
  [ms appendFormat: @"%qi", __eventPoolId];
  [ms appendString: @",userToken:"];
  [ms appendFormat: @"\"%@\"", __userToken];
  [ms appendString: @",userTickets:"];
  [ms appendFormat: @"%@", __userTickets];
  [ms appendString: @",starredEventItems:"];
  [ms appendFormat: @"%@", __starredEventItems];
  [ms appendString: @",lang:"];
  [ms appendFormat: @"\"%@\"", __lang];
  [ms appendString: @",period:"];
  [ms appendFormat: @"%i", __period];
  [ms appendString: @",periodInHours:"];
  [ms appendFormat: @"%i", __periodInHours];
  [ms appendString: @",fetchPast:"];
  [ms appendFormat: @"%i", __fetchPast];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EventItemReply

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int32_t) status eventItem: (EventItem *) eventItem childrenPools: (NSMutableDictionary *) childrenPools categs: (NSMutableDictionary *) categs tags: (NSMutableDictionary *) tags
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __eventItem = [eventItem retain_stub];
  __eventItem_isset = YES;
  __childrenPools = [childrenPools retain_stub];
  __childrenPools_isset = YES;
  __categs = [categs retain_stub];
  __categs_isset = YES;
  __tags = [tags retain_stub];
  __tags_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventItem"])
  {
    __eventItem = [[decoder decodeObjectForKey: @"eventItem"] retain_stub];
    __eventItem_isset = YES;
  }
  if ([decoder containsValueForKey: @"childrenPools"])
  {
    __childrenPools = [[decoder decodeObjectForKey: @"childrenPools"] retain_stub];
    __childrenPools_isset = YES;
  }
  if ([decoder containsValueForKey: @"categs"])
  {
    __categs = [[decoder decodeObjectForKey: @"categs"] retain_stub];
    __categs_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain_stub];
    __tags_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__eventItem_isset)
  {
    [encoder encodeObject: __eventItem forKey: @"eventItem"];
  }
  if (__childrenPools_isset)
  {
    [encoder encodeObject: __childrenPools forKey: @"childrenPools"];
  }
  if (__categs_isset)
  {
    [encoder encodeObject: __categs forKey: @"categs"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
}

- (void) dealloc
{
  [__eventItem release_stub];
  [__childrenPools release_stub];
  [__categs release_stub];
  [__tags release_stub];
  [super dealloc_stub];
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (EventItem *) eventItem {
  return [[__eventItem retain_stub] autorelease_stub];
}

- (void) setEventItem: (EventItem *) eventItem {
  [eventItem retain_stub];
  [__eventItem release_stub];
  __eventItem = eventItem;
  __eventItem_isset = YES;
}

- (BOOL) eventItemIsSet {
  return __eventItem_isset;
}

- (void) unsetEventItem {
  [__eventItem release_stub];
  __eventItem = nil;
  __eventItem_isset = NO;
}

- (NSMutableDictionary *) childrenPools {
  return [[__childrenPools retain_stub] autorelease_stub];
}

- (void) setChildrenPools: (NSMutableDictionary *) childrenPools {
  [childrenPools retain_stub];
  [__childrenPools release_stub];
  __childrenPools = childrenPools;
  __childrenPools_isset = YES;
}

- (BOOL) childrenPoolsIsSet {
  return __childrenPools_isset;
}

- (void) unsetChildrenPools {
  [__childrenPools release_stub];
  __childrenPools = nil;
  __childrenPools_isset = NO;
}

- (NSMutableDictionary *) categs {
  return [[__categs retain_stub] autorelease_stub];
}

- (void) setCategs: (NSMutableDictionary *) categs {
  [categs retain_stub];
  [__categs release_stub];
  __categs = categs;
  __categs_isset = YES;
}

- (BOOL) categsIsSet {
  return __categs_isset;
}

- (void) unsetCategs {
  [__categs release_stub];
  __categs = nil;
  __categs_isset = NO;
}

- (NSMutableDictionary *) tags {
  return [[__tags retain_stub] autorelease_stub];
}

- (void) setTags: (NSMutableDictionary *) tags {
  [tags retain_stub];
  [__tags release_stub];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release_stub];
  __tags = nil;
  __tags_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          EventItem *fieldValue = [[EventItem alloc] init];
          [fieldValue read: inProtocol];
          [self setEventItem: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size30;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size30];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            int64_t _key32 = [inProtocol readI64];
            EventPool *_val33 = [[EventPool alloc] init];
            [_val33 read: inProtocol];
            [fieldValue setObject: _val33 forKey: [NSNumber numberWithLongLong: _key32]];
            [_val33 release_stub];
          }
          [inProtocol readMapEnd];
          [self setChildrenPools: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_MAP) {
          int _size34;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size34];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size34];
          int _i35;
          for (_i35 = 0; _i35 < _size34; ++_i35)
          {
            int32_t _key36 = [inProtocol readI32];
            NSString * _val37 = [inProtocol readString];
            [fieldValue setObject: _val37 forKey: [NSNumber numberWithLong: _key36]];
          }
          [inProtocol readMapEnd];
          [self setCategs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_MAP) {
          int _size38;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size38];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size38];
          int _i39;
          for (_i39 = 0; _i39 < _size38; ++_i39)
          {
            NSString * _key40 = [inProtocol readString];
            NSString * _val41 = [inProtocol readString];
            [fieldValue setObject: _val41 forKey: _key40];
          }
          [inProtocol readMapEnd];
          [self setTags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventItemReply"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__eventItem_isset) {
    if (__eventItem != nil) {
      [outProtocol writeFieldBeginWithName: @"eventItem" type: TType_STRUCT fieldID: 2];
      [__eventItem write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__childrenPools_isset) {
    if (__childrenPools != nil) {
      [outProtocol writeFieldBeginWithName: @"childrenPools" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_STRUCT size: [__childrenPools count]];
        NSEnumerator * _iter42 = [__childrenPools keyEnumerator];
        id key43;
        while ((key43 = [_iter42 nextObject]))
        {
          [outProtocol writeI64: [key43 longLongValue]];
          [[__childrenPools objectForKey: key43] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__categs_isset) {
    if (__categs != nil) {
      [outProtocol writeFieldBeginWithName: @"categs" type: TType_MAP fieldID: 5];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRING size: [__categs count]];
        NSEnumerator * _iter44 = [__categs keyEnumerator];
        id key45;
        while ((key45 = [_iter44 nextObject]))
        {
          [outProtocol writeI32: [key45 longValue]];
          [outProtocol writeString: [__categs objectForKey: key45]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_MAP fieldID: 6];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__tags count]];
        NSEnumerator * _iter46 = [__tags keyEnumerator];
        id key47;
        while ((key47 = [_iter46 nextObject]))
        {
          [outProtocol writeString: key47];
          [outProtocol writeString: [__tags objectForKey: key47]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EventItemReply("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",eventItem:"];
  [ms appendFormat: @"%@", __eventItem];
  [ms appendString: @",childrenPools:"];
  [ms appendFormat: @"%@", __childrenPools];
  [ms appendString: @",categs:"];
  [ms appendFormat: @"%@", __categs];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EventPoolReply

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int32_t) status eventPool: (EventPool *) eventPool childrenItems: (NSMutableDictionary *) childrenItems categs: (NSMutableDictionary *) categs tags: (NSMutableDictionary *) tags
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __eventPool = [eventPool retain_stub];
  __eventPool_isset = YES;
  __childrenItems = [childrenItems retain_stub];
  __childrenItems_isset = YES;
  __categs = [categs retain_stub];
  __categs_isset = YES;
  __tags = [tags retain_stub];
  __tags_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventPool"])
  {
    __eventPool = [[decoder decodeObjectForKey: @"eventPool"] retain_stub];
    __eventPool_isset = YES;
  }
  if ([decoder containsValueForKey: @"childrenItems"])
  {
    __childrenItems = [[decoder decodeObjectForKey: @"childrenItems"] retain_stub];
    __childrenItems_isset = YES;
  }
  if ([decoder containsValueForKey: @"categs"])
  {
    __categs = [[decoder decodeObjectForKey: @"categs"] retain_stub];
    __categs_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain_stub];
    __tags_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__eventPool_isset)
  {
    [encoder encodeObject: __eventPool forKey: @"eventPool"];
  }
  if (__childrenItems_isset)
  {
    [encoder encodeObject: __childrenItems forKey: @"childrenItems"];
  }
  if (__categs_isset)
  {
    [encoder encodeObject: __categs forKey: @"categs"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
}

- (void) dealloc
{
  [__eventPool release_stub];
  [__childrenItems release_stub];
  [__categs release_stub];
  [__tags release_stub];
  [super dealloc_stub];
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (EventPool *) eventPool {
  return [[__eventPool retain_stub] autorelease_stub];
}

- (void) setEventPool: (EventPool *) eventPool {
  [eventPool retain_stub];
  [__eventPool release_stub];
  __eventPool = eventPool;
  __eventPool_isset = YES;
}

- (BOOL) eventPoolIsSet {
  return __eventPool_isset;
}

- (void) unsetEventPool {
  [__eventPool release_stub];
  __eventPool = nil;
  __eventPool_isset = NO;
}

- (NSMutableDictionary *) childrenItems {
  return [[__childrenItems retain_stub] autorelease_stub];
}

- (void) setChildrenItems: (NSMutableDictionary *) childrenItems {
  [childrenItems retain_stub];
  [__childrenItems release_stub];
  __childrenItems = childrenItems;
  __childrenItems_isset = YES;
}

- (BOOL) childrenItemsIsSet {
  return __childrenItems_isset;
}

- (void) unsetChildrenItems {
  [__childrenItems release_stub];
  __childrenItems = nil;
  __childrenItems_isset = NO;
}

- (NSMutableDictionary *) categs {
  return [[__categs retain_stub] autorelease_stub];
}

- (void) setCategs: (NSMutableDictionary *) categs {
  [categs retain_stub];
  [__categs release_stub];
  __categs = categs;
  __categs_isset = YES;
}

- (BOOL) categsIsSet {
  return __categs_isset;
}

- (void) unsetCategs {
  [__categs release_stub];
  __categs = nil;
  __categs_isset = NO;
}

- (NSMutableDictionary *) tags {
  return [[__tags retain_stub] autorelease_stub];
}

- (void) setTags: (NSMutableDictionary *) tags {
  [tags retain_stub];
  [__tags release_stub];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release_stub];
  __tags = nil;
  __tags_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          EventPool *fieldValue = [[EventPool alloc] init];
          [fieldValue read: inProtocol];
          [self setEventPool: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size48;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size48];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size48];
          int _i49;
          for (_i49 = 0; _i49 < _size48; ++_i49)
          {
            int64_t _key50 = [inProtocol readI64];
            EventItem *_val51 = [[EventItem alloc] init];
            [_val51 read: inProtocol];
            [fieldValue setObject: _val51 forKey: [NSNumber numberWithLongLong: _key50]];
            [_val51 release_stub];
          }
          [inProtocol readMapEnd];
          [self setChildrenItems: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_MAP) {
          int _size52;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size52];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size52];
          int _i53;
          for (_i53 = 0; _i53 < _size52; ++_i53)
          {
            int32_t _key54 = [inProtocol readI32];
            NSString * _val55 = [inProtocol readString];
            [fieldValue setObject: _val55 forKey: [NSNumber numberWithLong: _key54]];
          }
          [inProtocol readMapEnd];
          [self setCategs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_MAP) {
          int _size56;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size56];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size56];
          int _i57;
          for (_i57 = 0; _i57 < _size56; ++_i57)
          {
            NSString * _key58 = [inProtocol readString];
            NSString * _val59 = [inProtocol readString];
            [fieldValue setObject: _val59 forKey: _key58];
          }
          [inProtocol readMapEnd];
          [self setTags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventPoolReply"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__eventPool_isset) {
    if (__eventPool != nil) {
      [outProtocol writeFieldBeginWithName: @"eventPool" type: TType_STRUCT fieldID: 2];
      [__eventPool write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__childrenItems_isset) {
    if (__childrenItems != nil) {
      [outProtocol writeFieldBeginWithName: @"childrenItems" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_STRUCT size: [__childrenItems count]];
        NSEnumerator * _iter60 = [__childrenItems keyEnumerator];
        id key61;
        while ((key61 = [_iter60 nextObject]))
        {
          [outProtocol writeI64: [key61 longLongValue]];
          [[__childrenItems objectForKey: key61] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__categs_isset) {
    if (__categs != nil) {
      [outProtocol writeFieldBeginWithName: @"categs" type: TType_MAP fieldID: 5];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRING size: [__categs count]];
        NSEnumerator * _iter62 = [__categs keyEnumerator];
        id key63;
        while ((key63 = [_iter62 nextObject]))
        {
          [outProtocol writeI32: [key63 longValue]];
          [outProtocol writeString: [__categs objectForKey: key63]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_MAP fieldID: 6];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__tags count]];
        NSEnumerator * _iter64 = [__tags keyEnumerator];
        id key65;
        while ((key65 = [_iter64 nextObject]))
        {
          [outProtocol writeString: key65];
          [outProtocol writeString: [__tags objectForKey: key65]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EventPoolReply("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",eventPool:"];
  [ms appendFormat: @"%@", __eventPool];
  [ms appendString: @",childrenItems:"];
  [ms appendFormat: @"%@", __childrenItems];
  [ms appendString: @",categs:"];
  [ms appendFormat: @"%@", __categs];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ExchangeRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithExchangeToken: (NSString *) exchangeToken userToken: (NSString *) userToken userTickets: (NSMutableArray *) userTickets
{
  self = [super init];
  __exchangeToken = [exchangeToken retain_stub];
  __exchangeToken_isset = YES;
  __userToken = [userToken retain_stub];
  __userToken_isset = YES;
  __userTickets = [userTickets retain_stub];
  __userTickets_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"exchangeToken"])
  {
    __exchangeToken = [[decoder decodeObjectForKey: @"exchangeToken"] retain_stub];
    __exchangeToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"userToken"])
  {
    __userToken = [[decoder decodeObjectForKey: @"userToken"] retain_stub];
    __userToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"userTickets"])
  {
    __userTickets = [[decoder decodeObjectForKey: @"userTickets"] retain_stub];
    __userTickets_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__exchangeToken_isset)
  {
    [encoder encodeObject: __exchangeToken forKey: @"exchangeToken"];
  }
  if (__userToken_isset)
  {
    [encoder encodeObject: __userToken forKey: @"userToken"];
  }
  if (__userTickets_isset)
  {
    [encoder encodeObject: __userTickets forKey: @"userTickets"];
  }
}

- (void) dealloc
{
  [__exchangeToken release_stub];
  [__userToken release_stub];
  [__userTickets release_stub];
  [super dealloc_stub];
}

- (NSString *) exchangeToken {
  return [[__exchangeToken retain_stub] autorelease_stub];
}

- (void) setExchangeToken: (NSString *) exchangeToken {
  [exchangeToken retain_stub];
  [__exchangeToken release_stub];
  __exchangeToken = exchangeToken;
  __exchangeToken_isset = YES;
}

- (BOOL) exchangeTokenIsSet {
  return __exchangeToken_isset;
}

- (void) unsetExchangeToken {
  [__exchangeToken release_stub];
  __exchangeToken = nil;
  __exchangeToken_isset = NO;
}

- (NSString *) userToken {
  return [[__userToken retain_stub] autorelease_stub];
}

- (void) setUserToken: (NSString *) userToken {
  [userToken retain_stub];
  [__userToken release_stub];
  __userToken = userToken;
  __userToken_isset = YES;
}

- (BOOL) userTokenIsSet {
  return __userToken_isset;
}

- (void) unsetUserToken {
  [__userToken release_stub];
  __userToken = nil;
  __userToken_isset = NO;
}

- (NSMutableArray *) userTickets {
  return [[__userTickets retain_stub] autorelease_stub];
}

- (void) setUserTickets: (NSMutableArray *) userTickets {
  [userTickets retain_stub];
  [__userTickets release_stub];
  __userTickets = userTickets;
  __userTickets_isset = YES;
}

- (BOOL) userTicketsIsSet {
  return __userTickets_isset;
}

- (void) unsetUserTickets {
  [__userTickets release_stub];
  __userTickets = nil;
  __userTickets_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExchangeToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size66;
          [inProtocol readListBeginReturningElementType: NULL size: &_size66];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size66];
          int _i67;
          for (_i67 = 0; _i67 < _size66; ++_i67)
          {
            NSString * _elem68 = [inProtocol readString];
            [fieldValue addObject: _elem68];
          }
          [inProtocol readListEnd];
          [self setUserTickets: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ExchangeRequest"];
  if (__exchangeToken_isset) {
    if (__exchangeToken != nil) {
      [outProtocol writeFieldBeginWithName: @"exchangeToken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __exchangeToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userToken_isset) {
    if (__userToken != nil) {
      [outProtocol writeFieldBeginWithName: @"userToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userTickets_isset) {
    if (__userTickets != nil) {
      [outProtocol writeFieldBeginWithName: @"userTickets" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__userTickets count]];
        int idx70;
        for (idx70 = 0; idx70 < [__userTickets count]; idx70++)
        {
          [outProtocol writeString: [__userTickets objectAtIndex: idx70]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__exchangeToken_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'exchangeToken' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ExchangeRequest("];
  [ms appendString: @"exchangeToken:"];
  [ms appendFormat: @"\"%@\"", __exchangeToken];
  [ms appendString: @",userToken:"];
  [ms appendFormat: @"\"%@\"", __userToken];
  [ms appendString: @",userTickets:"];
  [ms appendFormat: @"%@", __userTickets];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ExchangeReply

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int32_t) status
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ExchangeReply"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ExchangeReply("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SendEmailRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEventPoolId: (int64_t) eventPoolId starredEventItems: (NSMutableArray *) starredEventItems userTickets: (NSMutableArray *) userTickets emailAddress: (NSString *) emailAddress lang: (NSString *) lang
{
  self = [super init];
  __eventPoolId = eventPoolId;
  __eventPoolId_isset = YES;
  __starredEventItems = [starredEventItems retain_stub];
  __starredEventItems_isset = YES;
  __userTickets = [userTickets retain_stub];
  __userTickets_isset = YES;
  __emailAddress = [emailAddress retain_stub];
  __emailAddress_isset = YES;
  __lang = [lang retain_stub];
  __lang_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"eventPoolId"])
  {
    __eventPoolId = [decoder decodeInt64ForKey: @"eventPoolId"];
    __eventPoolId_isset = YES;
  }
  if ([decoder containsValueForKey: @"starredEventItems"])
  {
    __starredEventItems = [[decoder decodeObjectForKey: @"starredEventItems"] retain_stub];
    __starredEventItems_isset = YES;
  }
  if ([decoder containsValueForKey: @"userTickets"])
  {
    __userTickets = [[decoder decodeObjectForKey: @"userTickets"] retain_stub];
    __userTickets_isset = YES;
  }
  if ([decoder containsValueForKey: @"emailAddress"])
  {
    __emailAddress = [[decoder decodeObjectForKey: @"emailAddress"] retain_stub];
    __emailAddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"lang"])
  {
    __lang = [[decoder decodeObjectForKey: @"lang"] retain_stub];
    __lang_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__eventPoolId_isset)
  {
    [encoder encodeInt64: __eventPoolId forKey: @"eventPoolId"];
  }
  if (__starredEventItems_isset)
  {
    [encoder encodeObject: __starredEventItems forKey: @"starredEventItems"];
  }
  if (__userTickets_isset)
  {
    [encoder encodeObject: __userTickets forKey: @"userTickets"];
  }
  if (__emailAddress_isset)
  {
    [encoder encodeObject: __emailAddress forKey: @"emailAddress"];
  }
  if (__lang_isset)
  {
    [encoder encodeObject: __lang forKey: @"lang"];
  }
}

- (void) dealloc
{
  [__starredEventItems release_stub];
  [__userTickets release_stub];
  [__emailAddress release_stub];
  [__lang release_stub];
  [super dealloc_stub];
}

- (int64_t) eventPoolId {
  return __eventPoolId;
}

- (void) setEventPoolId: (int64_t) eventPoolId {
  __eventPoolId = eventPoolId;
  __eventPoolId_isset = YES;
}

- (BOOL) eventPoolIdIsSet {
  return __eventPoolId_isset;
}

- (void) unsetEventPoolId {
  __eventPoolId_isset = NO;
}

- (NSMutableArray *) starredEventItems {
  return [[__starredEventItems retain_stub] autorelease_stub];
}

- (void) setStarredEventItems: (NSMutableArray *) starredEventItems {
  [starredEventItems retain_stub];
  [__starredEventItems release_stub];
  __starredEventItems = starredEventItems;
  __starredEventItems_isset = YES;
}

- (BOOL) starredEventItemsIsSet {
  return __starredEventItems_isset;
}

- (void) unsetStarredEventItems {
  [__starredEventItems release_stub];
  __starredEventItems = nil;
  __starredEventItems_isset = NO;
}

- (NSMutableArray *) userTickets {
  return [[__userTickets retain_stub] autorelease_stub];
}

- (void) setUserTickets: (NSMutableArray *) userTickets {
  [userTickets retain_stub];
  [__userTickets release_stub];
  __userTickets = userTickets;
  __userTickets_isset = YES;
}

- (BOOL) userTicketsIsSet {
  return __userTickets_isset;
}

- (void) unsetUserTickets {
  [__userTickets release_stub];
  __userTickets = nil;
  __userTickets_isset = NO;
}

- (NSString *) emailAddress {
  return [[__emailAddress retain_stub] autorelease_stub];
}

- (void) setEmailAddress: (NSString *) emailAddress {
  [emailAddress retain_stub];
  [__emailAddress release_stub];
  __emailAddress = emailAddress;
  __emailAddress_isset = YES;
}

- (BOOL) emailAddressIsSet {
  return __emailAddress_isset;
}

- (void) unsetEmailAddress {
  [__emailAddress release_stub];
  __emailAddress = nil;
  __emailAddress_isset = NO;
}

- (NSString *) lang {
  return [[__lang retain_stub] autorelease_stub];
}

- (void) setLang: (NSString *) lang {
  [lang retain_stub];
  [__lang release_stub];
  __lang = lang;
  __lang_isset = YES;
}

- (BOOL) langIsSet {
  return __lang_isset;
}

- (void) unsetLang {
  [__lang release_stub];
  __lang = nil;
  __lang_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEventPoolId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_LIST) {
          int _size71;
          [inProtocol readListBeginReturningElementType: NULL size: &_size71];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size71];
          int _i72;
          for (_i72 = 0; _i72 < _size71; ++_i72)
          {
            int64_t _elem73 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem73]];
          }
          [inProtocol readListEnd];
          [self setStarredEventItems: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size74;
          [inProtocol readListBeginReturningElementType: NULL size: &_size74];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size74];
          int _i75;
          for (_i75 = 0; _i75 < _size74; ++_i75)
          {
            NSString * _elem76 = [inProtocol readString];
            [fieldValue addObject: _elem76];
          }
          [inProtocol readListEnd];
          [self setUserTickets: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmailAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLang: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendEmailRequest"];
  if (__eventPoolId_isset) {
    [outProtocol writeFieldBeginWithName: @"eventPoolId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __eventPoolId];
    [outProtocol writeFieldEnd];
  }
  if (__starredEventItems_isset) {
    if (__starredEventItems != nil) {
      [outProtocol writeFieldBeginWithName: @"starredEventItems" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__starredEventItems count]];
        int idx78;
        for (idx78 = 0; idx78 < [__starredEventItems count]; idx78++)
        {
          [outProtocol writeI64: [[__starredEventItems objectAtIndex: idx78] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__userTickets_isset) {
    if (__userTickets != nil) {
      [outProtocol writeFieldBeginWithName: @"userTickets" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__userTickets count]];
        int idx80;
        for (idx80 = 0; idx80 < [__userTickets count]; idx80++)
        {
          [outProtocol writeString: [__userTickets objectAtIndex: idx80]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__emailAddress_isset) {
    if (__emailAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"emailAddress" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __emailAddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lang_isset) {
    if (__lang != nil) {
      [outProtocol writeFieldBeginWithName: @"lang" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __lang];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__eventPoolId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'eventPoolId' is not set."];
  }
  if (!__starredEventItems_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'starredEventItems' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendEmailRequest("];
  [ms appendString: @"eventPoolId:"];
  [ms appendFormat: @"%qi", __eventPoolId];
  [ms appendString: @",starredEventItems:"];
  [ms appendFormat: @"%@", __starredEventItems];
  [ms appendString: @",userTickets:"];
  [ms appendFormat: @"%@", __userTickets];
  [ms appendString: @",emailAddress:"];
  [ms appendFormat: @"\"%@\"", __emailAddress];
  [ms appendString: @",lang:"];
  [ms appendFormat: @"\"%@\"", __lang];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SendEmailReply

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int32_t) status
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendEmailReply"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendEmailReply("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AdminSendRegEmailRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTemplateId: (NSString *) templateId sendOnlyTo: (NSMutableArray *) sendOnlyTo
{
  self = [super init];
  __templateId = [templateId retain_stub];
  __templateId_isset = YES;
  __sendOnlyTo = [sendOnlyTo retain_stub];
  __sendOnlyTo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"templateId"])
  {
    __templateId = [[decoder decodeObjectForKey: @"templateId"] retain_stub];
    __templateId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sendOnlyTo"])
  {
    __sendOnlyTo = [[decoder decodeObjectForKey: @"sendOnlyTo"] retain_stub];
    __sendOnlyTo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__templateId_isset)
  {
    [encoder encodeObject: __templateId forKey: @"templateId"];
  }
  if (__sendOnlyTo_isset)
  {
    [encoder encodeObject: __sendOnlyTo forKey: @"sendOnlyTo"];
  }
}

- (void) dealloc
{
  [__templateId release_stub];
  [__sendOnlyTo release_stub];
  [super dealloc_stub];
}

- (NSString *) templateId {
  return [[__templateId retain_stub] autorelease_stub];
}

- (void) setTemplateId: (NSString *) templateId {
  [templateId retain_stub];
  [__templateId release_stub];
  __templateId = templateId;
  __templateId_isset = YES;
}

- (BOOL) templateIdIsSet {
  return __templateId_isset;
}

- (void) unsetTemplateId {
  [__templateId release_stub];
  __templateId = nil;
  __templateId_isset = NO;
}

- (NSMutableArray *) sendOnlyTo {
  return [[__sendOnlyTo retain_stub] autorelease_stub];
}

- (void) setSendOnlyTo: (NSMutableArray *) sendOnlyTo {
  [sendOnlyTo retain_stub];
  [__sendOnlyTo release_stub];
  __sendOnlyTo = sendOnlyTo;
  __sendOnlyTo_isset = YES;
}

- (BOOL) sendOnlyToIsSet {
  return __sendOnlyTo_isset;
}

- (void) unsetSendOnlyTo {
  [__sendOnlyTo release_stub];
  __sendOnlyTo = nil;
  __sendOnlyTo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTemplateId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size81;
          [inProtocol readListBeginReturningElementType: NULL size: &_size81];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size81];
          int _i82;
          for (_i82 = 0; _i82 < _size81; ++_i82)
          {
            NSString * _elem83 = [inProtocol readString];
            [fieldValue addObject: _elem83];
          }
          [inProtocol readListEnd];
          [self setSendOnlyTo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AdminSendRegEmailRequest"];
  if (__templateId_isset) {
    if (__templateId != nil) {
      [outProtocol writeFieldBeginWithName: @"templateId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __templateId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sendOnlyTo_isset) {
    if (__sendOnlyTo != nil) {
      [outProtocol writeFieldBeginWithName: @"sendOnlyTo" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__sendOnlyTo count]];
        int idx85;
        for (idx85 = 0; idx85 < [__sendOnlyTo count]; idx85++)
        {
          [outProtocol writeString: [__sendOnlyTo objectAtIndex: idx85]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__templateId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'templateId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AdminSendRegEmailRequest("];
  [ms appendString: @"templateId:"];
  [ms appendFormat: @"\"%@\"", __templateId];
  [ms appendString: @",sendOnlyTo:"];
  [ms appendFormat: @"%@", __sendOnlyTo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AdminSendRegEmailReply

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (int32_t) status
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AdminSendRegEmailReply"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AdminSendRegEmailReply("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static int64_t CONTAINER_EVENT_ID = -1;
static NSMutableDictionary * EVENTS_CATEGS;
static NSMutableDictionary * EVENTS_TAGS;
static NSMutableDictionary * EVENTS_PERIODS;

@implementation eventsConstants
+ (void) initialize {
  EVENTS_CATEGS = [[NSMutableDictionary alloc] initWithCapacity:15]; 
  [EVENTS_CATEGS setObject:@"Favorites" forKey:[NSNumber numberWithLong: -2]];
  [EVENTS_CATEGS setObject:@"Featured events" forKey:[NSNumber numberWithLong: -1]];
  [EVENTS_CATEGS setObject:@"All" forKey:[NSNumber numberWithLong: 0]];
  [EVENTS_CATEGS setObject:@"Conferences - Seminars" forKey:[NSNumber numberWithLong: 1]];
  [EVENTS_CATEGS setObject:@"Meetings management tips" forKey:[NSNumber numberWithLong: 2]];
  [EVENTS_CATEGS setObject:@"Miscellaneous" forKey:[NSNumber numberWithLong: 4]];
  [EVENTS_CATEGS setObject:@"Exhibitions" forKey:[NSNumber numberWithLong: 5]];
  [EVENTS_CATEGS setObject:@"Movies" forKey:[NSNumber numberWithLong: 6]];
  [EVENTS_CATEGS setObject:@"Celebrations" forKey:[NSNumber numberWithLong: 7]];
  [EVENTS_CATEGS setObject:@"Inaugural lessons - Lessons of honor" forKey:[NSNumber numberWithLong: 8]];
  [EVENTS_CATEGS setObject:@"Cultural events" forKey:[NSNumber numberWithLong: 9]];
  [EVENTS_CATEGS setObject:@"Sporting events" forKey:[NSNumber numberWithLong: 10]];
  [EVENTS_CATEGS setObject:@"Dating EPFL - economy" forKey:[NSNumber numberWithLong: 11]];
  [EVENTS_CATEGS setObject:@"Thesis defenses" forKey:[NSNumber numberWithLong: 12]];
  [EVENTS_CATEGS setObject:@"Academic calendar" forKey:[NSNumber numberWithLong: 13]];

;
  EVENTS_TAGS = [[NSMutableDictionary alloc] initWithCapacity:9]; 
  [EVENTS_TAGS setObject:@"École Polytechnique Fédérale de Lausanne" forKey:@"epfl"];
  [EVENTS_TAGS setObject:@"Architecture, Civil and Environmental Engineering" forKey:@"enac"];
  [EVENTS_TAGS setObject:@"Basic Sciences" forKey:@"sb"];
  [EVENTS_TAGS setObject:@"Engineering" forKey:@"sti"];
  [EVENTS_TAGS setObject:@"Computer & Communication Sciences" forKey:@"ic"];
  [EVENTS_TAGS setObject:@"Life Sciences" forKey:@"sv"];
  [EVENTS_TAGS setObject:@"Management of Technology" forKey:@"cdm"];
  [EVENTS_TAGS setObject:@"College of Humanities" forKey:@"cdh"];
  [EVENTS_TAGS setObject:@"Associations" forKey:@"associations"];

;
  EVENTS_PERIODS = [[NSMutableDictionary alloc] initWithCapacity:7]; 
  [EVENTS_PERIODS setObject:@"One day" forKey:[NSNumber numberWithLong: 1]];
  [EVENTS_PERIODS setObject:@"Two days" forKey:[NSNumber numberWithLong: 2]];
  [EVENTS_PERIODS setObject:@"One week" forKey:[NSNumber numberWithLong: 7]];
  [EVENTS_PERIODS setObject:@"Two weeks" forKey:[NSNumber numberWithLong: 14]];
  [EVENTS_PERIODS setObject:@"One month" forKey:[NSNumber numberWithLong: 30]];
  [EVENTS_PERIODS setObject:@"Six months" forKey:[NSNumber numberWithLong: 180]];
  [EVENTS_PERIODS setObject:@"One year" forKey:[NSNumber numberWithLong: 365]];

;
}
+ (int64_t) CONTAINER_EVENT_ID{
  return CONTAINER_EVENT_ID;
}
+ (NSMutableDictionary *) EVENTS_CATEGS{
  return EVENTS_CATEGS;
}
+ (NSMutableDictionary *) EVENTS_TAGS{
  return EVENTS_TAGS;
}
+ (NSMutableDictionary *) EVENTS_PERIODS{
  return EVENTS_PERIODS;
}
@end

@interface getEventItem_args : NSObject <TBase, NSCoding> {
  EventItemRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) EventItemRequest * iRequest;
#endif

- (id) init;
- (id) initWithIRequest: (EventItemRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (EventItemRequest *) iRequest;
- (void) setIRequest: (EventItemRequest *) iRequest;
#endif
- (BOOL) iRequestIsSet;

@end

@implementation getEventItem_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIRequest: (EventItemRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain_stub];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain_stub];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release_stub];
  [super dealloc_stub];
}

- (EventItemRequest *) iRequest {
  return [[__iRequest retain_stub] autorelease_stub];
}

- (void) setIRequest: (EventItemRequest *) iRequest {
  [iRequest retain_stub];
  [__iRequest release_stub];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release_stub];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          EventItemRequest *fieldValue = [[EventItemRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getEventItem_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getEventItem_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetEventItem_result : NSObject <TBase, NSCoding> {
  EventItemReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EventItemReply * success;
#endif

- (id) init;
- (id) initWithSuccess: (EventItemReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (EventItemReply *) success;
- (void) setSuccess: (EventItemReply *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetEventItem_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (EventItemReply *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (EventItemReply *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (EventItemReply *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EventItemReply *fieldValue = [[EventItemReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetEventItem_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetEventItem_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getEventPool_args : NSObject <TBase, NSCoding> {
  EventPoolRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) EventPoolRequest * iRequest;
#endif

- (id) init;
- (id) initWithIRequest: (EventPoolRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (EventPoolRequest *) iRequest;
- (void) setIRequest: (EventPoolRequest *) iRequest;
#endif
- (BOOL) iRequestIsSet;

@end

@implementation getEventPool_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIRequest: (EventPoolRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain_stub];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain_stub];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release_stub];
  [super dealloc_stub];
}

- (EventPoolRequest *) iRequest {
  return [[__iRequest retain_stub] autorelease_stub];
}

- (void) setIRequest: (EventPoolRequest *) iRequest {
  [iRequest retain_stub];
  [__iRequest release_stub];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release_stub];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          EventPoolRequest *fieldValue = [[EventPoolRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getEventPool_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getEventPool_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetEventPool_result : NSObject <TBase, NSCoding> {
  EventPoolReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EventPoolReply * success;
#endif

- (id) init;
- (id) initWithSuccess: (EventPoolReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (EventPoolReply *) success;
- (void) setSuccess: (EventPoolReply *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetEventPool_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (EventPoolReply *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (EventPoolReply *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (EventPoolReply *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EventPoolReply *fieldValue = [[EventPoolReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetEventPool_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetEventPool_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface exchangeContacts_args : NSObject <TBase, NSCoding> {
  ExchangeRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) ExchangeRequest * iRequest;
#endif

- (id) init;
- (id) initWithIRequest: (ExchangeRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ExchangeRequest *) iRequest;
- (void) setIRequest: (ExchangeRequest *) iRequest;
#endif
- (BOOL) iRequestIsSet;

@end

@implementation exchangeContacts_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIRequest: (ExchangeRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain_stub];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain_stub];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release_stub];
  [super dealloc_stub];
}

- (ExchangeRequest *) iRequest {
  return [[__iRequest retain_stub] autorelease_stub];
}

- (void) setIRequest: (ExchangeRequest *) iRequest {
  [iRequest retain_stub];
  [__iRequest release_stub];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release_stub];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ExchangeRequest *fieldValue = [[ExchangeRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"exchangeContacts_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"exchangeContacts_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ExchangeContacts_result : NSObject <TBase, NSCoding> {
  ExchangeReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ExchangeReply * success;
#endif

- (id) init;
- (id) initWithSuccess: (ExchangeReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ExchangeReply *) success;
- (void) setSuccess: (ExchangeReply *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ExchangeContacts_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ExchangeReply *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (ExchangeReply *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ExchangeReply *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ExchangeReply *fieldValue = [[ExchangeReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ExchangeContacts_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ExchangeContacts_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface sendStarredItemsByEmail_args : NSObject <TBase, NSCoding> {
  SendEmailRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) SendEmailRequest * iRequest;
#endif

- (id) init;
- (id) initWithIRequest: (SendEmailRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SendEmailRequest *) iRequest;
- (void) setIRequest: (SendEmailRequest *) iRequest;
#endif
- (BOOL) iRequestIsSet;

@end

@implementation sendStarredItemsByEmail_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIRequest: (SendEmailRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain_stub];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain_stub];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release_stub];
  [super dealloc_stub];
}

- (SendEmailRequest *) iRequest {
  return [[__iRequest retain_stub] autorelease_stub];
}

- (void) setIRequest: (SendEmailRequest *) iRequest {
  [iRequest retain_stub];
  [__iRequest release_stub];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release_stub];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SendEmailRequest *fieldValue = [[SendEmailRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendStarredItemsByEmail_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendStarredItemsByEmail_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SendStarredItemsByEmail_result : NSObject <TBase, NSCoding> {
  SendEmailReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SendEmailReply * success;
#endif

- (id) init;
- (id) initWithSuccess: (SendEmailReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SendEmailReply *) success;
- (void) setSuccess: (SendEmailReply *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation SendStarredItemsByEmail_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SendEmailReply *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (SendEmailReply *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SendEmailReply *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SendEmailReply *fieldValue = [[SendEmailReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendStarredItemsByEmail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendStarredItemsByEmail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface adminSendRegistrationEmail_args : NSObject <TBase, NSCoding> {
  AdminSendRegEmailRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) AdminSendRegEmailRequest * iRequest;
#endif

- (id) init;
- (id) initWithIRequest: (AdminSendRegEmailRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AdminSendRegEmailRequest *) iRequest;
- (void) setIRequest: (AdminSendRegEmailRequest *) iRequest;
#endif
- (BOOL) iRequestIsSet;

@end

@implementation adminSendRegistrationEmail_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIRequest: (AdminSendRegEmailRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain_stub];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain_stub];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release_stub];
  [super dealloc_stub];
}

- (AdminSendRegEmailRequest *) iRequest {
  return [[__iRequest retain_stub] autorelease_stub];
}

- (void) setIRequest: (AdminSendRegEmailRequest *) iRequest {
  [iRequest retain_stub];
  [__iRequest release_stub];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release_stub];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AdminSendRegEmailRequest *fieldValue = [[AdminSendRegEmailRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"adminSendRegistrationEmail_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"adminSendRegistrationEmail_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AdminSendRegistrationEmail_result : NSObject <TBase, NSCoding> {
  AdminSendRegEmailReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AdminSendRegEmailReply * success;
#endif

- (id) init;
- (id) initWithSuccess: (AdminSendRegEmailReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AdminSendRegEmailReply *) success;
- (void) setSuccess: (AdminSendRegEmailReply *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AdminSendRegistrationEmail_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AdminSendRegEmailReply *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (AdminSendRegEmailReply *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AdminSendRegEmailReply *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AdminSendRegEmailReply *fieldValue = [[AdminSendRegEmailReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AdminSendRegistrationEmail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AdminSendRegistrationEmail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EventsServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getEventItem: (EventItemRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"getEventItem" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getEventItem_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EventItemReply *) recv_getEventItem
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetEventItem_result * result = [[[GetEventItem_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getEventItem failed: unknown result"];
}

- (EventItemReply *) getEventItem: (EventItemRequest *) iRequest
{
  [self send_getEventItem : iRequest];
  return [self recv_getEventItem];
}

- (void) send_getEventPool: (EventPoolRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"getEventPool" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getEventPool_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EventPoolReply *) recv_getEventPool
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetEventPool_result * result = [[[GetEventPool_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getEventPool failed: unknown result"];
}

- (EventPoolReply *) getEventPool: (EventPoolRequest *) iRequest
{
  [self send_getEventPool : iRequest];
  return [self recv_getEventPool];
}

- (void) send_exchangeContacts: (ExchangeRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"exchangeContacts" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"exchangeContacts_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ExchangeReply *) recv_exchangeContacts
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ExchangeContacts_result * result = [[[ExchangeContacts_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"exchangeContacts failed: unknown result"];
}

- (ExchangeReply *) exchangeContacts: (ExchangeRequest *) iRequest
{
  [self send_exchangeContacts : iRequest];
  return [self recv_exchangeContacts];
}

- (void) send_sendStarredItemsByEmail: (SendEmailRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"sendStarredItemsByEmail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendStarredItemsByEmail_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SendEmailReply *) recv_sendStarredItemsByEmail
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SendStarredItemsByEmail_result * result = [[[SendStarredItemsByEmail_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendStarredItemsByEmail failed: unknown result"];
}

- (SendEmailReply *) sendStarredItemsByEmail: (SendEmailRequest *) iRequest
{
  [self send_sendStarredItemsByEmail : iRequest];
  return [self recv_sendStarredItemsByEmail];
}

- (void) send_adminSendRegistrationEmail: (AdminSendRegEmailRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"adminSendRegistrationEmail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"adminSendRegistrationEmail_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AdminSendRegEmailReply *) recv_adminSendRegistrationEmail
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  AdminSendRegistrationEmail_result * result = [[[AdminSendRegistrationEmail_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"adminSendRegistrationEmail failed: unknown result"];
}

- (AdminSendRegEmailReply *) adminSendRegistrationEmail: (AdminSendRegEmailRequest *) iRequest
{
  [self send_adminSendRegistrationEmail : iRequest];
  return [self recv_adminSendRegistrationEmail];
}

@end

@implementation EventsServiceProcessor

- (id) initWithEventsService: (id <EventsService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getEventItem_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getEventItem"];
  }
  {
    SEL s = @selector(process_getEventPool_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getEventPool"];
  }
  {
    SEL s = @selector(process_exchangeContacts_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"exchangeContacts"];
  }
  {
    SEL s = @selector(process_sendStarredItemsByEmail_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"sendStarredItemsByEmail"];
  }
  {
    SEL s = @selector(process_adminSendRegistrationEmail_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"adminSendRegistrationEmail"];
  }
  return self;
}

- (id<EventsService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getEventItem_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getEventItem_args * args = [[getEventItem_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetEventItem_result * result = [[GetEventItem_result alloc] init];
  [result setSuccess: [mService getEventItem: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"getEventItem"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getEventPool_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getEventPool_args * args = [[getEventPool_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetEventPool_result * result = [[GetEventPool_result alloc] init];
  [result setSuccess: [mService getEventPool: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"getEventPool"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_exchangeContacts_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  exchangeContacts_args * args = [[exchangeContacts_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ExchangeContacts_result * result = [[ExchangeContacts_result alloc] init];
  [result setSuccess: [mService exchangeContacts: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"exchangeContacts"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_sendStarredItemsByEmail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  sendStarredItemsByEmail_args * args = [[sendStarredItemsByEmail_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SendStarredItemsByEmail_result * result = [[SendStarredItemsByEmail_result alloc] init];
  [result setSuccess: [mService sendStarredItemsByEmail: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"sendStarredItemsByEmail"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_adminSendRegistrationEmail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  adminSendRegistrationEmail_args * args = [[adminSendRegistrationEmail_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  AdminSendRegistrationEmail_result * result = [[AdminSendRegistrationEmail_result alloc] init];
  [result setSuccess: [mService adminSendRegistrationEmail: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"adminSendRegistrationEmail"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

