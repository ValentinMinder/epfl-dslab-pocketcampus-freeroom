/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "isacademia.h"


@implementation isacademiaConstants
+ (void) initialize {
}
@end

@implementation StudyPeriod

- (id) initWithName: (NSString *) name periodType: (int) periodType startTime: (timestamp) startTime endTime: (timestamp) endTime rooms: (NSArray *) rooms
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __periodType = periodType;
  __periodType_isset = YES;
  __startTime = startTime;
  __startTime_isset = YES;
  __endTime = endTime;
  __endTime_isset = YES;
  __rooms = [rooms retain];
  __rooms_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"periodType"])
  {
    __periodType = [decoder decodeIntForKey: @"periodType"];
    __periodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"startTime"])
  {
    __startTime = [decoder decodeInt64ForKey: @"startTime"];
    __startTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endTime"])
  {
    __endTime = [decoder decodeInt64ForKey: @"endTime"];
    __endTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"rooms"])
  {
    __rooms = [[decoder decodeObjectForKey: @"rooms"] retain];
    __rooms_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__periodType_isset)
  {
    [encoder encodeInt: __periodType forKey: @"periodType"];
  }
  if (__startTime_isset)
  {
    [encoder encodeInt64: __startTime forKey: @"startTime"];
  }
  if (__endTime_isset)
  {
    [encoder encodeInt64: __endTime forKey: @"endTime"];
  }
  if (__rooms_isset)
  {
    [encoder encodeObject: __rooms forKey: @"rooms"];
  }
}

- (void) dealloc
{
  [__name release];
  [__rooms release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (int) periodType {
  return __periodType;
}

- (void) setPeriodType: (int) periodType {
  __periodType = periodType;
  __periodType_isset = YES;
}

- (BOOL) periodTypeIsSet {
  return __periodType_isset;
}

- (void) unsetPeriodType {
  __periodType_isset = NO;
}

- (int64_t) startTime {
  return __startTime;
}

- (void) setStartTime: (int64_t) startTime {
  __startTime = startTime;
  __startTime_isset = YES;
}

- (BOOL) startTimeIsSet {
  return __startTime_isset;
}

- (void) unsetStartTime {
  __startTime_isset = NO;
}

- (int64_t) endTime {
  return __endTime;
}

- (void) setEndTime: (int64_t) endTime {
  __endTime = endTime;
  __endTime_isset = YES;
}

- (BOOL) endTimeIsSet {
  return __endTime_isset;
}

- (void) unsetEndTime {
  __endTime_isset = NO;
}

- (NSArray *) rooms {
  return [[__rooms retain] autorelease];
}

- (void) setRooms: (NSArray *) rooms {
  [rooms retain];
  [__rooms release];
  __rooms = rooms;
  __rooms_isset = YES;
}

- (BOOL) roomsIsSet {
  return __rooms_isset;
}

- (void) unsetRooms {
  [__rooms release];
  __rooms = nil;
  __rooms_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setPeriodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEndTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setRooms: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StudyPeriod"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__periodType_isset) {
    [outProtocol writeFieldBeginWithName: @"periodType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __periodType];
    [outProtocol writeFieldEnd];
  }
  if (__startTime_isset) {
    [outProtocol writeFieldBeginWithName: @"startTime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __startTime];
    [outProtocol writeFieldEnd];
  }
  if (__endTime_isset) {
    [outProtocol writeFieldBeginWithName: @"endTime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __endTime];
    [outProtocol writeFieldEnd];
  }
  if (__rooms_isset) {
    if (__rooms != nil) {
      [outProtocol writeFieldBeginWithName: @"rooms" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__rooms count]];
        int i4;
        for (i4 = 0; i4 < [__rooms count]; i4++)
        {
          [outProtocol writeString: [__rooms objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StudyPeriod("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",periodType:"];
  [ms appendFormat: @"%i", __periodType];
  [ms appendString: @",startTime:"];
  [ms appendFormat: @"%qi", __startTime];
  [ms appendString: @",endTime:"];
  [ms appendFormat: @"%qi", __endTime];
  [ms appendString: @",rooms:"];
  [ms appendFormat: @"%@", __rooms];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation StudyDay

- (id) initWithDay: (timestamp) day periods: (NSArray *) periods
{
  self = [super init];
  __day = day;
  __day_isset = YES;
  __periods = [periods retain];
  __periods_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"day"])
  {
    __day = [decoder decodeInt64ForKey: @"day"];
    __day_isset = YES;
  }
  if ([decoder containsValueForKey: @"periods"])
  {
    __periods = [[decoder decodeObjectForKey: @"periods"] retain];
    __periods_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__day_isset)
  {
    [encoder encodeInt64: __day forKey: @"day"];
  }
  if (__periods_isset)
  {
    [encoder encodeObject: __periods forKey: @"periods"];
  }
}

- (void) dealloc
{
  [__periods release];
  [super dealloc];
}

- (int64_t) day {
  return __day;
}

- (void) setDay: (int64_t) day {
  __day = day;
  __day_isset = YES;
}

- (BOOL) dayIsSet {
  return __day_isset;
}

- (void) unsetDay {
  __day_isset = NO;
}

- (NSArray *) periods {
  return [[__periods retain] autorelease];
}

- (void) setPeriods: (NSArray *) periods {
  [periods retain];
  [__periods release];
  __periods = periods;
  __periods_isset = YES;
}

- (BOOL) periodsIsSet {
  return __periods_isset;
}

- (void) unsetPeriods {
  [__periods release];
  __periods = nil;
  __periods_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            StudyPeriod *_elem7 = [[StudyPeriod alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setPeriods: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StudyDay"];
  if (__day_isset) {
    [outProtocol writeFieldBeginWithName: @"day" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __day];
    [outProtocol writeFieldEnd];
  }
  if (__periods_isset) {
    if (__periods != nil) {
      [outProtocol writeFieldBeginWithName: @"periods" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__periods count]];
        int i9;
        for (i9 = 0; i9 < [__periods count]; i9++)
        {
          [[__periods objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StudyDay("];
  [ms appendString: @"day:"];
  [ms appendFormat: @"%qi", __day];
  [ms appendString: @",periods:"];
  [ms appendFormat: @"%@", __periods];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ScheduleToken

- (id) initWithTequilaToken: (NSString *) tequilaToken sessionId: (NSString *) sessionId
{
  self = [super init];
  __tequilaToken = [tequilaToken retain];
  __tequilaToken_isset = YES;
  __sessionId = [sessionId retain];
  __sessionId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tequilaToken"])
  {
    __tequilaToken = [[decoder decodeObjectForKey: @"tequilaToken"] retain];
    __tequilaToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionId"])
  {
    __sessionId = [[decoder decodeObjectForKey: @"sessionId"] retain];
    __sessionId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tequilaToken_isset)
  {
    [encoder encodeObject: __tequilaToken forKey: @"tequilaToken"];
  }
  if (__sessionId_isset)
  {
    [encoder encodeObject: __sessionId forKey: @"sessionId"];
  }
}

- (void) dealloc
{
  [__tequilaToken release];
  [__sessionId release];
  [super dealloc];
}

- (NSString *) tequilaToken {
  return [[__tequilaToken retain] autorelease];
}

- (void) setTequilaToken: (NSString *) tequilaToken {
  [tequilaToken retain];
  [__tequilaToken release];
  __tequilaToken = tequilaToken;
  __tequilaToken_isset = YES;
}

- (BOOL) tequilaTokenIsSet {
  return __tequilaToken_isset;
}

- (void) unsetTequilaToken {
  [__tequilaToken release];
  __tequilaToken = nil;
  __tequilaToken_isset = NO;
}

- (NSString *) sessionId {
  return [[__sessionId retain] autorelease];
}

- (void) setSessionId: (NSString *) sessionId {
  [sessionId retain];
  [__sessionId release];
  __sessionId = sessionId;
  __sessionId_isset = YES;
}

- (BOOL) sessionIdIsSet {
  return __sessionId_isset;
}

- (void) unsetSessionId {
  [__sessionId release];
  __sessionId = nil;
  __sessionId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTequilaToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ScheduleToken"];
  if (__tequilaToken_isset) {
    if (__tequilaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"tequilaToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tequilaToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionId_isset) {
    if (__sessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ScheduleToken("];
  [ms appendString: @"tequilaToken:"];
  [ms appendFormat: @"\"%@\"", __tequilaToken];
  [ms appendString: @",sessionId:"];
  [ms appendFormat: @"\"%@\"", __sessionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ScheduleRequest

- (id) initWithToken: (ScheduleToken *) token weekStart: (timestamp) weekStart language: (NSString *) language
{
  self = [super init];
  __token = [token retain];
  __token_isset = YES;
  __weekStart = weekStart;
  __weekStart_isset = YES;
  __language = [language retain];
  __language_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"weekStart"])
  {
    __weekStart = [decoder decodeInt64ForKey: @"weekStart"];
    __weekStart_isset = YES;
  }
  if ([decoder containsValueForKey: @"language"])
  {
    __language = [[decoder decodeObjectForKey: @"language"] retain];
    __language_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__weekStart_isset)
  {
    [encoder encodeInt64: __weekStart forKey: @"weekStart"];
  }
  if (__language_isset)
  {
    [encoder encodeObject: __language forKey: @"language"];
  }
}

- (void) dealloc
{
  [__token release];
  [__language release];
  [super dealloc];
}

- (ScheduleToken *) token {
  return [[__token retain] autorelease];
}

- (void) setToken: (ScheduleToken *) token {
  [token retain];
  [__token release];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release];
  __token = nil;
  __token_isset = NO;
}

- (int64_t) weekStart {
  return __weekStart;
}

- (void) setWeekStart: (int64_t) weekStart {
  __weekStart = weekStart;
  __weekStart_isset = YES;
}

- (BOOL) weekStartIsSet {
  return __weekStart_isset;
}

- (void) unsetWeekStart {
  __weekStart_isset = NO;
}

- (NSString *) language {
  return [[__language retain] autorelease];
}

- (void) setLanguage: (NSString *) language {
  [language retain];
  [__language release];
  __language = language;
  __language_isset = YES;
}

- (BOOL) languageIsSet {
  return __language_isset;
}

- (void) unsetLanguage {
  [__language release];
  __language = nil;
  __language_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ScheduleToken *fieldValue = [[ScheduleToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setWeekStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ScheduleRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weekStart_isset) {
    [outProtocol writeFieldBeginWithName: @"weekStart" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __weekStart];
    [outProtocol writeFieldEnd];
  }
  if (__language_isset) {
    if (__language != nil) {
      [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __language];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ScheduleRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",weekStart:"];
  [ms appendFormat: @"%qi", __weekStart];
  [ms appendString: @",language:"];
  [ms appendFormat: @"\"%@\"", __language];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ScheduleTokenResponse

- (id) initWithToken: (ScheduleToken *) token statusCode: (int) statusCode
{
  self = [super init];
  __token = [token retain];
  __token_isset = YES;
  __statusCode = statusCode;
  __statusCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
}

- (void) dealloc
{
  [__token release];
  [super dealloc];
}

- (ScheduleToken *) token {
  return [[__token retain] autorelease];
}

- (void) setToken: (ScheduleToken *) token {
  [token retain];
  [__token release];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release];
  __token = nil;
  __token_isset = NO;
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ScheduleToken *fieldValue = [[ScheduleToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ScheduleTokenResponse"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ScheduleTokenResponse("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ScheduleResponse

- (id) initWithDays: (NSArray *) days statusCode: (int) statusCode
{
  self = [super init];
  __days = [days retain];
  __days_isset = YES;
  __statusCode = statusCode;
  __statusCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"days"])
  {
    __days = [[decoder decodeObjectForKey: @"days"] retain];
    __days_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusCode"])
  {
    __statusCode = [decoder decodeIntForKey: @"statusCode"];
    __statusCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__days_isset)
  {
    [encoder encodeObject: __days forKey: @"days"];
  }
  if (__statusCode_isset)
  {
    [encoder encodeInt: __statusCode forKey: @"statusCode"];
  }
}

- (void) dealloc
{
  [__days release];
  [super dealloc];
}

- (NSArray *) days {
  return [[__days retain] autorelease];
}

- (void) setDays: (NSArray *) days {
  [days retain];
  [__days release];
  __days = days;
  __days_isset = YES;
}

- (BOOL) daysIsSet {
  return __days_isset;
}

- (void) unsetDays {
  [__days release];
  __days = nil;
  __days_isset = NO;
}

- (int) statusCode {
  return __statusCode;
}

- (void) setStatusCode: (int) statusCode {
  __statusCode = statusCode;
  __statusCode_isset = YES;
}

- (BOOL) statusCodeIsSet {
  return __statusCode_isset;
}

- (void) unsetStatusCode {
  __statusCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            StudyDay *_elem12 = [[StudyDay alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release];
          }
          [inProtocol readListEnd];
          [self setDays: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatusCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ScheduleResponse"];
  if (__days_isset) {
    if (__days != nil) {
      [outProtocol writeFieldBeginWithName: @"days" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__days count]];
        int i14;
        for (i14 = 0; i14 < [__days count]; i14++)
        {
          [[__days objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusCode_isset) {
    [outProtocol writeFieldBeginWithName: @"statusCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __statusCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ScheduleResponse("];
  [ms appendString: @"days:"];
  [ms appendFormat: @"%@", __days];
  [ms appendString: @",statusCode:"];
  [ms appendFormat: @"%i", __statusCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getScheduleToken_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getScheduleToken_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getScheduleToken_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getScheduleToken_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetScheduleToken_result : NSObject <NSCoding> {
  ScheduleTokenResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ScheduleTokenResponse * success;
#endif

- (id) initWithSuccess: (ScheduleTokenResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (ScheduleTokenResponse *) success;
- (void) setSuccess: (ScheduleTokenResponse *) success;
- (BOOL) successIsSet;

@end

@implementation GetScheduleToken_result

- (id) initWithSuccess: (ScheduleTokenResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (ScheduleTokenResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (ScheduleTokenResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ScheduleTokenResponse *fieldValue = [[ScheduleTokenResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetScheduleToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetScheduleToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getSchedule_args : NSObject <NSCoding> {
  ScheduleRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ScheduleRequest * req;
#endif

- (id) initWithReq: (ScheduleRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (ScheduleRequest *) req;
- (void) setReq: (ScheduleRequest *) req;
- (BOOL) reqIsSet;

@end

@implementation getSchedule_args

- (id) initWithReq: (ScheduleRequest *) req
{
  self = [super init];
  __req = [req retain];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release];
  [super dealloc];
}

- (ScheduleRequest *) req {
  return [[__req retain] autorelease];
}

- (void) setReq: (ScheduleRequest *) req {
  [req retain];
  [__req release];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ScheduleRequest *fieldValue = [[ScheduleRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getSchedule_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getSchedule_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetSchedule_result : NSObject <NSCoding> {
  ScheduleResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ScheduleResponse * success;
#endif

- (id) initWithSuccess: (ScheduleResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (ScheduleResponse *) success;
- (void) setSuccess: (ScheduleResponse *) success;
- (BOOL) successIsSet;

@end

@implementation GetSchedule_result

- (id) initWithSuccess: (ScheduleResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (ScheduleResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (ScheduleResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ScheduleResponse *fieldValue = [[ScheduleResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSchedule_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSchedule_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation IsAcademiaServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getScheduleToken
{
  [outProtocol writeMessageBeginWithName: @"getScheduleToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getScheduleToken_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ScheduleTokenResponse *) recv_getScheduleToken
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetScheduleToken_result * result = [[[GetScheduleToken_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getScheduleToken failed: unknown result"];
}

- (ScheduleTokenResponse *) getScheduleToken
{
  [self send_getScheduleToken];
  return [self recv_getScheduleToken];
}

- (void) send_getSchedule: (ScheduleRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"getSchedule" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getSchedule_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ScheduleResponse *) recv_getSchedule
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetSchedule_result * result = [[[GetSchedule_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getSchedule failed: unknown result"];
}

- (ScheduleResponse *) getSchedule: (ScheduleRequest *) req
{
  [self send_getSchedule: req];
  return [self recv_getSchedule];
}

@end

@implementation IsAcademiaServiceProcessor

- (id) initWithIsAcademiaService: (id <IsAcademiaService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_getScheduleToken_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getScheduleToken"];
  }
  {
    SEL s = @selector(process_getSchedule_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getSchedule"];
  }
  return self;
}

- (id<IsAcademiaService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getScheduleToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getScheduleToken_args * args = [[getScheduleToken_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetScheduleToken_result * result = [[GetScheduleToken_result alloc] init];
  [result setSuccess: [mService getScheduleToken]];
  [outProtocol writeMessageBeginWithName: @"getScheduleToken"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getSchedule_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getSchedule_args * args = [[getSchedule_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetSchedule_result * result = [[GetSchedule_result alloc] init];
  [result setSuccess: [mService getSchedule: [args req]]];
  [outProtocol writeMessageBeginWithName: @"getSchedule"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

