/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "common.h"

#import "food.h"

@implementation Restaurant

- (id) initWithRestaurantId: (Id) restaurantId name: (NSString *) name location: (Location *) location
{
  self = [super init];
  __restaurantId = restaurantId;
  __restaurantId_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __location = [location retain];
  __location_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"restaurantId"])
  {
    __restaurantId = [decoder decodeInt64ForKey: @"restaurantId"];
    __restaurantId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain];
    __location_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__restaurantId_isset)
  {
    [encoder encodeInt64: __restaurantId forKey: @"restaurantId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
}

- (void) dealloc
{
  [__name release];
  [__location release];
  [super dealloc];
}

- (int64_t) restaurantId {
  return __restaurantId;
}

- (void) setRestaurantId: (int64_t) restaurantId {
  __restaurantId = restaurantId;
  __restaurantId_isset = YES;
}

- (BOOL) restaurantIdIsSet {
  return __restaurantId_isset;
}

- (void) unsetRestaurantId {
  __restaurantId_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (Location *) location {
  return [[__location retain] autorelease];
}

- (void) setLocation: (Location *) location {
  [location retain];
  [__location release];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release];
  __location = nil;
  __location_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRestaurantId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Location *fieldValue = [[Location alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Restaurant"];
  if (__restaurantId_isset) {
    [outProtocol writeFieldBeginWithName: @"restaurantId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __restaurantId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 3];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Restaurant("];
  [ms appendString: @"restaurantId:"];
  [ms appendFormat: @"%qi", __restaurantId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Rating

- (id) initWithRatingValue: (double) ratingValue numberOfVotes: (int32_t) numberOfVotes sumOfRatings: (double) sumOfRatings
{
  self = [super init];
  __ratingValue = ratingValue;
  __ratingValue_isset = YES;
  __numberOfVotes = numberOfVotes;
  __numberOfVotes_isset = YES;
  __sumOfRatings = sumOfRatings;
  __sumOfRatings_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ratingValue"])
  {
    __ratingValue = [decoder decodeDoubleForKey: @"ratingValue"];
    __ratingValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"numberOfVotes"])
  {
    __numberOfVotes = [decoder decodeInt32ForKey: @"numberOfVotes"];
    __numberOfVotes_isset = YES;
  }
  if ([decoder containsValueForKey: @"sumOfRatings"])
  {
    __sumOfRatings = [decoder decodeDoubleForKey: @"sumOfRatings"];
    __sumOfRatings_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ratingValue_isset)
  {
    [encoder encodeDouble: __ratingValue forKey: @"ratingValue"];
  }
  if (__numberOfVotes_isset)
  {
    [encoder encodeInt32: __numberOfVotes forKey: @"numberOfVotes"];
  }
  if (__sumOfRatings_isset)
  {
    [encoder encodeDouble: __sumOfRatings forKey: @"sumOfRatings"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (double) ratingValue {
  return __ratingValue;
}

- (void) setRatingValue: (double) ratingValue {
  __ratingValue = ratingValue;
  __ratingValue_isset = YES;
}

- (BOOL) ratingValueIsSet {
  return __ratingValue_isset;
}

- (void) unsetRatingValue {
  __ratingValue_isset = NO;
}

- (int32_t) numberOfVotes {
  return __numberOfVotes;
}

- (void) setNumberOfVotes: (int32_t) numberOfVotes {
  __numberOfVotes = numberOfVotes;
  __numberOfVotes_isset = YES;
}

- (BOOL) numberOfVotesIsSet {
  return __numberOfVotes_isset;
}

- (void) unsetNumberOfVotes {
  __numberOfVotes_isset = NO;
}

- (double) sumOfRatings {
  return __sumOfRatings;
}

- (void) setSumOfRatings: (double) sumOfRatings {
  __sumOfRatings = sumOfRatings;
  __sumOfRatings_isset = YES;
}

- (BOOL) sumOfRatingsIsSet {
  return __sumOfRatings_isset;
}

- (void) unsetSumOfRatings {
  __sumOfRatings_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setRatingValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumberOfVotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSumOfRatings: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Rating"];
  if (__ratingValue_isset) {
    [outProtocol writeFieldBeginWithName: @"ratingValue" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __ratingValue];
    [outProtocol writeFieldEnd];
  }
  if (__numberOfVotes_isset) {
    [outProtocol writeFieldBeginWithName: @"numberOfVotes" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __numberOfVotes];
    [outProtocol writeFieldEnd];
  }
  if (__sumOfRatings_isset) {
    [outProtocol writeFieldBeginWithName: @"sumOfRatings" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __sumOfRatings];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Rating("];
  [ms appendString: @"ratingValue:"];
  [ms appendFormat: @"%f", __ratingValue];
  [ms appendString: @",numberOfVotes:"];
  [ms appendFormat: @"%i", __numberOfVotes];
  [ms appendString: @",sumOfRatings:"];
  [ms appendFormat: @"%f", __sumOfRatings];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Meal

- (id) initWithMealId: (Id) mealId name: (NSString *) name mealDescription: (NSString *) mealDescription restaurant: (Restaurant *) restaurant rating: (Rating *) rating price: (double) price
{
  self = [super init];
  __mealId = mealId;
  __mealId_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __mealDescription = [mealDescription retain];
  __mealDescription_isset = YES;
  __restaurant = [restaurant retain];
  __restaurant_isset = YES;
  __rating = [rating retain];
  __rating_isset = YES;
  __price = price;
  __price_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mealId"])
  {
    __mealId = [decoder decodeInt64ForKey: @"mealId"];
    __mealId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"mealDescription"])
  {
    __mealDescription = [[decoder decodeObjectForKey: @"mealDescription"] retain];
    __mealDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"restaurant"])
  {
    __restaurant = [[decoder decodeObjectForKey: @"restaurant"] retain];
    __restaurant_isset = YES;
  }
  if ([decoder containsValueForKey: @"rating"])
  {
    __rating = [[decoder decodeObjectForKey: @"rating"] retain];
    __rating_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [decoder decodeDoubleForKey: @"price"];
    __price_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mealId_isset)
  {
    [encoder encodeInt64: __mealId forKey: @"mealId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__mealDescription_isset)
  {
    [encoder encodeObject: __mealDescription forKey: @"mealDescription"];
  }
  if (__restaurant_isset)
  {
    [encoder encodeObject: __restaurant forKey: @"restaurant"];
  }
  if (__rating_isset)
  {
    [encoder encodeObject: __rating forKey: @"rating"];
  }
  if (__price_isset)
  {
    [encoder encodeDouble: __price forKey: @"price"];
  }
}

- (void) dealloc
{
  [__name release];
  [__mealDescription release];
  [__restaurant release];
  [__rating release];
  [super dealloc];
}

- (int64_t) mealId {
  return __mealId;
}

- (void) setMealId: (int64_t) mealId {
  __mealId = mealId;
  __mealId_isset = YES;
}

- (BOOL) mealIdIsSet {
  return __mealId_isset;
}

- (void) unsetMealId {
  __mealId_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) mealDescription {
  return [[__mealDescription retain] autorelease];
}

- (void) setMealDescription: (NSString *) mealDescription {
  [mealDescription retain];
  [__mealDescription release];
  __mealDescription = mealDescription;
  __mealDescription_isset = YES;
}

- (BOOL) mealDescriptionIsSet {
  return __mealDescription_isset;
}

- (void) unsetMealDescription {
  [__mealDescription release];
  __mealDescription = nil;
  __mealDescription_isset = NO;
}

- (Restaurant *) restaurant {
  return [[__restaurant retain] autorelease];
}

- (void) setRestaurant: (Restaurant *) restaurant {
  [restaurant retain];
  [__restaurant release];
  __restaurant = restaurant;
  __restaurant_isset = YES;
}

- (BOOL) restaurantIsSet {
  return __restaurant_isset;
}

- (void) unsetRestaurant {
  [__restaurant release];
  __restaurant = nil;
  __restaurant_isset = NO;
}

- (Rating *) rating {
  return [[__rating retain] autorelease];
}

- (void) setRating: (Rating *) rating {
  [rating retain];
  [__rating release];
  __rating = rating;
  __rating_isset = YES;
}

- (BOOL) ratingIsSet {
  return __rating_isset;
}

- (void) unsetRating {
  [__rating release];
  __rating = nil;
  __rating_isset = NO;
}

- (double) price {
  return __price;
}

- (void) setPrice: (double) price {
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  __price_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMealId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMealDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Restaurant *fieldValue = [[Restaurant alloc] init];
          [fieldValue read: inProtocol];
          [self setRestaurant: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Rating *fieldValue = [[Rating alloc] init];
          [fieldValue read: inProtocol];
          [self setRating: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Meal"];
  if (__mealId_isset) {
    [outProtocol writeFieldBeginWithName: @"mealId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __mealId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mealDescription_isset) {
    if (__mealDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"mealDescription" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mealDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__restaurant_isset) {
    if (__restaurant != nil) {
      [outProtocol writeFieldBeginWithName: @"restaurant" type: TType_STRUCT fieldID: 4];
      [__restaurant write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rating_isset) {
    if (__rating != nil) {
      [outProtocol writeFieldBeginWithName: @"rating" type: TType_STRUCT fieldID: 5];
      [__rating write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    [outProtocol writeFieldBeginWithName: @"price" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __price];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Meal("];
  [ms appendString: @"mealId:"];
  [ms appendFormat: @"%qi", __mealId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",mealDescription:"];
  [ms appendFormat: @"\"%@\"", __mealDescription];
  [ms appendString: @",restaurant:"];
  [ms appendFormat: @"%@", __restaurant];
  [ms appendString: @",rating:"];
  [ms appendFormat: @"%@", __rating];
  [ms appendString: @",price:"];
  [ms appendFormat: @"%f", __price];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Sandwich

- (id) initWithSandwichId: (Id) sandwichId restaurant: (Restaurant *) restaurant name: (NSString *) name
{
  self = [super init];
  __sandwichId = sandwichId;
  __sandwichId_isset = YES;
  __restaurant = [restaurant retain];
  __restaurant_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sandwichId"])
  {
    __sandwichId = [decoder decodeInt64ForKey: @"sandwichId"];
    __sandwichId_isset = YES;
  }
  if ([decoder containsValueForKey: @"restaurant"])
  {
    __restaurant = [[decoder decodeObjectForKey: @"restaurant"] retain];
    __restaurant_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sandwichId_isset)
  {
    [encoder encodeInt64: __sandwichId forKey: @"sandwichId"];
  }
  if (__restaurant_isset)
  {
    [encoder encodeObject: __restaurant forKey: @"restaurant"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__restaurant release];
  [__name release];
  [super dealloc];
}

- (int64_t) sandwichId {
  return __sandwichId;
}

- (void) setSandwichId: (int64_t) sandwichId {
  __sandwichId = sandwichId;
  __sandwichId_isset = YES;
}

- (BOOL) sandwichIdIsSet {
  return __sandwichId_isset;
}

- (void) unsetSandwichId {
  __sandwichId_isset = NO;
}

- (Restaurant *) restaurant {
  return [[__restaurant retain] autorelease];
}

- (void) setRestaurant: (Restaurant *) restaurant {
  [restaurant retain];
  [__restaurant release];
  __restaurant = restaurant;
  __restaurant_isset = YES;
}

- (BOOL) restaurantIsSet {
  return __restaurant_isset;
}

- (void) unsetRestaurant {
  [__restaurant release];
  __restaurant = nil;
  __restaurant_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSandwichId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Restaurant *fieldValue = [[Restaurant alloc] init];
          [fieldValue read: inProtocol];
          [self setRestaurant: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Sandwich"];
  if (__sandwichId_isset) {
    [outProtocol writeFieldBeginWithName: @"sandwichId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __sandwichId];
    [outProtocol writeFieldEnd];
  }
  if (__restaurant_isset) {
    if (__restaurant != nil) {
      [outProtocol writeFieldBeginWithName: @"restaurant" type: TType_STRUCT fieldID: 2];
      [__restaurant write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Sandwich("];
  [ms appendString: @"sandwichId:"];
  [ms appendFormat: @"%qi", __sandwichId];
  [ms appendString: @",restaurant:"];
  [ms appendFormat: @"%@", __restaurant];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation foodConstants
+ (void) initialize {
}
@end

@interface getMeals_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getMeals_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMeals_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMeals_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMeals_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetMeals_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Meal *_elem2 = [[Meal alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMeals_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [[__success objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMeals_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getRestaurants_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getRestaurants_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getRestaurants_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getRestaurants_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetRestaurants_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetRestaurants_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Restaurant *_elem7 = [[Restaurant alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRestaurants_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRestaurants_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getSandwiches_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getSandwiches_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getSandwiches_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getSandwiches_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetSandwiches_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetSandwiches_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Sandwich *_elem12 = [[Sandwich alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSandwiches_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i14;
        for (i14 = 0; i14 < [__success count]; i14++)
        {
          [[__success objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSandwiches_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getRating_args : NSObject <NSCoding> {
  Meal * __meal;

  BOOL __meal_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=meal, setter=setMeal:) Meal * meal;
#endif

- (id) initWithMeal: (Meal *) meal;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Meal *) meal;
- (void) setMeal: (Meal *) meal;
- (BOOL) mealIsSet;

@end

@implementation getRating_args

- (id) initWithMeal: (Meal *) meal
{
  self = [super init];
  __meal = [meal retain];
  __meal_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"meal"])
  {
    __meal = [[decoder decodeObjectForKey: @"meal"] retain];
    __meal_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__meal_isset)
  {
    [encoder encodeObject: __meal forKey: @"meal"];
  }
}

- (void) dealloc
{
  [__meal release];
  [super dealloc];
}

- (Meal *) meal {
  return [[__meal retain] autorelease];
}

- (void) setMeal: (Meal *) meal {
  [meal retain];
  [__meal release];
  __meal = meal;
  __meal_isset = YES;
}

- (BOOL) mealIsSet {
  return __meal_isset;
}

- (void) unsetMeal {
  [__meal release];
  __meal = nil;
  __meal_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Meal *fieldValue = [[Meal alloc] init];
          [fieldValue read: inProtocol];
          [self setMeal: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getRating_args"];
  if (__meal_isset) {
    if (__meal != nil) {
      [outProtocol writeFieldBeginWithName: @"meal" type: TType_STRUCT fieldID: 1];
      [__meal write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getRating_args("];
  [ms appendString: @"meal:"];
  [ms appendFormat: @"%@", __meal];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetRating_result : NSObject <NSCoding> {
  Rating * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Rating * success;
#endif

- (id) initWithSuccess: (Rating *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Rating *) success;
- (void) setSuccess: (Rating *) success;
- (BOOL) successIsSet;

@end

@implementation GetRating_result

- (id) initWithSuccess: (Rating *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (Rating *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (Rating *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Rating *fieldValue = [[Rating alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRating_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRating_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface hasVoted_args : NSObject <NSCoding> {
  NSString * __deviceId;

  BOOL __deviceId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=deviceId, setter=setDeviceId:) NSString * deviceId;
#endif

- (id) initWithDeviceId: (NSString *) deviceId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) deviceId;
- (void) setDeviceId: (NSString *) deviceId;
- (BOOL) deviceIdIsSet;

@end

@implementation hasVoted_args

- (id) initWithDeviceId: (NSString *) deviceId
{
  self = [super init];
  __deviceId = [deviceId retain];
  __deviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain];
    __deviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
}

- (void) dealloc
{
  [__deviceId release];
  [super dealloc];
}

- (NSString *) deviceId {
  return [[__deviceId retain] autorelease];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain];
  [__deviceId release];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"hasVoted_args"];
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"hasVoted_args("];
  [ms appendString: @"deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HasVoted_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation HasVoted_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HasVoted_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HasVoted_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getRatings_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getRatings_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getRatings_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getRatings_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetRatings_result : NSObject <NSCoding> {
  NSDictionary * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSDictionary * success;
#endif

- (id) initWithSuccess: (NSDictionary *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSDictionary *) success;
- (void) setSuccess: (NSDictionary *) success;
- (BOOL) successIsSet;

@end

@implementation GetRatings_result

- (id) initWithSuccess: (NSDictionary *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSDictionary *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSDictionary *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size15;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size15];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            int64_t _key17 = [inProtocol readI64];
            Rating *_val18 = [[Rating alloc] init];
            [_val18 read: inProtocol];
            [fieldValue setObject: _val18 forKey: [NSNumber numberWithLongLong: _key17]];
            [_val18 release];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRatings_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_STRUCT size: [__success count]];
        NSEnumerator * _iter19 = [__success keyEnumerator];
        id key20;
        while ((key20 = [_iter19 nextObject]))
        {
          [outProtocol writeI64: [key20 longLongValue]];
          [[__success objectForKey: key20] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRatings_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setRating_args : NSObject <NSCoding> {
  Id __mealId;
  double __rating;
  NSString * __deviceId;

  BOOL __mealId_isset;
  BOOL __rating_isset;
  BOOL __deviceId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=mealId, setter=setMealId:) Id mealId;
@property (nonatomic, getter=rating, setter=setRating:) double rating;
@property (nonatomic, retain, getter=deviceId, setter=setDeviceId:) NSString * deviceId;
#endif

- (id) initWithMealId: (Id) mealId rating: (double) rating deviceId: (NSString *) deviceId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Id) mealId;
- (void) setMealId: (Id) mealId;
- (BOOL) mealIdIsSet;

- (double) rating;
- (void) setRating: (double) rating;
- (BOOL) ratingIsSet;

- (NSString *) deviceId;
- (void) setDeviceId: (NSString *) deviceId;
- (BOOL) deviceIdIsSet;

@end

@implementation setRating_args

- (id) initWithMealId: (Id) mealId rating: (double) rating deviceId: (NSString *) deviceId
{
  self = [super init];
  __mealId = mealId;
  __mealId_isset = YES;
  __rating = rating;
  __rating_isset = YES;
  __deviceId = [deviceId retain];
  __deviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mealId"])
  {
    __mealId = [decoder decodeInt64ForKey: @"mealId"];
    __mealId_isset = YES;
  }
  if ([decoder containsValueForKey: @"rating"])
  {
    __rating = [decoder decodeDoubleForKey: @"rating"];
    __rating_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain];
    __deviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mealId_isset)
  {
    [encoder encodeInt64: __mealId forKey: @"mealId"];
  }
  if (__rating_isset)
  {
    [encoder encodeDouble: __rating forKey: @"rating"];
  }
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
}

- (void) dealloc
{
  [__deviceId release];
  [super dealloc];
}

- (int64_t) mealId {
  return __mealId;
}

- (void) setMealId: (int64_t) mealId {
  __mealId = mealId;
  __mealId_isset = YES;
}

- (BOOL) mealIdIsSet {
  return __mealId_isset;
}

- (void) unsetMealId {
  __mealId_isset = NO;
}

- (double) rating {
  return __rating;
}

- (void) setRating: (double) rating {
  __rating = rating;
  __rating_isset = YES;
}

- (BOOL) ratingIsSet {
  return __rating_isset;
}

- (void) unsetRating {
  __rating_isset = NO;
}

- (NSString *) deviceId {
  return [[__deviceId retain] autorelease];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain];
  [__deviceId release];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMealId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setRating_args"];
  if (__mealId_isset) {
    [outProtocol writeFieldBeginWithName: @"mealId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __mealId];
    [outProtocol writeFieldEnd];
  }
  if (__rating_isset) {
    [outProtocol writeFieldBeginWithName: @"rating" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __rating];
    [outProtocol writeFieldEnd];
  }
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setRating_args("];
  [ms appendString: @"mealId:"];
  [ms appendFormat: @"%qi", __mealId];
  [ms appendString: @",rating:"];
  [ms appendFormat: @"%f", __rating];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetRating_result : NSObject <NSCoding> {
  int __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int success;
#endif

- (id) initWithSuccess: (int) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int) success;
- (void) setSuccess: (int) success;
- (BOOL) successIsSet;

@end

@implementation SetRating_result

- (id) initWithSuccess: (int) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int) success {
  return __success;
}

- (void) setSuccess: (int) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetRating_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetRating_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FoodServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getMeals
{
  [outProtocol writeMessageBeginWithName: @"getMeals" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMeals_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getMeals
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMeals_result * result = [[[GetMeals_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMeals failed: unknown result"];
}

- (NSArray *) getMeals
{
  [self send_getMeals];
  return [self recv_getMeals];
}

- (void) send_getRestaurants
{
  [outProtocol writeMessageBeginWithName: @"getRestaurants" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getRestaurants_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getRestaurants
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetRestaurants_result * result = [[[GetRestaurants_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getRestaurants failed: unknown result"];
}

- (NSArray *) getRestaurants
{
  [self send_getRestaurants];
  return [self recv_getRestaurants];
}

- (void) send_getSandwiches
{
  [outProtocol writeMessageBeginWithName: @"getSandwiches" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getSandwiches_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getSandwiches
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetSandwiches_result * result = [[[GetSandwiches_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getSandwiches failed: unknown result"];
}

- (NSArray *) getSandwiches
{
  [self send_getSandwiches];
  return [self recv_getSandwiches];
}

- (void) send_getRating: (Meal *) meal
{
  [outProtocol writeMessageBeginWithName: @"getRating" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getRating_args"];
  if (meal != nil)  {
    [outProtocol writeFieldBeginWithName: @"meal" type: TType_STRUCT fieldID: 1];
    [meal write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Rating *) recv_getRating
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetRating_result * result = [[[GetRating_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getRating failed: unknown result"];
}

- (Rating *) getRating: (Meal *) meal
{
  [self send_getRating: meal];
  return [self recv_getRating];
}

- (void) send_hasVoted: (NSString *) deviceId
{
  [outProtocol writeMessageBeginWithName: @"hasVoted" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"hasVoted_args"];
  if (deviceId != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: deviceId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_hasVoted
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  HasVoted_result * result = [[[HasVoted_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"hasVoted failed: unknown result"];
}

- (BOOL) hasVoted: (NSString *) deviceId
{
  [self send_hasVoted: deviceId];
  return [self recv_hasVoted];
}

- (void) send_getRatings
{
  [outProtocol writeMessageBeginWithName: @"getRatings" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getRatings_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSDictionary *) recv_getRatings
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetRatings_result * result = [[[GetRatings_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getRatings failed: unknown result"];
}

- (NSDictionary *) getRatings
{
  [self send_getRatings];
  return [self recv_getRatings];
}

- (void) send_setRating: (Id) mealId : (double) rating : (NSString *) deviceId
{
  [outProtocol writeMessageBeginWithName: @"setRating" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setRating_args"];
  [outProtocol writeFieldBeginWithName: @"mealId" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: mealId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"rating" type: TType_DOUBLE fieldID: 2];
  [outProtocol writeDouble: rating];
  [outProtocol writeFieldEnd];
  if (deviceId != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 3];
    [outProtocol writeString: deviceId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int) recv_setRating
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SetRating_result * result = [[[SetRating_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setRating failed: unknown result"];
}

- (int) setRating: (Id) mealId : (double) rating : (NSString *) deviceId
{
  [self send_setRating: mealId : rating : deviceId];
  return [self recv_setRating];
}

@end

@implementation FoodServiceProcessor

- (id) initWithFoodService: (id <FoodService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_getMeals_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMeals"];
  }
  {
    SEL s = @selector(process_getRestaurants_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getRestaurants"];
  }
  {
    SEL s = @selector(process_getSandwiches_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getSandwiches"];
  }
  {
    SEL s = @selector(process_getRating_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getRating"];
  }
  {
    SEL s = @selector(process_hasVoted_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"hasVoted"];
  }
  {
    SEL s = @selector(process_getRatings_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getRatings"];
  }
  {
    SEL s = @selector(process_setRating_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setRating"];
  }
  return self;
}

- (id<FoodService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getMeals_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMeals_args * args = [[getMeals_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMeals_result * result = [[GetMeals_result alloc] init];
  [result setSuccess: [mService getMeals]];
  [outProtocol writeMessageBeginWithName: @"getMeals"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getRestaurants_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getRestaurants_args * args = [[getRestaurants_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetRestaurants_result * result = [[GetRestaurants_result alloc] init];
  [result setSuccess: [mService getRestaurants]];
  [outProtocol writeMessageBeginWithName: @"getRestaurants"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getSandwiches_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getSandwiches_args * args = [[getSandwiches_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetSandwiches_result * result = [[GetSandwiches_result alloc] init];
  [result setSuccess: [mService getSandwiches]];
  [outProtocol writeMessageBeginWithName: @"getSandwiches"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getRating_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getRating_args * args = [[getRating_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetRating_result * result = [[GetRating_result alloc] init];
  [result setSuccess: [mService getRating: [args meal]]];
  [outProtocol writeMessageBeginWithName: @"getRating"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_hasVoted_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  hasVoted_args * args = [[hasVoted_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  HasVoted_result * result = [[HasVoted_result alloc] init];
  [result setSuccess: [mService hasVoted: [args deviceId]]];
  [outProtocol writeMessageBeginWithName: @"hasVoted"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getRatings_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getRatings_args * args = [[getRatings_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetRatings_result * result = [[GetRatings_result alloc] init];
  [result setSuccess: [mService getRatings]];
  [outProtocol writeMessageBeginWithName: @"getRatings"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_setRating_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  setRating_args * args = [[setRating_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SetRating_result * result = [[SetRating_result alloc] init];
  [result setSuccess: [mService setRating: [args mealId]: [args rating]: [args deviceId]]];
  [outProtocol writeMessageBeginWithName: @"setRating"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

