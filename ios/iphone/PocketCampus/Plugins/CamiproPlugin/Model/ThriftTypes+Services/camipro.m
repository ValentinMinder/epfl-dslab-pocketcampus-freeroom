/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "authentication.h"

#import "camipro.h"

@implementation CamiproRequest

- (id) initWithISessionId: (SessionId *) iSessionId iLanguage: (NSString *) iLanguage
{
  self = [super init];
  __iSessionId = [iSessionId retain];
  __iSessionId_isset = YES;
  __iLanguage = [iLanguage retain];
  __iLanguage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iSessionId"])
  {
    __iSessionId = [[decoder decodeObjectForKey: @"iSessionId"] retain];
    __iSessionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLanguage"])
  {
    __iLanguage = [[decoder decodeObjectForKey: @"iLanguage"] retain];
    __iLanguage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iSessionId_isset)
  {
    [encoder encodeObject: __iSessionId forKey: @"iSessionId"];
  }
  if (__iLanguage_isset)
  {
    [encoder encodeObject: __iLanguage forKey: @"iLanguage"];
  }
}

- (void) dealloc
{
  [__iSessionId release];
  [__iLanguage release];
  [super dealloc];
}

- (SessionId *) iSessionId {
  return [[__iSessionId retain] autorelease];
}

- (void) setISessionId: (SessionId *) iSessionId {
  [iSessionId retain];
  [__iSessionId release];
  __iSessionId = iSessionId;
  __iSessionId_isset = YES;
}

- (BOOL) iSessionIdIsSet {
  return __iSessionId_isset;
}

- (void) unsetISessionId {
  [__iSessionId release];
  __iSessionId = nil;
  __iSessionId_isset = NO;
}

- (NSString *) iLanguage {
  return [[__iLanguage retain] autorelease];
}

- (void) setILanguage: (NSString *) iLanguage {
  [iLanguage retain];
  [__iLanguage release];
  __iLanguage = iLanguage;
  __iLanguage_isset = YES;
}

- (BOOL) iLanguageIsSet {
  return __iLanguage_isset;
}

- (void) unsetILanguage {
  [__iLanguage release];
  __iLanguage = nil;
  __iLanguage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SessionId *fieldValue = [[SessionId alloc] init];
          [fieldValue read: inProtocol];
          [self setISessionId: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setILanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CamiproRequest"];
  if (__iSessionId_isset) {
    if (__iSessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"iSessionId" type: TType_STRUCT fieldID: 1];
      [__iSessionId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iLanguage_isset) {
    if (__iLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"iLanguage" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CamiproRequest("];
  [ms appendString: @"iSessionId:"];
  [ms appendFormat: @"%@", __iSessionId];
  [ms appendString: @",iLanguage:"];
  [ms appendFormat: @"\"%@\"", __iLanguage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CamiproSession

- (id) initWithCamiproCookie: (NSString *) camiproCookie
{
  self = [super init];
  __camiproCookie = [camiproCookie retain];
  __camiproCookie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"camiproCookie"])
  {
    __camiproCookie = [[decoder decodeObjectForKey: @"camiproCookie"] retain];
    __camiproCookie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__camiproCookie_isset)
  {
    [encoder encodeObject: __camiproCookie forKey: @"camiproCookie"];
  }
}

- (void) dealloc
{
  [__camiproCookie release];
  [super dealloc];
}

- (NSString *) camiproCookie {
  return [[__camiproCookie retain] autorelease];
}

- (void) setCamiproCookie: (NSString *) camiproCookie {
  [camiproCookie retain];
  [__camiproCookie release];
  __camiproCookie = camiproCookie;
  __camiproCookie_isset = YES;
}

- (BOOL) camiproCookieIsSet {
  return __camiproCookie_isset;
}

- (void) unsetCamiproCookie {
  [__camiproCookie release];
  __camiproCookie = nil;
  __camiproCookie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCamiproCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CamiproSession"];
  if (__camiproCookie_isset) {
    if (__camiproCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"camiproCookie" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __camiproCookie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CamiproSession("];
  [ms appendString: @"camiproCookie:"];
  [ms appendFormat: @"\"%@\"", __camiproCookie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Transaction

- (id) initWithIDate: (NSString *) iDate iOperation: (NSString *) iOperation iPlace: (NSString *) iPlace iAmount: (double) iAmount
{
  self = [super init];
  __iDate = [iDate retain];
  __iDate_isset = YES;
  __iOperation = [iOperation retain];
  __iOperation_isset = YES;
  __iPlace = [iPlace retain];
  __iPlace_isset = YES;
  __iAmount = iAmount;
  __iAmount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iDate"])
  {
    __iDate = [[decoder decodeObjectForKey: @"iDate"] retain];
    __iDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"iOperation"])
  {
    __iOperation = [[decoder decodeObjectForKey: @"iOperation"] retain];
    __iOperation_isset = YES;
  }
  if ([decoder containsValueForKey: @"iPlace"])
  {
    __iPlace = [[decoder decodeObjectForKey: @"iPlace"] retain];
    __iPlace_isset = YES;
  }
  if ([decoder containsValueForKey: @"iAmount"])
  {
    __iAmount = [decoder decodeDoubleForKey: @"iAmount"];
    __iAmount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iDate_isset)
  {
    [encoder encodeObject: __iDate forKey: @"iDate"];
  }
  if (__iOperation_isset)
  {
    [encoder encodeObject: __iOperation forKey: @"iOperation"];
  }
  if (__iPlace_isset)
  {
    [encoder encodeObject: __iPlace forKey: @"iPlace"];
  }
  if (__iAmount_isset)
  {
    [encoder encodeDouble: __iAmount forKey: @"iAmount"];
  }
}

- (void) dealloc
{
  [__iDate release];
  [__iOperation release];
  [__iPlace release];
  [super dealloc];
}

- (NSString *) iDate {
  return [[__iDate retain] autorelease];
}

- (void) setIDate: (NSString *) iDate {
  [iDate retain];
  [__iDate release];
  __iDate = iDate;
  __iDate_isset = YES;
}

- (BOOL) iDateIsSet {
  return __iDate_isset;
}

- (void) unsetIDate {
  [__iDate release];
  __iDate = nil;
  __iDate_isset = NO;
}

- (NSString *) iOperation {
  return [[__iOperation retain] autorelease];
}

- (void) setIOperation: (NSString *) iOperation {
  [iOperation retain];
  [__iOperation release];
  __iOperation = iOperation;
  __iOperation_isset = YES;
}

- (BOOL) iOperationIsSet {
  return __iOperation_isset;
}

- (void) unsetIOperation {
  [__iOperation release];
  __iOperation = nil;
  __iOperation_isset = NO;
}

- (NSString *) iPlace {
  return [[__iPlace retain] autorelease];
}

- (void) setIPlace: (NSString *) iPlace {
  [iPlace retain];
  [__iPlace release];
  __iPlace = iPlace;
  __iPlace_isset = YES;
}

- (BOOL) iPlaceIsSet {
  return __iPlace_isset;
}

- (void) unsetIPlace {
  [__iPlace release];
  __iPlace = nil;
  __iPlace_isset = NO;
}

- (double) iAmount {
  return __iAmount;
}

- (void) setIAmount: (double) iAmount {
  __iAmount = iAmount;
  __iAmount_isset = YES;
}

- (BOOL) iAmountIsSet {
  return __iAmount_isset;
}

- (void) unsetIAmount {
  __iAmount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIOperation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIPlace: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setIAmount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Transaction"];
  if (__iDate_isset) {
    if (__iDate != nil) {
      [outProtocol writeFieldBeginWithName: @"iDate" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __iDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iOperation_isset) {
    if (__iOperation != nil) {
      [outProtocol writeFieldBeginWithName: @"iOperation" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iOperation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iPlace_isset) {
    if (__iPlace != nil) {
      [outProtocol writeFieldBeginWithName: @"iPlace" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __iPlace];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iAmount_isset) {
    [outProtocol writeFieldBeginWithName: @"iAmount" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __iAmount];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Transaction("];
  [ms appendString: @"iDate:"];
  [ms appendFormat: @"\"%@\"", __iDate];
  [ms appendString: @",iOperation:"];
  [ms appendFormat: @"\"%@\"", __iOperation];
  [ms appendString: @",iPlace:"];
  [ms appendFormat: @"\"%@\"", __iPlace];
  [ms appendString: @",iAmount:"];
  [ms appendFormat: @"%f", __iAmount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BalanceAndTransactions

- (id) initWithIBalance: (double) iBalance iTransactions: (NSArray *) iTransactions iDate: (NSString *) iDate iStatus: (int32_t) iStatus
{
  self = [super init];
  __iBalance = iBalance;
  __iBalance_isset = YES;
  __iTransactions = [iTransactions retain];
  __iTransactions_isset = YES;
  __iDate = [iDate retain];
  __iDate_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iBalance"])
  {
    __iBalance = [decoder decodeDoubleForKey: @"iBalance"];
    __iBalance_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTransactions"])
  {
    __iTransactions = [[decoder decodeObjectForKey: @"iTransactions"] retain];
    __iTransactions_isset = YES;
  }
  if ([decoder containsValueForKey: @"iDate"])
  {
    __iDate = [[decoder decodeObjectForKey: @"iDate"] retain];
    __iDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iBalance_isset)
  {
    [encoder encodeDouble: __iBalance forKey: @"iBalance"];
  }
  if (__iTransactions_isset)
  {
    [encoder encodeObject: __iTransactions forKey: @"iTransactions"];
  }
  if (__iDate_isset)
  {
    [encoder encodeObject: __iDate forKey: @"iDate"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iTransactions release];
  [__iDate release];
  [super dealloc];
}

- (double) iBalance {
  return __iBalance;
}

- (void) setIBalance: (double) iBalance {
  __iBalance = iBalance;
  __iBalance_isset = YES;
}

- (BOOL) iBalanceIsSet {
  return __iBalance_isset;
}

- (void) unsetIBalance {
  __iBalance_isset = NO;
}

- (NSArray *) iTransactions {
  return [[__iTransactions retain] autorelease];
}

- (void) setITransactions: (NSArray *) iTransactions {
  [iTransactions retain];
  [__iTransactions release];
  __iTransactions = iTransactions;
  __iTransactions_isset = YES;
}

- (BOOL) iTransactionsIsSet {
  return __iTransactions_isset;
}

- (void) unsetITransactions {
  [__iTransactions release];
  __iTransactions = nil;
  __iTransactions_isset = NO;
}

- (NSString *) iDate {
  return [[__iDate retain] autorelease];
}

- (void) setIDate: (NSString *) iDate {
  [iDate retain];
  [__iDate release];
  __iDate = iDate;
  __iDate_isset = YES;
}

- (BOOL) iDateIsSet {
  return __iDate_isset;
}

- (void) unsetIDate {
  [__iDate release];
  __iDate = nil;
  __iDate_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setIBalance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Transaction *_elem2 = [[Transaction alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setITransactions: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BalanceAndTransactions"];
  if (__iBalance_isset) {
    [outProtocol writeFieldBeginWithName: @"iBalance" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __iBalance];
    [outProtocol writeFieldEnd];
  }
  if (__iTransactions_isset) {
    if (__iTransactions != nil) {
      [outProtocol writeFieldBeginWithName: @"iTransactions" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__iTransactions count]];
        int i4;
        for (i4 = 0; i4 < [__iTransactions count]; i4++)
        {
          [[__iTransactions objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__iDate_isset) {
    if (__iDate != nil) {
      [outProtocol writeFieldBeginWithName: @"iDate" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __iDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BalanceAndTransactions("];
  [ms appendString: @"iBalance:"];
  [ms appendFormat: @"%f", __iBalance];
  [ms appendString: @",iTransactions:"];
  [ms appendFormat: @"%@", __iTransactions];
  [ms appendString: @",iDate:"];
  [ms appendFormat: @"\"%@\"", __iDate];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CardStatistics

- (id) initWithITotalPaymentsLastMonth: (double) iTotalPaymentsLastMonth iTotalPaymentsLastThreeMonths: (double) iTotalPaymentsLastThreeMonths
{
  self = [super init];
  __iTotalPaymentsLastMonth = iTotalPaymentsLastMonth;
  __iTotalPaymentsLastMonth_isset = YES;
  __iTotalPaymentsLastThreeMonths = iTotalPaymentsLastThreeMonths;
  __iTotalPaymentsLastThreeMonths_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iTotalPaymentsLastMonth"])
  {
    __iTotalPaymentsLastMonth = [decoder decodeDoubleForKey: @"iTotalPaymentsLastMonth"];
    __iTotalPaymentsLastMonth_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTotalPaymentsLastThreeMonths"])
  {
    __iTotalPaymentsLastThreeMonths = [decoder decodeDoubleForKey: @"iTotalPaymentsLastThreeMonths"];
    __iTotalPaymentsLastThreeMonths_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iTotalPaymentsLastMonth_isset)
  {
    [encoder encodeDouble: __iTotalPaymentsLastMonth forKey: @"iTotalPaymentsLastMonth"];
  }
  if (__iTotalPaymentsLastThreeMonths_isset)
  {
    [encoder encodeDouble: __iTotalPaymentsLastThreeMonths forKey: @"iTotalPaymentsLastThreeMonths"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (double) iTotalPaymentsLastMonth {
  return __iTotalPaymentsLastMonth;
}

- (void) setITotalPaymentsLastMonth: (double) iTotalPaymentsLastMonth {
  __iTotalPaymentsLastMonth = iTotalPaymentsLastMonth;
  __iTotalPaymentsLastMonth_isset = YES;
}

- (BOOL) iTotalPaymentsLastMonthIsSet {
  return __iTotalPaymentsLastMonth_isset;
}

- (void) unsetITotalPaymentsLastMonth {
  __iTotalPaymentsLastMonth_isset = NO;
}

- (double) iTotalPaymentsLastThreeMonths {
  return __iTotalPaymentsLastThreeMonths;
}

- (void) setITotalPaymentsLastThreeMonths: (double) iTotalPaymentsLastThreeMonths {
  __iTotalPaymentsLastThreeMonths = iTotalPaymentsLastThreeMonths;
  __iTotalPaymentsLastThreeMonths_isset = YES;
}

- (BOOL) iTotalPaymentsLastThreeMonthsIsSet {
  return __iTotalPaymentsLastThreeMonths_isset;
}

- (void) unsetITotalPaymentsLastThreeMonths {
  __iTotalPaymentsLastThreeMonths_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setITotalPaymentsLastMonth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setITotalPaymentsLastThreeMonths: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CardStatistics"];
  if (__iTotalPaymentsLastMonth_isset) {
    [outProtocol writeFieldBeginWithName: @"iTotalPaymentsLastMonth" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __iTotalPaymentsLastMonth];
    [outProtocol writeFieldEnd];
  }
  if (__iTotalPaymentsLastThreeMonths_isset) {
    [outProtocol writeFieldBeginWithName: @"iTotalPaymentsLastThreeMonths" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __iTotalPaymentsLastThreeMonths];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CardStatistics("];
  [ms appendString: @"iTotalPaymentsLastMonth:"];
  [ms appendFormat: @"%f", __iTotalPaymentsLastMonth];
  [ms appendString: @",iTotalPaymentsLastThreeMonths:"];
  [ms appendFormat: @"%f", __iTotalPaymentsLastThreeMonths];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CardLoadingWithEbankingInfo

- (id) initWithIPaidTo: (NSString *) iPaidTo iAccountNumber: (NSString *) iAccountNumber iReferenceNumber: (NSString *) iReferenceNumber
{
  self = [super init];
  __iPaidTo = [iPaidTo retain];
  __iPaidTo_isset = YES;
  __iAccountNumber = [iAccountNumber retain];
  __iAccountNumber_isset = YES;
  __iReferenceNumber = [iReferenceNumber retain];
  __iReferenceNumber_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iPaidTo"])
  {
    __iPaidTo = [[decoder decodeObjectForKey: @"iPaidTo"] retain];
    __iPaidTo_isset = YES;
  }
  if ([decoder containsValueForKey: @"iAccountNumber"])
  {
    __iAccountNumber = [[decoder decodeObjectForKey: @"iAccountNumber"] retain];
    __iAccountNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"iReferenceNumber"])
  {
    __iReferenceNumber = [[decoder decodeObjectForKey: @"iReferenceNumber"] retain];
    __iReferenceNumber_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iPaidTo_isset)
  {
    [encoder encodeObject: __iPaidTo forKey: @"iPaidTo"];
  }
  if (__iAccountNumber_isset)
  {
    [encoder encodeObject: __iAccountNumber forKey: @"iAccountNumber"];
  }
  if (__iReferenceNumber_isset)
  {
    [encoder encodeObject: __iReferenceNumber forKey: @"iReferenceNumber"];
  }
}

- (void) dealloc
{
  [__iPaidTo release];
  [__iAccountNumber release];
  [__iReferenceNumber release];
  [super dealloc];
}

- (NSString *) iPaidTo {
  return [[__iPaidTo retain] autorelease];
}

- (void) setIPaidTo: (NSString *) iPaidTo {
  [iPaidTo retain];
  [__iPaidTo release];
  __iPaidTo = iPaidTo;
  __iPaidTo_isset = YES;
}

- (BOOL) iPaidToIsSet {
  return __iPaidTo_isset;
}

- (void) unsetIPaidTo {
  [__iPaidTo release];
  __iPaidTo = nil;
  __iPaidTo_isset = NO;
}

- (NSString *) iAccountNumber {
  return [[__iAccountNumber retain] autorelease];
}

- (void) setIAccountNumber: (NSString *) iAccountNumber {
  [iAccountNumber retain];
  [__iAccountNumber release];
  __iAccountNumber = iAccountNumber;
  __iAccountNumber_isset = YES;
}

- (BOOL) iAccountNumberIsSet {
  return __iAccountNumber_isset;
}

- (void) unsetIAccountNumber {
  [__iAccountNumber release];
  __iAccountNumber = nil;
  __iAccountNumber_isset = NO;
}

- (NSString *) iReferenceNumber {
  return [[__iReferenceNumber retain] autorelease];
}

- (void) setIReferenceNumber: (NSString *) iReferenceNumber {
  [iReferenceNumber retain];
  [__iReferenceNumber release];
  __iReferenceNumber = iReferenceNumber;
  __iReferenceNumber_isset = YES;
}

- (BOOL) iReferenceNumberIsSet {
  return __iReferenceNumber_isset;
}

- (void) unsetIReferenceNumber {
  [__iReferenceNumber release];
  __iReferenceNumber = nil;
  __iReferenceNumber_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIPaidTo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIAccountNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIReferenceNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CardLoadingWithEbankingInfo"];
  if (__iPaidTo_isset) {
    if (__iPaidTo != nil) {
      [outProtocol writeFieldBeginWithName: @"iPaidTo" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __iPaidTo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iAccountNumber_isset) {
    if (__iAccountNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"iAccountNumber" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iAccountNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iReferenceNumber_isset) {
    if (__iReferenceNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"iReferenceNumber" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __iReferenceNumber];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CardLoadingWithEbankingInfo("];
  [ms appendString: @"iPaidTo:"];
  [ms appendFormat: @"\"%@\"", __iPaidTo];
  [ms appendString: @",iAccountNumber:"];
  [ms appendFormat: @"\"%@\"", __iAccountNumber];
  [ms appendString: @",iReferenceNumber:"];
  [ms appendFormat: @"\"%@\"", __iReferenceNumber];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation StatsAndLoadingInfo

- (id) initWithICardStatistics: (CardStatistics *) iCardStatistics iCardLoadingWithEbankingInfo: (CardLoadingWithEbankingInfo *) iCardLoadingWithEbankingInfo iStatus: (int32_t) iStatus
{
  self = [super init];
  __iCardStatistics = [iCardStatistics retain];
  __iCardStatistics_isset = YES;
  __iCardLoadingWithEbankingInfo = [iCardLoadingWithEbankingInfo retain];
  __iCardLoadingWithEbankingInfo_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iCardStatistics"])
  {
    __iCardStatistics = [[decoder decodeObjectForKey: @"iCardStatistics"] retain];
    __iCardStatistics_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCardLoadingWithEbankingInfo"])
  {
    __iCardLoadingWithEbankingInfo = [[decoder decodeObjectForKey: @"iCardLoadingWithEbankingInfo"] retain];
    __iCardLoadingWithEbankingInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iCardStatistics_isset)
  {
    [encoder encodeObject: __iCardStatistics forKey: @"iCardStatistics"];
  }
  if (__iCardLoadingWithEbankingInfo_isset)
  {
    [encoder encodeObject: __iCardLoadingWithEbankingInfo forKey: @"iCardLoadingWithEbankingInfo"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iCardStatistics release];
  [__iCardLoadingWithEbankingInfo release];
  [super dealloc];
}

- (CardStatistics *) iCardStatistics {
  return [[__iCardStatistics retain] autorelease];
}

- (void) setICardStatistics: (CardStatistics *) iCardStatistics {
  [iCardStatistics retain];
  [__iCardStatistics release];
  __iCardStatistics = iCardStatistics;
  __iCardStatistics_isset = YES;
}

- (BOOL) iCardStatisticsIsSet {
  return __iCardStatistics_isset;
}

- (void) unsetICardStatistics {
  [__iCardStatistics release];
  __iCardStatistics = nil;
  __iCardStatistics_isset = NO;
}

- (CardLoadingWithEbankingInfo *) iCardLoadingWithEbankingInfo {
  return [[__iCardLoadingWithEbankingInfo retain] autorelease];
}

- (void) setICardLoadingWithEbankingInfo: (CardLoadingWithEbankingInfo *) iCardLoadingWithEbankingInfo {
  [iCardLoadingWithEbankingInfo retain];
  [__iCardLoadingWithEbankingInfo release];
  __iCardLoadingWithEbankingInfo = iCardLoadingWithEbankingInfo;
  __iCardLoadingWithEbankingInfo_isset = YES;
}

- (BOOL) iCardLoadingWithEbankingInfoIsSet {
  return __iCardLoadingWithEbankingInfo_isset;
}

- (void) unsetICardLoadingWithEbankingInfo {
  [__iCardLoadingWithEbankingInfo release];
  __iCardLoadingWithEbankingInfo = nil;
  __iCardLoadingWithEbankingInfo_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CardStatistics *fieldValue = [[CardStatistics alloc] init];
          [fieldValue read: inProtocol];
          [self setICardStatistics: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          CardLoadingWithEbankingInfo *fieldValue = [[CardLoadingWithEbankingInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setICardLoadingWithEbankingInfo: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StatsAndLoadingInfo"];
  if (__iCardStatistics_isset) {
    if (__iCardStatistics != nil) {
      [outProtocol writeFieldBeginWithName: @"iCardStatistics" type: TType_STRUCT fieldID: 1];
      [__iCardStatistics write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCardLoadingWithEbankingInfo_isset) {
    if (__iCardLoadingWithEbankingInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"iCardLoadingWithEbankingInfo" type: TType_STRUCT fieldID: 2];
      [__iCardLoadingWithEbankingInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StatsAndLoadingInfo("];
  [ms appendString: @"iCardStatistics:"];
  [ms appendFormat: @"%@", __iCardStatistics];
  [ms appendString: @",iCardLoadingWithEbankingInfo:"];
  [ms appendFormat: @"%@", __iCardLoadingWithEbankingInfo];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SendMailResult

- (id) initWithIResultText: (NSString *) iResultText iStatus: (int32_t) iStatus
{
  self = [super init];
  __iResultText = [iResultText retain];
  __iResultText_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iResultText"])
  {
    __iResultText = [[decoder decodeObjectForKey: @"iResultText"] retain];
    __iResultText_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iResultText_isset)
  {
    [encoder encodeObject: __iResultText forKey: @"iResultText"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iResultText release];
  [super dealloc];
}

- (NSString *) iResultText {
  return [[__iResultText retain] autorelease];
}

- (void) setIResultText: (NSString *) iResultText {
  [iResultText retain];
  [__iResultText release];
  __iResultText = iResultText;
  __iResultText_isset = YES;
}

- (BOOL) iResultTextIsSet {
  return __iResultText_isset;
}

- (void) unsetIResultText {
  [__iResultText release];
  __iResultText = nil;
  __iResultText_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIResultText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendMailResult"];
  if (__iResultText_isset) {
    if (__iResultText != nil) {
      [outProtocol writeFieldBeginWithName: @"iResultText" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __iResultText];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendMailResult("];
  [ms appendString: @"iResultText:"];
  [ms appendFormat: @"\"%@\"", __iResultText];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation camiproConstants
+ (void) initialize {
}
@end

@interface getTequilaTokenForCamipro_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getTequilaTokenForCamipro_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTequilaTokenForCamipro_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTequilaTokenForCamipro_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTequilaTokenForCamipro_result : NSObject <NSCoding> {
  TequilaToken * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TequilaToken * success;
#endif

- (id) initWithSuccess: (TequilaToken *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TequilaToken *) success;
- (void) setSuccess: (TequilaToken *) success;
- (BOOL) successIsSet;

@end

@implementation GetTequilaTokenForCamipro_result

- (id) initWithSuccess: (TequilaToken *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (TequilaToken *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (TequilaToken *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TequilaToken *fieldValue = [[TequilaToken alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTequilaTokenForCamipro_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTequilaTokenForCamipro_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getCamiproSession_args : NSObject <NSCoding> {
  TequilaToken * __iTequilaToken;

  BOOL __iTequilaToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iTequilaToken, setter=setITequilaToken:) TequilaToken * iTequilaToken;
#endif

- (id) initWithITequilaToken: (TequilaToken *) iTequilaToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TequilaToken *) iTequilaToken;
- (void) setITequilaToken: (TequilaToken *) iTequilaToken;
- (BOOL) iTequilaTokenIsSet;

@end

@implementation getCamiproSession_args

- (id) initWithITequilaToken: (TequilaToken *) iTequilaToken
{
  self = [super init];
  __iTequilaToken = [iTequilaToken retain];
  __iTequilaToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iTequilaToken"])
  {
    __iTequilaToken = [[decoder decodeObjectForKey: @"iTequilaToken"] retain];
    __iTequilaToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iTequilaToken_isset)
  {
    [encoder encodeObject: __iTequilaToken forKey: @"iTequilaToken"];
  }
}

- (void) dealloc
{
  [__iTequilaToken release];
  [super dealloc];
}

- (TequilaToken *) iTequilaToken {
  return [[__iTequilaToken retain] autorelease];
}

- (void) setITequilaToken: (TequilaToken *) iTequilaToken {
  [iTequilaToken retain];
  [__iTequilaToken release];
  __iTequilaToken = iTequilaToken;
  __iTequilaToken_isset = YES;
}

- (BOOL) iTequilaTokenIsSet {
  return __iTequilaToken_isset;
}

- (void) unsetITequilaToken {
  [__iTequilaToken release];
  __iTequilaToken = nil;
  __iTequilaToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TequilaToken *fieldValue = [[TequilaToken alloc] init];
          [fieldValue read: inProtocol];
          [self setITequilaToken: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCamiproSession_args"];
  if (__iTequilaToken_isset) {
    if (__iTequilaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"iTequilaToken" type: TType_STRUCT fieldID: 1];
      [__iTequilaToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCamiproSession_args("];
  [ms appendString: @"iTequilaToken:"];
  [ms appendFormat: @"%@", __iTequilaToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCamiproSession_result : NSObject <NSCoding> {
  CamiproSession * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) CamiproSession * success;
#endif

- (id) initWithSuccess: (CamiproSession *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (CamiproSession *) success;
- (void) setSuccess: (CamiproSession *) success;
- (BOOL) successIsSet;

@end

@implementation GetCamiproSession_result

- (id) initWithSuccess: (CamiproSession *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (CamiproSession *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (CamiproSession *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          CamiproSession *fieldValue = [[CamiproSession alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCamiproSession_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCamiproSession_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getBalanceAndTransactions_args : NSObject <NSCoding> {
  CamiproRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) CamiproRequest * iRequest;
#endif

- (id) initWithIRequest: (CamiproRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (CamiproRequest *) iRequest;
- (void) setIRequest: (CamiproRequest *) iRequest;
- (BOOL) iRequestIsSet;

@end

@implementation getBalanceAndTransactions_args

- (id) initWithIRequest: (CamiproRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release];
  [super dealloc];
}

- (CamiproRequest *) iRequest {
  return [[__iRequest retain] autorelease];
}

- (void) setIRequest: (CamiproRequest *) iRequest {
  [iRequest retain];
  [__iRequest release];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CamiproRequest *fieldValue = [[CamiproRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getBalanceAndTransactions_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getBalanceAndTransactions_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetBalanceAndTransactions_result : NSObject <NSCoding> {
  BalanceAndTransactions * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BalanceAndTransactions * success;
#endif

- (id) initWithSuccess: (BalanceAndTransactions *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BalanceAndTransactions *) success;
- (void) setSuccess: (BalanceAndTransactions *) success;
- (BOOL) successIsSet;

@end

@implementation GetBalanceAndTransactions_result

- (id) initWithSuccess: (BalanceAndTransactions *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (BalanceAndTransactions *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (BalanceAndTransactions *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BalanceAndTransactions *fieldValue = [[BalanceAndTransactions alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetBalanceAndTransactions_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetBalanceAndTransactions_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getStatsAndLoadingInfo_args : NSObject <NSCoding> {
  CamiproRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) CamiproRequest * iRequest;
#endif

- (id) initWithIRequest: (CamiproRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (CamiproRequest *) iRequest;
- (void) setIRequest: (CamiproRequest *) iRequest;
- (BOOL) iRequestIsSet;

@end

@implementation getStatsAndLoadingInfo_args

- (id) initWithIRequest: (CamiproRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release];
  [super dealloc];
}

- (CamiproRequest *) iRequest {
  return [[__iRequest retain] autorelease];
}

- (void) setIRequest: (CamiproRequest *) iRequest {
  [iRequest retain];
  [__iRequest release];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CamiproRequest *fieldValue = [[CamiproRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getStatsAndLoadingInfo_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getStatsAndLoadingInfo_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetStatsAndLoadingInfo_result : NSObject <NSCoding> {
  StatsAndLoadingInfo * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) StatsAndLoadingInfo * success;
#endif

- (id) initWithSuccess: (StatsAndLoadingInfo *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (StatsAndLoadingInfo *) success;
- (void) setSuccess: (StatsAndLoadingInfo *) success;
- (BOOL) successIsSet;

@end

@implementation GetStatsAndLoadingInfo_result

- (id) initWithSuccess: (StatsAndLoadingInfo *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (StatsAndLoadingInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (StatsAndLoadingInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          StatsAndLoadingInfo *fieldValue = [[StatsAndLoadingInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStatsAndLoadingInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetStatsAndLoadingInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface sendLoadingInfoByEmail_args : NSObject <NSCoding> {
  CamiproRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) CamiproRequest * iRequest;
#endif

- (id) initWithIRequest: (CamiproRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (CamiproRequest *) iRequest;
- (void) setIRequest: (CamiproRequest *) iRequest;
- (BOOL) iRequestIsSet;

@end

@implementation sendLoadingInfoByEmail_args

- (id) initWithIRequest: (CamiproRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release];
  [super dealloc];
}

- (CamiproRequest *) iRequest {
  return [[__iRequest retain] autorelease];
}

- (void) setIRequest: (CamiproRequest *) iRequest {
  [iRequest retain];
  [__iRequest release];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CamiproRequest *fieldValue = [[CamiproRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendLoadingInfoByEmail_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendLoadingInfoByEmail_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SendLoadingInfoByEmail_result : NSObject <NSCoding> {
  SendMailResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SendMailResult * success;
#endif

- (id) initWithSuccess: (SendMailResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (SendMailResult *) success;
- (void) setSuccess: (SendMailResult *) success;
- (BOOL) successIsSet;

@end

@implementation SendLoadingInfoByEmail_result

- (id) initWithSuccess: (SendMailResult *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (SendMailResult *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (SendMailResult *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SendMailResult *fieldValue = [[SendMailResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendLoadingInfoByEmail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendLoadingInfoByEmail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CamiproServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getTequilaTokenForCamipro
{
  [outProtocol writeMessageBeginWithName: @"getTequilaTokenForCamipro" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTequilaTokenForCamipro_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TequilaToken *) recv_getTequilaTokenForCamipro
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTequilaTokenForCamipro_result * result = [[[GetTequilaTokenForCamipro_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTequilaTokenForCamipro failed: unknown result"];
}

- (TequilaToken *) getTequilaTokenForCamipro
{
  [self send_getTequilaTokenForCamipro];
  return [self recv_getTequilaTokenForCamipro];
}

- (void) send_getCamiproSession: (TequilaToken *) iTequilaToken
{
  [outProtocol writeMessageBeginWithName: @"getCamiproSession" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCamiproSession_args"];
  if (iTequilaToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"iTequilaToken" type: TType_STRUCT fieldID: 1];
    [iTequilaToken write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (CamiproSession *) recv_getCamiproSession
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetCamiproSession_result * result = [[[GetCamiproSession_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCamiproSession failed: unknown result"];
}

- (CamiproSession *) getCamiproSession: (TequilaToken *) iTequilaToken
{
  [self send_getCamiproSession: iTequilaToken];
  return [self recv_getCamiproSession];
}

- (void) send_getBalanceAndTransactions: (CamiproRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"getBalanceAndTransactions" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getBalanceAndTransactions_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BalanceAndTransactions *) recv_getBalanceAndTransactions
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetBalanceAndTransactions_result * result = [[[GetBalanceAndTransactions_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getBalanceAndTransactions failed: unknown result"];
}

- (BalanceAndTransactions *) getBalanceAndTransactions: (CamiproRequest *) iRequest
{
  [self send_getBalanceAndTransactions: iRequest];
  return [self recv_getBalanceAndTransactions];
}

- (void) send_getStatsAndLoadingInfo: (CamiproRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"getStatsAndLoadingInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getStatsAndLoadingInfo_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (StatsAndLoadingInfo *) recv_getStatsAndLoadingInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetStatsAndLoadingInfo_result * result = [[[GetStatsAndLoadingInfo_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getStatsAndLoadingInfo failed: unknown result"];
}

- (StatsAndLoadingInfo *) getStatsAndLoadingInfo: (CamiproRequest *) iRequest
{
  [self send_getStatsAndLoadingInfo: iRequest];
  return [self recv_getStatsAndLoadingInfo];
}

- (void) send_sendLoadingInfoByEmail: (CamiproRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"sendLoadingInfoByEmail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendLoadingInfoByEmail_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SendMailResult *) recv_sendLoadingInfoByEmail
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SendLoadingInfoByEmail_result * result = [[[SendLoadingInfoByEmail_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendLoadingInfoByEmail failed: unknown result"];
}

- (SendMailResult *) sendLoadingInfoByEmail: (CamiproRequest *) iRequest
{
  [self send_sendLoadingInfoByEmail: iRequest];
  return [self recv_sendLoadingInfoByEmail];
}

@end

@implementation CamiproServiceProcessor

- (id) initWithCamiproService: (id <CamiproService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_getTequilaTokenForCamipro_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTequilaTokenForCamipro"];
  }
  {
    SEL s = @selector(process_getCamiproSession_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getCamiproSession"];
  }
  {
    SEL s = @selector(process_getBalanceAndTransactions_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getBalanceAndTransactions"];
  }
  {
    SEL s = @selector(process_getStatsAndLoadingInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getStatsAndLoadingInfo"];
  }
  {
    SEL s = @selector(process_sendLoadingInfoByEmail_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"sendLoadingInfoByEmail"];
  }
  return self;
}

- (id<CamiproService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getTequilaTokenForCamipro_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTequilaTokenForCamipro_args * args = [[getTequilaTokenForCamipro_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTequilaTokenForCamipro_result * result = [[GetTequilaTokenForCamipro_result alloc] init];
  [result setSuccess: [mService getTequilaTokenForCamipro]];
  [outProtocol writeMessageBeginWithName: @"getTequilaTokenForCamipro"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getCamiproSession_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getCamiproSession_args * args = [[getCamiproSession_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetCamiproSession_result * result = [[GetCamiproSession_result alloc] init];
  [result setSuccess: [mService getCamiproSession: [args iTequilaToken]]];
  [outProtocol writeMessageBeginWithName: @"getCamiproSession"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getBalanceAndTransactions_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getBalanceAndTransactions_args * args = [[getBalanceAndTransactions_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetBalanceAndTransactions_result * result = [[GetBalanceAndTransactions_result alloc] init];
  [result setSuccess: [mService getBalanceAndTransactions: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"getBalanceAndTransactions"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getStatsAndLoadingInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getStatsAndLoadingInfo_args * args = [[getStatsAndLoadingInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetStatsAndLoadingInfo_result * result = [[GetStatsAndLoadingInfo_result alloc] init];
  [result setSuccess: [mService getStatsAndLoadingInfo: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"getStatsAndLoadingInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_sendLoadingInfoByEmail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  sendLoadingInfoByEmail_args * args = [[sendLoadingInfoByEmail_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SendLoadingInfoByEmail_result * result = [[SendLoadingInfoByEmail_result alloc] init];
  [result setSuccess: [mService sendLoadingInfoByEmail: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"sendLoadingInfoByEmail"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

