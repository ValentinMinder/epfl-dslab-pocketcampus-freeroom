/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "authentication.h"

#import "moodle.h"

@implementation MoodleRequest

- (id) initWithISessionId: (SessionId *) iSessionId iLanguage: (NSString *) iLanguage iCourseId: (int32_t) iCourseId
{
  self = [super init];
  __iSessionId = [iSessionId retain];
  __iSessionId_isset = YES;
  __iLanguage = [iLanguage retain];
  __iLanguage_isset = YES;
  __iCourseId = iCourseId;
  __iCourseId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iSessionId"])
  {
    __iSessionId = [[decoder decodeObjectForKey: @"iSessionId"] retain];
    __iSessionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLanguage"])
  {
    __iLanguage = [[decoder decodeObjectForKey: @"iLanguage"] retain];
    __iLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCourseId"])
  {
    __iCourseId = [decoder decodeInt32ForKey: @"iCourseId"];
    __iCourseId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iSessionId_isset)
  {
    [encoder encodeObject: __iSessionId forKey: @"iSessionId"];
  }
  if (__iLanguage_isset)
  {
    [encoder encodeObject: __iLanguage forKey: @"iLanguage"];
  }
  if (__iCourseId_isset)
  {
    [encoder encodeInt32: __iCourseId forKey: @"iCourseId"];
  }
}

- (void) dealloc
{
  [__iSessionId release];
  [__iLanguage release];
  [super dealloc];
}

- (SessionId *) iSessionId {
  return [[__iSessionId retain] autorelease];
}

- (void) setISessionId: (SessionId *) iSessionId {
  [iSessionId retain];
  [__iSessionId release];
  __iSessionId = iSessionId;
  __iSessionId_isset = YES;
}

- (BOOL) iSessionIdIsSet {
  return __iSessionId_isset;
}

- (void) unsetISessionId {
  [__iSessionId release];
  __iSessionId = nil;
  __iSessionId_isset = NO;
}

- (NSString *) iLanguage {
  return [[__iLanguage retain] autorelease];
}

- (void) setILanguage: (NSString *) iLanguage {
  [iLanguage retain];
  [__iLanguage release];
  __iLanguage = iLanguage;
  __iLanguage_isset = YES;
}

- (BOOL) iLanguageIsSet {
  return __iLanguage_isset;
}

- (void) unsetILanguage {
  [__iLanguage release];
  __iLanguage = nil;
  __iLanguage_isset = NO;
}

- (int32_t) iCourseId {
  return __iCourseId;
}

- (void) setICourseId: (int32_t) iCourseId {
  __iCourseId = iCourseId;
  __iCourseId_isset = YES;
}

- (BOOL) iCourseIdIsSet {
  return __iCourseId_isset;
}

- (void) unsetICourseId {
  __iCourseId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SessionId *fieldValue = [[SessionId alloc] init];
          [fieldValue read: inProtocol];
          [self setISessionId: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setILanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setICourseId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MoodleRequest"];
  if (__iSessionId_isset) {
    if (__iSessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"iSessionId" type: TType_STRUCT fieldID: 1];
      [__iSessionId write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iLanguage_isset) {
    if (__iLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"iLanguage" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCourseId_isset) {
    [outProtocol writeFieldBeginWithName: @"iCourseId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __iCourseId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MoodleRequest("];
  [ms appendString: @"iSessionId:"];
  [ms appendFormat: @"%@", __iSessionId];
  [ms appendString: @",iLanguage:"];
  [ms appendFormat: @"\"%@\"", __iLanguage];
  [ms appendString: @",iCourseId:"];
  [ms appendFormat: @"%i", __iCourseId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MoodleSession

- (id) initWithMoodleCookie: (NSString *) moodleCookie
{
  self = [super init];
  __moodleCookie = [moodleCookie retain];
  __moodleCookie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"moodleCookie"])
  {
    __moodleCookie = [[decoder decodeObjectForKey: @"moodleCookie"] retain];
    __moodleCookie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__moodleCookie_isset)
  {
    [encoder encodeObject: __moodleCookie forKey: @"moodleCookie"];
  }
}

- (void) dealloc
{
  [__moodleCookie release];
  [super dealloc];
}

- (NSString *) moodleCookie {
  return [[__moodleCookie retain] autorelease];
}

- (void) setMoodleCookie: (NSString *) moodleCookie {
  [moodleCookie retain];
  [__moodleCookie release];
  __moodleCookie = moodleCookie;
  __moodleCookie_isset = YES;
}

- (BOOL) moodleCookieIsSet {
  return __moodleCookie_isset;
}

- (void) unsetMoodleCookie {
  [__moodleCookie release];
  __moodleCookie = nil;
  __moodleCookie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMoodleCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MoodleSession"];
  if (__moodleCookie_isset) {
    if (__moodleCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"moodleCookie" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __moodleCookie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MoodleSession("];
  [ms appendString: @"moodleCookie:"];
  [ms appendFormat: @"\"%@\"", __moodleCookie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MoodleCourse

- (id) initWithIId: (int32_t) iId iTitle: (NSString *) iTitle
{
  self = [super init];
  __iId = iId;
  __iId_isset = YES;
  __iTitle = [iTitle retain];
  __iTitle_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iId"])
  {
    __iId = [decoder decodeInt32ForKey: @"iId"];
    __iId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTitle"])
  {
    __iTitle = [[decoder decodeObjectForKey: @"iTitle"] retain];
    __iTitle_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iId_isset)
  {
    [encoder encodeInt32: __iId forKey: @"iId"];
  }
  if (__iTitle_isset)
  {
    [encoder encodeObject: __iTitle forKey: @"iTitle"];
  }
}

- (void) dealloc
{
  [__iTitle release];
  [super dealloc];
}

- (int32_t) iId {
  return __iId;
}

- (void) setIId: (int32_t) iId {
  __iId = iId;
  __iId_isset = YES;
}

- (BOOL) iIdIsSet {
  return __iId_isset;
}

- (void) unsetIId {
  __iId_isset = NO;
}

- (NSString *) iTitle {
  return [[__iTitle retain] autorelease];
}

- (void) setITitle: (NSString *) iTitle {
  [iTitle retain];
  [__iTitle release];
  __iTitle = iTitle;
  __iTitle_isset = YES;
}

- (BOOL) iTitleIsSet {
  return __iTitle_isset;
}

- (void) unsetITitle {
  [__iTitle release];
  __iTitle = nil;
  __iTitle_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MoodleCourse"];
  if (__iId_isset) {
    [outProtocol writeFieldBeginWithName: @"iId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __iId];
    [outProtocol writeFieldEnd];
  }
  if (__iTitle_isset) {
    if (__iTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"iTitle" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iTitle];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MoodleCourse("];
  [ms appendString: @"iId:"];
  [ms appendFormat: @"%i", __iId];
  [ms appendString: @",iTitle:"];
  [ms appendFormat: @"\"%@\"", __iTitle];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CoursesListReply

- (id) initWithICourses: (NSArray *) iCourses iStatus: (int32_t) iStatus
{
  self = [super init];
  __iCourses = [iCourses retain];
  __iCourses_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iCourses"])
  {
    __iCourses = [[decoder decodeObjectForKey: @"iCourses"] retain];
    __iCourses_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iCourses_isset)
  {
    [encoder encodeObject: __iCourses forKey: @"iCourses"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iCourses release];
  [super dealloc];
}

- (NSArray *) iCourses {
  return [[__iCourses retain] autorelease];
}

- (void) setICourses: (NSArray *) iCourses {
  [iCourses retain];
  [__iCourses release];
  __iCourses = iCourses;
  __iCourses_isset = YES;
}

- (BOOL) iCoursesIsSet {
  return __iCourses_isset;
}

- (void) unsetICourses {
  [__iCourses release];
  __iCourses = nil;
  __iCourses_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            MoodleCourse *_elem2 = [[MoodleCourse alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setICourses: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CoursesListReply"];
  if (__iCourses_isset) {
    if (__iCourses != nil) {
      [outProtocol writeFieldBeginWithName: @"iCourses" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__iCourses count]];
        int i4;
        for (i4 = 0; i4 < [__iCourses count]; i4++)
        {
          [[__iCourses objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CoursesListReply("];
  [ms appendString: @"iCourses:"];
  [ms appendFormat: @"%@", __iCourses];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MoodleAssignment

- (id) initWithIId: (int32_t) iId iTitle: (NSString *) iTitle iDesc: (NSString *) iDesc iCourse: (MoodleCourse *) iCourse iPostingDate: (int64_t) iPostingDate iDueDate: (int64_t) iDueDate iGrade: (NSString *) iGrade
{
  self = [super init];
  __iId = iId;
  __iId_isset = YES;
  __iTitle = [iTitle retain];
  __iTitle_isset = YES;
  __iDesc = [iDesc retain];
  __iDesc_isset = YES;
  __iCourse = [iCourse retain];
  __iCourse_isset = YES;
  __iPostingDate = iPostingDate;
  __iPostingDate_isset = YES;
  __iDueDate = iDueDate;
  __iDueDate_isset = YES;
  __iGrade = [iGrade retain];
  __iGrade_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iId"])
  {
    __iId = [decoder decodeInt32ForKey: @"iId"];
    __iId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTitle"])
  {
    __iTitle = [[decoder decodeObjectForKey: @"iTitle"] retain];
    __iTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"iDesc"])
  {
    __iDesc = [[decoder decodeObjectForKey: @"iDesc"] retain];
    __iDesc_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCourse"])
  {
    __iCourse = [[decoder decodeObjectForKey: @"iCourse"] retain];
    __iCourse_isset = YES;
  }
  if ([decoder containsValueForKey: @"iPostingDate"])
  {
    __iPostingDate = [decoder decodeInt64ForKey: @"iPostingDate"];
    __iPostingDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"iDueDate"])
  {
    __iDueDate = [decoder decodeInt64ForKey: @"iDueDate"];
    __iDueDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"iGrade"])
  {
    __iGrade = [[decoder decodeObjectForKey: @"iGrade"] retain];
    __iGrade_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iId_isset)
  {
    [encoder encodeInt32: __iId forKey: @"iId"];
  }
  if (__iTitle_isset)
  {
    [encoder encodeObject: __iTitle forKey: @"iTitle"];
  }
  if (__iDesc_isset)
  {
    [encoder encodeObject: __iDesc forKey: @"iDesc"];
  }
  if (__iCourse_isset)
  {
    [encoder encodeObject: __iCourse forKey: @"iCourse"];
  }
  if (__iPostingDate_isset)
  {
    [encoder encodeInt64: __iPostingDate forKey: @"iPostingDate"];
  }
  if (__iDueDate_isset)
  {
    [encoder encodeInt64: __iDueDate forKey: @"iDueDate"];
  }
  if (__iGrade_isset)
  {
    [encoder encodeObject: __iGrade forKey: @"iGrade"];
  }
}

- (void) dealloc
{
  [__iTitle release];
  [__iDesc release];
  [__iCourse release];
  [__iGrade release];
  [super dealloc];
}

- (int32_t) iId {
  return __iId;
}

- (void) setIId: (int32_t) iId {
  __iId = iId;
  __iId_isset = YES;
}

- (BOOL) iIdIsSet {
  return __iId_isset;
}

- (void) unsetIId {
  __iId_isset = NO;
}

- (NSString *) iTitle {
  return [[__iTitle retain] autorelease];
}

- (void) setITitle: (NSString *) iTitle {
  [iTitle retain];
  [__iTitle release];
  __iTitle = iTitle;
  __iTitle_isset = YES;
}

- (BOOL) iTitleIsSet {
  return __iTitle_isset;
}

- (void) unsetITitle {
  [__iTitle release];
  __iTitle = nil;
  __iTitle_isset = NO;
}

- (NSString *) iDesc {
  return [[__iDesc retain] autorelease];
}

- (void) setIDesc: (NSString *) iDesc {
  [iDesc retain];
  [__iDesc release];
  __iDesc = iDesc;
  __iDesc_isset = YES;
}

- (BOOL) iDescIsSet {
  return __iDesc_isset;
}

- (void) unsetIDesc {
  [__iDesc release];
  __iDesc = nil;
  __iDesc_isset = NO;
}

- (MoodleCourse *) iCourse {
  return [[__iCourse retain] autorelease];
}

- (void) setICourse: (MoodleCourse *) iCourse {
  [iCourse retain];
  [__iCourse release];
  __iCourse = iCourse;
  __iCourse_isset = YES;
}

- (BOOL) iCourseIsSet {
  return __iCourse_isset;
}

- (void) unsetICourse {
  [__iCourse release];
  __iCourse = nil;
  __iCourse_isset = NO;
}

- (int64_t) iPostingDate {
  return __iPostingDate;
}

- (void) setIPostingDate: (int64_t) iPostingDate {
  __iPostingDate = iPostingDate;
  __iPostingDate_isset = YES;
}

- (BOOL) iPostingDateIsSet {
  return __iPostingDate_isset;
}

- (void) unsetIPostingDate {
  __iPostingDate_isset = NO;
}

- (int64_t) iDueDate {
  return __iDueDate;
}

- (void) setIDueDate: (int64_t) iDueDate {
  __iDueDate = iDueDate;
  __iDueDate_isset = YES;
}

- (BOOL) iDueDateIsSet {
  return __iDueDate_isset;
}

- (void) unsetIDueDate {
  __iDueDate_isset = NO;
}

- (NSString *) iGrade {
  return [[__iGrade retain] autorelease];
}

- (void) setIGrade: (NSString *) iGrade {
  [iGrade retain];
  [__iGrade release];
  __iGrade = iGrade;
  __iGrade_isset = YES;
}

- (BOOL) iGradeIsSet {
  return __iGrade_isset;
}

- (void) unsetIGrade {
  [__iGrade release];
  __iGrade = nil;
  __iGrade_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          MoodleCourse *fieldValue = [[MoodleCourse alloc] init];
          [fieldValue read: inProtocol];
          [self setICourse: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setIPostingDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setIDueDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIGrade: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MoodleAssignment"];
  if (__iId_isset) {
    [outProtocol writeFieldBeginWithName: @"iId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __iId];
    [outProtocol writeFieldEnd];
  }
  if (__iTitle_isset) {
    if (__iTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"iTitle" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iDesc_isset) {
    if (__iDesc != nil) {
      [outProtocol writeFieldBeginWithName: @"iDesc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __iDesc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCourse_isset) {
    if (__iCourse != nil) {
      [outProtocol writeFieldBeginWithName: @"iCourse" type: TType_STRUCT fieldID: 4];
      [__iCourse write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iPostingDate_isset) {
    [outProtocol writeFieldBeginWithName: @"iPostingDate" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __iPostingDate];
    [outProtocol writeFieldEnd];
  }
  if (__iDueDate_isset) {
    [outProtocol writeFieldBeginWithName: @"iDueDate" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __iDueDate];
    [outProtocol writeFieldEnd];
  }
  if (__iGrade_isset) {
    if (__iGrade != nil) {
      [outProtocol writeFieldBeginWithName: @"iGrade" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __iGrade];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MoodleAssignment("];
  [ms appendString: @"iId:"];
  [ms appendFormat: @"%i", __iId];
  [ms appendString: @",iTitle:"];
  [ms appendFormat: @"\"%@\"", __iTitle];
  [ms appendString: @",iDesc:"];
  [ms appendFormat: @"\"%@\"", __iDesc];
  [ms appendString: @",iCourse:"];
  [ms appendFormat: @"%@", __iCourse];
  [ms appendString: @",iPostingDate:"];
  [ms appendFormat: @"%qi", __iPostingDate];
  [ms appendString: @",iDueDate:"];
  [ms appendFormat: @"%qi", __iDueDate];
  [ms appendString: @",iGrade:"];
  [ms appendFormat: @"\"%@\"", __iGrade];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MoodleUserEvent

- (id) initWithIId: (int32_t) iId iTitle: (NSString *) iTitle iDesc: (NSString *) iDesc iStartDate: (int64_t) iStartDate iEndDate: (int64_t) iEndDate
{
  self = [super init];
  __iId = iId;
  __iId_isset = YES;
  __iTitle = [iTitle retain];
  __iTitle_isset = YES;
  __iDesc = [iDesc retain];
  __iDesc_isset = YES;
  __iStartDate = iStartDate;
  __iStartDate_isset = YES;
  __iEndDate = iEndDate;
  __iEndDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iId"])
  {
    __iId = [decoder decodeInt32ForKey: @"iId"];
    __iId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTitle"])
  {
    __iTitle = [[decoder decodeObjectForKey: @"iTitle"] retain];
    __iTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"iDesc"])
  {
    __iDesc = [[decoder decodeObjectForKey: @"iDesc"] retain];
    __iDesc_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStartDate"])
  {
    __iStartDate = [decoder decodeInt64ForKey: @"iStartDate"];
    __iStartDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"iEndDate"])
  {
    __iEndDate = [decoder decodeInt64ForKey: @"iEndDate"];
    __iEndDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iId_isset)
  {
    [encoder encodeInt32: __iId forKey: @"iId"];
  }
  if (__iTitle_isset)
  {
    [encoder encodeObject: __iTitle forKey: @"iTitle"];
  }
  if (__iDesc_isset)
  {
    [encoder encodeObject: __iDesc forKey: @"iDesc"];
  }
  if (__iStartDate_isset)
  {
    [encoder encodeInt64: __iStartDate forKey: @"iStartDate"];
  }
  if (__iEndDate_isset)
  {
    [encoder encodeInt64: __iEndDate forKey: @"iEndDate"];
  }
}

- (void) dealloc
{
  [__iTitle release];
  [__iDesc release];
  [super dealloc];
}

- (int32_t) iId {
  return __iId;
}

- (void) setIId: (int32_t) iId {
  __iId = iId;
  __iId_isset = YES;
}

- (BOOL) iIdIsSet {
  return __iId_isset;
}

- (void) unsetIId {
  __iId_isset = NO;
}

- (NSString *) iTitle {
  return [[__iTitle retain] autorelease];
}

- (void) setITitle: (NSString *) iTitle {
  [iTitle retain];
  [__iTitle release];
  __iTitle = iTitle;
  __iTitle_isset = YES;
}

- (BOOL) iTitleIsSet {
  return __iTitle_isset;
}

- (void) unsetITitle {
  [__iTitle release];
  __iTitle = nil;
  __iTitle_isset = NO;
}

- (NSString *) iDesc {
  return [[__iDesc retain] autorelease];
}

- (void) setIDesc: (NSString *) iDesc {
  [iDesc retain];
  [__iDesc release];
  __iDesc = iDesc;
  __iDesc_isset = YES;
}

- (BOOL) iDescIsSet {
  return __iDesc_isset;
}

- (void) unsetIDesc {
  [__iDesc release];
  __iDesc = nil;
  __iDesc_isset = NO;
}

- (int64_t) iStartDate {
  return __iStartDate;
}

- (void) setIStartDate: (int64_t) iStartDate {
  __iStartDate = iStartDate;
  __iStartDate_isset = YES;
}

- (BOOL) iStartDateIsSet {
  return __iStartDate_isset;
}

- (void) unsetIStartDate {
  __iStartDate_isset = NO;
}

- (int64_t) iEndDate {
  return __iEndDate;
}

- (void) setIEndDate: (int64_t) iEndDate {
  __iEndDate = iEndDate;
  __iEndDate_isset = YES;
}

- (BOOL) iEndDateIsSet {
  return __iEndDate_isset;
}

- (void) unsetIEndDate {
  __iEndDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setIStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setIEndDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MoodleUserEvent"];
  if (__iId_isset) {
    [outProtocol writeFieldBeginWithName: @"iId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __iId];
    [outProtocol writeFieldEnd];
  }
  if (__iTitle_isset) {
    if (__iTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"iTitle" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iDesc_isset) {
    if (__iDesc != nil) {
      [outProtocol writeFieldBeginWithName: @"iDesc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __iDesc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStartDate_isset) {
    [outProtocol writeFieldBeginWithName: @"iStartDate" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __iStartDate];
    [outProtocol writeFieldEnd];
  }
  if (__iEndDate_isset) {
    [outProtocol writeFieldBeginWithName: @"iEndDate" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __iEndDate];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MoodleUserEvent("];
  [ms appendString: @"iId:"];
  [ms appendFormat: @"%i", __iId];
  [ms appendString: @",iTitle:"];
  [ms appendFormat: @"\"%@\"", __iTitle];
  [ms appendString: @",iDesc:"];
  [ms appendFormat: @"\"%@\"", __iDesc];
  [ms appendString: @",iStartDate:"];
  [ms appendFormat: @"%qi", __iStartDate];
  [ms appendString: @",iEndDate:"];
  [ms appendFormat: @"%qi", __iEndDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MoodleEvent

- (id) initWithIId: (int32_t) iId iTitle: (NSString *) iTitle iDate: (int64_t) iDate iType: (int) iType iAssignment: (MoodleAssignment *) iAssignment iUserEvent: (MoodleUserEvent *) iUserEvent
{
  self = [super init];
  __iId = iId;
  __iId_isset = YES;
  __iTitle = [iTitle retain];
  __iTitle_isset = YES;
  __iDate = iDate;
  __iDate_isset = YES;
  __iType = iType;
  __iType_isset = YES;
  __iAssignment = [iAssignment retain];
  __iAssignment_isset = YES;
  __iUserEvent = [iUserEvent retain];
  __iUserEvent_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iId"])
  {
    __iId = [decoder decodeInt32ForKey: @"iId"];
    __iId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTitle"])
  {
    __iTitle = [[decoder decodeObjectForKey: @"iTitle"] retain];
    __iTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"iDate"])
  {
    __iDate = [decoder decodeInt64ForKey: @"iDate"];
    __iDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"iType"])
  {
    __iType = [decoder decodeIntForKey: @"iType"];
    __iType_isset = YES;
  }
  if ([decoder containsValueForKey: @"iAssignment"])
  {
    __iAssignment = [[decoder decodeObjectForKey: @"iAssignment"] retain];
    __iAssignment_isset = YES;
  }
  if ([decoder containsValueForKey: @"iUserEvent"])
  {
    __iUserEvent = [[decoder decodeObjectForKey: @"iUserEvent"] retain];
    __iUserEvent_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iId_isset)
  {
    [encoder encodeInt32: __iId forKey: @"iId"];
  }
  if (__iTitle_isset)
  {
    [encoder encodeObject: __iTitle forKey: @"iTitle"];
  }
  if (__iDate_isset)
  {
    [encoder encodeInt64: __iDate forKey: @"iDate"];
  }
  if (__iType_isset)
  {
    [encoder encodeInt: __iType forKey: @"iType"];
  }
  if (__iAssignment_isset)
  {
    [encoder encodeObject: __iAssignment forKey: @"iAssignment"];
  }
  if (__iUserEvent_isset)
  {
    [encoder encodeObject: __iUserEvent forKey: @"iUserEvent"];
  }
}

- (void) dealloc
{
  [__iTitle release];
  [__iAssignment release];
  [__iUserEvent release];
  [super dealloc];
}

- (int32_t) iId {
  return __iId;
}

- (void) setIId: (int32_t) iId {
  __iId = iId;
  __iId_isset = YES;
}

- (BOOL) iIdIsSet {
  return __iId_isset;
}

- (void) unsetIId {
  __iId_isset = NO;
}

- (NSString *) iTitle {
  return [[__iTitle retain] autorelease];
}

- (void) setITitle: (NSString *) iTitle {
  [iTitle retain];
  [__iTitle release];
  __iTitle = iTitle;
  __iTitle_isset = YES;
}

- (BOOL) iTitleIsSet {
  return __iTitle_isset;
}

- (void) unsetITitle {
  [__iTitle release];
  __iTitle = nil;
  __iTitle_isset = NO;
}

- (int64_t) iDate {
  return __iDate;
}

- (void) setIDate: (int64_t) iDate {
  __iDate = iDate;
  __iDate_isset = YES;
}

- (BOOL) iDateIsSet {
  return __iDate_isset;
}

- (void) unsetIDate {
  __iDate_isset = NO;
}

- (int) iType {
  return __iType;
}

- (void) setIType: (int) iType {
  __iType = iType;
  __iType_isset = YES;
}

- (BOOL) iTypeIsSet {
  return __iType_isset;
}

- (void) unsetIType {
  __iType_isset = NO;
}

- (MoodleAssignment *) iAssignment {
  return [[__iAssignment retain] autorelease];
}

- (void) setIAssignment: (MoodleAssignment *) iAssignment {
  [iAssignment retain];
  [__iAssignment release];
  __iAssignment = iAssignment;
  __iAssignment_isset = YES;
}

- (BOOL) iAssignmentIsSet {
  return __iAssignment_isset;
}

- (void) unsetIAssignment {
  [__iAssignment release];
  __iAssignment = nil;
  __iAssignment_isset = NO;
}

- (MoodleUserEvent *) iUserEvent {
  return [[__iUserEvent retain] autorelease];
}

- (void) setIUserEvent: (MoodleUserEvent *) iUserEvent {
  [iUserEvent retain];
  [__iUserEvent release];
  __iUserEvent = iUserEvent;
  __iUserEvent_isset = YES;
}

- (BOOL) iUserEventIsSet {
  return __iUserEvent_isset;
}

- (void) unsetIUserEvent {
  [__iUserEvent release];
  __iUserEvent = nil;
  __iUserEvent_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setIDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setIType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          MoodleAssignment *fieldValue = [[MoodleAssignment alloc] init];
          [fieldValue read: inProtocol];
          [self setIAssignment: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          MoodleUserEvent *fieldValue = [[MoodleUserEvent alloc] init];
          [fieldValue read: inProtocol];
          [self setIUserEvent: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MoodleEvent"];
  if (__iId_isset) {
    [outProtocol writeFieldBeginWithName: @"iId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __iId];
    [outProtocol writeFieldEnd];
  }
  if (__iTitle_isset) {
    if (__iTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"iTitle" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iDate_isset) {
    [outProtocol writeFieldBeginWithName: @"iDate" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __iDate];
    [outProtocol writeFieldEnd];
  }
  if (__iType_isset) {
    [outProtocol writeFieldBeginWithName: @"iType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __iType];
    [outProtocol writeFieldEnd];
  }
  if (__iAssignment_isset) {
    if (__iAssignment != nil) {
      [outProtocol writeFieldBeginWithName: @"iAssignment" type: TType_STRUCT fieldID: 5];
      [__iAssignment write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iUserEvent_isset) {
    if (__iUserEvent != nil) {
      [outProtocol writeFieldBeginWithName: @"iUserEvent" type: TType_STRUCT fieldID: 6];
      [__iUserEvent write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MoodleEvent("];
  [ms appendString: @"iId:"];
  [ms appendFormat: @"%i", __iId];
  [ms appendString: @",iTitle:"];
  [ms appendFormat: @"\"%@\"", __iTitle];
  [ms appendString: @",iDate:"];
  [ms appendFormat: @"%qi", __iDate];
  [ms appendString: @",iType:"];
  [ms appendFormat: @"%i", __iType];
  [ms appendString: @",iAssignment:"];
  [ms appendFormat: @"%@", __iAssignment];
  [ms appendString: @",iUserEvent:"];
  [ms appendFormat: @"%@", __iUserEvent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EventsListReply

- (id) initWithIEvents: (NSArray *) iEvents iStatus: (int32_t) iStatus
{
  self = [super init];
  __iEvents = [iEvents retain];
  __iEvents_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iEvents"])
  {
    __iEvents = [[decoder decodeObjectForKey: @"iEvents"] retain];
    __iEvents_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iEvents_isset)
  {
    [encoder encodeObject: __iEvents forKey: @"iEvents"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iEvents release];
  [super dealloc];
}

- (NSArray *) iEvents {
  return [[__iEvents retain] autorelease];
}

- (void) setIEvents: (NSArray *) iEvents {
  [iEvents retain];
  [__iEvents release];
  __iEvents = iEvents;
  __iEvents_isset = YES;
}

- (BOOL) iEventsIsSet {
  return __iEvents_isset;
}

- (void) unsetIEvents {
  [__iEvents release];
  __iEvents = nil;
  __iEvents_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            MoodleEvent *_elem7 = [[MoodleEvent alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setIEvents: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventsListReply"];
  if (__iEvents_isset) {
    if (__iEvents != nil) {
      [outProtocol writeFieldBeginWithName: @"iEvents" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__iEvents count]];
        int i9;
        for (i9 = 0; i9 < [__iEvents count]; i9++)
        {
          [[__iEvents objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EventsListReply("];
  [ms appendString: @"iEvents:"];
  [ms appendFormat: @"%@", __iEvents];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MoodleResource

- (id) initWithIName: (NSString *) iName iUrl: (NSString *) iUrl
{
  self = [super init];
  __iName = [iName retain];
  __iName_isset = YES;
  __iUrl = [iUrl retain];
  __iUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iName"])
  {
    __iName = [[decoder decodeObjectForKey: @"iName"] retain];
    __iName_isset = YES;
  }
  if ([decoder containsValueForKey: @"iUrl"])
  {
    __iUrl = [[decoder decodeObjectForKey: @"iUrl"] retain];
    __iUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iName_isset)
  {
    [encoder encodeObject: __iName forKey: @"iName"];
  }
  if (__iUrl_isset)
  {
    [encoder encodeObject: __iUrl forKey: @"iUrl"];
  }
}

- (void) dealloc
{
  [__iName release];
  [__iUrl release];
  [super dealloc];
}

- (NSString *) iName {
  return [[__iName retain] autorelease];
}

- (void) setIName: (NSString *) iName {
  [iName retain];
  [__iName release];
  __iName = iName;
  __iName_isset = YES;
}

- (BOOL) iNameIsSet {
  return __iName_isset;
}

- (void) unsetIName {
  [__iName release];
  __iName = nil;
  __iName_isset = NO;
}

- (NSString *) iUrl {
  return [[__iUrl retain] autorelease];
}

- (void) setIUrl: (NSString *) iUrl {
  [iUrl retain];
  [__iUrl release];
  __iUrl = iUrl;
  __iUrl_isset = YES;
}

- (BOOL) iUrlIsSet {
  return __iUrl_isset;
}

- (void) unsetIUrl {
  [__iUrl release];
  __iUrl = nil;
  __iUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MoodleResource"];
  if (__iName_isset) {
    if (__iName != nil) {
      [outProtocol writeFieldBeginWithName: @"iName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __iName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iUrl_isset) {
    if (__iUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"iUrl" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MoodleResource("];
  [ms appendString: @"iName:"];
  [ms appendFormat: @"\"%@\"", __iName];
  [ms appendString: @",iUrl:"];
  [ms appendFormat: @"\"%@\"", __iUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MoodleSection

- (id) initWithIResources: (NSArray *) iResources iText: (NSString *) iText iStartDate: (int64_t) iStartDate iEndDate: (int64_t) iEndDate iCurrent: (BOOL) iCurrent
{
  self = [super init];
  __iResources = [iResources retain];
  __iResources_isset = YES;
  __iText = [iText retain];
  __iText_isset = YES;
  __iStartDate = iStartDate;
  __iStartDate_isset = YES;
  __iEndDate = iEndDate;
  __iEndDate_isset = YES;
  __iCurrent = iCurrent;
  __iCurrent_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iResources"])
  {
    __iResources = [[decoder decodeObjectForKey: @"iResources"] retain];
    __iResources_isset = YES;
  }
  if ([decoder containsValueForKey: @"iText"])
  {
    __iText = [[decoder decodeObjectForKey: @"iText"] retain];
    __iText_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStartDate"])
  {
    __iStartDate = [decoder decodeInt64ForKey: @"iStartDate"];
    __iStartDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"iEndDate"])
  {
    __iEndDate = [decoder decodeInt64ForKey: @"iEndDate"];
    __iEndDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCurrent"])
  {
    __iCurrent = [decoder decodeBoolForKey: @"iCurrent"];
    __iCurrent_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iResources_isset)
  {
    [encoder encodeObject: __iResources forKey: @"iResources"];
  }
  if (__iText_isset)
  {
    [encoder encodeObject: __iText forKey: @"iText"];
  }
  if (__iStartDate_isset)
  {
    [encoder encodeInt64: __iStartDate forKey: @"iStartDate"];
  }
  if (__iEndDate_isset)
  {
    [encoder encodeInt64: __iEndDate forKey: @"iEndDate"];
  }
  if (__iCurrent_isset)
  {
    [encoder encodeBool: __iCurrent forKey: @"iCurrent"];
  }
}

- (void) dealloc
{
  [__iResources release];
  [__iText release];
  [super dealloc];
}

- (NSArray *) iResources {
  return [[__iResources retain] autorelease];
}

- (void) setIResources: (NSArray *) iResources {
  [iResources retain];
  [__iResources release];
  __iResources = iResources;
  __iResources_isset = YES;
}

- (BOOL) iResourcesIsSet {
  return __iResources_isset;
}

- (void) unsetIResources {
  [__iResources release];
  __iResources = nil;
  __iResources_isset = NO;
}

- (NSString *) iText {
  return [[__iText retain] autorelease];
}

- (void) setIText: (NSString *) iText {
  [iText retain];
  [__iText release];
  __iText = iText;
  __iText_isset = YES;
}

- (BOOL) iTextIsSet {
  return __iText_isset;
}

- (void) unsetIText {
  [__iText release];
  __iText = nil;
  __iText_isset = NO;
}

- (int64_t) iStartDate {
  return __iStartDate;
}

- (void) setIStartDate: (int64_t) iStartDate {
  __iStartDate = iStartDate;
  __iStartDate_isset = YES;
}

- (BOOL) iStartDateIsSet {
  return __iStartDate_isset;
}

- (void) unsetIStartDate {
  __iStartDate_isset = NO;
}

- (int64_t) iEndDate {
  return __iEndDate;
}

- (void) setIEndDate: (int64_t) iEndDate {
  __iEndDate = iEndDate;
  __iEndDate_isset = YES;
}

- (BOOL) iEndDateIsSet {
  return __iEndDate_isset;
}

- (void) unsetIEndDate {
  __iEndDate_isset = NO;
}

- (BOOL) iCurrent {
  return __iCurrent;
}

- (void) setICurrent: (BOOL) iCurrent {
  __iCurrent = iCurrent;
  __iCurrent_isset = YES;
}

- (BOOL) iCurrentIsSet {
  return __iCurrent_isset;
}

- (void) unsetICurrent {
  __iCurrent_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            MoodleResource *_elem12 = [[MoodleResource alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release];
          }
          [inProtocol readListEnd];
          [self setIResources: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setIStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setIEndDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setICurrent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MoodleSection"];
  if (__iResources_isset) {
    if (__iResources != nil) {
      [outProtocol writeFieldBeginWithName: @"iResources" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__iResources count]];
        int i14;
        for (i14 = 0; i14 < [__iResources count]; i14++)
        {
          [[__iResources objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__iText_isset) {
    if (__iText != nil) {
      [outProtocol writeFieldBeginWithName: @"iText" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iText];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStartDate_isset) {
    [outProtocol writeFieldBeginWithName: @"iStartDate" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __iStartDate];
    [outProtocol writeFieldEnd];
  }
  if (__iEndDate_isset) {
    [outProtocol writeFieldBeginWithName: @"iEndDate" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __iEndDate];
    [outProtocol writeFieldEnd];
  }
  if (__iCurrent_isset) {
    [outProtocol writeFieldBeginWithName: @"iCurrent" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __iCurrent];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MoodleSection("];
  [ms appendString: @"iResources:"];
  [ms appendFormat: @"%@", __iResources];
  [ms appendString: @",iText:"];
  [ms appendFormat: @"\"%@\"", __iText];
  [ms appendString: @",iStartDate:"];
  [ms appendFormat: @"%qi", __iStartDate];
  [ms appendString: @",iEndDate:"];
  [ms appendFormat: @"%qi", __iEndDate];
  [ms appendString: @",iCurrent:"];
  [ms appendFormat: @"%i", __iCurrent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SectionsListReply

- (id) initWithISections: (NSArray *) iSections iStatus: (int32_t) iStatus
{
  self = [super init];
  __iSections = [iSections retain];
  __iSections_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iSections"])
  {
    __iSections = [[decoder decodeObjectForKey: @"iSections"] retain];
    __iSections_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iSections_isset)
  {
    [encoder encodeObject: __iSections forKey: @"iSections"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iSections release];
  [super dealloc];
}

- (NSArray *) iSections {
  return [[__iSections retain] autorelease];
}

- (void) setISections: (NSArray *) iSections {
  [iSections retain];
  [__iSections release];
  __iSections = iSections;
  __iSections_isset = YES;
}

- (BOOL) iSectionsIsSet {
  return __iSections_isset;
}

- (void) unsetISections {
  [__iSections release];
  __iSections = nil;
  __iSections_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            MoodleSection *_elem17 = [[MoodleSection alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release];
          }
          [inProtocol readListEnd];
          [self setISections: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SectionsListReply"];
  if (__iSections_isset) {
    if (__iSections != nil) {
      [outProtocol writeFieldBeginWithName: @"iSections" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__iSections count]];
        int i19;
        for (i19 = 0; i19 < [__iSections count]; i19++)
        {
          [[__iSections objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SectionsListReply("];
  [ms appendString: @"iSections:"];
  [ms appendFormat: @"%@", __iSections];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation moodleConstants
+ (void) initialize {
}
@end

@interface getTequilaTokenForMoodle_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getTequilaTokenForMoodle_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTequilaTokenForMoodle_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTequilaTokenForMoodle_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTequilaTokenForMoodle_result : NSObject <NSCoding> {
  TequilaToken * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TequilaToken * success;
#endif

- (id) initWithSuccess: (TequilaToken *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TequilaToken *) success;
- (void) setSuccess: (TequilaToken *) success;
- (BOOL) successIsSet;

@end

@implementation GetTequilaTokenForMoodle_result

- (id) initWithSuccess: (TequilaToken *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (TequilaToken *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (TequilaToken *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TequilaToken *fieldValue = [[TequilaToken alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTequilaTokenForMoodle_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTequilaTokenForMoodle_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMoodleSession_args : NSObject <NSCoding> {
  TequilaToken * __iTequilaToken;

  BOOL __iTequilaToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iTequilaToken, setter=setITequilaToken:) TequilaToken * iTequilaToken;
#endif

- (id) initWithITequilaToken: (TequilaToken *) iTequilaToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TequilaToken *) iTequilaToken;
- (void) setITequilaToken: (TequilaToken *) iTequilaToken;
- (BOOL) iTequilaTokenIsSet;

@end

@implementation getMoodleSession_args

- (id) initWithITequilaToken: (TequilaToken *) iTequilaToken
{
  self = [super init];
  __iTequilaToken = [iTequilaToken retain];
  __iTequilaToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iTequilaToken"])
  {
    __iTequilaToken = [[decoder decodeObjectForKey: @"iTequilaToken"] retain];
    __iTequilaToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iTequilaToken_isset)
  {
    [encoder encodeObject: __iTequilaToken forKey: @"iTequilaToken"];
  }
}

- (void) dealloc
{
  [__iTequilaToken release];
  [super dealloc];
}

- (TequilaToken *) iTequilaToken {
  return [[__iTequilaToken retain] autorelease];
}

- (void) setITequilaToken: (TequilaToken *) iTequilaToken {
  [iTequilaToken retain];
  [__iTequilaToken release];
  __iTequilaToken = iTequilaToken;
  __iTequilaToken_isset = YES;
}

- (BOOL) iTequilaTokenIsSet {
  return __iTequilaToken_isset;
}

- (void) unsetITequilaToken {
  [__iTequilaToken release];
  __iTequilaToken = nil;
  __iTequilaToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TequilaToken *fieldValue = [[TequilaToken alloc] init];
          [fieldValue read: inProtocol];
          [self setITequilaToken: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMoodleSession_args"];
  if (__iTequilaToken_isset) {
    if (__iTequilaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"iTequilaToken" type: TType_STRUCT fieldID: 1];
      [__iTequilaToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMoodleSession_args("];
  [ms appendString: @"iTequilaToken:"];
  [ms appendFormat: @"%@", __iTequilaToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMoodleSession_result : NSObject <NSCoding> {
  MoodleSession * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MoodleSession * success;
#endif

- (id) initWithSuccess: (MoodleSession *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MoodleSession *) success;
- (void) setSuccess: (MoodleSession *) success;
- (BOOL) successIsSet;

@end

@implementation GetMoodleSession_result

- (id) initWithSuccess: (MoodleSession *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MoodleSession *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MoodleSession *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MoodleSession *fieldValue = [[MoodleSession alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMoodleSession_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMoodleSession_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getCoursesList_args : NSObject <NSCoding> {
  MoodleRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) MoodleRequest * iRequest;
#endif

- (id) initWithIRequest: (MoodleRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MoodleRequest *) iRequest;
- (void) setIRequest: (MoodleRequest *) iRequest;
- (BOOL) iRequestIsSet;

@end

@implementation getCoursesList_args

- (id) initWithIRequest: (MoodleRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release];
  [super dealloc];
}

- (MoodleRequest *) iRequest {
  return [[__iRequest retain] autorelease];
}

- (void) setIRequest: (MoodleRequest *) iRequest {
  [iRequest retain];
  [__iRequest release];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MoodleRequest *fieldValue = [[MoodleRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCoursesList_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCoursesList_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCoursesList_result : NSObject <NSCoding> {
  CoursesListReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) CoursesListReply * success;
#endif

- (id) initWithSuccess: (CoursesListReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (CoursesListReply *) success;
- (void) setSuccess: (CoursesListReply *) success;
- (BOOL) successIsSet;

@end

@implementation GetCoursesList_result

- (id) initWithSuccess: (CoursesListReply *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (CoursesListReply *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (CoursesListReply *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          CoursesListReply *fieldValue = [[CoursesListReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCoursesList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCoursesList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getEventsList_args : NSObject <NSCoding> {
  MoodleRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) MoodleRequest * iRequest;
#endif

- (id) initWithIRequest: (MoodleRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MoodleRequest *) iRequest;
- (void) setIRequest: (MoodleRequest *) iRequest;
- (BOOL) iRequestIsSet;

@end

@implementation getEventsList_args

- (id) initWithIRequest: (MoodleRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release];
  [super dealloc];
}

- (MoodleRequest *) iRequest {
  return [[__iRequest retain] autorelease];
}

- (void) setIRequest: (MoodleRequest *) iRequest {
  [iRequest retain];
  [__iRequest release];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MoodleRequest *fieldValue = [[MoodleRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getEventsList_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getEventsList_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetEventsList_result : NSObject <NSCoding> {
  EventsListReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EventsListReply * success;
#endif

- (id) initWithSuccess: (EventsListReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (EventsListReply *) success;
- (void) setSuccess: (EventsListReply *) success;
- (BOOL) successIsSet;

@end

@implementation GetEventsList_result

- (id) initWithSuccess: (EventsListReply *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (EventsListReply *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (EventsListReply *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EventsListReply *fieldValue = [[EventsListReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetEventsList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetEventsList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getCourseSections_args : NSObject <NSCoding> {
  MoodleRequest * __iRequest;

  BOOL __iRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iRequest, setter=setIRequest:) MoodleRequest * iRequest;
#endif

- (id) initWithIRequest: (MoodleRequest *) iRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MoodleRequest *) iRequest;
- (void) setIRequest: (MoodleRequest *) iRequest;
- (BOOL) iRequestIsSet;

@end

@implementation getCourseSections_args

- (id) initWithIRequest: (MoodleRequest *) iRequest
{
  self = [super init];
  __iRequest = [iRequest retain];
  __iRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iRequest"])
  {
    __iRequest = [[decoder decodeObjectForKey: @"iRequest"] retain];
    __iRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iRequest_isset)
  {
    [encoder encodeObject: __iRequest forKey: @"iRequest"];
  }
}

- (void) dealloc
{
  [__iRequest release];
  [super dealloc];
}

- (MoodleRequest *) iRequest {
  return [[__iRequest retain] autorelease];
}

- (void) setIRequest: (MoodleRequest *) iRequest {
  [iRequest retain];
  [__iRequest release];
  __iRequest = iRequest;
  __iRequest_isset = YES;
}

- (BOOL) iRequestIsSet {
  return __iRequest_isset;
}

- (void) unsetIRequest {
  [__iRequest release];
  __iRequest = nil;
  __iRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MoodleRequest *fieldValue = [[MoodleRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCourseSections_args"];
  if (__iRequest_isset) {
    if (__iRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
      [__iRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCourseSections_args("];
  [ms appendString: @"iRequest:"];
  [ms appendFormat: @"%@", __iRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCourseSections_result : NSObject <NSCoding> {
  SectionsListReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SectionsListReply * success;
#endif

- (id) initWithSuccess: (SectionsListReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (SectionsListReply *) success;
- (void) setSuccess: (SectionsListReply *) success;
- (BOOL) successIsSet;

@end

@implementation GetCourseSections_result

- (id) initWithSuccess: (SectionsListReply *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (SectionsListReply *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (SectionsListReply *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SectionsListReply *fieldValue = [[SectionsListReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCourseSections_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCourseSections_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MoodleServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getTequilaTokenForMoodle
{
  [outProtocol writeMessageBeginWithName: @"getTequilaTokenForMoodle" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTequilaTokenForMoodle_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TequilaToken *) recv_getTequilaTokenForMoodle
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTequilaTokenForMoodle_result * result = [[[GetTequilaTokenForMoodle_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTequilaTokenForMoodle failed: unknown result"];
}

- (TequilaToken *) getTequilaTokenForMoodle
{
  [self send_getTequilaTokenForMoodle];
  return [self recv_getTequilaTokenForMoodle];
}

- (void) send_getMoodleSession: (TequilaToken *) iTequilaToken
{
  [outProtocol writeMessageBeginWithName: @"getMoodleSession" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMoodleSession_args"];
  if (iTequilaToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"iTequilaToken" type: TType_STRUCT fieldID: 1];
    [iTequilaToken write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MoodleSession *) recv_getMoodleSession
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMoodleSession_result * result = [[[GetMoodleSession_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMoodleSession failed: unknown result"];
}

- (MoodleSession *) getMoodleSession: (TequilaToken *) iTequilaToken
{
  [self send_getMoodleSession: iTequilaToken];
  return [self recv_getMoodleSession];
}

- (void) send_getCoursesList: (MoodleRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"getCoursesList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCoursesList_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (CoursesListReply *) recv_getCoursesList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetCoursesList_result * result = [[[GetCoursesList_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCoursesList failed: unknown result"];
}

- (CoursesListReply *) getCoursesList: (MoodleRequest *) iRequest
{
  [self send_getCoursesList: iRequest];
  return [self recv_getCoursesList];
}

- (void) send_getEventsList: (MoodleRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"getEventsList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getEventsList_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EventsListReply *) recv_getEventsList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetEventsList_result * result = [[[GetEventsList_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getEventsList failed: unknown result"];
}

- (EventsListReply *) getEventsList: (MoodleRequest *) iRequest
{
  [self send_getEventsList: iRequest];
  return [self recv_getEventsList];
}

- (void) send_getCourseSections: (MoodleRequest *) iRequest
{
  [outProtocol writeMessageBeginWithName: @"getCourseSections" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCourseSections_args"];
  if (iRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iRequest" type: TType_STRUCT fieldID: 1];
    [iRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SectionsListReply *) recv_getCourseSections
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetCourseSections_result * result = [[[GetCourseSections_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCourseSections failed: unknown result"];
}

- (SectionsListReply *) getCourseSections: (MoodleRequest *) iRequest
{
  [self send_getCourseSections: iRequest];
  return [self recv_getCourseSections];
}

@end

@implementation MoodleServiceProcessor

- (id) initWithMoodleService: (id <MoodleService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_getTequilaTokenForMoodle_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTequilaTokenForMoodle"];
  }
  {
    SEL s = @selector(process_getMoodleSession_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMoodleSession"];
  }
  {
    SEL s = @selector(process_getCoursesList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getCoursesList"];
  }
  {
    SEL s = @selector(process_getEventsList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getEventsList"];
  }
  {
    SEL s = @selector(process_getCourseSections_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getCourseSections"];
  }
  return self;
}

- (id<MoodleService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getTequilaTokenForMoodle_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTequilaTokenForMoodle_args * args = [[getTequilaTokenForMoodle_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTequilaTokenForMoodle_result * result = [[GetTequilaTokenForMoodle_result alloc] init];
  [result setSuccess: [mService getTequilaTokenForMoodle]];
  [outProtocol writeMessageBeginWithName: @"getTequilaTokenForMoodle"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getMoodleSession_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMoodleSession_args * args = [[getMoodleSession_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMoodleSession_result * result = [[GetMoodleSession_result alloc] init];
  [result setSuccess: [mService getMoodleSession: [args iTequilaToken]]];
  [outProtocol writeMessageBeginWithName: @"getMoodleSession"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getCoursesList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getCoursesList_args * args = [[getCoursesList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetCoursesList_result * result = [[GetCoursesList_result alloc] init];
  [result setSuccess: [mService getCoursesList: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"getCoursesList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getEventsList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getEventsList_args * args = [[getEventsList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetEventsList_result * result = [[GetEventsList_result alloc] init];
  [result setSuccess: [mService getEventsList: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"getEventsList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getCourseSections_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getCourseSections_args * args = [[getCourseSections_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetCourseSections_result * result = [[GetCourseSections_result alloc] init];
  [result setSuccess: [mService getCourseSections: [args iRequest]]];
  [outProtocol writeMessageBeginWithName: @"getCourseSections"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

