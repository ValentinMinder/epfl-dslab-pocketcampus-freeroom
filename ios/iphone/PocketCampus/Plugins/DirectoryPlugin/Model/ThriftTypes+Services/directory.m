/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "directory.h"

@implementation Person

- (id) initWithFirstName: (NSString *) firstName lastName: (NSString *) lastName sciper: (NSString *) sciper email: (NSString *) email web: (NSString *) web privatePhoneNumber: (NSString *) privatePhoneNumber officePhoneNumber: (NSString *) officePhoneNumber office: (NSString *) office gaspar: (NSString *) gaspar OrganisationalUnit: (NSArray *) OrganisationalUnit_ pictureUrl: (NSString *) pictureUrl
{
  self = [super init];
  __firstName = [firstName retain];
  __firstName_isset = YES;
  __lastName = [lastName retain];
  __lastName_isset = YES;
  __sciper = [sciper retain];
  __sciper_isset = YES;
  __email = [email retain];
  __email_isset = YES;
  __web = [web retain];
  __web_isset = YES;
  __privatePhoneNumber = [privatePhoneNumber retain];
  __privatePhoneNumber_isset = YES;
  __officePhoneNumber = [officePhoneNumber retain];
  __officePhoneNumber_isset = YES;
  __office = [office retain];
  __office_isset = YES;
  __gaspar = [gaspar retain];
  __gaspar_isset = YES;
  __organisationalUnit = [OrganisationalUnit_ retain];
  __OrganisationalUnit_isset = YES;
  __pictureUrl = [pictureUrl retain];
  __pictureUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"firstName"])
  {
    __firstName = [[decoder decodeObjectForKey: @"firstName"] retain];
    __firstName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastName"])
  {
    __lastName = [[decoder decodeObjectForKey: @"lastName"] retain];
    __lastName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sciper"])
  {
    __sciper = [[decoder decodeObjectForKey: @"sciper"] retain];
    __sciper_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"web"])
  {
    __web = [[decoder decodeObjectForKey: @"web"] retain];
    __web_isset = YES;
  }
  if ([decoder containsValueForKey: @"privatePhoneNumber"])
  {
    __privatePhoneNumber = [[decoder decodeObjectForKey: @"privatePhoneNumber"] retain];
    __privatePhoneNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"officePhoneNumber"])
  {
    __officePhoneNumber = [[decoder decodeObjectForKey: @"officePhoneNumber"] retain];
    __officePhoneNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"office"])
  {
    __office = [[decoder decodeObjectForKey: @"office"] retain];
    __office_isset = YES;
  }
  if ([decoder containsValueForKey: @"gaspar"])
  {
    __gaspar = [[decoder decodeObjectForKey: @"gaspar"] retain];
    __gaspar_isset = YES;
  }
  if ([decoder containsValueForKey: @"OrganisationalUnit"])
  {
    __organisationalUnit = [[decoder decodeObjectForKey: @"OrganisationalUnit"] retain];
    __OrganisationalUnit_isset = YES;
  }
  if ([decoder containsValueForKey: @"pictureUrl"])
  {
    __pictureUrl = [[decoder decodeObjectForKey: @"pictureUrl"] retain];
    __pictureUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__firstName_isset)
  {
    [encoder encodeObject: __firstName forKey: @"firstName"];
  }
  if (__lastName_isset)
  {
    [encoder encodeObject: __lastName forKey: @"lastName"];
  }
  if (__sciper_isset)
  {
    [encoder encodeObject: __sciper forKey: @"sciper"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__web_isset)
  {
    [encoder encodeObject: __web forKey: @"web"];
  }
  if (__privatePhoneNumber_isset)
  {
    [encoder encodeObject: __privatePhoneNumber forKey: @"privatePhoneNumber"];
  }
  if (__officePhoneNumber_isset)
  {
    [encoder encodeObject: __officePhoneNumber forKey: @"officePhoneNumber"];
  }
  if (__office_isset)
  {
    [encoder encodeObject: __office forKey: @"office"];
  }
  if (__gaspar_isset)
  {
    [encoder encodeObject: __gaspar forKey: @"gaspar"];
  }
  if (__OrganisationalUnit_isset)
  {
    [encoder encodeObject: __organisationalUnit forKey: @"OrganisationalUnit"];
  }
  if (__pictureUrl_isset)
  {
    [encoder encodeObject: __pictureUrl forKey: @"pictureUrl"];
  }
}

- (void) dealloc
{
  [__firstName release];
  [__lastName release];
  [__sciper release];
  [__email release];
  [__web release];
  [__privatePhoneNumber release];
  [__officePhoneNumber release];
  [__office release];
  [__gaspar release];
  [__organisationalUnit release];
  [__pictureUrl release];
  [super dealloc];
}

- (NSString *) firstName {
  return [[__firstName retain] autorelease];
}

- (void) setFirstName: (NSString *) firstName {
  [firstName retain];
  [__firstName release];
  __firstName = firstName;
  __firstName_isset = YES;
}

- (BOOL) firstNameIsSet {
  return __firstName_isset;
}

- (void) unsetFirstName {
  [__firstName release];
  __firstName = nil;
  __firstName_isset = NO;
}

- (NSString *) lastName {
  return [[__lastName retain] autorelease];
}

- (void) setLastName: (NSString *) lastName {
  [lastName retain];
  [__lastName release];
  __lastName = lastName;
  __lastName_isset = YES;
}

- (BOOL) lastNameIsSet {
  return __lastName_isset;
}

- (void) unsetLastName {
  [__lastName release];
  __lastName = nil;
  __lastName_isset = NO;
}

- (NSString *) sciper {
  return [[__sciper retain] autorelease];
}

- (void) setSciper: (NSString *) sciper {
  [sciper retain];
  [__sciper release];
  __sciper = sciper;
  __sciper_isset = YES;
}

- (BOOL) sciperIsSet {
  return __sciper_isset;
}

- (void) unsetSciper {
  [__sciper release];
  __sciper = nil;
  __sciper_isset = NO;
}

- (NSString *) email {
  return [[__email retain] autorelease];
}

- (void) setEmail: (NSString *) email {
  [email retain];
  [__email release];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) web {
  return [[__web retain] autorelease];
}

- (void) setWeb: (NSString *) web {
  [web retain];
  [__web release];
  __web = web;
  __web_isset = YES;
}

- (BOOL) webIsSet {
  return __web_isset;
}

- (void) unsetWeb {
  [__web release];
  __web = nil;
  __web_isset = NO;
}

- (NSString *) privatePhoneNumber {
  return [[__privatePhoneNumber retain] autorelease];
}

- (void) setPrivatePhoneNumber: (NSString *) privatePhoneNumber {
  [privatePhoneNumber retain];
  [__privatePhoneNumber release];
  __privatePhoneNumber = privatePhoneNumber;
  __privatePhoneNumber_isset = YES;
}

- (BOOL) privatePhoneNumberIsSet {
  return __privatePhoneNumber_isset;
}

- (void) unsetPrivatePhoneNumber {
  [__privatePhoneNumber release];
  __privatePhoneNumber = nil;
  __privatePhoneNumber_isset = NO;
}

- (NSString *) officePhoneNumber {
  return [[__officePhoneNumber retain] autorelease];
}

- (void) setOfficePhoneNumber: (NSString *) officePhoneNumber {
  [officePhoneNumber retain];
  [__officePhoneNumber release];
  __officePhoneNumber = officePhoneNumber;
  __officePhoneNumber_isset = YES;
}

- (BOOL) officePhoneNumberIsSet {
  return __officePhoneNumber_isset;
}

- (void) unsetOfficePhoneNumber {
  [__officePhoneNumber release];
  __officePhoneNumber = nil;
  __officePhoneNumber_isset = NO;
}

- (NSString *) office {
  return [[__office retain] autorelease];
}

- (void) setOffice: (NSString *) office {
  [office retain];
  [__office release];
  __office = office;
  __office_isset = YES;
}

- (BOOL) officeIsSet {
  return __office_isset;
}

- (void) unsetOffice {
  [__office release];
  __office = nil;
  __office_isset = NO;
}

- (NSString *) gaspar {
  return [[__gaspar retain] autorelease];
}

- (void) setGaspar: (NSString *) gaspar {
  [gaspar retain];
  [__gaspar release];
  __gaspar = gaspar;
  __gaspar_isset = YES;
}

- (BOOL) gasparIsSet {
  return __gaspar_isset;
}

- (void) unsetGaspar {
  [__gaspar release];
  __gaspar = nil;
  __gaspar_isset = NO;
}

- (NSArray *) organisationalUnit {
  return [[__organisationalUnit retain] autorelease];
}

- (void) setOrganisationalUnit: (NSArray *) OrganisationalUnit {
  [OrganisationalUnit retain];
  [__organisationalUnit release];
  __organisationalUnit = OrganisationalUnit;
  __OrganisationalUnit_isset = YES;
}

- (BOOL) OrganisationalUnitIsSet {
  return __OrganisationalUnit_isset;
}

- (void) unsetOrganisationalUnit {
  [__organisationalUnit release];
  __organisationalUnit = nil;
  __OrganisationalUnit_isset = NO;
}

- (NSString *) pictureUrl {
  return [[__pictureUrl retain] autorelease];
}

- (void) setPictureUrl: (NSString *) pictureUrl {
  [pictureUrl retain];
  [__pictureUrl release];
  __pictureUrl = pictureUrl;
  __pictureUrl_isset = YES;
}

- (BOOL) pictureUrlIsSet {
  return __pictureUrl_isset;
}

- (void) unsetPictureUrl {
  [__pictureUrl release];
  __pictureUrl = nil;
  __pictureUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSciper: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeb: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrivatePhoneNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOfficePhoneNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOffice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGaspar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setOrganisationalUnit: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPictureUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Person"];
  if (__firstName_isset) {
    if (__firstName != nil) {
      [outProtocol writeFieldBeginWithName: @"firstName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __firstName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastName_isset) {
    if (__lastName != nil) {
      [outProtocol writeFieldBeginWithName: @"lastName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __lastName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sciper_isset) {
    if (__sciper != nil) {
      [outProtocol writeFieldBeginWithName: @"sciper" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __sciper];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__web_isset) {
    if (__web != nil) {
      [outProtocol writeFieldBeginWithName: @"web" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __web];
      [outProtocol writeFieldEnd];
    }
  }
  if (__privatePhoneNumber_isset) {
    if (__privatePhoneNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"privatePhoneNumber" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __privatePhoneNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__officePhoneNumber_isset) {
    if (__officePhoneNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"officePhoneNumber" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __officePhoneNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__office_isset) {
    if (__office != nil) {
      [outProtocol writeFieldBeginWithName: @"office" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __office];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gaspar_isset) {
    if (__gaspar != nil) {
      [outProtocol writeFieldBeginWithName: @"gaspar" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __gaspar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__OrganisationalUnit_isset) {
    if (__organisationalUnit != nil) {
      [outProtocol writeFieldBeginWithName: @"OrganisationalUnit" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__organisationalUnit count]];
        int i4;
        for (i4 = 0; i4 < [__organisationalUnit count]; i4++)
        {
          [outProtocol writeString: [__organisationalUnit objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__pictureUrl_isset) {
    if (__pictureUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"pictureUrl" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __pictureUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Person("];
  [ms appendString: @"firstName:"];
  [ms appendFormat: @"\"%@\"", __firstName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", __lastName];
  [ms appendString: @",sciper:"];
  [ms appendFormat: @"\"%@\"", __sciper];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",web:"];
  [ms appendFormat: @"\"%@\"", __web];
  [ms appendString: @",privatePhoneNumber:"];
  [ms appendFormat: @"\"%@\"", __privatePhoneNumber];
  [ms appendString: @",officePhoneNumber:"];
  [ms appendFormat: @"\"%@\"", __officePhoneNumber];
  [ms appendString: @",office:"];
  [ms appendFormat: @"\"%@\"", __office];
  [ms appendString: @",gaspar:"];
  [ms appendFormat: @"\"%@\"", __gaspar];
  [ms appendString: @",OrganisationalUnit:"];
  [ms appendFormat: @"%@", __organisationalUnit];
  [ms appendString: @",pictureUrl:"];
  [ms appendFormat: @"\"%@\"", __pictureUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LDAPException

- (id) init
{
  return [super initWithName: @"LDAPException" reason: @"unknown" userInfo: nil];
}
- (id) initWithMessage: (NSString *) message
{
  self = [self init];
  __message = [message retain];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release];
  [super dealloc];
}

- (NSString *) message {
  return [[__message retain] autorelease];
}

- (void) setMessage: (NSString *) message {
  [message retain];
  [__message release];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LDAPException"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LDAPException("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NoPictureFound

- (id) init
{
  return [super initWithName: @"NoPictureFound" reason: @"unknown" userInfo: nil];
}
- (id) initWithMessage: (NSString *) message
{
  self = [self init];
  __message = [message retain];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release];
  [super dealloc];
}

- (NSString *) message {
  return [[__message retain] autorelease];
}

- (void) setMessage: (NSString *) message {
  [message retain];
  [__message release];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NoPictureFound"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NoPictureFound("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation directoryConstants
+ (void) initialize {
}
@end

@interface searchPersons_args : NSObject <NSCoding> {
  NSString * __nameOrSciper;

  BOOL __nameOrSciper_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=nameOrSciper, setter=setNameOrSciper:) NSString * nameOrSciper;
#endif

- (id) initWithNameOrSciper: (NSString *) nameOrSciper;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) nameOrSciper;
- (void) setNameOrSciper: (NSString *) nameOrSciper;
- (BOOL) nameOrSciperIsSet;

@end

@implementation searchPersons_args

- (id) initWithNameOrSciper: (NSString *) nameOrSciper
{
  self = [super init];
  __nameOrSciper = [nameOrSciper retain];
  __nameOrSciper_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"nameOrSciper"])
  {
    __nameOrSciper = [[decoder decodeObjectForKey: @"nameOrSciper"] retain];
    __nameOrSciper_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__nameOrSciper_isset)
  {
    [encoder encodeObject: __nameOrSciper forKey: @"nameOrSciper"];
  }
}

- (void) dealloc
{
  [__nameOrSciper release];
  [super dealloc];
}

- (NSString *) nameOrSciper {
  return [[__nameOrSciper retain] autorelease];
}

- (void) setNameOrSciper: (NSString *) nameOrSciper {
  [nameOrSciper retain];
  [__nameOrSciper release];
  __nameOrSciper = nameOrSciper;
  __nameOrSciper_isset = YES;
}

- (BOOL) nameOrSciperIsSet {
  return __nameOrSciper_isset;
}

- (void) unsetNameOrSciper {
  [__nameOrSciper release];
  __nameOrSciper = nil;
  __nameOrSciper_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNameOrSciper: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"searchPersons_args"];
  if (__nameOrSciper_isset) {
    if (__nameOrSciper != nil) {
      [outProtocol writeFieldBeginWithName: @"nameOrSciper" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __nameOrSciper];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"searchPersons_args("];
  [ms appendString: @"nameOrSciper:"];
  [ms appendFormat: @"\"%@\"", __nameOrSciper];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SearchPersons_result : NSObject <NSCoding> {
  NSArray * __success;
  LDAPException * __le;

  BOOL __success_isset;
  BOOL __le_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
@property (nonatomic, retain, getter=le, setter=setLe:) LDAPException * le;
#endif

- (id) initWithSuccess: (NSArray *) success le: (LDAPException *) le;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

- (LDAPException *) le;
- (void) setLe: (LDAPException *) le;
- (BOOL) leIsSet;

@end

@implementation SearchPersons_result

- (id) initWithSuccess: (NSArray *) success le: (LDAPException *) le
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __le = [le retain];
  __le_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"le"])
  {
    __le = [[decoder decodeObjectForKey: @"le"] retain];
    __le_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__le_isset)
  {
    [encoder encodeObject: __le forKey: @"le"];
  }
}

- (void) dealloc
{
  [__success release];
  [__le release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (LDAPException *) le {
  return [[__le retain] autorelease];
}

- (void) setLe: (LDAPException *) le {
  [le retain];
  [__le release];
  __le = le;
  __le_isset = YES;
}

- (BOOL) leIsSet {
  return __le_isset;
}

- (void) unsetLe {
  [__le release];
  __le = nil;
  __le_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Person *_elem7 = [[Person alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          LDAPException *fieldValue = [[LDAPException alloc] init];
          [fieldValue read: inProtocol];
          [self setLe: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchPersons_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__le_isset) {
    if (__le != nil) {
      [outProtocol writeFieldBeginWithName: @"le" type: TType_STRUCT fieldID: 1];
      [__le write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchPersons_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",le:"];
  [ms appendFormat: @"%@", __le];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getProfilePicture_args : NSObject <NSCoding> {
  NSString * __sciper;

  BOOL __sciper_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sciper, setter=setSciper:) NSString * sciper;
#endif

- (id) initWithSciper: (NSString *) sciper;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) sciper;
- (void) setSciper: (NSString *) sciper;
- (BOOL) sciperIsSet;

@end

@implementation getProfilePicture_args

- (id) initWithSciper: (NSString *) sciper
{
  self = [super init];
  __sciper = [sciper retain];
  __sciper_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sciper"])
  {
    __sciper = [[decoder decodeObjectForKey: @"sciper"] retain];
    __sciper_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sciper_isset)
  {
    [encoder encodeObject: __sciper forKey: @"sciper"];
  }
}

- (void) dealloc
{
  [__sciper release];
  [super dealloc];
}

- (NSString *) sciper {
  return [[__sciper retain] autorelease];
}

- (void) setSciper: (NSString *) sciper {
  [sciper retain];
  [__sciper release];
  __sciper = sciper;
  __sciper_isset = YES;
}

- (BOOL) sciperIsSet {
  return __sciper_isset;
}

- (void) unsetSciper {
  [__sciper release];
  __sciper = nil;
  __sciper_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSciper: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getProfilePicture_args"];
  if (__sciper_isset) {
    if (__sciper != nil) {
      [outProtocol writeFieldBeginWithName: @"sciper" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sciper];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getProfilePicture_args("];
  [ms appendString: @"sciper:"];
  [ms appendFormat: @"\"%@\"", __sciper];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetProfilePicture_result : NSObject <NSCoding> {
  NSString * __success;
  NoPictureFound * __npf;

  BOOL __success_isset;
  BOOL __npf_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=npf, setter=setNpf:) NoPictureFound * npf;
#endif

- (id) initWithSuccess: (NSString *) success npf: (NoPictureFound *) npf;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) success;
- (void) setSuccess: (NSString *) success;
- (BOOL) successIsSet;

- (NoPictureFound *) npf;
- (void) setNpf: (NoPictureFound *) npf;
- (BOOL) npfIsSet;

@end

@implementation GetProfilePicture_result

- (id) initWithSuccess: (NSString *) success npf: (NoPictureFound *) npf
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __npf = [npf retain];
  __npf_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"npf"])
  {
    __npf = [[decoder decodeObjectForKey: @"npf"] retain];
    __npf_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__npf_isset)
  {
    [encoder encodeObject: __npf forKey: @"npf"];
  }
}

- (void) dealloc
{
  [__success release];
  [__npf release];
  [super dealloc];
}

- (NSString *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSString *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (NoPictureFound *) npf {
  return [[__npf retain] autorelease];
}

- (void) setNpf: (NoPictureFound *) npf {
  [npf retain];
  [__npf release];
  __npf = npf;
  __npf_isset = YES;
}

- (BOOL) npfIsSet {
  return __npf_isset;
}

- (void) unsetNpf {
  [__npf release];
  __npf = nil;
  __npf_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          NoPictureFound *fieldValue = [[NoPictureFound alloc] init];
          [fieldValue read: inProtocol];
          [self setNpf: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetProfilePicture_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__npf_isset) {
    if (__npf != nil) {
      [outProtocol writeFieldBeginWithName: @"npf" type: TType_STRUCT fieldID: 1];
      [__npf write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetProfilePicture_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",npf:"];
  [ms appendFormat: @"%@", __npf];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface autocomplete_args : NSObject <NSCoding> {
  NSString * __constraint;

  BOOL __constraint_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=constraint, setter=setConstraint:) NSString * constraint;
#endif

- (id) initWithConstraint: (NSString *) constraint;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) constraint;
- (void) setConstraint: (NSString *) constraint;
- (BOOL) constraintIsSet;

@end

@implementation autocomplete_args

- (id) initWithConstraint: (NSString *) constraint
{
  self = [super init];
  __constraint = [constraint retain];
  __constraint_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"constraint"])
  {
    __constraint = [[decoder decodeObjectForKey: @"constraint"] retain];
    __constraint_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__constraint_isset)
  {
    [encoder encodeObject: __constraint forKey: @"constraint"];
  }
}

- (void) dealloc
{
  [__constraint release];
  [super dealloc];
}

- (NSString *) constraint {
  return [[__constraint retain] autorelease];
}

- (void) setConstraint: (NSString *) constraint {
  [constraint retain];
  [__constraint release];
  __constraint = constraint;
  __constraint_isset = YES;
}

- (BOOL) constraintIsSet {
  return __constraint_isset;
}

- (void) unsetConstraint {
  [__constraint release];
  __constraint = nil;
  __constraint_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConstraint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"autocomplete_args"];
  if (__constraint_isset) {
    if (__constraint != nil) {
      [outProtocol writeFieldBeginWithName: @"constraint" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __constraint];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"autocomplete_args("];
  [ms appendString: @"constraint:"];
  [ms appendFormat: @"\"%@\"", __constraint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Autocomplete_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation Autocomplete_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12 = [inProtocol readString];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Autocomplete_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__success count]];
        int i14;
        for (i14 = 0; i14 < [__success count]; i14++)
        {
          [outProtocol writeString: [__success objectAtIndex: i14]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Autocomplete_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DirectoryServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_searchPersons: (NSString *) nameOrSciper
{
  [outProtocol writeMessageBeginWithName: @"searchPersons" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"searchPersons_args"];
  if (nameOrSciper != nil)  {
    [outProtocol writeFieldBeginWithName: @"nameOrSciper" type: TType_STRING fieldID: 1];
    [outProtocol writeString: nameOrSciper];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_searchPersons
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SearchPersons_result * result = [[[SearchPersons_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result leIsSet]) {
    @throw [result le];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"searchPersons failed: unknown result"];
}

- (NSArray *) searchPersons: (NSString *) nameOrSciper
{
  [self send_searchPersons: nameOrSciper];
  return [self recv_searchPersons];
}

- (void) send_getProfilePicture: (NSString *) sciper
{
  [outProtocol writeMessageBeginWithName: @"getProfilePicture" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getProfilePicture_args"];
  if (sciper != nil)  {
    [outProtocol writeFieldBeginWithName: @"sciper" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sciper];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_getProfilePicture
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetProfilePicture_result * result = [[[GetProfilePicture_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result npfIsSet]) {
    @throw [result npf];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getProfilePicture failed: unknown result"];
}

- (NSString *) getProfilePicture: (NSString *) sciper
{
  [self send_getProfilePicture: sciper];
  return [self recv_getProfilePicture];
}

- (void) send_autocomplete: (NSString *) constraint
{
  [outProtocol writeMessageBeginWithName: @"autocomplete" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"autocomplete_args"];
  if (constraint != nil)  {
    [outProtocol writeFieldBeginWithName: @"constraint" type: TType_STRING fieldID: 1];
    [outProtocol writeString: constraint];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_autocomplete
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Autocomplete_result * result = [[[Autocomplete_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"autocomplete failed: unknown result"];
}

- (NSArray *) autocomplete: (NSString *) constraint
{
  [self send_autocomplete: constraint];
  return [self recv_autocomplete];
}

@end

@implementation DirectoryServiceProcessor

- (id) initWithDirectoryService: (id <DirectoryService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_searchPersons_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"searchPersons"];
  }
  {
    SEL s = @selector(process_getProfilePicture_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getProfilePicture"];
  }
  {
    SEL s = @selector(process_autocomplete_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"autocomplete"];
  }
  return self;
}

- (id<DirectoryService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_searchPersons_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  searchPersons_args * args = [[searchPersons_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SearchPersons_result * result = [[SearchPersons_result alloc] init];
  [result setSuccess: [mService searchPersons: [args nameOrSciper]]];
  [outProtocol writeMessageBeginWithName: @"searchPersons"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getProfilePicture_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getProfilePicture_args * args = [[getProfilePicture_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetProfilePicture_result * result = [[GetProfilePicture_result alloc] init];
  [result setSuccess: [mService getProfilePicture: [args sciper]]];
  [outProtocol writeMessageBeginWithName: @"getProfilePicture"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_autocomplete_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  autocomplete_args * args = [[autocomplete_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Autocomplete_result * result = [[Autocomplete_result alloc] init];
  [result setSuccess: [mService autocomplete: [args constraint]]];
  [outProtocol writeMessageBeginWithName: @"autocomplete"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

