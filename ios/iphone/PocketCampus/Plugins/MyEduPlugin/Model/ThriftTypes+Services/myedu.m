/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "myedu.h"


@implementation myeduConstants
+ (void) initialize {
}
@end

@implementation MyEduTequilaToken

- (id) initWithITequilaKey: (NSString *) iTequilaKey iLoginCookie: (NSString *) iLoginCookie
{
  self = [super init];
  __iTequilaKey = [iTequilaKey retain];
  __iTequilaKey_isset = YES;
  __iLoginCookie = [iLoginCookie retain];
  __iLoginCookie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iTequilaKey"])
  {
    __iTequilaKey = [[decoder decodeObjectForKey: @"iTequilaKey"] retain];
    __iTequilaKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLoginCookie"])
  {
    __iLoginCookie = [[decoder decodeObjectForKey: @"iLoginCookie"] retain];
    __iLoginCookie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iTequilaKey_isset)
  {
    [encoder encodeObject: __iTequilaKey forKey: @"iTequilaKey"];
  }
  if (__iLoginCookie_isset)
  {
    [encoder encodeObject: __iLoginCookie forKey: @"iLoginCookie"];
  }
}

- (void) dealloc
{
  [__iTequilaKey release];
  [__iLoginCookie release];
  [super dealloc];
}

- (NSString *) iTequilaKey {
  return [[__iTequilaKey retain] autorelease];
}

- (void) setITequilaKey: (NSString *) iTequilaKey {
  [iTequilaKey retain];
  [__iTequilaKey release];
  __iTequilaKey = iTequilaKey;
  __iTequilaKey_isset = YES;
}

- (BOOL) iTequilaKeyIsSet {
  return __iTequilaKey_isset;
}

- (void) unsetITequilaKey {
  [__iTequilaKey release];
  __iTequilaKey = nil;
  __iTequilaKey_isset = NO;
}

- (NSString *) iLoginCookie {
  return [[__iLoginCookie retain] autorelease];
}

- (void) setILoginCookie: (NSString *) iLoginCookie {
  [iLoginCookie retain];
  [__iLoginCookie release];
  __iLoginCookie = iLoginCookie;
  __iLoginCookie_isset = YES;
}

- (BOOL) iLoginCookieIsSet {
  return __iLoginCookie_isset;
}

- (void) unsetILoginCookie {
  [__iLoginCookie release];
  __iLoginCookie = nil;
  __iLoginCookie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITequilaKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setILoginCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduTequilaToken"];
  if (__iTequilaKey_isset) {
    if (__iTequilaKey != nil) {
      [outProtocol writeFieldBeginWithName: @"iTequilaKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __iTequilaKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iLoginCookie_isset) {
    if (__iLoginCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"iLoginCookie" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iLoginCookie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduTequilaToken("];
  [ms appendString: @"iTequilaKey:"];
  [ms appendFormat: @"\"%@\"", __iTequilaKey];
  [ms appendString: @",iLoginCookie:"];
  [ms appendFormat: @"\"%@\"", __iLoginCookie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduSession

- (id) initWithIMyEduCookie: (NSString *) iMyEduCookie
{
  self = [super init];
  __iMyEduCookie = [iMyEduCookie retain];
  __iMyEduCookie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduCookie"])
  {
    __iMyEduCookie = [[decoder decodeObjectForKey: @"iMyEduCookie"] retain];
    __iMyEduCookie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduCookie_isset)
  {
    [encoder encodeObject: __iMyEduCookie forKey: @"iMyEduCookie"];
  }
}

- (void) dealloc
{
  [__iMyEduCookie release];
  [super dealloc];
}

- (NSString *) iMyEduCookie {
  return [[__iMyEduCookie retain] autorelease];
}

- (void) setIMyEduCookie: (NSString *) iMyEduCookie {
  [iMyEduCookie retain];
  [__iMyEduCookie release];
  __iMyEduCookie = iMyEduCookie;
  __iMyEduCookie_isset = YES;
}

- (BOOL) iMyEduCookieIsSet {
  return __iMyEduCookie_isset;
}

- (void) unsetIMyEduCookie {
  [__iMyEduCookie release];
  __iMyEduCookie = nil;
  __iMyEduCookie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIMyEduCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduSession"];
  if (__iMyEduCookie_isset) {
    if (__iMyEduCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduCookie" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __iMyEduCookie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduSession("];
  [ms appendString: @"iMyEduCookie:"];
  [ms appendFormat: @"\"%@\"", __iMyEduCookie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduRequest

- (id) initWithIMyEduSession: (MyEduSession *) iMyEduSession iLanguage: (NSString *) iLanguage
{
  self = [super init];
  __iMyEduSession = [iMyEduSession retain];
  __iMyEduSession_isset = YES;
  __iLanguage = [iLanguage retain];
  __iLanguage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduSession"])
  {
    __iMyEduSession = [[decoder decodeObjectForKey: @"iMyEduSession"] retain];
    __iMyEduSession_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLanguage"])
  {
    __iLanguage = [[decoder decodeObjectForKey: @"iLanguage"] retain];
    __iLanguage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduSession_isset)
  {
    [encoder encodeObject: __iMyEduSession forKey: @"iMyEduSession"];
  }
  if (__iLanguage_isset)
  {
    [encoder encodeObject: __iLanguage forKey: @"iLanguage"];
  }
}

- (void) dealloc
{
  [__iMyEduSession release];
  [__iLanguage release];
  [super dealloc];
}

- (MyEduSession *) iMyEduSession {
  return [[__iMyEduSession retain] autorelease];
}

- (void) setIMyEduSession: (MyEduSession *) iMyEduSession {
  [iMyEduSession retain];
  [__iMyEduSession release];
  __iMyEduSession = iMyEduSession;
  __iMyEduSession_isset = YES;
}

- (BOOL) iMyEduSessionIsSet {
  return __iMyEduSession_isset;
}

- (void) unsetIMyEduSession {
  [__iMyEduSession release];
  __iMyEduSession = nil;
  __iMyEduSession_isset = NO;
}

- (NSString *) iLanguage {
  return [[__iLanguage retain] autorelease];
}

- (void) setILanguage: (NSString *) iLanguage {
  [iLanguage retain];
  [__iLanguage release];
  __iLanguage = iLanguage;
  __iLanguage_isset = YES;
}

- (BOOL) iLanguageIsSet {
  return __iLanguage_isset;
}

- (void) unsetILanguage {
  [__iLanguage release];
  __iLanguage = nil;
  __iLanguage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduSession *fieldValue = [[MyEduSession alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduSession: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setILanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduRequest"];
  if (__iMyEduSession_isset) {
    if (__iMyEduSession != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduSession" type: TType_STRUCT fieldID: 1];
      [__iMyEduSession write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iLanguage_isset) {
    if (__iLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"iLanguage" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduRequest("];
  [ms appendString: @"iMyEduSession:"];
  [ms appendFormat: @"%@", __iMyEduSession];
  [ms appendString: @",iLanguage:"];
  [ms appendFormat: @"\"%@\"", __iLanguage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduCourse

- (id) initWithIId: (int32_t) iId iCode: (NSString *) iCode iTitle: (NSString *) iTitle iDescription: (NSString *) iDescription iCreationTimestamp: (timestamp) iCreationTimestamp iLastUpdateTimestamp: (timestamp) iLastUpdateTimestamp
{
  self = [super init];
  __iId = iId;
  __iId_isset = YES;
  __iCode = [iCode retain];
  __iCode_isset = YES;
  __iTitle = [iTitle retain];
  __iTitle_isset = YES;
  __iDescription = [iDescription retain];
  __iDescription_isset = YES;
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iId"])
  {
    __iId = [decoder decodeInt32ForKey: @"iId"];
    __iId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCode"])
  {
    __iCode = [[decoder decodeObjectForKey: @"iCode"] retain];
    __iCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTitle"])
  {
    __iTitle = [[decoder decodeObjectForKey: @"iTitle"] retain];
    __iTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"iDescription"])
  {
    __iDescription = [[decoder decodeObjectForKey: @"iDescription"] retain];
    __iDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCreationTimestamp"])
  {
    __iCreationTimestamp = [decoder decodeInt64ForKey: @"iCreationTimestamp"];
    __iCreationTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLastUpdateTimestamp"])
  {
    __iLastUpdateTimestamp = [decoder decodeInt64ForKey: @"iLastUpdateTimestamp"];
    __iLastUpdateTimestamp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iId_isset)
  {
    [encoder encodeInt32: __iId forKey: @"iId"];
  }
  if (__iCode_isset)
  {
    [encoder encodeObject: __iCode forKey: @"iCode"];
  }
  if (__iTitle_isset)
  {
    [encoder encodeObject: __iTitle forKey: @"iTitle"];
  }
  if (__iDescription_isset)
  {
    [encoder encodeObject: __iDescription forKey: @"iDescription"];
  }
  if (__iCreationTimestamp_isset)
  {
    [encoder encodeInt64: __iCreationTimestamp forKey: @"iCreationTimestamp"];
  }
  if (__iLastUpdateTimestamp_isset)
  {
    [encoder encodeInt64: __iLastUpdateTimestamp forKey: @"iLastUpdateTimestamp"];
  }
}

- (void) dealloc
{
  [__iCode release];
  [__iTitle release];
  [__iDescription release];
  [super dealloc];
}

- (int32_t) iId {
  return __iId;
}

- (void) setIId: (int32_t) iId {
  __iId = iId;
  __iId_isset = YES;
}

- (BOOL) iIdIsSet {
  return __iId_isset;
}

- (void) unsetIId {
  __iId_isset = NO;
}

- (NSString *) iCode {
  return [[__iCode retain] autorelease];
}

- (void) setICode: (NSString *) iCode {
  [iCode retain];
  [__iCode release];
  __iCode = iCode;
  __iCode_isset = YES;
}

- (BOOL) iCodeIsSet {
  return __iCode_isset;
}

- (void) unsetICode {
  [__iCode release];
  __iCode = nil;
  __iCode_isset = NO;
}

- (NSString *) iTitle {
  return [[__iTitle retain] autorelease];
}

- (void) setITitle: (NSString *) iTitle {
  [iTitle retain];
  [__iTitle release];
  __iTitle = iTitle;
  __iTitle_isset = YES;
}

- (BOOL) iTitleIsSet {
  return __iTitle_isset;
}

- (void) unsetITitle {
  [__iTitle release];
  __iTitle = nil;
  __iTitle_isset = NO;
}

- (NSString *) iDescription {
  return [[__iDescription retain] autorelease];
}

- (void) setIDescription: (NSString *) iDescription {
  [iDescription retain];
  [__iDescription release];
  __iDescription = iDescription;
  __iDescription_isset = YES;
}

- (BOOL) iDescriptionIsSet {
  return __iDescription_isset;
}

- (void) unsetIDescription {
  [__iDescription release];
  __iDescription = nil;
  __iDescription_isset = NO;
}

- (int64_t) iCreationTimestamp {
  return __iCreationTimestamp;
}

- (void) setICreationTimestamp: (int64_t) iCreationTimestamp {
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
}

- (BOOL) iCreationTimestampIsSet {
  return __iCreationTimestamp_isset;
}

- (void) unsetICreationTimestamp {
  __iCreationTimestamp_isset = NO;
}

- (int64_t) iLastUpdateTimestamp {
  return __iLastUpdateTimestamp;
}

- (void) setILastUpdateTimestamp: (int64_t) iLastUpdateTimestamp {
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
}

- (BOOL) iLastUpdateTimestampIsSet {
  return __iLastUpdateTimestamp_isset;
}

- (void) unsetILastUpdateTimestamp {
  __iLastUpdateTimestamp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setICode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setICreationTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setILastUpdateTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduCourse"];
  if (__iId_isset) {
    [outProtocol writeFieldBeginWithName: @"iId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __iId];
    [outProtocol writeFieldEnd];
  }
  if (__iCode_isset) {
    if (__iCode != nil) {
      [outProtocol writeFieldBeginWithName: @"iCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iTitle_isset) {
    if (__iTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"iTitle" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __iTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iDescription_isset) {
    if (__iDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"iDescription" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __iDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCreationTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iCreationTimestamp" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __iCreationTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__iLastUpdateTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iLastUpdateTimestamp" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __iLastUpdateTimestamp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduCourse("];
  [ms appendString: @"iId:"];
  [ms appendFormat: @"%i", __iId];
  [ms appendString: @",iCode:"];
  [ms appendFormat: @"\"%@\"", __iCode];
  [ms appendString: @",iTitle:"];
  [ms appendFormat: @"\"%@\"", __iTitle];
  [ms appendString: @",iDescription:"];
  [ms appendFormat: @"\"%@\"", __iDescription];
  [ms appendString: @",iCreationTimestamp:"];
  [ms appendFormat: @"%qi", __iCreationTimestamp];
  [ms appendString: @",iLastUpdateTimestamp:"];
  [ms appendFormat: @"%qi", __iLastUpdateTimestamp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduSection

- (id) initWithIId: (int32_t) iId iCourseId: (int32_t) iCourseId iTitle: (NSString *) iTitle iDescription: (NSString *) iDescription iSequence: (int32_t) iSequence iCreationTimestamp: (timestamp) iCreationTimestamp iLastUpdateTimestamp: (timestamp) iLastUpdateTimestamp
{
  self = [super init];
  __iId = iId;
  __iId_isset = YES;
  __iCourseId = iCourseId;
  __iCourseId_isset = YES;
  __iTitle = [iTitle retain];
  __iTitle_isset = YES;
  __iDescription = [iDescription retain];
  __iDescription_isset = YES;
  __iSequence = iSequence;
  __iSequence_isset = YES;
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iId"])
  {
    __iId = [decoder decodeInt32ForKey: @"iId"];
    __iId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCourseId"])
  {
    __iCourseId = [decoder decodeInt32ForKey: @"iCourseId"];
    __iCourseId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTitle"])
  {
    __iTitle = [[decoder decodeObjectForKey: @"iTitle"] retain];
    __iTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"iDescription"])
  {
    __iDescription = [[decoder decodeObjectForKey: @"iDescription"] retain];
    __iDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"iSequence"])
  {
    __iSequence = [decoder decodeInt32ForKey: @"iSequence"];
    __iSequence_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCreationTimestamp"])
  {
    __iCreationTimestamp = [decoder decodeInt64ForKey: @"iCreationTimestamp"];
    __iCreationTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLastUpdateTimestamp"])
  {
    __iLastUpdateTimestamp = [decoder decodeInt64ForKey: @"iLastUpdateTimestamp"];
    __iLastUpdateTimestamp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iId_isset)
  {
    [encoder encodeInt32: __iId forKey: @"iId"];
  }
  if (__iCourseId_isset)
  {
    [encoder encodeInt32: __iCourseId forKey: @"iCourseId"];
  }
  if (__iTitle_isset)
  {
    [encoder encodeObject: __iTitle forKey: @"iTitle"];
  }
  if (__iDescription_isset)
  {
    [encoder encodeObject: __iDescription forKey: @"iDescription"];
  }
  if (__iSequence_isset)
  {
    [encoder encodeInt32: __iSequence forKey: @"iSequence"];
  }
  if (__iCreationTimestamp_isset)
  {
    [encoder encodeInt64: __iCreationTimestamp forKey: @"iCreationTimestamp"];
  }
  if (__iLastUpdateTimestamp_isset)
  {
    [encoder encodeInt64: __iLastUpdateTimestamp forKey: @"iLastUpdateTimestamp"];
  }
}

- (void) dealloc
{
  [__iTitle release];
  [__iDescription release];
  [super dealloc];
}

- (int32_t) iId {
  return __iId;
}

- (void) setIId: (int32_t) iId {
  __iId = iId;
  __iId_isset = YES;
}

- (BOOL) iIdIsSet {
  return __iId_isset;
}

- (void) unsetIId {
  __iId_isset = NO;
}

- (int32_t) iCourseId {
  return __iCourseId;
}

- (void) setICourseId: (int32_t) iCourseId {
  __iCourseId = iCourseId;
  __iCourseId_isset = YES;
}

- (BOOL) iCourseIdIsSet {
  return __iCourseId_isset;
}

- (void) unsetICourseId {
  __iCourseId_isset = NO;
}

- (NSString *) iTitle {
  return [[__iTitle retain] autorelease];
}

- (void) setITitle: (NSString *) iTitle {
  [iTitle retain];
  [__iTitle release];
  __iTitle = iTitle;
  __iTitle_isset = YES;
}

- (BOOL) iTitleIsSet {
  return __iTitle_isset;
}

- (void) unsetITitle {
  [__iTitle release];
  __iTitle = nil;
  __iTitle_isset = NO;
}

- (NSString *) iDescription {
  return [[__iDescription retain] autorelease];
}

- (void) setIDescription: (NSString *) iDescription {
  [iDescription retain];
  [__iDescription release];
  __iDescription = iDescription;
  __iDescription_isset = YES;
}

- (BOOL) iDescriptionIsSet {
  return __iDescription_isset;
}

- (void) unsetIDescription {
  [__iDescription release];
  __iDescription = nil;
  __iDescription_isset = NO;
}

- (int32_t) iSequence {
  return __iSequence;
}

- (void) setISequence: (int32_t) iSequence {
  __iSequence = iSequence;
  __iSequence_isset = YES;
}

- (BOOL) iSequenceIsSet {
  return __iSequence_isset;
}

- (void) unsetISequence {
  __iSequence_isset = NO;
}

- (int64_t) iCreationTimestamp {
  return __iCreationTimestamp;
}

- (void) setICreationTimestamp: (int64_t) iCreationTimestamp {
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
}

- (BOOL) iCreationTimestampIsSet {
  return __iCreationTimestamp_isset;
}

- (void) unsetICreationTimestamp {
  __iCreationTimestamp_isset = NO;
}

- (int64_t) iLastUpdateTimestamp {
  return __iLastUpdateTimestamp;
}

- (void) setILastUpdateTimestamp: (int64_t) iLastUpdateTimestamp {
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
}

- (BOOL) iLastUpdateTimestampIsSet {
  return __iLastUpdateTimestamp_isset;
}

- (void) unsetILastUpdateTimestamp {
  __iLastUpdateTimestamp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setICourseId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setISequence: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setICreationTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setILastUpdateTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduSection"];
  if (__iId_isset) {
    [outProtocol writeFieldBeginWithName: @"iId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __iId];
    [outProtocol writeFieldEnd];
  }
  if (__iCourseId_isset) {
    [outProtocol writeFieldBeginWithName: @"iCourseId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iCourseId];
    [outProtocol writeFieldEnd];
  }
  if (__iTitle_isset) {
    if (__iTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"iTitle" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __iTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iDescription_isset) {
    if (__iDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"iDescription" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __iDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iSequence_isset) {
    [outProtocol writeFieldBeginWithName: @"iSequence" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __iSequence];
    [outProtocol writeFieldEnd];
  }
  if (__iCreationTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iCreationTimestamp" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __iCreationTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__iLastUpdateTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iLastUpdateTimestamp" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __iLastUpdateTimestamp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduSection("];
  [ms appendString: @"iId:"];
  [ms appendFormat: @"%i", __iId];
  [ms appendString: @",iCourseId:"];
  [ms appendFormat: @"%i", __iCourseId];
  [ms appendString: @",iTitle:"];
  [ms appendFormat: @"\"%@\"", __iTitle];
  [ms appendString: @",iDescription:"];
  [ms appendFormat: @"\"%@\"", __iDescription];
  [ms appendString: @",iSequence:"];
  [ms appendFormat: @"%i", __iSequence];
  [ms appendString: @",iCreationTimestamp:"];
  [ms appendFormat: @"%qi", __iCreationTimestamp];
  [ms appendString: @",iLastUpdateTimestamp:"];
  [ms appendFormat: @"%qi", __iLastUpdateTimestamp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduModule

- (id) initWithIId: (int32_t) iId iSectionId: (int32_t) iSectionId iSequence: (int32_t) iSequence iTitle: (NSString *) iTitle iVisible: (BOOL) iVisible iTextContent: (NSString *) iTextContent iVideoSourceProvider: (NSString *) iVideoSourceProvider iVideoID: (NSString *) iVideoID iVideoDownloadURL: (NSString *) iVideoDownloadURL iCreationTimestamp: (timestamp) iCreationTimestamp iLastUpdateTimestamp: (timestamp) iLastUpdateTimestamp
{
  self = [super init];
  __iId = iId;
  __iId_isset = YES;
  __iSectionId = iSectionId;
  __iSectionId_isset = YES;
  __iSequence = iSequence;
  __iSequence_isset = YES;
  __iTitle = [iTitle retain];
  __iTitle_isset = YES;
  __iVisible = iVisible;
  __iVisible_isset = YES;
  __iTextContent = [iTextContent retain];
  __iTextContent_isset = YES;
  __iVideoSourceProvider = [iVideoSourceProvider retain];
  __iVideoSourceProvider_isset = YES;
  __iVideoID = [iVideoID retain];
  __iVideoID_isset = YES;
  __iVideoDownloadURL = [iVideoDownloadURL retain];
  __iVideoDownloadURL_isset = YES;
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iId"])
  {
    __iId = [decoder decodeInt32ForKey: @"iId"];
    __iId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iSectionId"])
  {
    __iSectionId = [decoder decodeInt32ForKey: @"iSectionId"];
    __iSectionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iSequence"])
  {
    __iSequence = [decoder decodeInt32ForKey: @"iSequence"];
    __iSequence_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTitle"])
  {
    __iTitle = [[decoder decodeObjectForKey: @"iTitle"] retain];
    __iTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"iVisible"])
  {
    __iVisible = [decoder decodeBoolForKey: @"iVisible"];
    __iVisible_isset = YES;
  }
  if ([decoder containsValueForKey: @"iTextContent"])
  {
    __iTextContent = [[decoder decodeObjectForKey: @"iTextContent"] retain];
    __iTextContent_isset = YES;
  }
  if ([decoder containsValueForKey: @"iVideoSourceProvider"])
  {
    __iVideoSourceProvider = [[decoder decodeObjectForKey: @"iVideoSourceProvider"] retain];
    __iVideoSourceProvider_isset = YES;
  }
  if ([decoder containsValueForKey: @"iVideoID"])
  {
    __iVideoID = [[decoder decodeObjectForKey: @"iVideoID"] retain];
    __iVideoID_isset = YES;
  }
  if ([decoder containsValueForKey: @"iVideoDownloadURL"])
  {
    __iVideoDownloadURL = [[decoder decodeObjectForKey: @"iVideoDownloadURL"] retain];
    __iVideoDownloadURL_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCreationTimestamp"])
  {
    __iCreationTimestamp = [decoder decodeInt64ForKey: @"iCreationTimestamp"];
    __iCreationTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLastUpdateTimestamp"])
  {
    __iLastUpdateTimestamp = [decoder decodeInt64ForKey: @"iLastUpdateTimestamp"];
    __iLastUpdateTimestamp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iId_isset)
  {
    [encoder encodeInt32: __iId forKey: @"iId"];
  }
  if (__iSectionId_isset)
  {
    [encoder encodeInt32: __iSectionId forKey: @"iSectionId"];
  }
  if (__iSequence_isset)
  {
    [encoder encodeInt32: __iSequence forKey: @"iSequence"];
  }
  if (__iTitle_isset)
  {
    [encoder encodeObject: __iTitle forKey: @"iTitle"];
  }
  if (__iVisible_isset)
  {
    [encoder encodeBool: __iVisible forKey: @"iVisible"];
  }
  if (__iTextContent_isset)
  {
    [encoder encodeObject: __iTextContent forKey: @"iTextContent"];
  }
  if (__iVideoSourceProvider_isset)
  {
    [encoder encodeObject: __iVideoSourceProvider forKey: @"iVideoSourceProvider"];
  }
  if (__iVideoID_isset)
  {
    [encoder encodeObject: __iVideoID forKey: @"iVideoID"];
  }
  if (__iVideoDownloadURL_isset)
  {
    [encoder encodeObject: __iVideoDownloadURL forKey: @"iVideoDownloadURL"];
  }
  if (__iCreationTimestamp_isset)
  {
    [encoder encodeInt64: __iCreationTimestamp forKey: @"iCreationTimestamp"];
  }
  if (__iLastUpdateTimestamp_isset)
  {
    [encoder encodeInt64: __iLastUpdateTimestamp forKey: @"iLastUpdateTimestamp"];
  }
}

- (void) dealloc
{
  [__iTitle release];
  [__iTextContent release];
  [__iVideoSourceProvider release];
  [__iVideoID release];
  [__iVideoDownloadURL release];
  [super dealloc];
}

- (int32_t) iId {
  return __iId;
}

- (void) setIId: (int32_t) iId {
  __iId = iId;
  __iId_isset = YES;
}

- (BOOL) iIdIsSet {
  return __iId_isset;
}

- (void) unsetIId {
  __iId_isset = NO;
}

- (int32_t) iSectionId {
  return __iSectionId;
}

- (void) setISectionId: (int32_t) iSectionId {
  __iSectionId = iSectionId;
  __iSectionId_isset = YES;
}

- (BOOL) iSectionIdIsSet {
  return __iSectionId_isset;
}

- (void) unsetISectionId {
  __iSectionId_isset = NO;
}

- (int32_t) iSequence {
  return __iSequence;
}

- (void) setISequence: (int32_t) iSequence {
  __iSequence = iSequence;
  __iSequence_isset = YES;
}

- (BOOL) iSequenceIsSet {
  return __iSequence_isset;
}

- (void) unsetISequence {
  __iSequence_isset = NO;
}

- (NSString *) iTitle {
  return [[__iTitle retain] autorelease];
}

- (void) setITitle: (NSString *) iTitle {
  [iTitle retain];
  [__iTitle release];
  __iTitle = iTitle;
  __iTitle_isset = YES;
}

- (BOOL) iTitleIsSet {
  return __iTitle_isset;
}

- (void) unsetITitle {
  [__iTitle release];
  __iTitle = nil;
  __iTitle_isset = NO;
}

- (BOOL) iVisible {
  return __iVisible;
}

- (void) setIVisible: (BOOL) iVisible {
  __iVisible = iVisible;
  __iVisible_isset = YES;
}

- (BOOL) iVisibleIsSet {
  return __iVisible_isset;
}

- (void) unsetIVisible {
  __iVisible_isset = NO;
}

- (NSString *) iTextContent {
  return [[__iTextContent retain] autorelease];
}

- (void) setITextContent: (NSString *) iTextContent {
  [iTextContent retain];
  [__iTextContent release];
  __iTextContent = iTextContent;
  __iTextContent_isset = YES;
}

- (BOOL) iTextContentIsSet {
  return __iTextContent_isset;
}

- (void) unsetITextContent {
  [__iTextContent release];
  __iTextContent = nil;
  __iTextContent_isset = NO;
}

- (NSString *) iVideoSourceProvider {
  return [[__iVideoSourceProvider retain] autorelease];
}

- (void) setIVideoSourceProvider: (NSString *) iVideoSourceProvider {
  [iVideoSourceProvider retain];
  [__iVideoSourceProvider release];
  __iVideoSourceProvider = iVideoSourceProvider;
  __iVideoSourceProvider_isset = YES;
}

- (BOOL) iVideoSourceProviderIsSet {
  return __iVideoSourceProvider_isset;
}

- (void) unsetIVideoSourceProvider {
  [__iVideoSourceProvider release];
  __iVideoSourceProvider = nil;
  __iVideoSourceProvider_isset = NO;
}

- (NSString *) iVideoID {
  return [[__iVideoID retain] autorelease];
}

- (void) setIVideoID: (NSString *) iVideoID {
  [iVideoID retain];
  [__iVideoID release];
  __iVideoID = iVideoID;
  __iVideoID_isset = YES;
}

- (BOOL) iVideoIDIsSet {
  return __iVideoID_isset;
}

- (void) unsetIVideoID {
  [__iVideoID release];
  __iVideoID = nil;
  __iVideoID_isset = NO;
}

- (NSString *) iVideoDownloadURL {
  return [[__iVideoDownloadURL retain] autorelease];
}

- (void) setIVideoDownloadURL: (NSString *) iVideoDownloadURL {
  [iVideoDownloadURL retain];
  [__iVideoDownloadURL release];
  __iVideoDownloadURL = iVideoDownloadURL;
  __iVideoDownloadURL_isset = YES;
}

- (BOOL) iVideoDownloadURLIsSet {
  return __iVideoDownloadURL_isset;
}

- (void) unsetIVideoDownloadURL {
  [__iVideoDownloadURL release];
  __iVideoDownloadURL = nil;
  __iVideoDownloadURL_isset = NO;
}

- (int64_t) iCreationTimestamp {
  return __iCreationTimestamp;
}

- (void) setICreationTimestamp: (int64_t) iCreationTimestamp {
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
}

- (BOOL) iCreationTimestampIsSet {
  return __iCreationTimestamp_isset;
}

- (void) unsetICreationTimestamp {
  __iCreationTimestamp_isset = NO;
}

- (int64_t) iLastUpdateTimestamp {
  return __iLastUpdateTimestamp;
}

- (void) setILastUpdateTimestamp: (int64_t) iLastUpdateTimestamp {
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
}

- (BOOL) iLastUpdateTimestampIsSet {
  return __iLastUpdateTimestamp_isset;
}

- (void) unsetILastUpdateTimestamp {
  __iLastUpdateTimestamp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setISectionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setISequence: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIVisible: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITextContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIVideoSourceProvider: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIVideoID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIVideoDownloadURL: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setICreationTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setILastUpdateTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduModule"];
  if (__iId_isset) {
    [outProtocol writeFieldBeginWithName: @"iId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __iId];
    [outProtocol writeFieldEnd];
  }
  if (__iSectionId_isset) {
    [outProtocol writeFieldBeginWithName: @"iSectionId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iSectionId];
    [outProtocol writeFieldEnd];
  }
  if (__iSequence_isset) {
    [outProtocol writeFieldBeginWithName: @"iSequence" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __iSequence];
    [outProtocol writeFieldEnd];
  }
  if (__iTitle_isset) {
    if (__iTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"iTitle" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __iTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iVisible_isset) {
    [outProtocol writeFieldBeginWithName: @"iVisible" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __iVisible];
    [outProtocol writeFieldEnd];
  }
  if (__iTextContent_isset) {
    if (__iTextContent != nil) {
      [outProtocol writeFieldBeginWithName: @"iTextContent" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __iTextContent];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iVideoSourceProvider_isset) {
    if (__iVideoSourceProvider != nil) {
      [outProtocol writeFieldBeginWithName: @"iVideoSourceProvider" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __iVideoSourceProvider];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iVideoID_isset) {
    if (__iVideoID != nil) {
      [outProtocol writeFieldBeginWithName: @"iVideoID" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __iVideoID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iVideoDownloadURL_isset) {
    if (__iVideoDownloadURL != nil) {
      [outProtocol writeFieldBeginWithName: @"iVideoDownloadURL" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __iVideoDownloadURL];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCreationTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iCreationTimestamp" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __iCreationTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__iLastUpdateTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iLastUpdateTimestamp" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __iLastUpdateTimestamp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduModule("];
  [ms appendString: @"iId:"];
  [ms appendFormat: @"%i", __iId];
  [ms appendString: @",iSectionId:"];
  [ms appendFormat: @"%i", __iSectionId];
  [ms appendString: @",iSequence:"];
  [ms appendFormat: @"%i", __iSequence];
  [ms appendString: @",iTitle:"];
  [ms appendFormat: @"\"%@\"", __iTitle];
  [ms appendString: @",iVisible:"];
  [ms appendFormat: @"%i", __iVisible];
  [ms appendString: @",iTextContent:"];
  [ms appendFormat: @"\"%@\"", __iTextContent];
  [ms appendString: @",iVideoSourceProvider:"];
  [ms appendFormat: @"\"%@\"", __iVideoSourceProvider];
  [ms appendString: @",iVideoID:"];
  [ms appendFormat: @"\"%@\"", __iVideoID];
  [ms appendString: @",iVideoDownloadURL:"];
  [ms appendFormat: @"\"%@\"", __iVideoDownloadURL];
  [ms appendString: @",iCreationTimestamp:"];
  [ms appendFormat: @"%qi", __iCreationTimestamp];
  [ms appendString: @",iLastUpdateTimestamp:"];
  [ms appendFormat: @"%qi", __iLastUpdateTimestamp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduMaterial

- (id) initWithIId: (int32_t) iId iModuleId: (int32_t) iModuleId iName: (NSString *) iName iType: (int) iType iURL: (NSString *) iURL iCreationTimestamp: (timestamp) iCreationTimestamp iLastUpdateTimestamp: (timestamp) iLastUpdateTimestamp
{
  self = [super init];
  __iId = iId;
  __iId_isset = YES;
  __iModuleId = iModuleId;
  __iModuleId_isset = YES;
  __iName = [iName retain];
  __iName_isset = YES;
  __iType = iType;
  __iType_isset = YES;
  __iURL = [iURL retain];
  __iURL_isset = YES;
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iId"])
  {
    __iId = [decoder decodeInt32ForKey: @"iId"];
    __iId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iModuleId"])
  {
    __iModuleId = [decoder decodeInt32ForKey: @"iModuleId"];
    __iModuleId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iName"])
  {
    __iName = [[decoder decodeObjectForKey: @"iName"] retain];
    __iName_isset = YES;
  }
  if ([decoder containsValueForKey: @"iType"])
  {
    __iType = [decoder decodeIntForKey: @"iType"];
    __iType_isset = YES;
  }
  if ([decoder containsValueForKey: @"iURL"])
  {
    __iURL = [[decoder decodeObjectForKey: @"iURL"] retain];
    __iURL_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCreationTimestamp"])
  {
    __iCreationTimestamp = [decoder decodeInt64ForKey: @"iCreationTimestamp"];
    __iCreationTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLastUpdateTimestamp"])
  {
    __iLastUpdateTimestamp = [decoder decodeInt64ForKey: @"iLastUpdateTimestamp"];
    __iLastUpdateTimestamp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iId_isset)
  {
    [encoder encodeInt32: __iId forKey: @"iId"];
  }
  if (__iModuleId_isset)
  {
    [encoder encodeInt32: __iModuleId forKey: @"iModuleId"];
  }
  if (__iName_isset)
  {
    [encoder encodeObject: __iName forKey: @"iName"];
  }
  if (__iType_isset)
  {
    [encoder encodeInt: __iType forKey: @"iType"];
  }
  if (__iURL_isset)
  {
    [encoder encodeObject: __iURL forKey: @"iURL"];
  }
  if (__iCreationTimestamp_isset)
  {
    [encoder encodeInt64: __iCreationTimestamp forKey: @"iCreationTimestamp"];
  }
  if (__iLastUpdateTimestamp_isset)
  {
    [encoder encodeInt64: __iLastUpdateTimestamp forKey: @"iLastUpdateTimestamp"];
  }
}

- (void) dealloc
{
  [__iName release];
  [__iURL release];
  [super dealloc];
}

- (int32_t) iId {
  return __iId;
}

- (void) setIId: (int32_t) iId {
  __iId = iId;
  __iId_isset = YES;
}

- (BOOL) iIdIsSet {
  return __iId_isset;
}

- (void) unsetIId {
  __iId_isset = NO;
}

- (int32_t) iModuleId {
  return __iModuleId;
}

- (void) setIModuleId: (int32_t) iModuleId {
  __iModuleId = iModuleId;
  __iModuleId_isset = YES;
}

- (BOOL) iModuleIdIsSet {
  return __iModuleId_isset;
}

- (void) unsetIModuleId {
  __iModuleId_isset = NO;
}

- (NSString *) iName {
  return [[__iName retain] autorelease];
}

- (void) setIName: (NSString *) iName {
  [iName retain];
  [__iName release];
  __iName = iName;
  __iName_isset = YES;
}

- (BOOL) iNameIsSet {
  return __iName_isset;
}

- (void) unsetIName {
  [__iName release];
  __iName = nil;
  __iName_isset = NO;
}

- (int) iType {
  return __iType;
}

- (void) setIType: (int) iType {
  __iType = iType;
  __iType_isset = YES;
}

- (BOOL) iTypeIsSet {
  return __iType_isset;
}

- (void) unsetIType {
  __iType_isset = NO;
}

- (NSString *) iURL {
  return [[__iURL retain] autorelease];
}

- (void) setIURL: (NSString *) iURL {
  [iURL retain];
  [__iURL release];
  __iURL = iURL;
  __iURL_isset = YES;
}

- (BOOL) iURLIsSet {
  return __iURL_isset;
}

- (void) unsetIURL {
  [__iURL release];
  __iURL = nil;
  __iURL_isset = NO;
}

- (int64_t) iCreationTimestamp {
  return __iCreationTimestamp;
}

- (void) setICreationTimestamp: (int64_t) iCreationTimestamp {
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
}

- (BOOL) iCreationTimestampIsSet {
  return __iCreationTimestamp_isset;
}

- (void) unsetICreationTimestamp {
  __iCreationTimestamp_isset = NO;
}

- (int64_t) iLastUpdateTimestamp {
  return __iLastUpdateTimestamp;
}

- (void) setILastUpdateTimestamp: (int64_t) iLastUpdateTimestamp {
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
}

- (BOOL) iLastUpdateTimestampIsSet {
  return __iLastUpdateTimestamp_isset;
}

- (void) unsetILastUpdateTimestamp {
  __iLastUpdateTimestamp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIModuleId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setIType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIURL: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setICreationTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setILastUpdateTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduMaterial"];
  if (__iId_isset) {
    [outProtocol writeFieldBeginWithName: @"iId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __iId];
    [outProtocol writeFieldEnd];
  }
  if (__iModuleId_isset) {
    [outProtocol writeFieldBeginWithName: @"iModuleId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iModuleId];
    [outProtocol writeFieldEnd];
  }
  if (__iName_isset) {
    if (__iName != nil) {
      [outProtocol writeFieldBeginWithName: @"iName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __iName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iType_isset) {
    [outProtocol writeFieldBeginWithName: @"iType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __iType];
    [outProtocol writeFieldEnd];
  }
  if (__iURL_isset) {
    if (__iURL != nil) {
      [outProtocol writeFieldBeginWithName: @"iURL" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __iURL];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCreationTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iCreationTimestamp" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __iCreationTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__iLastUpdateTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iLastUpdateTimestamp" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __iLastUpdateTimestamp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduMaterial("];
  [ms appendString: @"iId:"];
  [ms appendFormat: @"%i", __iId];
  [ms appendString: @",iModuleId:"];
  [ms appendFormat: @"%i", __iModuleId];
  [ms appendString: @",iName:"];
  [ms appendFormat: @"\"%@\"", __iName];
  [ms appendString: @",iType:"];
  [ms appendFormat: @"%i", __iType];
  [ms appendString: @",iURL:"];
  [ms appendFormat: @"\"%@\"", __iURL];
  [ms appendString: @",iCreationTimestamp:"];
  [ms appendFormat: @"%qi", __iCreationTimestamp];
  [ms appendString: @",iLastUpdateTimestamp:"];
  [ms appendFormat: @"%qi", __iLastUpdateTimestamp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduModuleRecord

- (id) initWithIId: (int32_t) iId iModuleId: (int32_t) iModuleId iFeedbackText: (NSString *) iFeedbackText iFeedbackTimestamp: (timestamp) iFeedbackTimestamp iModuleCompleted: (BOOL) iModuleCompleted iRating: (int32_t) iRating iUserId: (int32_t) iUserId iCreationTimestamp: (timestamp) iCreationTimestamp iLastUpdateTimestamp: (timestamp) iLastUpdateTimestamp
{
  self = [super init];
  __iId = iId;
  __iId_isset = YES;
  __iModuleId = iModuleId;
  __iModuleId_isset = YES;
  __iFeedbackText = [iFeedbackText retain];
  __iFeedbackText_isset = YES;
  __iFeedbackTimestamp = iFeedbackTimestamp;
  __iFeedbackTimestamp_isset = YES;
  __iModuleCompleted = iModuleCompleted;
  __iModuleCompleted_isset = YES;
  __iRating = iRating;
  __iRating_isset = YES;
  __iUserId = iUserId;
  __iUserId_isset = YES;
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iId"])
  {
    __iId = [decoder decodeInt32ForKey: @"iId"];
    __iId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iModuleId"])
  {
    __iModuleId = [decoder decodeInt32ForKey: @"iModuleId"];
    __iModuleId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iFeedbackText"])
  {
    __iFeedbackText = [[decoder decodeObjectForKey: @"iFeedbackText"] retain];
    __iFeedbackText_isset = YES;
  }
  if ([decoder containsValueForKey: @"iFeedbackTimestamp"])
  {
    __iFeedbackTimestamp = [decoder decodeInt64ForKey: @"iFeedbackTimestamp"];
    __iFeedbackTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"iModuleCompleted"])
  {
    __iModuleCompleted = [decoder decodeBoolForKey: @"iModuleCompleted"];
    __iModuleCompleted_isset = YES;
  }
  if ([decoder containsValueForKey: @"iRating"])
  {
    __iRating = [decoder decodeInt32ForKey: @"iRating"];
    __iRating_isset = YES;
  }
  if ([decoder containsValueForKey: @"iUserId"])
  {
    __iUserId = [decoder decodeInt32ForKey: @"iUserId"];
    __iUserId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCreationTimestamp"])
  {
    __iCreationTimestamp = [decoder decodeInt64ForKey: @"iCreationTimestamp"];
    __iCreationTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLastUpdateTimestamp"])
  {
    __iLastUpdateTimestamp = [decoder decodeInt64ForKey: @"iLastUpdateTimestamp"];
    __iLastUpdateTimestamp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iId_isset)
  {
    [encoder encodeInt32: __iId forKey: @"iId"];
  }
  if (__iModuleId_isset)
  {
    [encoder encodeInt32: __iModuleId forKey: @"iModuleId"];
  }
  if (__iFeedbackText_isset)
  {
    [encoder encodeObject: __iFeedbackText forKey: @"iFeedbackText"];
  }
  if (__iFeedbackTimestamp_isset)
  {
    [encoder encodeInt64: __iFeedbackTimestamp forKey: @"iFeedbackTimestamp"];
  }
  if (__iModuleCompleted_isset)
  {
    [encoder encodeBool: __iModuleCompleted forKey: @"iModuleCompleted"];
  }
  if (__iRating_isset)
  {
    [encoder encodeInt32: __iRating forKey: @"iRating"];
  }
  if (__iUserId_isset)
  {
    [encoder encodeInt32: __iUserId forKey: @"iUserId"];
  }
  if (__iCreationTimestamp_isset)
  {
    [encoder encodeInt64: __iCreationTimestamp forKey: @"iCreationTimestamp"];
  }
  if (__iLastUpdateTimestamp_isset)
  {
    [encoder encodeInt64: __iLastUpdateTimestamp forKey: @"iLastUpdateTimestamp"];
  }
}

- (void) dealloc
{
  [__iFeedbackText release];
  [super dealloc];
}

- (int32_t) iId {
  return __iId;
}

- (void) setIId: (int32_t) iId {
  __iId = iId;
  __iId_isset = YES;
}

- (BOOL) iIdIsSet {
  return __iId_isset;
}

- (void) unsetIId {
  __iId_isset = NO;
}

- (int32_t) iModuleId {
  return __iModuleId;
}

- (void) setIModuleId: (int32_t) iModuleId {
  __iModuleId = iModuleId;
  __iModuleId_isset = YES;
}

- (BOOL) iModuleIdIsSet {
  return __iModuleId_isset;
}

- (void) unsetIModuleId {
  __iModuleId_isset = NO;
}

- (NSString *) iFeedbackText {
  return [[__iFeedbackText retain] autorelease];
}

- (void) setIFeedbackText: (NSString *) iFeedbackText {
  [iFeedbackText retain];
  [__iFeedbackText release];
  __iFeedbackText = iFeedbackText;
  __iFeedbackText_isset = YES;
}

- (BOOL) iFeedbackTextIsSet {
  return __iFeedbackText_isset;
}

- (void) unsetIFeedbackText {
  [__iFeedbackText release];
  __iFeedbackText = nil;
  __iFeedbackText_isset = NO;
}

- (int64_t) iFeedbackTimestamp {
  return __iFeedbackTimestamp;
}

- (void) setIFeedbackTimestamp: (int64_t) iFeedbackTimestamp {
  __iFeedbackTimestamp = iFeedbackTimestamp;
  __iFeedbackTimestamp_isset = YES;
}

- (BOOL) iFeedbackTimestampIsSet {
  return __iFeedbackTimestamp_isset;
}

- (void) unsetIFeedbackTimestamp {
  __iFeedbackTimestamp_isset = NO;
}

- (BOOL) iModuleCompleted {
  return __iModuleCompleted;
}

- (void) setIModuleCompleted: (BOOL) iModuleCompleted {
  __iModuleCompleted = iModuleCompleted;
  __iModuleCompleted_isset = YES;
}

- (BOOL) iModuleCompletedIsSet {
  return __iModuleCompleted_isset;
}

- (void) unsetIModuleCompleted {
  __iModuleCompleted_isset = NO;
}

- (int32_t) iRating {
  return __iRating;
}

- (void) setIRating: (int32_t) iRating {
  __iRating = iRating;
  __iRating_isset = YES;
}

- (BOOL) iRatingIsSet {
  return __iRating_isset;
}

- (void) unsetIRating {
  __iRating_isset = NO;
}

- (int32_t) iUserId {
  return __iUserId;
}

- (void) setIUserId: (int32_t) iUserId {
  __iUserId = iUserId;
  __iUserId_isset = YES;
}

- (BOOL) iUserIdIsSet {
  return __iUserId_isset;
}

- (void) unsetIUserId {
  __iUserId_isset = NO;
}

- (int64_t) iCreationTimestamp {
  return __iCreationTimestamp;
}

- (void) setICreationTimestamp: (int64_t) iCreationTimestamp {
  __iCreationTimestamp = iCreationTimestamp;
  __iCreationTimestamp_isset = YES;
}

- (BOOL) iCreationTimestampIsSet {
  return __iCreationTimestamp_isset;
}

- (void) unsetICreationTimestamp {
  __iCreationTimestamp_isset = NO;
}

- (int64_t) iLastUpdateTimestamp {
  return __iLastUpdateTimestamp;
}

- (void) setILastUpdateTimestamp: (int64_t) iLastUpdateTimestamp {
  __iLastUpdateTimestamp = iLastUpdateTimestamp;
  __iLastUpdateTimestamp_isset = YES;
}

- (BOOL) iLastUpdateTimestampIsSet {
  return __iLastUpdateTimestamp_isset;
}

- (void) unsetILastUpdateTimestamp {
  __iLastUpdateTimestamp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIModuleId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIFeedbackText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setIFeedbackTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIModuleCompleted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setICreationTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setILastUpdateTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduModuleRecord"];
  if (__iId_isset) {
    [outProtocol writeFieldBeginWithName: @"iId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __iId];
    [outProtocol writeFieldEnd];
  }
  if (__iModuleId_isset) {
    [outProtocol writeFieldBeginWithName: @"iModuleId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iModuleId];
    [outProtocol writeFieldEnd];
  }
  if (__iFeedbackText_isset) {
    if (__iFeedbackText != nil) {
      [outProtocol writeFieldBeginWithName: @"iFeedbackText" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __iFeedbackText];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iFeedbackTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iFeedbackTimestamp" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __iFeedbackTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__iModuleCompleted_isset) {
    [outProtocol writeFieldBeginWithName: @"iModuleCompleted" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __iModuleCompleted];
    [outProtocol writeFieldEnd];
  }
  if (__iRating_isset) {
    [outProtocol writeFieldBeginWithName: @"iRating" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __iRating];
    [outProtocol writeFieldEnd];
  }
  if (__iUserId_isset) {
    [outProtocol writeFieldBeginWithName: @"iUserId" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __iUserId];
    [outProtocol writeFieldEnd];
  }
  if (__iCreationTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iCreationTimestamp" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __iCreationTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__iLastUpdateTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"iLastUpdateTimestamp" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __iLastUpdateTimestamp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduModuleRecord("];
  [ms appendString: @"iId:"];
  [ms appendFormat: @"%i", __iId];
  [ms appendString: @",iModuleId:"];
  [ms appendFormat: @"%i", __iModuleId];
  [ms appendString: @",iFeedbackText:"];
  [ms appendFormat: @"\"%@\"", __iFeedbackText];
  [ms appendString: @",iFeedbackTimestamp:"];
  [ms appendFormat: @"%qi", __iFeedbackTimestamp];
  [ms appendString: @",iModuleCompleted:"];
  [ms appendFormat: @"%i", __iModuleCompleted];
  [ms appendString: @",iRating:"];
  [ms appendFormat: @"%i", __iRating];
  [ms appendString: @",iUserId:"];
  [ms appendFormat: @"%i", __iUserId];
  [ms appendString: @",iCreationTimestamp:"];
  [ms appendFormat: @"%qi", __iCreationTimestamp];
  [ms appendString: @",iLastUpdateTimestamp:"];
  [ms appendFormat: @"%qi", __iLastUpdateTimestamp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduCourseDetailsRequest

- (id) initWithIMyEduRequest: (MyEduRequest *) iMyEduRequest iCourseCode: (NSString *) iCourseCode
{
  self = [super init];
  __iMyEduRequest = [iMyEduRequest retain];
  __iMyEduRequest_isset = YES;
  __iCourseCode = [iCourseCode retain];
  __iCourseCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduRequest"])
  {
    __iMyEduRequest = [[decoder decodeObjectForKey: @"iMyEduRequest"] retain];
    __iMyEduRequest_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCourseCode"])
  {
    __iCourseCode = [[decoder decodeObjectForKey: @"iCourseCode"] retain];
    __iCourseCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduRequest_isset)
  {
    [encoder encodeObject: __iMyEduRequest forKey: @"iMyEduRequest"];
  }
  if (__iCourseCode_isset)
  {
    [encoder encodeObject: __iCourseCode forKey: @"iCourseCode"];
  }
}

- (void) dealloc
{
  [__iMyEduRequest release];
  [__iCourseCode release];
  [super dealloc];
}

- (MyEduRequest *) iMyEduRequest {
  return [[__iMyEduRequest retain] autorelease];
}

- (void) setIMyEduRequest: (MyEduRequest *) iMyEduRequest {
  [iMyEduRequest retain];
  [__iMyEduRequest release];
  __iMyEduRequest = iMyEduRequest;
  __iMyEduRequest_isset = YES;
}

- (BOOL) iMyEduRequestIsSet {
  return __iMyEduRequest_isset;
}

- (void) unsetIMyEduRequest {
  [__iMyEduRequest release];
  __iMyEduRequest = nil;
  __iMyEduRequest_isset = NO;
}

- (NSString *) iCourseCode {
  return [[__iCourseCode retain] autorelease];
}

- (void) setICourseCode: (NSString *) iCourseCode {
  [iCourseCode retain];
  [__iCourseCode release];
  __iCourseCode = iCourseCode;
  __iCourseCode_isset = YES;
}

- (BOOL) iCourseCodeIsSet {
  return __iCourseCode_isset;
}

- (void) unsetICourseCode {
  [__iCourseCode release];
  __iCourseCode = nil;
  __iCourseCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduRequest *fieldValue = [[MyEduRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setICourseCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduCourseDetailsRequest"];
  if (__iMyEduRequest_isset) {
    if (__iMyEduRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduRequest" type: TType_STRUCT fieldID: 1];
      [__iMyEduRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCourseCode_isset) {
    if (__iCourseCode != nil) {
      [outProtocol writeFieldBeginWithName: @"iCourseCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iCourseCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduCourseDetailsRequest("];
  [ms appendString: @"iMyEduRequest:"];
  [ms appendFormat: @"%@", __iMyEduRequest];
  [ms appendString: @",iCourseCode:"];
  [ms appendFormat: @"\"%@\"", __iCourseCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduSectionDetailsRequest

- (id) initWithIMyEduRequest: (MyEduRequest *) iMyEduRequest iCourseCode: (NSString *) iCourseCode iSectionId: (int32_t) iSectionId
{
  self = [super init];
  __iMyEduRequest = [iMyEduRequest retain];
  __iMyEduRequest_isset = YES;
  __iCourseCode = [iCourseCode retain];
  __iCourseCode_isset = YES;
  __iSectionId = iSectionId;
  __iSectionId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduRequest"])
  {
    __iMyEduRequest = [[decoder decodeObjectForKey: @"iMyEduRequest"] retain];
    __iMyEduRequest_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCourseCode"])
  {
    __iCourseCode = [[decoder decodeObjectForKey: @"iCourseCode"] retain];
    __iCourseCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"iSectionId"])
  {
    __iSectionId = [decoder decodeInt32ForKey: @"iSectionId"];
    __iSectionId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduRequest_isset)
  {
    [encoder encodeObject: __iMyEduRequest forKey: @"iMyEduRequest"];
  }
  if (__iCourseCode_isset)
  {
    [encoder encodeObject: __iCourseCode forKey: @"iCourseCode"];
  }
  if (__iSectionId_isset)
  {
    [encoder encodeInt32: __iSectionId forKey: @"iSectionId"];
  }
}

- (void) dealloc
{
  [__iMyEduRequest release];
  [__iCourseCode release];
  [super dealloc];
}

- (MyEduRequest *) iMyEduRequest {
  return [[__iMyEduRequest retain] autorelease];
}

- (void) setIMyEduRequest: (MyEduRequest *) iMyEduRequest {
  [iMyEduRequest retain];
  [__iMyEduRequest release];
  __iMyEduRequest = iMyEduRequest;
  __iMyEduRequest_isset = YES;
}

- (BOOL) iMyEduRequestIsSet {
  return __iMyEduRequest_isset;
}

- (void) unsetIMyEduRequest {
  [__iMyEduRequest release];
  __iMyEduRequest = nil;
  __iMyEduRequest_isset = NO;
}

- (NSString *) iCourseCode {
  return [[__iCourseCode retain] autorelease];
}

- (void) setICourseCode: (NSString *) iCourseCode {
  [iCourseCode retain];
  [__iCourseCode release];
  __iCourseCode = iCourseCode;
  __iCourseCode_isset = YES;
}

- (BOOL) iCourseCodeIsSet {
  return __iCourseCode_isset;
}

- (void) unsetICourseCode {
  [__iCourseCode release];
  __iCourseCode = nil;
  __iCourseCode_isset = NO;
}

- (int32_t) iSectionId {
  return __iSectionId;
}

- (void) setISectionId: (int32_t) iSectionId {
  __iSectionId = iSectionId;
  __iSectionId_isset = YES;
}

- (BOOL) iSectionIdIsSet {
  return __iSectionId_isset;
}

- (void) unsetISectionId {
  __iSectionId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduRequest *fieldValue = [[MyEduRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setICourseCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setISectionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduSectionDetailsRequest"];
  if (__iMyEduRequest_isset) {
    if (__iMyEduRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduRequest" type: TType_STRUCT fieldID: 1];
      [__iMyEduRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCourseCode_isset) {
    if (__iCourseCode != nil) {
      [outProtocol writeFieldBeginWithName: @"iCourseCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iCourseCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iSectionId_isset) {
    [outProtocol writeFieldBeginWithName: @"iSectionId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __iSectionId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduSectionDetailsRequest("];
  [ms appendString: @"iMyEduRequest:"];
  [ms appendFormat: @"%@", __iMyEduRequest];
  [ms appendString: @",iCourseCode:"];
  [ms appendFormat: @"\"%@\"", __iCourseCode];
  [ms appendString: @",iSectionId:"];
  [ms appendFormat: @"%i", __iSectionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduModuleDetailsRequest

- (id) initWithIMyEduRequest: (MyEduRequest *) iMyEduRequest iCourseCode: (NSString *) iCourseCode iSectionId: (int32_t) iSectionId iModuleId: (int32_t) iModuleId
{
  self = [super init];
  __iMyEduRequest = [iMyEduRequest retain];
  __iMyEduRequest_isset = YES;
  __iCourseCode = [iCourseCode retain];
  __iCourseCode_isset = YES;
  __iSectionId = iSectionId;
  __iSectionId_isset = YES;
  __iModuleId = iModuleId;
  __iModuleId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduRequest"])
  {
    __iMyEduRequest = [[decoder decodeObjectForKey: @"iMyEduRequest"] retain];
    __iMyEduRequest_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCourseCode"])
  {
    __iCourseCode = [[decoder decodeObjectForKey: @"iCourseCode"] retain];
    __iCourseCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"iSectionId"])
  {
    __iSectionId = [decoder decodeInt32ForKey: @"iSectionId"];
    __iSectionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iModuleId"])
  {
    __iModuleId = [decoder decodeInt32ForKey: @"iModuleId"];
    __iModuleId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduRequest_isset)
  {
    [encoder encodeObject: __iMyEduRequest forKey: @"iMyEduRequest"];
  }
  if (__iCourseCode_isset)
  {
    [encoder encodeObject: __iCourseCode forKey: @"iCourseCode"];
  }
  if (__iSectionId_isset)
  {
    [encoder encodeInt32: __iSectionId forKey: @"iSectionId"];
  }
  if (__iModuleId_isset)
  {
    [encoder encodeInt32: __iModuleId forKey: @"iModuleId"];
  }
}

- (void) dealloc
{
  [__iMyEduRequest release];
  [__iCourseCode release];
  [super dealloc];
}

- (MyEduRequest *) iMyEduRequest {
  return [[__iMyEduRequest retain] autorelease];
}

- (void) setIMyEduRequest: (MyEduRequest *) iMyEduRequest {
  [iMyEduRequest retain];
  [__iMyEduRequest release];
  __iMyEduRequest = iMyEduRequest;
  __iMyEduRequest_isset = YES;
}

- (BOOL) iMyEduRequestIsSet {
  return __iMyEduRequest_isset;
}

- (void) unsetIMyEduRequest {
  [__iMyEduRequest release];
  __iMyEduRequest = nil;
  __iMyEduRequest_isset = NO;
}

- (NSString *) iCourseCode {
  return [[__iCourseCode retain] autorelease];
}

- (void) setICourseCode: (NSString *) iCourseCode {
  [iCourseCode retain];
  [__iCourseCode release];
  __iCourseCode = iCourseCode;
  __iCourseCode_isset = YES;
}

- (BOOL) iCourseCodeIsSet {
  return __iCourseCode_isset;
}

- (void) unsetICourseCode {
  [__iCourseCode release];
  __iCourseCode = nil;
  __iCourseCode_isset = NO;
}

- (int32_t) iSectionId {
  return __iSectionId;
}

- (void) setISectionId: (int32_t) iSectionId {
  __iSectionId = iSectionId;
  __iSectionId_isset = YES;
}

- (BOOL) iSectionIdIsSet {
  return __iSectionId_isset;
}

- (void) unsetISectionId {
  __iSectionId_isset = NO;
}

- (int32_t) iModuleId {
  return __iModuleId;
}

- (void) setIModuleId: (int32_t) iModuleId {
  __iModuleId = iModuleId;
  __iModuleId_isset = YES;
}

- (BOOL) iModuleIdIsSet {
  return __iModuleId_isset;
}

- (void) unsetIModuleId {
  __iModuleId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduRequest *fieldValue = [[MyEduRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setICourseCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setISectionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIModuleId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduModuleDetailsRequest"];
  if (__iMyEduRequest_isset) {
    if (__iMyEduRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduRequest" type: TType_STRUCT fieldID: 1];
      [__iMyEduRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCourseCode_isset) {
    if (__iCourseCode != nil) {
      [outProtocol writeFieldBeginWithName: @"iCourseCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iCourseCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iSectionId_isset) {
    [outProtocol writeFieldBeginWithName: @"iSectionId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __iSectionId];
    [outProtocol writeFieldEnd];
  }
  if (__iModuleId_isset) {
    [outProtocol writeFieldBeginWithName: @"iModuleId" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __iModuleId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduModuleDetailsRequest("];
  [ms appendString: @"iMyEduRequest:"];
  [ms appendFormat: @"%@", __iMyEduRequest];
  [ms appendString: @",iCourseCode:"];
  [ms appendFormat: @"\"%@\"", __iCourseCode];
  [ms appendString: @",iSectionId:"];
  [ms appendFormat: @"%i", __iSectionId];
  [ms appendString: @",iModuleId:"];
  [ms appendFormat: @"%i", __iModuleId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduSubmitFeedbackRequest

- (id) initWithIMyEduRequest: (MyEduRequest *) iMyEduRequest iCourseCode: (NSString *) iCourseCode iSectionId: (int32_t) iSectionId iModuleId: (int32_t) iModuleId iText: (NSString *) iText iRating: (int32_t) iRating
{
  self = [super init];
  __iMyEduRequest = [iMyEduRequest retain];
  __iMyEduRequest_isset = YES;
  __iCourseCode = [iCourseCode retain];
  __iCourseCode_isset = YES;
  __iSectionId = iSectionId;
  __iSectionId_isset = YES;
  __iModuleId = iModuleId;
  __iModuleId_isset = YES;
  __iText = [iText retain];
  __iText_isset = YES;
  __iRating = iRating;
  __iRating_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduRequest"])
  {
    __iMyEduRequest = [[decoder decodeObjectForKey: @"iMyEduRequest"] retain];
    __iMyEduRequest_isset = YES;
  }
  if ([decoder containsValueForKey: @"iCourseCode"])
  {
    __iCourseCode = [[decoder decodeObjectForKey: @"iCourseCode"] retain];
    __iCourseCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"iSectionId"])
  {
    __iSectionId = [decoder decodeInt32ForKey: @"iSectionId"];
    __iSectionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iModuleId"])
  {
    __iModuleId = [decoder decodeInt32ForKey: @"iModuleId"];
    __iModuleId_isset = YES;
  }
  if ([decoder containsValueForKey: @"iText"])
  {
    __iText = [[decoder decodeObjectForKey: @"iText"] retain];
    __iText_isset = YES;
  }
  if ([decoder containsValueForKey: @"iRating"])
  {
    __iRating = [decoder decodeInt32ForKey: @"iRating"];
    __iRating_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduRequest_isset)
  {
    [encoder encodeObject: __iMyEduRequest forKey: @"iMyEduRequest"];
  }
  if (__iCourseCode_isset)
  {
    [encoder encodeObject: __iCourseCode forKey: @"iCourseCode"];
  }
  if (__iSectionId_isset)
  {
    [encoder encodeInt32: __iSectionId forKey: @"iSectionId"];
  }
  if (__iModuleId_isset)
  {
    [encoder encodeInt32: __iModuleId forKey: @"iModuleId"];
  }
  if (__iText_isset)
  {
    [encoder encodeObject: __iText forKey: @"iText"];
  }
  if (__iRating_isset)
  {
    [encoder encodeInt32: __iRating forKey: @"iRating"];
  }
}

- (void) dealloc
{
  [__iMyEduRequest release];
  [__iCourseCode release];
  [__iText release];
  [super dealloc];
}

- (MyEduRequest *) iMyEduRequest {
  return [[__iMyEduRequest retain] autorelease];
}

- (void) setIMyEduRequest: (MyEduRequest *) iMyEduRequest {
  [iMyEduRequest retain];
  [__iMyEduRequest release];
  __iMyEduRequest = iMyEduRequest;
  __iMyEduRequest_isset = YES;
}

- (BOOL) iMyEduRequestIsSet {
  return __iMyEduRequest_isset;
}

- (void) unsetIMyEduRequest {
  [__iMyEduRequest release];
  __iMyEduRequest = nil;
  __iMyEduRequest_isset = NO;
}

- (NSString *) iCourseCode {
  return [[__iCourseCode retain] autorelease];
}

- (void) setICourseCode: (NSString *) iCourseCode {
  [iCourseCode retain];
  [__iCourseCode release];
  __iCourseCode = iCourseCode;
  __iCourseCode_isset = YES;
}

- (BOOL) iCourseCodeIsSet {
  return __iCourseCode_isset;
}

- (void) unsetICourseCode {
  [__iCourseCode release];
  __iCourseCode = nil;
  __iCourseCode_isset = NO;
}

- (int32_t) iSectionId {
  return __iSectionId;
}

- (void) setISectionId: (int32_t) iSectionId {
  __iSectionId = iSectionId;
  __iSectionId_isset = YES;
}

- (BOOL) iSectionIdIsSet {
  return __iSectionId_isset;
}

- (void) unsetISectionId {
  __iSectionId_isset = NO;
}

- (int32_t) iModuleId {
  return __iModuleId;
}

- (void) setIModuleId: (int32_t) iModuleId {
  __iModuleId = iModuleId;
  __iModuleId_isset = YES;
}

- (BOOL) iModuleIdIsSet {
  return __iModuleId_isset;
}

- (void) unsetIModuleId {
  __iModuleId_isset = NO;
}

- (NSString *) iText {
  return [[__iText retain] autorelease];
}

- (void) setIText: (NSString *) iText {
  [iText retain];
  [__iText release];
  __iText = iText;
  __iText_isset = YES;
}

- (BOOL) iTextIsSet {
  return __iText_isset;
}

- (void) unsetIText {
  [__iText release];
  __iText = nil;
  __iText_isset = NO;
}

- (int32_t) iRating {
  return __iRating;
}

- (void) setIRating: (int32_t) iRating {
  __iRating = iRating;
  __iRating_isset = YES;
}

- (BOOL) iRatingIsSet {
  return __iRating_isset;
}

- (void) unsetIRating {
  __iRating_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduRequest *fieldValue = [[MyEduRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setICourseCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setISectionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIModuleId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduSubmitFeedbackRequest"];
  if (__iMyEduRequest_isset) {
    if (__iMyEduRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduRequest" type: TType_STRUCT fieldID: 1];
      [__iMyEduRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iCourseCode_isset) {
    if (__iCourseCode != nil) {
      [outProtocol writeFieldBeginWithName: @"iCourseCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iCourseCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iSectionId_isset) {
    [outProtocol writeFieldBeginWithName: @"iSectionId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __iSectionId];
    [outProtocol writeFieldEnd];
  }
  if (__iModuleId_isset) {
    [outProtocol writeFieldBeginWithName: @"iModuleId" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __iModuleId];
    [outProtocol writeFieldEnd];
  }
  if (__iText_isset) {
    if (__iText != nil) {
      [outProtocol writeFieldBeginWithName: @"iText" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __iText];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iRating_isset) {
    [outProtocol writeFieldBeginWithName: @"iRating" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __iRating];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduSubmitFeedbackRequest("];
  [ms appendString: @"iMyEduRequest:"];
  [ms appendFormat: @"%@", __iMyEduRequest];
  [ms appendString: @",iCourseCode:"];
  [ms appendFormat: @"\"%@\"", __iCourseCode];
  [ms appendString: @",iSectionId:"];
  [ms appendFormat: @"%i", __iSectionId];
  [ms appendString: @",iModuleId:"];
  [ms appendFormat: @"%i", __iModuleId];
  [ms appendString: @",iText:"];
  [ms appendFormat: @"\"%@\"", __iText];
  [ms appendString: @",iRating:"];
  [ms appendFormat: @"%i", __iRating];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduSubscribedCoursesListReply

- (id) initWithISubscribedCourses: (NSArray *) iSubscribedCourses iStatus: (int32_t) iStatus
{
  self = [super init];
  __iSubscribedCourses = [iSubscribedCourses retain];
  __iSubscribedCourses_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iSubscribedCourses"])
  {
    __iSubscribedCourses = [[decoder decodeObjectForKey: @"iSubscribedCourses"] retain];
    __iSubscribedCourses_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iSubscribedCourses_isset)
  {
    [encoder encodeObject: __iSubscribedCourses forKey: @"iSubscribedCourses"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iSubscribedCourses release];
  [super dealloc];
}

- (NSArray *) iSubscribedCourses {
  return [[__iSubscribedCourses retain] autorelease];
}

- (void) setISubscribedCourses: (NSArray *) iSubscribedCourses {
  [iSubscribedCourses retain];
  [__iSubscribedCourses release];
  __iSubscribedCourses = iSubscribedCourses;
  __iSubscribedCourses_isset = YES;
}

- (BOOL) iSubscribedCoursesIsSet {
  return __iSubscribedCourses_isset;
}

- (void) unsetISubscribedCourses {
  [__iSubscribedCourses release];
  __iSubscribedCourses = nil;
  __iSubscribedCourses_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            MyEduCourse *_elem2 = [[MyEduCourse alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setISubscribedCourses: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduSubscribedCoursesListReply"];
  if (__iSubscribedCourses_isset) {
    if (__iSubscribedCourses != nil) {
      [outProtocol writeFieldBeginWithName: @"iSubscribedCourses" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__iSubscribedCourses count]];
        int i4;
        for (i4 = 0; i4 < [__iSubscribedCourses count]; i4++)
        {
          [[__iSubscribedCourses objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduSubscribedCoursesListReply("];
  [ms appendString: @"iSubscribedCourses:"];
  [ms appendFormat: @"%@", __iSubscribedCourses];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduCourseDetailsReply

- (id) initWithIMyEduSections: (NSArray *) iMyEduSections iStatus: (int32_t) iStatus
{
  self = [super init];
  __iMyEduSections = [iMyEduSections retain];
  __iMyEduSections_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduSections"])
  {
    __iMyEduSections = [[decoder decodeObjectForKey: @"iMyEduSections"] retain];
    __iMyEduSections_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduSections_isset)
  {
    [encoder encodeObject: __iMyEduSections forKey: @"iMyEduSections"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iMyEduSections release];
  [super dealloc];
}

- (NSArray *) iMyEduSections {
  return [[__iMyEduSections retain] autorelease];
}

- (void) setIMyEduSections: (NSArray *) iMyEduSections {
  [iMyEduSections retain];
  [__iMyEduSections release];
  __iMyEduSections = iMyEduSections;
  __iMyEduSections_isset = YES;
}

- (BOOL) iMyEduSectionsIsSet {
  return __iMyEduSections_isset;
}

- (void) unsetIMyEduSections {
  [__iMyEduSections release];
  __iMyEduSections = nil;
  __iMyEduSections_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            MyEduSection *_elem7 = [[MyEduSection alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setIMyEduSections: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduCourseDetailsReply"];
  if (__iMyEduSections_isset) {
    if (__iMyEduSections != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduSections" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__iMyEduSections count]];
        int i9;
        for (i9 = 0; i9 < [__iMyEduSections count]; i9++)
        {
          [[__iMyEduSections objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduCourseDetailsReply("];
  [ms appendString: @"iMyEduSections:"];
  [ms appendFormat: @"%@", __iMyEduSections];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduSectionDetailsReply

- (id) initWithIMyEduModules: (NSArray *) iMyEduModules iStatus: (int32_t) iStatus
{
  self = [super init];
  __iMyEduModules = [iMyEduModules retain];
  __iMyEduModules_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduModules"])
  {
    __iMyEduModules = [[decoder decodeObjectForKey: @"iMyEduModules"] retain];
    __iMyEduModules_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduModules_isset)
  {
    [encoder encodeObject: __iMyEduModules forKey: @"iMyEduModules"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iMyEduModules release];
  [super dealloc];
}

- (NSArray *) iMyEduModules {
  return [[__iMyEduModules retain] autorelease];
}

- (void) setIMyEduModules: (NSArray *) iMyEduModules {
  [iMyEduModules retain];
  [__iMyEduModules release];
  __iMyEduModules = iMyEduModules;
  __iMyEduModules_isset = YES;
}

- (BOOL) iMyEduModulesIsSet {
  return __iMyEduModules_isset;
}

- (void) unsetIMyEduModules {
  [__iMyEduModules release];
  __iMyEduModules = nil;
  __iMyEduModules_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            MyEduModule *_elem12 = [[MyEduModule alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release];
          }
          [inProtocol readListEnd];
          [self setIMyEduModules: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduSectionDetailsReply"];
  if (__iMyEduModules_isset) {
    if (__iMyEduModules != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduModules" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__iMyEduModules count]];
        int i14;
        for (i14 = 0; i14 < [__iMyEduModules count]; i14++)
        {
          [[__iMyEduModules objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduSectionDetailsReply("];
  [ms appendString: @"iMyEduModules:"];
  [ms appendFormat: @"%@", __iMyEduModules];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduModuleDetailsReply

- (id) initWithIMyEduMaterials: (NSArray *) iMyEduMaterials iMyEduRecord: (MyEduModuleRecord *) iMyEduRecord iStatus: (int32_t) iStatus
{
  self = [super init];
  __iMyEduMaterials = [iMyEduMaterials retain];
  __iMyEduMaterials_isset = YES;
  __iMyEduRecord = [iMyEduRecord retain];
  __iMyEduRecord_isset = YES;
  __iStatus = iStatus;
  __iStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduMaterials"])
  {
    __iMyEduMaterials = [[decoder decodeObjectForKey: @"iMyEduMaterials"] retain];
    __iMyEduMaterials_isset = YES;
  }
  if ([decoder containsValueForKey: @"iMyEduRecord"])
  {
    __iMyEduRecord = [[decoder decodeObjectForKey: @"iMyEduRecord"] retain];
    __iMyEduRecord_isset = YES;
  }
  if ([decoder containsValueForKey: @"iStatus"])
  {
    __iStatus = [decoder decodeInt32ForKey: @"iStatus"];
    __iStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduMaterials_isset)
  {
    [encoder encodeObject: __iMyEduMaterials forKey: @"iMyEduMaterials"];
  }
  if (__iMyEduRecord_isset)
  {
    [encoder encodeObject: __iMyEduRecord forKey: @"iMyEduRecord"];
  }
  if (__iStatus_isset)
  {
    [encoder encodeInt32: __iStatus forKey: @"iStatus"];
  }
}

- (void) dealloc
{
  [__iMyEduMaterials release];
  [__iMyEduRecord release];
  [super dealloc];
}

- (NSArray *) iMyEduMaterials {
  return [[__iMyEduMaterials retain] autorelease];
}

- (void) setIMyEduMaterials: (NSArray *) iMyEduMaterials {
  [iMyEduMaterials retain];
  [__iMyEduMaterials release];
  __iMyEduMaterials = iMyEduMaterials;
  __iMyEduMaterials_isset = YES;
}

- (BOOL) iMyEduMaterialsIsSet {
  return __iMyEduMaterials_isset;
}

- (void) unsetIMyEduMaterials {
  [__iMyEduMaterials release];
  __iMyEduMaterials = nil;
  __iMyEduMaterials_isset = NO;
}

- (MyEduModuleRecord *) iMyEduRecord {
  return [[__iMyEduRecord retain] autorelease];
}

- (void) setIMyEduRecord: (MyEduModuleRecord *) iMyEduRecord {
  [iMyEduRecord retain];
  [__iMyEduRecord release];
  __iMyEduRecord = iMyEduRecord;
  __iMyEduRecord_isset = YES;
}

- (BOOL) iMyEduRecordIsSet {
  return __iMyEduRecord_isset;
}

- (void) unsetIMyEduRecord {
  [__iMyEduRecord release];
  __iMyEduRecord = nil;
  __iMyEduRecord_isset = NO;
}

- (int32_t) iStatus {
  return __iStatus;
}

- (void) setIStatus: (int32_t) iStatus {
  __iStatus = iStatus;
  __iStatus_isset = YES;
}

- (BOOL) iStatusIsSet {
  return __iStatus_isset;
}

- (void) unsetIStatus {
  __iStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            MyEduMaterial *_elem17 = [[MyEduMaterial alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release];
          }
          [inProtocol readListEnd];
          [self setIMyEduMaterials: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          MyEduModuleRecord *fieldValue = [[MyEduModuleRecord alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduRecord: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduModuleDetailsReply"];
  if (__iMyEduMaterials_isset) {
    if (__iMyEduMaterials != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduMaterials" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__iMyEduMaterials count]];
        int i19;
        for (i19 = 0; i19 < [__iMyEduMaterials count]; i19++)
        {
          [[__iMyEduMaterials objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__iMyEduRecord_isset) {
    if (__iMyEduRecord != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduRecord" type: TType_STRUCT fieldID: 2];
      [__iMyEduRecord write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"iStatus" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __iStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduModuleDetailsReply("];
  [ms appendString: @"iMyEduMaterials:"];
  [ms appendFormat: @"%@", __iMyEduMaterials];
  [ms appendString: @",iMyEduRecord:"];
  [ms appendFormat: @"%@", __iMyEduRecord];
  [ms appendString: @",iStatus:"];
  [ms appendFormat: @"%i", __iStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduSubmitFeedbackReply

- (id) initWithISuccess: (BOOL) iSuccess iMessage: (NSString *) iMessage iMyEduModuleRecord: (MyEduModuleRecord *) iMyEduModuleRecord
{
  self = [super init];
  __iSuccess = iSuccess;
  __iSuccess_isset = YES;
  __iMessage = [iMessage retain];
  __iMessage_isset = YES;
  __iMyEduModuleRecord = [iMyEduModuleRecord retain];
  __iMyEduModuleRecord_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iSuccess"])
  {
    __iSuccess = [decoder decodeBoolForKey: @"iSuccess"];
    __iSuccess_isset = YES;
  }
  if ([decoder containsValueForKey: @"iMessage"])
  {
    __iMessage = [[decoder decodeObjectForKey: @"iMessage"] retain];
    __iMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"iMyEduModuleRecord"])
  {
    __iMyEduModuleRecord = [[decoder decodeObjectForKey: @"iMyEduModuleRecord"] retain];
    __iMyEduModuleRecord_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iSuccess_isset)
  {
    [encoder encodeBool: __iSuccess forKey: @"iSuccess"];
  }
  if (__iMessage_isset)
  {
    [encoder encodeObject: __iMessage forKey: @"iMessage"];
  }
  if (__iMyEduModuleRecord_isset)
  {
    [encoder encodeObject: __iMyEduModuleRecord forKey: @"iMyEduModuleRecord"];
  }
}

- (void) dealloc
{
  [__iMessage release];
  [__iMyEduModuleRecord release];
  [super dealloc];
}

- (BOOL) iSuccess {
  return __iSuccess;
}

- (void) setISuccess: (BOOL) iSuccess {
  __iSuccess = iSuccess;
  __iSuccess_isset = YES;
}

- (BOOL) iSuccessIsSet {
  return __iSuccess_isset;
}

- (void) unsetISuccess {
  __iSuccess_isset = NO;
}

- (NSString *) iMessage {
  return [[__iMessage retain] autorelease];
}

- (void) setIMessage: (NSString *) iMessage {
  [iMessage retain];
  [__iMessage release];
  __iMessage = iMessage;
  __iMessage_isset = YES;
}

- (BOOL) iMessageIsSet {
  return __iMessage_isset;
}

- (void) unsetIMessage {
  [__iMessage release];
  __iMessage = nil;
  __iMessage_isset = NO;
}

- (MyEduModuleRecord *) iMyEduModuleRecord {
  return [[__iMyEduModuleRecord retain] autorelease];
}

- (void) setIMyEduModuleRecord: (MyEduModuleRecord *) iMyEduModuleRecord {
  [iMyEduModuleRecord retain];
  [__iMyEduModuleRecord release];
  __iMyEduModuleRecord = iMyEduModuleRecord;
  __iMyEduModuleRecord_isset = YES;
}

- (BOOL) iMyEduModuleRecordIsSet {
  return __iMyEduModuleRecord_isset;
}

- (void) unsetIMyEduModuleRecord {
  [__iMyEduModuleRecord release];
  __iMyEduModuleRecord = nil;
  __iMyEduModuleRecord_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setISuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          MyEduModuleRecord *fieldValue = [[MyEduModuleRecord alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduModuleRecord: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduSubmitFeedbackReply"];
  if (__iSuccess_isset) {
    [outProtocol writeFieldBeginWithName: @"iSuccess" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __iSuccess];
    [outProtocol writeFieldEnd];
  }
  if (__iMessage_isset) {
    if (__iMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"iMessage" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iMyEduModuleRecord_isset) {
    if (__iMyEduModuleRecord != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduModuleRecord" type: TType_STRUCT fieldID: 3];
      [__iMyEduModuleRecord write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduSubmitFeedbackReply("];
  [ms appendString: @"iSuccess:"];
  [ms appendFormat: @"%i", __iSuccess];
  [ms appendString: @",iMessage:"];
  [ms appendFormat: @"\"%@\"", __iMessage];
  [ms appendString: @",iMyEduModuleRecord:"];
  [ms appendFormat: @"%@", __iMyEduModuleRecord];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTequilaTokenForMyEdu_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getTequilaTokenForMyEdu_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTequilaTokenForMyEdu_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTequilaTokenForMyEdu_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTequilaTokenForMyEdu_result : NSObject <NSCoding> {
  MyEduTequilaToken * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MyEduTequilaToken * success;
#endif

- (id) initWithSuccess: (MyEduTequilaToken *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduTequilaToken *) success;
- (void) setSuccess: (MyEduTequilaToken *) success;
- (BOOL) successIsSet;

@end

@implementation GetTequilaTokenForMyEdu_result

- (id) initWithSuccess: (MyEduTequilaToken *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MyEduTequilaToken *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MyEduTequilaToken *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MyEduTequilaToken *fieldValue = [[MyEduTequilaToken alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTequilaTokenForMyEdu_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTequilaTokenForMyEdu_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMyEduSession_args : NSObject <NSCoding> {
  MyEduTequilaToken * __iTequilaToken;

  BOOL __iTequilaToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iTequilaToken, setter=setITequilaToken:) MyEduTequilaToken * iTequilaToken;
#endif

- (id) initWithITequilaToken: (MyEduTequilaToken *) iTequilaToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduTequilaToken *) iTequilaToken;
- (void) setITequilaToken: (MyEduTequilaToken *) iTequilaToken;
- (BOOL) iTequilaTokenIsSet;

@end

@implementation getMyEduSession_args

- (id) initWithITequilaToken: (MyEduTequilaToken *) iTequilaToken
{
  self = [super init];
  __iTequilaToken = [iTequilaToken retain];
  __iTequilaToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iTequilaToken"])
  {
    __iTequilaToken = [[decoder decodeObjectForKey: @"iTequilaToken"] retain];
    __iTequilaToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iTequilaToken_isset)
  {
    [encoder encodeObject: __iTequilaToken forKey: @"iTequilaToken"];
  }
}

- (void) dealloc
{
  [__iTequilaToken release];
  [super dealloc];
}

- (MyEduTequilaToken *) iTequilaToken {
  return [[__iTequilaToken retain] autorelease];
}

- (void) setITequilaToken: (MyEduTequilaToken *) iTequilaToken {
  [iTequilaToken retain];
  [__iTequilaToken release];
  __iTequilaToken = iTequilaToken;
  __iTequilaToken_isset = YES;
}

- (BOOL) iTequilaTokenIsSet {
  return __iTequilaToken_isset;
}

- (void) unsetITequilaToken {
  [__iTequilaToken release];
  __iTequilaToken = nil;
  __iTequilaToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduTequilaToken *fieldValue = [[MyEduTequilaToken alloc] init];
          [fieldValue read: inProtocol];
          [self setITequilaToken: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMyEduSession_args"];
  if (__iTequilaToken_isset) {
    if (__iTequilaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"iTequilaToken" type: TType_STRUCT fieldID: 1];
      [__iTequilaToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMyEduSession_args("];
  [ms appendString: @"iTequilaToken:"];
  [ms appendFormat: @"%@", __iTequilaToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMyEduSession_result : NSObject <NSCoding> {
  MyEduSession * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MyEduSession * success;
#endif

- (id) initWithSuccess: (MyEduSession *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduSession *) success;
- (void) setSuccess: (MyEduSession *) success;
- (BOOL) successIsSet;

@end

@implementation GetMyEduSession_result

- (id) initWithSuccess: (MyEduSession *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MyEduSession *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MyEduSession *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MyEduSession *fieldValue = [[MyEduSession alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyEduSession_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMyEduSession_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getSubscribedCoursesList_args : NSObject <NSCoding> {
  MyEduRequest * __iMyEduRequest;

  BOOL __iMyEduRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iMyEduRequest, setter=setIMyEduRequest:) MyEduRequest * iMyEduRequest;
#endif

- (id) initWithIMyEduRequest: (MyEduRequest *) iMyEduRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduRequest *) iMyEduRequest;
- (void) setIMyEduRequest: (MyEduRequest *) iMyEduRequest;
- (BOOL) iMyEduRequestIsSet;

@end

@implementation getSubscribedCoursesList_args

- (id) initWithIMyEduRequest: (MyEduRequest *) iMyEduRequest
{
  self = [super init];
  __iMyEduRequest = [iMyEduRequest retain];
  __iMyEduRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduRequest"])
  {
    __iMyEduRequest = [[decoder decodeObjectForKey: @"iMyEduRequest"] retain];
    __iMyEduRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduRequest_isset)
  {
    [encoder encodeObject: __iMyEduRequest forKey: @"iMyEduRequest"];
  }
}

- (void) dealloc
{
  [__iMyEduRequest release];
  [super dealloc];
}

- (MyEduRequest *) iMyEduRequest {
  return [[__iMyEduRequest retain] autorelease];
}

- (void) setIMyEduRequest: (MyEduRequest *) iMyEduRequest {
  [iMyEduRequest retain];
  [__iMyEduRequest release];
  __iMyEduRequest = iMyEduRequest;
  __iMyEduRequest_isset = YES;
}

- (BOOL) iMyEduRequestIsSet {
  return __iMyEduRequest_isset;
}

- (void) unsetIMyEduRequest {
  [__iMyEduRequest release];
  __iMyEduRequest = nil;
  __iMyEduRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduRequest *fieldValue = [[MyEduRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getSubscribedCoursesList_args"];
  if (__iMyEduRequest_isset) {
    if (__iMyEduRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduRequest" type: TType_STRUCT fieldID: 1];
      [__iMyEduRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getSubscribedCoursesList_args("];
  [ms appendString: @"iMyEduRequest:"];
  [ms appendFormat: @"%@", __iMyEduRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetSubscribedCoursesList_result : NSObject <NSCoding> {
  MyEduSubscribedCoursesListReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MyEduSubscribedCoursesListReply * success;
#endif

- (id) initWithSuccess: (MyEduSubscribedCoursesListReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduSubscribedCoursesListReply *) success;
- (void) setSuccess: (MyEduSubscribedCoursesListReply *) success;
- (BOOL) successIsSet;

@end

@implementation GetSubscribedCoursesList_result

- (id) initWithSuccess: (MyEduSubscribedCoursesListReply *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MyEduSubscribedCoursesListReply *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MyEduSubscribedCoursesListReply *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MyEduSubscribedCoursesListReply *fieldValue = [[MyEduSubscribedCoursesListReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSubscribedCoursesList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSubscribedCoursesList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getCourseDetails_args : NSObject <NSCoding> {
  MyEduCourseDetailsRequest * __iMyEduCourseDetailsRequest;

  BOOL __iMyEduCourseDetailsRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iMyEduCourseDetailsRequest, setter=setIMyEduCourseDetailsRequest:) MyEduCourseDetailsRequest * iMyEduCourseDetailsRequest;
#endif

- (id) initWithIMyEduCourseDetailsRequest: (MyEduCourseDetailsRequest *) iMyEduCourseDetailsRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduCourseDetailsRequest *) iMyEduCourseDetailsRequest;
- (void) setIMyEduCourseDetailsRequest: (MyEduCourseDetailsRequest *) iMyEduCourseDetailsRequest;
- (BOOL) iMyEduCourseDetailsRequestIsSet;

@end

@implementation getCourseDetails_args

- (id) initWithIMyEduCourseDetailsRequest: (MyEduCourseDetailsRequest *) iMyEduCourseDetailsRequest
{
  self = [super init];
  __iMyEduCourseDetailsRequest = [iMyEduCourseDetailsRequest retain];
  __iMyEduCourseDetailsRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduCourseDetailsRequest"])
  {
    __iMyEduCourseDetailsRequest = [[decoder decodeObjectForKey: @"iMyEduCourseDetailsRequest"] retain];
    __iMyEduCourseDetailsRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduCourseDetailsRequest_isset)
  {
    [encoder encodeObject: __iMyEduCourseDetailsRequest forKey: @"iMyEduCourseDetailsRequest"];
  }
}

- (void) dealloc
{
  [__iMyEduCourseDetailsRequest release];
  [super dealloc];
}

- (MyEduCourseDetailsRequest *) iMyEduCourseDetailsRequest {
  return [[__iMyEduCourseDetailsRequest retain] autorelease];
}

- (void) setIMyEduCourseDetailsRequest: (MyEduCourseDetailsRequest *) iMyEduCourseDetailsRequest {
  [iMyEduCourseDetailsRequest retain];
  [__iMyEduCourseDetailsRequest release];
  __iMyEduCourseDetailsRequest = iMyEduCourseDetailsRequest;
  __iMyEduCourseDetailsRequest_isset = YES;
}

- (BOOL) iMyEduCourseDetailsRequestIsSet {
  return __iMyEduCourseDetailsRequest_isset;
}

- (void) unsetIMyEduCourseDetailsRequest {
  [__iMyEduCourseDetailsRequest release];
  __iMyEduCourseDetailsRequest = nil;
  __iMyEduCourseDetailsRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduCourseDetailsRequest *fieldValue = [[MyEduCourseDetailsRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduCourseDetailsRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCourseDetails_args"];
  if (__iMyEduCourseDetailsRequest_isset) {
    if (__iMyEduCourseDetailsRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduCourseDetailsRequest" type: TType_STRUCT fieldID: 1];
      [__iMyEduCourseDetailsRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCourseDetails_args("];
  [ms appendString: @"iMyEduCourseDetailsRequest:"];
  [ms appendFormat: @"%@", __iMyEduCourseDetailsRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCourseDetails_result : NSObject <NSCoding> {
  MyEduCourseDetailsReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MyEduCourseDetailsReply * success;
#endif

- (id) initWithSuccess: (MyEduCourseDetailsReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduCourseDetailsReply *) success;
- (void) setSuccess: (MyEduCourseDetailsReply *) success;
- (BOOL) successIsSet;

@end

@implementation GetCourseDetails_result

- (id) initWithSuccess: (MyEduCourseDetailsReply *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MyEduCourseDetailsReply *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MyEduCourseDetailsReply *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MyEduCourseDetailsReply *fieldValue = [[MyEduCourseDetailsReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCourseDetails_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCourseDetails_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getSectionDetails_args : NSObject <NSCoding> {
  MyEduSectionDetailsRequest * __iMyEduSectionDetailsRequest;

  BOOL __iMyEduSectionDetailsRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iMyEduSectionDetailsRequest, setter=setIMyEduSectionDetailsRequest:) MyEduSectionDetailsRequest * iMyEduSectionDetailsRequest;
#endif

- (id) initWithIMyEduSectionDetailsRequest: (MyEduSectionDetailsRequest *) iMyEduSectionDetailsRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduSectionDetailsRequest *) iMyEduSectionDetailsRequest;
- (void) setIMyEduSectionDetailsRequest: (MyEduSectionDetailsRequest *) iMyEduSectionDetailsRequest;
- (BOOL) iMyEduSectionDetailsRequestIsSet;

@end

@implementation getSectionDetails_args

- (id) initWithIMyEduSectionDetailsRequest: (MyEduSectionDetailsRequest *) iMyEduSectionDetailsRequest
{
  self = [super init];
  __iMyEduSectionDetailsRequest = [iMyEduSectionDetailsRequest retain];
  __iMyEduSectionDetailsRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduSectionDetailsRequest"])
  {
    __iMyEduSectionDetailsRequest = [[decoder decodeObjectForKey: @"iMyEduSectionDetailsRequest"] retain];
    __iMyEduSectionDetailsRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduSectionDetailsRequest_isset)
  {
    [encoder encodeObject: __iMyEduSectionDetailsRequest forKey: @"iMyEduSectionDetailsRequest"];
  }
}

- (void) dealloc
{
  [__iMyEduSectionDetailsRequest release];
  [super dealloc];
}

- (MyEduSectionDetailsRequest *) iMyEduSectionDetailsRequest {
  return [[__iMyEduSectionDetailsRequest retain] autorelease];
}

- (void) setIMyEduSectionDetailsRequest: (MyEduSectionDetailsRequest *) iMyEduSectionDetailsRequest {
  [iMyEduSectionDetailsRequest retain];
  [__iMyEduSectionDetailsRequest release];
  __iMyEduSectionDetailsRequest = iMyEduSectionDetailsRequest;
  __iMyEduSectionDetailsRequest_isset = YES;
}

- (BOOL) iMyEduSectionDetailsRequestIsSet {
  return __iMyEduSectionDetailsRequest_isset;
}

- (void) unsetIMyEduSectionDetailsRequest {
  [__iMyEduSectionDetailsRequest release];
  __iMyEduSectionDetailsRequest = nil;
  __iMyEduSectionDetailsRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduSectionDetailsRequest *fieldValue = [[MyEduSectionDetailsRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduSectionDetailsRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getSectionDetails_args"];
  if (__iMyEduSectionDetailsRequest_isset) {
    if (__iMyEduSectionDetailsRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduSectionDetailsRequest" type: TType_STRUCT fieldID: 1];
      [__iMyEduSectionDetailsRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getSectionDetails_args("];
  [ms appendString: @"iMyEduSectionDetailsRequest:"];
  [ms appendFormat: @"%@", __iMyEduSectionDetailsRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetSectionDetails_result : NSObject <NSCoding> {
  MyEduSectionDetailsReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MyEduSectionDetailsReply * success;
#endif

- (id) initWithSuccess: (MyEduSectionDetailsReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduSectionDetailsReply *) success;
- (void) setSuccess: (MyEduSectionDetailsReply *) success;
- (BOOL) successIsSet;

@end

@implementation GetSectionDetails_result

- (id) initWithSuccess: (MyEduSectionDetailsReply *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MyEduSectionDetailsReply *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MyEduSectionDetailsReply *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MyEduSectionDetailsReply *fieldValue = [[MyEduSectionDetailsReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSectionDetails_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSectionDetails_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getModuleDetails_args : NSObject <NSCoding> {
  MyEduModuleDetailsRequest * __iMyEduModuleDetailsRequest;

  BOOL __iMyEduModuleDetailsRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iMyEduModuleDetailsRequest, setter=setIMyEduModuleDetailsRequest:) MyEduModuleDetailsRequest * iMyEduModuleDetailsRequest;
#endif

- (id) initWithIMyEduModuleDetailsRequest: (MyEduModuleDetailsRequest *) iMyEduModuleDetailsRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduModuleDetailsRequest *) iMyEduModuleDetailsRequest;
- (void) setIMyEduModuleDetailsRequest: (MyEduModuleDetailsRequest *) iMyEduModuleDetailsRequest;
- (BOOL) iMyEduModuleDetailsRequestIsSet;

@end

@implementation getModuleDetails_args

- (id) initWithIMyEduModuleDetailsRequest: (MyEduModuleDetailsRequest *) iMyEduModuleDetailsRequest
{
  self = [super init];
  __iMyEduModuleDetailsRequest = [iMyEduModuleDetailsRequest retain];
  __iMyEduModuleDetailsRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduModuleDetailsRequest"])
  {
    __iMyEduModuleDetailsRequest = [[decoder decodeObjectForKey: @"iMyEduModuleDetailsRequest"] retain];
    __iMyEduModuleDetailsRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduModuleDetailsRequest_isset)
  {
    [encoder encodeObject: __iMyEduModuleDetailsRequest forKey: @"iMyEduModuleDetailsRequest"];
  }
}

- (void) dealloc
{
  [__iMyEduModuleDetailsRequest release];
  [super dealloc];
}

- (MyEduModuleDetailsRequest *) iMyEduModuleDetailsRequest {
  return [[__iMyEduModuleDetailsRequest retain] autorelease];
}

- (void) setIMyEduModuleDetailsRequest: (MyEduModuleDetailsRequest *) iMyEduModuleDetailsRequest {
  [iMyEduModuleDetailsRequest retain];
  [__iMyEduModuleDetailsRequest release];
  __iMyEduModuleDetailsRequest = iMyEduModuleDetailsRequest;
  __iMyEduModuleDetailsRequest_isset = YES;
}

- (BOOL) iMyEduModuleDetailsRequestIsSet {
  return __iMyEduModuleDetailsRequest_isset;
}

- (void) unsetIMyEduModuleDetailsRequest {
  [__iMyEduModuleDetailsRequest release];
  __iMyEduModuleDetailsRequest = nil;
  __iMyEduModuleDetailsRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduModuleDetailsRequest *fieldValue = [[MyEduModuleDetailsRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduModuleDetailsRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getModuleDetails_args"];
  if (__iMyEduModuleDetailsRequest_isset) {
    if (__iMyEduModuleDetailsRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduModuleDetailsRequest" type: TType_STRUCT fieldID: 1];
      [__iMyEduModuleDetailsRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getModuleDetails_args("];
  [ms appendString: @"iMyEduModuleDetailsRequest:"];
  [ms appendFormat: @"%@", __iMyEduModuleDetailsRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetModuleDetails_result : NSObject <NSCoding> {
  MyEduModuleDetailsReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MyEduModuleDetailsReply * success;
#endif

- (id) initWithSuccess: (MyEduModuleDetailsReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduModuleDetailsReply *) success;
- (void) setSuccess: (MyEduModuleDetailsReply *) success;
- (BOOL) successIsSet;

@end

@implementation GetModuleDetails_result

- (id) initWithSuccess: (MyEduModuleDetailsReply *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MyEduModuleDetailsReply *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MyEduModuleDetailsReply *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MyEduModuleDetailsReply *fieldValue = [[MyEduModuleDetailsReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetModuleDetails_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetModuleDetails_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface submitFeedback_args : NSObject <NSCoding> {
  MyEduSubmitFeedbackRequest * __iMyEduSubmitFeedbackRequest;

  BOOL __iMyEduSubmitFeedbackRequest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iMyEduSubmitFeedbackRequest, setter=setIMyEduSubmitFeedbackRequest:) MyEduSubmitFeedbackRequest * iMyEduSubmitFeedbackRequest;
#endif

- (id) initWithIMyEduSubmitFeedbackRequest: (MyEduSubmitFeedbackRequest *) iMyEduSubmitFeedbackRequest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduSubmitFeedbackRequest *) iMyEduSubmitFeedbackRequest;
- (void) setIMyEduSubmitFeedbackRequest: (MyEduSubmitFeedbackRequest *) iMyEduSubmitFeedbackRequest;
- (BOOL) iMyEduSubmitFeedbackRequestIsSet;

@end

@implementation submitFeedback_args

- (id) initWithIMyEduSubmitFeedbackRequest: (MyEduSubmitFeedbackRequest *) iMyEduSubmitFeedbackRequest
{
  self = [super init];
  __iMyEduSubmitFeedbackRequest = [iMyEduSubmitFeedbackRequest retain];
  __iMyEduSubmitFeedbackRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduSubmitFeedbackRequest"])
  {
    __iMyEduSubmitFeedbackRequest = [[decoder decodeObjectForKey: @"iMyEduSubmitFeedbackRequest"] retain];
    __iMyEduSubmitFeedbackRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduSubmitFeedbackRequest_isset)
  {
    [encoder encodeObject: __iMyEduSubmitFeedbackRequest forKey: @"iMyEduSubmitFeedbackRequest"];
  }
}

- (void) dealloc
{
  [__iMyEduSubmitFeedbackRequest release];
  [super dealloc];
}

- (MyEduSubmitFeedbackRequest *) iMyEduSubmitFeedbackRequest {
  return [[__iMyEduSubmitFeedbackRequest retain] autorelease];
}

- (void) setIMyEduSubmitFeedbackRequest: (MyEduSubmitFeedbackRequest *) iMyEduSubmitFeedbackRequest {
  [iMyEduSubmitFeedbackRequest retain];
  [__iMyEduSubmitFeedbackRequest release];
  __iMyEduSubmitFeedbackRequest = iMyEduSubmitFeedbackRequest;
  __iMyEduSubmitFeedbackRequest_isset = YES;
}

- (BOOL) iMyEduSubmitFeedbackRequestIsSet {
  return __iMyEduSubmitFeedbackRequest_isset;
}

- (void) unsetIMyEduSubmitFeedbackRequest {
  [__iMyEduSubmitFeedbackRequest release];
  __iMyEduSubmitFeedbackRequest = nil;
  __iMyEduSubmitFeedbackRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduSubmitFeedbackRequest *fieldValue = [[MyEduSubmitFeedbackRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduSubmitFeedbackRequest: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"submitFeedback_args"];
  if (__iMyEduSubmitFeedbackRequest_isset) {
    if (__iMyEduSubmitFeedbackRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduSubmitFeedbackRequest" type: TType_STRUCT fieldID: 1];
      [__iMyEduSubmitFeedbackRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"submitFeedback_args("];
  [ms appendString: @"iMyEduSubmitFeedbackRequest:"];
  [ms appendFormat: @"%@", __iMyEduSubmitFeedbackRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SubmitFeedback_result : NSObject <NSCoding> {
  MyEduSubmitFeedbackReply * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MyEduSubmitFeedbackReply * success;
#endif

- (id) initWithSuccess: (MyEduSubmitFeedbackReply *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduSubmitFeedbackReply *) success;
- (void) setSuccess: (MyEduSubmitFeedbackReply *) success;
- (BOOL) successIsSet;

@end

@implementation SubmitFeedback_result

- (id) initWithSuccess: (MyEduSubmitFeedbackReply *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MyEduSubmitFeedbackReply *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MyEduSubmitFeedbackReply *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MyEduSubmitFeedbackReply *fieldValue = [[MyEduSubmitFeedbackReply alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SubmitFeedback_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SubmitFeedback_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getTequilaTokenForMyEdu
{
  [outProtocol writeMessageBeginWithName: @"getTequilaTokenForMyEdu" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTequilaTokenForMyEdu_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MyEduTequilaToken *) recv_getTequilaTokenForMyEdu
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTequilaTokenForMyEdu_result * result = [[[GetTequilaTokenForMyEdu_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTequilaTokenForMyEdu failed: unknown result"];
}

- (MyEduTequilaToken *) getTequilaTokenForMyEdu
{
  [self send_getTequilaTokenForMyEdu];
  return [self recv_getTequilaTokenForMyEdu];
}

- (void) send_getMyEduSession: (MyEduTequilaToken *) iTequilaToken
{
  [outProtocol writeMessageBeginWithName: @"getMyEduSession" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMyEduSession_args"];
  if (iTequilaToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"iTequilaToken" type: TType_STRUCT fieldID: 1];
    [iTequilaToken write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MyEduSession *) recv_getMyEduSession
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMyEduSession_result * result = [[[GetMyEduSession_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMyEduSession failed: unknown result"];
}

- (MyEduSession *) getMyEduSession: (MyEduTequilaToken *) iTequilaToken
{
  [self send_getMyEduSession: iTequilaToken];
  return [self recv_getMyEduSession];
}

- (void) send_getSubscribedCoursesList: (MyEduRequest *) iMyEduRequest
{
  [outProtocol writeMessageBeginWithName: @"getSubscribedCoursesList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getSubscribedCoursesList_args"];
  if (iMyEduRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iMyEduRequest" type: TType_STRUCT fieldID: 1];
    [iMyEduRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MyEduSubscribedCoursesListReply *) recv_getSubscribedCoursesList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetSubscribedCoursesList_result * result = [[[GetSubscribedCoursesList_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getSubscribedCoursesList failed: unknown result"];
}

- (MyEduSubscribedCoursesListReply *) getSubscribedCoursesList: (MyEduRequest *) iMyEduRequest
{
  [self send_getSubscribedCoursesList: iMyEduRequest];
  return [self recv_getSubscribedCoursesList];
}

- (void) send_getCourseDetails: (MyEduCourseDetailsRequest *) iMyEduCourseDetailsRequest
{
  [outProtocol writeMessageBeginWithName: @"getCourseDetails" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCourseDetails_args"];
  if (iMyEduCourseDetailsRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iMyEduCourseDetailsRequest" type: TType_STRUCT fieldID: 1];
    [iMyEduCourseDetailsRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MyEduCourseDetailsReply *) recv_getCourseDetails
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetCourseDetails_result * result = [[[GetCourseDetails_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCourseDetails failed: unknown result"];
}

- (MyEduCourseDetailsReply *) getCourseDetails: (MyEduCourseDetailsRequest *) iMyEduCourseDetailsRequest
{
  [self send_getCourseDetails: iMyEduCourseDetailsRequest];
  return [self recv_getCourseDetails];
}

- (void) send_getSectionDetails: (MyEduSectionDetailsRequest *) iMyEduSectionDetailsRequest
{
  [outProtocol writeMessageBeginWithName: @"getSectionDetails" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getSectionDetails_args"];
  if (iMyEduSectionDetailsRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iMyEduSectionDetailsRequest" type: TType_STRUCT fieldID: 1];
    [iMyEduSectionDetailsRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MyEduSectionDetailsReply *) recv_getSectionDetails
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetSectionDetails_result * result = [[[GetSectionDetails_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getSectionDetails failed: unknown result"];
}

- (MyEduSectionDetailsReply *) getSectionDetails: (MyEduSectionDetailsRequest *) iMyEduSectionDetailsRequest
{
  [self send_getSectionDetails: iMyEduSectionDetailsRequest];
  return [self recv_getSectionDetails];
}

- (void) send_getModuleDetails: (MyEduModuleDetailsRequest *) iMyEduModuleDetailsRequest
{
  [outProtocol writeMessageBeginWithName: @"getModuleDetails" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getModuleDetails_args"];
  if (iMyEduModuleDetailsRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iMyEduModuleDetailsRequest" type: TType_STRUCT fieldID: 1];
    [iMyEduModuleDetailsRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MyEduModuleDetailsReply *) recv_getModuleDetails
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetModuleDetails_result * result = [[[GetModuleDetails_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getModuleDetails failed: unknown result"];
}

- (MyEduModuleDetailsReply *) getModuleDetails: (MyEduModuleDetailsRequest *) iMyEduModuleDetailsRequest
{
  [self send_getModuleDetails: iMyEduModuleDetailsRequest];
  return [self recv_getModuleDetails];
}

- (void) send_submitFeedback: (MyEduSubmitFeedbackRequest *) iMyEduSubmitFeedbackRequest
{
  [outProtocol writeMessageBeginWithName: @"submitFeedback" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"submitFeedback_args"];
  if (iMyEduSubmitFeedbackRequest != nil)  {
    [outProtocol writeFieldBeginWithName: @"iMyEduSubmitFeedbackRequest" type: TType_STRUCT fieldID: 1];
    [iMyEduSubmitFeedbackRequest write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MyEduSubmitFeedbackReply *) recv_submitFeedback
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SubmitFeedback_result * result = [[[SubmitFeedback_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"submitFeedback failed: unknown result"];
}

- (MyEduSubmitFeedbackReply *) submitFeedback: (MyEduSubmitFeedbackRequest *) iMyEduSubmitFeedbackRequest
{
  [self send_submitFeedback: iMyEduSubmitFeedbackRequest];
  return [self recv_submitFeedback];
}

@end

@implementation MyEduServiceProcessor

- (id) initWithMyEduService: (id <MyEduService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_getTequilaTokenForMyEdu_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTequilaTokenForMyEdu"];
  }
  {
    SEL s = @selector(process_getMyEduSession_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMyEduSession"];
  }
  {
    SEL s = @selector(process_getSubscribedCoursesList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getSubscribedCoursesList"];
  }
  {
    SEL s = @selector(process_getCourseDetails_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getCourseDetails"];
  }
  {
    SEL s = @selector(process_getSectionDetails_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getSectionDetails"];
  }
  {
    SEL s = @selector(process_getModuleDetails_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getModuleDetails"];
  }
  {
    SEL s = @selector(process_submitFeedback_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"submitFeedback"];
  }
  return self;
}

- (id<MyEduService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getTequilaTokenForMyEdu_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTequilaTokenForMyEdu_args * args = [[getTequilaTokenForMyEdu_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTequilaTokenForMyEdu_result * result = [[GetTequilaTokenForMyEdu_result alloc] init];
  [result setSuccess: [mService getTequilaTokenForMyEdu]];
  [outProtocol writeMessageBeginWithName: @"getTequilaTokenForMyEdu"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getMyEduSession_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMyEduSession_args * args = [[getMyEduSession_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMyEduSession_result * result = [[GetMyEduSession_result alloc] init];
  [result setSuccess: [mService getMyEduSession: [args iTequilaToken]]];
  [outProtocol writeMessageBeginWithName: @"getMyEduSession"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getSubscribedCoursesList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getSubscribedCoursesList_args * args = [[getSubscribedCoursesList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetSubscribedCoursesList_result * result = [[GetSubscribedCoursesList_result alloc] init];
  [result setSuccess: [mService getSubscribedCoursesList: [args iMyEduRequest]]];
  [outProtocol writeMessageBeginWithName: @"getSubscribedCoursesList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getCourseDetails_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getCourseDetails_args * args = [[getCourseDetails_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetCourseDetails_result * result = [[GetCourseDetails_result alloc] init];
  [result setSuccess: [mService getCourseDetails: [args iMyEduCourseDetailsRequest]]];
  [outProtocol writeMessageBeginWithName: @"getCourseDetails"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getSectionDetails_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getSectionDetails_args * args = [[getSectionDetails_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetSectionDetails_result * result = [[GetSectionDetails_result alloc] init];
  [result setSuccess: [mService getSectionDetails: [args iMyEduSectionDetailsRequest]]];
  [outProtocol writeMessageBeginWithName: @"getSectionDetails"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getModuleDetails_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getModuleDetails_args * args = [[getModuleDetails_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetModuleDetails_result * result = [[GetModuleDetails_result alloc] init];
  [result setSuccess: [mService getModuleDetails: [args iMyEduModuleDetailsRequest]]];
  [outProtocol writeMessageBeginWithName: @"getModuleDetails"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_submitFeedback_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  submitFeedback_args * args = [[submitFeedback_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SubmitFeedback_result * result = [[SubmitFeedback_result alloc] init];
  [result setSuccess: [mService submitFeedback: [args iMyEduSubmitFeedbackRequest]]];
  [outProtocol writeMessageBeginWithName: @"submitFeedback"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

