/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "myedu.h"


@implementation myeduConstants
+ (void) initialize {
}
@end

@implementation MyEduTequilaToken

- (id) initWithITequilaKey: (NSString *) iTequilaKey iLoginCookie: (NSString *) iLoginCookie
{
  self = [super init];
  __iTequilaKey = [iTequilaKey retain];
  __iTequilaKey_isset = YES;
  __iLoginCookie = [iLoginCookie retain];
  __iLoginCookie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iTequilaKey"])
  {
    __iTequilaKey = [[decoder decodeObjectForKey: @"iTequilaKey"] retain];
    __iTequilaKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLoginCookie"])
  {
    __iLoginCookie = [[decoder decodeObjectForKey: @"iLoginCookie"] retain];
    __iLoginCookie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iTequilaKey_isset)
  {
    [encoder encodeObject: __iTequilaKey forKey: @"iTequilaKey"];
  }
  if (__iLoginCookie_isset)
  {
    [encoder encodeObject: __iLoginCookie forKey: @"iLoginCookie"];
  }
}

- (void) dealloc
{
  [__iTequilaKey release];
  [__iLoginCookie release];
  [super dealloc];
}

- (NSString *) iTequilaKey {
  return [[__iTequilaKey retain] autorelease];
}

- (void) setITequilaKey: (NSString *) iTequilaKey {
  [iTequilaKey retain];
  [__iTequilaKey release];
  __iTequilaKey = iTequilaKey;
  __iTequilaKey_isset = YES;
}

- (BOOL) iTequilaKeyIsSet {
  return __iTequilaKey_isset;
}

- (void) unsetITequilaKey {
  [__iTequilaKey release];
  __iTequilaKey = nil;
  __iTequilaKey_isset = NO;
}

- (NSString *) iLoginCookie {
  return [[__iLoginCookie retain] autorelease];
}

- (void) setILoginCookie: (NSString *) iLoginCookie {
  [iLoginCookie retain];
  [__iLoginCookie release];
  __iLoginCookie = iLoginCookie;
  __iLoginCookie_isset = YES;
}

- (BOOL) iLoginCookieIsSet {
  return __iLoginCookie_isset;
}

- (void) unsetILoginCookie {
  [__iLoginCookie release];
  __iLoginCookie = nil;
  __iLoginCookie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setITequilaKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setILoginCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduTequilaToken"];
  if (__iTequilaKey_isset) {
    if (__iTequilaKey != nil) {
      [outProtocol writeFieldBeginWithName: @"iTequilaKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __iTequilaKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iLoginCookie_isset) {
    if (__iLoginCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"iLoginCookie" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iLoginCookie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduTequilaToken("];
  [ms appendString: @"iTequilaKey:"];
  [ms appendFormat: @"\"%@\"", __iTequilaKey];
  [ms appendString: @",iLoginCookie:"];
  [ms appendFormat: @"\"%@\"", __iLoginCookie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduSession

- (id) initWithIMyEduCookie: (NSString *) iMyEduCookie
{
  self = [super init];
  __iMyEduCookie = [iMyEduCookie retain];
  __iMyEduCookie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduCookie"])
  {
    __iMyEduCookie = [[decoder decodeObjectForKey: @"iMyEduCookie"] retain];
    __iMyEduCookie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduCookie_isset)
  {
    [encoder encodeObject: __iMyEduCookie forKey: @"iMyEduCookie"];
  }
}

- (void) dealloc
{
  [__iMyEduCookie release];
  [super dealloc];
}

- (NSString *) iMyEduCookie {
  return [[__iMyEduCookie retain] autorelease];
}

- (void) setIMyEduCookie: (NSString *) iMyEduCookie {
  [iMyEduCookie retain];
  [__iMyEduCookie release];
  __iMyEduCookie = iMyEduCookie;
  __iMyEduCookie_isset = YES;
}

- (BOOL) iMyEduCookieIsSet {
  return __iMyEduCookie_isset;
}

- (void) unsetIMyEduCookie {
  [__iMyEduCookie release];
  __iMyEduCookie = nil;
  __iMyEduCookie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIMyEduCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduSession"];
  if (__iMyEduCookie_isset) {
    if (__iMyEduCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduCookie" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __iMyEduCookie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduSession("];
  [ms appendString: @"iMyEduCookie:"];
  [ms appendFormat: @"\"%@\"", __iMyEduCookie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduRequest

- (id) initWithIMyEduSession: (MyEduSession *) iMyEduSession iLanguage: (NSString *) iLanguage
{
  self = [super init];
  __iMyEduSession = [iMyEduSession retain];
  __iMyEduSession_isset = YES;
  __iLanguage = [iLanguage retain];
  __iLanguage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iMyEduSession"])
  {
    __iMyEduSession = [[decoder decodeObjectForKey: @"iMyEduSession"] retain];
    __iMyEduSession_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLanguage"])
  {
    __iLanguage = [[decoder decodeObjectForKey: @"iLanguage"] retain];
    __iLanguage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iMyEduSession_isset)
  {
    [encoder encodeObject: __iMyEduSession forKey: @"iMyEduSession"];
  }
  if (__iLanguage_isset)
  {
    [encoder encodeObject: __iLanguage forKey: @"iLanguage"];
  }
}

- (void) dealloc
{
  [__iMyEduSession release];
  [__iLanguage release];
  [super dealloc];
}

- (MyEduSession *) iMyEduSession {
  return [[__iMyEduSession retain] autorelease];
}

- (void) setIMyEduSession: (MyEduSession *) iMyEduSession {
  [iMyEduSession retain];
  [__iMyEduSession release];
  __iMyEduSession = iMyEduSession;
  __iMyEduSession_isset = YES;
}

- (BOOL) iMyEduSessionIsSet {
  return __iMyEduSession_isset;
}

- (void) unsetIMyEduSession {
  [__iMyEduSession release];
  __iMyEduSession = nil;
  __iMyEduSession_isset = NO;
}

- (NSString *) iLanguage {
  return [[__iLanguage retain] autorelease];
}

- (void) setILanguage: (NSString *) iLanguage {
  [iLanguage retain];
  [__iLanguage release];
  __iLanguage = iLanguage;
  __iLanguage_isset = YES;
}

- (BOOL) iLanguageIsSet {
  return __iLanguage_isset;
}

- (void) unsetILanguage {
  [__iLanguage release];
  __iLanguage = nil;
  __iLanguage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduSession *fieldValue = [[MyEduSession alloc] init];
          [fieldValue read: inProtocol];
          [self setIMyEduSession: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setILanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyEduRequest"];
  if (__iMyEduSession_isset) {
    if (__iMyEduSession != nil) {
      [outProtocol writeFieldBeginWithName: @"iMyEduSession" type: TType_STRUCT fieldID: 1];
      [__iMyEduSession write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iLanguage_isset) {
    if (__iLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"iLanguage" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MyEduRequest("];
  [ms appendString: @"iMyEduSession:"];
  [ms appendFormat: @"%@", __iMyEduSession];
  [ms appendString: @",iLanguage:"];
  [ms appendFormat: @"\"%@\"", __iLanguage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTequilaTokenForMyEdu_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getTequilaTokenForMyEdu_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTequilaTokenForMyEdu_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTequilaTokenForMyEdu_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTequilaTokenForMyEdu_result : NSObject <NSCoding> {
  MyEduTequilaToken * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MyEduTequilaToken * success;
#endif

- (id) initWithSuccess: (MyEduTequilaToken *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduTequilaToken *) success;
- (void) setSuccess: (MyEduTequilaToken *) success;
- (BOOL) successIsSet;

@end

@implementation GetTequilaTokenForMyEdu_result

- (id) initWithSuccess: (MyEduTequilaToken *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MyEduTequilaToken *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MyEduTequilaToken *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MyEduTequilaToken *fieldValue = [[MyEduTequilaToken alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTequilaTokenForMyEdu_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTequilaTokenForMyEdu_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMyEduSession_args : NSObject <NSCoding> {
  MyEduTequilaToken * __iTequilaToken;

  BOOL __iTequilaToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=iTequilaToken, setter=setITequilaToken:) MyEduTequilaToken * iTequilaToken;
#endif

- (id) initWithITequilaToken: (MyEduTequilaToken *) iTequilaToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduTequilaToken *) iTequilaToken;
- (void) setITequilaToken: (MyEduTequilaToken *) iTequilaToken;
- (BOOL) iTequilaTokenIsSet;

@end

@implementation getMyEduSession_args

- (id) initWithITequilaToken: (MyEduTequilaToken *) iTequilaToken
{
  self = [super init];
  __iTequilaToken = [iTequilaToken retain];
  __iTequilaToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"iTequilaToken"])
  {
    __iTequilaToken = [[decoder decodeObjectForKey: @"iTequilaToken"] retain];
    __iTequilaToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__iTequilaToken_isset)
  {
    [encoder encodeObject: __iTequilaToken forKey: @"iTequilaToken"];
  }
}

- (void) dealloc
{
  [__iTequilaToken release];
  [super dealloc];
}

- (MyEduTequilaToken *) iTequilaToken {
  return [[__iTequilaToken retain] autorelease];
}

- (void) setITequilaToken: (MyEduTequilaToken *) iTequilaToken {
  [iTequilaToken retain];
  [__iTequilaToken release];
  __iTequilaToken = iTequilaToken;
  __iTequilaToken_isset = YES;
}

- (BOOL) iTequilaTokenIsSet {
  return __iTequilaToken_isset;
}

- (void) unsetITequilaToken {
  [__iTequilaToken release];
  __iTequilaToken = nil;
  __iTequilaToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MyEduTequilaToken *fieldValue = [[MyEduTequilaToken alloc] init];
          [fieldValue read: inProtocol];
          [self setITequilaToken: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMyEduSession_args"];
  if (__iTequilaToken_isset) {
    if (__iTequilaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"iTequilaToken" type: TType_STRUCT fieldID: 1];
      [__iTequilaToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMyEduSession_args("];
  [ms appendString: @"iTequilaToken:"];
  [ms appendFormat: @"%@", __iTequilaToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMyEduSession_result : NSObject <NSCoding> {
  MyEduSession * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MyEduSession * success;
#endif

- (id) initWithSuccess: (MyEduSession *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (MyEduSession *) success;
- (void) setSuccess: (MyEduSession *) success;
- (BOOL) successIsSet;

@end

@implementation GetMyEduSession_result

- (id) initWithSuccess: (MyEduSession *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (MyEduSession *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (MyEduSession *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MyEduSession *fieldValue = [[MyEduSession alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyEduSession_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMyEduSession_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MyEduServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getTequilaTokenForMyEdu
{
  [outProtocol writeMessageBeginWithName: @"getTequilaTokenForMyEdu" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTequilaTokenForMyEdu_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MyEduTequilaToken *) recv_getTequilaTokenForMyEdu
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetTequilaTokenForMyEdu_result * result = [[[GetTequilaTokenForMyEdu_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTequilaTokenForMyEdu failed: unknown result"];
}

- (MyEduTequilaToken *) getTequilaTokenForMyEdu
{
  [self send_getTequilaTokenForMyEdu];
  return [self recv_getTequilaTokenForMyEdu];
}

- (void) send_getMyEduSession: (MyEduTequilaToken *) iTequilaToken
{
  [outProtocol writeMessageBeginWithName: @"getMyEduSession" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMyEduSession_args"];
  if (iTequilaToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"iTequilaToken" type: TType_STRUCT fieldID: 1];
    [iTequilaToken write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MyEduSession *) recv_getMyEduSession
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMyEduSession_result * result = [[[GetMyEduSession_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMyEduSession failed: unknown result"];
}

- (MyEduSession *) getMyEduSession: (MyEduTequilaToken *) iTequilaToken
{
  [self send_getMyEduSession: iTequilaToken];
  return [self recv_getMyEduSession];
}

@end

@implementation MyEduServiceProcessor

- (id) initWithMyEduService: (id <MyEduService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_getTequilaTokenForMyEdu_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getTequilaTokenForMyEdu"];
  }
  {
    SEL s = @selector(process_getMyEduSession_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMyEduSession"];
  }
  return self;
}

- (id<MyEduService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getTequilaTokenForMyEdu_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getTequilaTokenForMyEdu_args * args = [[getTequilaTokenForMyEdu_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetTequilaTokenForMyEdu_result * result = [[GetTequilaTokenForMyEdu_result alloc] init];
  [result setSuccess: [mService getTequilaTokenForMyEdu]];
  [outProtocol writeMessageBeginWithName: @"getTequilaTokenForMyEdu"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getMyEduSession_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMyEduSession_args * args = [[getMyEduSession_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMyEduSession_result * result = [[GetMyEduSession_result alloc] init];
  [result setSuccess: [mService getMyEduSession: [args iTequilaToken]]];
  [outProtocol writeMessageBeginWithName: @"getMyEduSession"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

