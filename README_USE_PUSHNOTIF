 ********************** USING THE PUSHNOTIF PLUGIN **********************
           @Author:    Amer C (amer.chamseddine@epfl.ch)
 ========================================================================


 =============================== ANDROID ================================

To use the pushnotif plugin:

You should handle 2 extra actions in your controller; you do so by adding them to the intent-filter in the service tag

	<intent-filter>
		<action android:name="org.pocketcampus.plugin.pushnotif.REGISTRATION_FINISHED" />
		<action android:name="org.pocketcampus.plugin.pushnotif.PUSHNOTIF_MESSAGE" />
		<category android:name="org.pocketcampus" />
		<data  android:scheme="pocketcampus" android:host="<your_plugin_name>.plugin.pocketcampus.org" />
	</intent-filter>


Then you should add the following permission in the manifest tag

	<uses-permission android:name="org.pocketcampus.permissions.USE_PC_PUSHNOTIF" />


Then in your onStartCommand function you should handle

	if("org.pocketcampus.plugin.pushnotif.REGISTRATION_FINISHED".equals(aIntent.getAction())) {
		Bundle extras = aIntent.getExtras();
		if(extras != null && extras.getInt("succeeded") != 0) {
		} else if(extras != null && extras.getInt("failed") != 0) {
		} else if(extras != null && extras.getInt("networkerror") != 0) {
		} else {
		}
	}
	if("org.pocketcampus.plugin.pushnotif.PUSHNOTIF_MESSAGE".equals(aIntent.getAction())) {
		Bundle extras = aIntent.getExtras(); // this will be the dict that was sent by the server
	}


Then to make sure the phone is registered, use

	Intent authIntent = new Intent("org.pocketcampus.plugin.pushnotif.REGISTER_FOR_PUSH",
			Uri.parse("pocketcampus://pushnotif.plugin.pocketcampus.org/reg_for_push"));
	authIntent.putExtra("callbackurl", "pocketcampus://<your_plugin_name>.plugin.pocketcampus.org/reg_finished");
	startService(authIntent);


 =============================== SERVER ================================

On the server, after successful login, call

	PocketCampusServer.pushNotifMap(firstArg, pluginName, userId);

	where firstArg is the first argument in the thrift request, pluginName is the name of the plugin, and userId is the ID of the user who has just logged in


On the server, when you want to send a message, use

	PocketCampusServer.pushNotifSend(pluginName, userIdList, msgMap);

	where pluginName is the name of the plugin, userIdList is the list od IDs of users to send the msg to, and msgMap is the dict to be pushed (cannot contain key pluginName)

And finally on the server implement the following function if you want to know which devices failed

	public void appendToFailedDevicesList(List<String> failed) {
	}





 ========================== IOS =======================
 
The first time you start your plugin, you need to make sure the device has been registered on the server. Theoretically it is required once only during the lifetime of the device. But this should be done periodically if the server loses the registration after a problem for example.

To do so, use the PushNotifController:

[self.pushNotifController addAuthentifiedUserDeviceRegistrationObserver:self presentationViewControllerForAutentication:anyCurrentlyVisibleViewController successBlock:^{
	NSLog(@"Registration suceeded");
} failureBlock:^(PushNotifDeviceRegistrationError error) {
	NSLog(@"Registration failed with error : %d", error);
}];

Then, when pushMessage is called server side on the PushNotif plugin, it will send a push notification to the newly registered device.

To handle a notification within the app:

[[PushNotifController sharedInstance] addNotificationObserverWithPluginLowerIdentifier:@"pluginNameInLowerCase" newNotificationBlock:^(NSString* notifMessage, NSDictionary* notifFullDictionary) {
	//do wathever you want
	//for example, request that your plugin goes foreground:
	//[[MainController publicController] requestPluginToForeground:@"pluginNameInLowerCase"];
	//refresh your data
}];

Finally, you need to copy the file etc/pocketcampus-pushnotif-dev.p12 in /etc on your server


