//
// Autogenerated by Thrift Compiler (0.8.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MoodleService_getTequilaTokenForMoodle_args = function(args) {
};
MoodleService_getTequilaTokenForMoodle_args.prototype = {};
MoodleService_getTequilaTokenForMoodle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getTequilaTokenForMoodle_args.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getTequilaTokenForMoodle_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleService_getTequilaTokenForMoodle_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MoodleService_getTequilaTokenForMoodle_result.prototype = {};
MoodleService_getTequilaTokenForMoodle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TequilaToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getTequilaTokenForMoodle_result.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getTequilaTokenForMoodle_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleService_getMoodleSession_args = function(args) {
  this.iTequilaToken = null;
  if (args) {
    if (args.iTequilaToken !== undefined) {
      this.iTequilaToken = args.iTequilaToken;
    }
  }
};
MoodleService_getMoodleSession_args.prototype = {};
MoodleService_getMoodleSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iTequilaToken = new TequilaToken();
        this.iTequilaToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getMoodleSession_args.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getMoodleSession_args');
  if (this.iTequilaToken) {
    output.writeFieldBegin('iTequilaToken', Thrift.Type.STRUCT, 1);
    this.iTequilaToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleService_getMoodleSession_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MoodleService_getMoodleSession_result.prototype = {};
MoodleService_getMoodleSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MoodleSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getMoodleSession_result.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getMoodleSession_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleService_getCoursesList_args = function(args) {
  this.iRequest = null;
  if (args) {
    if (args.iRequest !== undefined) {
      this.iRequest = args.iRequest;
    }
  }
};
MoodleService_getCoursesList_args.prototype = {};
MoodleService_getCoursesList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iRequest = new MoodleRequest();
        this.iRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getCoursesList_args.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getCoursesList_args');
  if (this.iRequest) {
    output.writeFieldBegin('iRequest', Thrift.Type.STRUCT, 1);
    this.iRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleService_getCoursesList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MoodleService_getCoursesList_result.prototype = {};
MoodleService_getCoursesList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CoursesListReply();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getCoursesList_result.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getCoursesList_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleService_getEventsList_args = function(args) {
  this.iRequest = null;
  if (args) {
    if (args.iRequest !== undefined) {
      this.iRequest = args.iRequest;
    }
  }
};
MoodleService_getEventsList_args.prototype = {};
MoodleService_getEventsList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iRequest = new MoodleRequest();
        this.iRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getEventsList_args.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getEventsList_args');
  if (this.iRequest) {
    output.writeFieldBegin('iRequest', Thrift.Type.STRUCT, 1);
    this.iRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleService_getEventsList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MoodleService_getEventsList_result.prototype = {};
MoodleService_getEventsList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new EventsListReply();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getEventsList_result.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getEventsList_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleService_getCourseSections_args = function(args) {
  this.iRequest = null;
  if (args) {
    if (args.iRequest !== undefined) {
      this.iRequest = args.iRequest;
    }
  }
};
MoodleService_getCourseSections_args.prototype = {};
MoodleService_getCourseSections_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iRequest = new MoodleRequest();
        this.iRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getCourseSections_args.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getCourseSections_args');
  if (this.iRequest) {
    output.writeFieldBegin('iRequest', Thrift.Type.STRUCT, 1);
    this.iRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleService_getCourseSections_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MoodleService_getCourseSections_result.prototype = {};
MoodleService_getCourseSections_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SectionsListReply();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoodleService_getCourseSections_result.prototype.write = function(output) {
  output.writeStructBegin('MoodleService_getCourseSections_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MoodleServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MoodleServiceClient.prototype = {};
MoodleServiceClient.prototype.getTequilaTokenForMoodle = function(callback) {
  if (callback === undefined) {
    this.send_getTequilaTokenForMoodle();
    return this.recv_getTequilaTokenForMoodle();
  } else {
    var postData = this.send_getTequilaTokenForMoodle(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTequilaTokenForMoodle);
  }
};

MoodleServiceClient.prototype.send_getTequilaTokenForMoodle = function(callback) {
  this.output.writeMessageBegin('getTequilaTokenForMoodle', Thrift.MessageType.CALL, this.seqid);
  var args = new MoodleService_getTequilaTokenForMoodle_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MoodleServiceClient.prototype.recv_getTequilaTokenForMoodle = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MoodleService_getTequilaTokenForMoodle_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTequilaTokenForMoodle failed: unknown result';
};
MoodleServiceClient.prototype.getMoodleSession = function(iTequilaToken, callback) {
  if (callback === undefined) {
    this.send_getMoodleSession(iTequilaToken);
    return this.recv_getMoodleSession();
  } else {
    var postData = this.send_getMoodleSession(iTequilaToken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMoodleSession);
  }
};

MoodleServiceClient.prototype.send_getMoodleSession = function(iTequilaToken, callback) {
  this.output.writeMessageBegin('getMoodleSession', Thrift.MessageType.CALL, this.seqid);
  var args = new MoodleService_getMoodleSession_args();
  args.iTequilaToken = iTequilaToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MoodleServiceClient.prototype.recv_getMoodleSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MoodleService_getMoodleSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMoodleSession failed: unknown result';
};
MoodleServiceClient.prototype.getCoursesList = function(iRequest, callback) {
  if (callback === undefined) {
    this.send_getCoursesList(iRequest);
    return this.recv_getCoursesList();
  } else {
    var postData = this.send_getCoursesList(iRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCoursesList);
  }
};

MoodleServiceClient.prototype.send_getCoursesList = function(iRequest, callback) {
  this.output.writeMessageBegin('getCoursesList', Thrift.MessageType.CALL, this.seqid);
  var args = new MoodleService_getCoursesList_args();
  args.iRequest = iRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MoodleServiceClient.prototype.recv_getCoursesList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MoodleService_getCoursesList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getCoursesList failed: unknown result';
};
MoodleServiceClient.prototype.getEventsList = function(iRequest, callback) {
  if (callback === undefined) {
    this.send_getEventsList(iRequest);
    return this.recv_getEventsList();
  } else {
    var postData = this.send_getEventsList(iRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getEventsList);
  }
};

MoodleServiceClient.prototype.send_getEventsList = function(iRequest, callback) {
  this.output.writeMessageBegin('getEventsList', Thrift.MessageType.CALL, this.seqid);
  var args = new MoodleService_getEventsList_args();
  args.iRequest = iRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MoodleServiceClient.prototype.recv_getEventsList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MoodleService_getEventsList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getEventsList failed: unknown result';
};
MoodleServiceClient.prototype.getCourseSections = function(iRequest, callback) {
  if (callback === undefined) {
    this.send_getCourseSections(iRequest);
    return this.recv_getCourseSections();
  } else {
    var postData = this.send_getCourseSections(iRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCourseSections);
  }
};

MoodleServiceClient.prototype.send_getCourseSections = function(iRequest, callback) {
  this.output.writeMessageBegin('getCourseSections', Thrift.MessageType.CALL, this.seqid);
  var args = new MoodleService_getCourseSections_args();
  args.iRequest = iRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MoodleServiceClient.prototype.recv_getCourseSections = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MoodleService_getCourseSections_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getCourseSections failed: unknown result';
};
