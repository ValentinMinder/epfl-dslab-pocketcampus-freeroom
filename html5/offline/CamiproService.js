//
// Autogenerated by Thrift Compiler (0.8.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

CamiproService_getTequilaTokenForCamipro_args = function(args) {
};
CamiproService_getTequilaTokenForCamipro_args.prototype = {};
CamiproService_getTequilaTokenForCamipro_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_getTequilaTokenForCamipro_args.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_getTequilaTokenForCamipro_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproService_getTequilaTokenForCamipro_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CamiproService_getTequilaTokenForCamipro_result.prototype = {};
CamiproService_getTequilaTokenForCamipro_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TequilaToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_getTequilaTokenForCamipro_result.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_getTequilaTokenForCamipro_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproService_getCamiproSession_args = function(args) {
  this.iTequilaToken = null;
  if (args) {
    if (args.iTequilaToken !== undefined) {
      this.iTequilaToken = args.iTequilaToken;
    }
  }
};
CamiproService_getCamiproSession_args.prototype = {};
CamiproService_getCamiproSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iTequilaToken = new TequilaToken();
        this.iTequilaToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_getCamiproSession_args.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_getCamiproSession_args');
  if (this.iTequilaToken) {
    output.writeFieldBegin('iTequilaToken', Thrift.Type.STRUCT, 1);
    this.iTequilaToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproService_getCamiproSession_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CamiproService_getCamiproSession_result.prototype = {};
CamiproService_getCamiproSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CamiproSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_getCamiproSession_result.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_getCamiproSession_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproService_getBalanceAndTransactions_args = function(args) {
  this.iRequest = null;
  if (args) {
    if (args.iRequest !== undefined) {
      this.iRequest = args.iRequest;
    }
  }
};
CamiproService_getBalanceAndTransactions_args.prototype = {};
CamiproService_getBalanceAndTransactions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iRequest = new CamiproRequest();
        this.iRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_getBalanceAndTransactions_args.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_getBalanceAndTransactions_args');
  if (this.iRequest) {
    output.writeFieldBegin('iRequest', Thrift.Type.STRUCT, 1);
    this.iRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproService_getBalanceAndTransactions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CamiproService_getBalanceAndTransactions_result.prototype = {};
CamiproService_getBalanceAndTransactions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BalanceAndTransactions();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_getBalanceAndTransactions_result.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_getBalanceAndTransactions_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproService_getStatsAndLoadingInfo_args = function(args) {
  this.iRequest = null;
  if (args) {
    if (args.iRequest !== undefined) {
      this.iRequest = args.iRequest;
    }
  }
};
CamiproService_getStatsAndLoadingInfo_args.prototype = {};
CamiproService_getStatsAndLoadingInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iRequest = new CamiproRequest();
        this.iRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_getStatsAndLoadingInfo_args.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_getStatsAndLoadingInfo_args');
  if (this.iRequest) {
    output.writeFieldBegin('iRequest', Thrift.Type.STRUCT, 1);
    this.iRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproService_getStatsAndLoadingInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CamiproService_getStatsAndLoadingInfo_result.prototype = {};
CamiproService_getStatsAndLoadingInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StatsAndLoadingInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_getStatsAndLoadingInfo_result.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_getStatsAndLoadingInfo_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproService_sendLoadingInfoByEmail_args = function(args) {
  this.iRequest = null;
  if (args) {
    if (args.iRequest !== undefined) {
      this.iRequest = args.iRequest;
    }
  }
};
CamiproService_sendLoadingInfoByEmail_args.prototype = {};
CamiproService_sendLoadingInfoByEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iRequest = new CamiproRequest();
        this.iRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_sendLoadingInfoByEmail_args.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_sendLoadingInfoByEmail_args');
  if (this.iRequest) {
    output.writeFieldBegin('iRequest', Thrift.Type.STRUCT, 1);
    this.iRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproService_sendLoadingInfoByEmail_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CamiproService_sendLoadingInfoByEmail_result.prototype = {};
CamiproService_sendLoadingInfoByEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendMailResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproService_sendLoadingInfoByEmail_result.prototype.write = function(output) {
  output.writeStructBegin('CamiproService_sendLoadingInfoByEmail_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
CamiproServiceClient.prototype = {};
CamiproServiceClient.prototype.getTequilaTokenForCamipro = function(callback) {
  if (callback === undefined) {
    this.send_getTequilaTokenForCamipro();
    return this.recv_getTequilaTokenForCamipro();
  } else {
    var postData = this.send_getTequilaTokenForCamipro(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTequilaTokenForCamipro);
  }
};

CamiproServiceClient.prototype.send_getTequilaTokenForCamipro = function(callback) {
  this.output.writeMessageBegin('getTequilaTokenForCamipro', Thrift.MessageType.CALL, this.seqid);
  var args = new CamiproService_getTequilaTokenForCamipro_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CamiproServiceClient.prototype.recv_getTequilaTokenForCamipro = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CamiproService_getTequilaTokenForCamipro_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTequilaTokenForCamipro failed: unknown result';
};
CamiproServiceClient.prototype.getCamiproSession = function(iTequilaToken, callback) {
  if (callback === undefined) {
    this.send_getCamiproSession(iTequilaToken);
    return this.recv_getCamiproSession();
  } else {
    var postData = this.send_getCamiproSession(iTequilaToken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCamiproSession);
  }
};

CamiproServiceClient.prototype.send_getCamiproSession = function(iTequilaToken, callback) {
  this.output.writeMessageBegin('getCamiproSession', Thrift.MessageType.CALL, this.seqid);
  var args = new CamiproService_getCamiproSession_args();
  args.iTequilaToken = iTequilaToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CamiproServiceClient.prototype.recv_getCamiproSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CamiproService_getCamiproSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getCamiproSession failed: unknown result';
};
CamiproServiceClient.prototype.getBalanceAndTransactions = function(iRequest, callback) {
  if (callback === undefined) {
    this.send_getBalanceAndTransactions(iRequest);
    return this.recv_getBalanceAndTransactions();
  } else {
    var postData = this.send_getBalanceAndTransactions(iRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getBalanceAndTransactions);
  }
};

CamiproServiceClient.prototype.send_getBalanceAndTransactions = function(iRequest, callback) {
  this.output.writeMessageBegin('getBalanceAndTransactions', Thrift.MessageType.CALL, this.seqid);
  var args = new CamiproService_getBalanceAndTransactions_args();
  args.iRequest = iRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CamiproServiceClient.prototype.recv_getBalanceAndTransactions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CamiproService_getBalanceAndTransactions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getBalanceAndTransactions failed: unknown result';
};
CamiproServiceClient.prototype.getStatsAndLoadingInfo = function(iRequest, callback) {
  if (callback === undefined) {
    this.send_getStatsAndLoadingInfo(iRequest);
    return this.recv_getStatsAndLoadingInfo();
  } else {
    var postData = this.send_getStatsAndLoadingInfo(iRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getStatsAndLoadingInfo);
  }
};

CamiproServiceClient.prototype.send_getStatsAndLoadingInfo = function(iRequest, callback) {
  this.output.writeMessageBegin('getStatsAndLoadingInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new CamiproService_getStatsAndLoadingInfo_args();
  args.iRequest = iRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CamiproServiceClient.prototype.recv_getStatsAndLoadingInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CamiproService_getStatsAndLoadingInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStatsAndLoadingInfo failed: unknown result';
};
CamiproServiceClient.prototype.sendLoadingInfoByEmail = function(iRequest, callback) {
  if (callback === undefined) {
    this.send_sendLoadingInfoByEmail(iRequest);
    return this.recv_sendLoadingInfoByEmail();
  } else {
    var postData = this.send_sendLoadingInfoByEmail(iRequest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_sendLoadingInfoByEmail);
  }
};

CamiproServiceClient.prototype.send_sendLoadingInfoByEmail = function(iRequest, callback) {
  this.output.writeMessageBegin('sendLoadingInfoByEmail', Thrift.MessageType.CALL, this.seqid);
  var args = new CamiproService_sendLoadingInfoByEmail_args();
  args.iRequest = iRequest;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CamiproServiceClient.prototype.recv_sendLoadingInfoByEmail = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CamiproService_sendLoadingInfoByEmail_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'sendLoadingInfoByEmail failed: unknown result';
};
