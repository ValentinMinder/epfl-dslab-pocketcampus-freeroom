//
// Autogenerated by Thrift Compiler (0.8.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

CamiproRequest = function(args) {
  this.iSessionId = null;
  this.iLanguage = null;
  if (args) {
    if (args.iSessionId !== undefined) {
      this.iSessionId = args.iSessionId;
    }
    if (args.iLanguage !== undefined) {
      this.iLanguage = args.iLanguage;
    }
  }
};
CamiproRequest.prototype = {};
CamiproRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iSessionId = new SessionId();
        this.iSessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.iLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproRequest.prototype.write = function(output) {
  output.writeStructBegin('CamiproRequest');
  if (this.iSessionId) {
    output.writeFieldBegin('iSessionId', Thrift.Type.STRUCT, 1);
    this.iSessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.iLanguage) {
    output.writeFieldBegin('iLanguage', Thrift.Type.STRING, 2);
    output.writeString(this.iLanguage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CamiproSession = function(args) {
  this.camiproCookie = null;
  if (args) {
    if (args.camiproCookie !== undefined) {
      this.camiproCookie = args.camiproCookie;
    }
  }
};
CamiproSession.prototype = {};
CamiproSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.camiproCookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CamiproSession.prototype.write = function(output) {
  output.writeStructBegin('CamiproSession');
  if (this.camiproCookie) {
    output.writeFieldBegin('camiproCookie', Thrift.Type.STRING, 1);
    output.writeString(this.camiproCookie);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Transaction = function(args) {
  this.iDate = null;
  this.iOperation = null;
  this.iPlace = null;
  this.iAmount = null;
  if (args) {
    if (args.iDate !== undefined) {
      this.iDate = args.iDate;
    }
    if (args.iOperation !== undefined) {
      this.iOperation = args.iOperation;
    }
    if (args.iPlace !== undefined) {
      this.iPlace = args.iPlace;
    }
    if (args.iAmount !== undefined) {
      this.iAmount = args.iAmount;
    }
  }
};
Transaction.prototype = {};
Transaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.iDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.iOperation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.iPlace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.iAmount = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transaction.prototype.write = function(output) {
  output.writeStructBegin('Transaction');
  if (this.iDate) {
    output.writeFieldBegin('iDate', Thrift.Type.STRING, 1);
    output.writeString(this.iDate);
    output.writeFieldEnd();
  }
  if (this.iOperation) {
    output.writeFieldBegin('iOperation', Thrift.Type.STRING, 2);
    output.writeString(this.iOperation);
    output.writeFieldEnd();
  }
  if (this.iPlace) {
    output.writeFieldBegin('iPlace', Thrift.Type.STRING, 3);
    output.writeString(this.iPlace);
    output.writeFieldEnd();
  }
  if (this.iAmount) {
    output.writeFieldBegin('iAmount', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.iAmount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BalanceAndTransactions = function(args) {
  this.iBalance = null;
  this.iTransactions = null;
  this.iDate = null;
  this.iStatus = null;
  if (args) {
    if (args.iBalance !== undefined) {
      this.iBalance = args.iBalance;
    }
    if (args.iTransactions !== undefined) {
      this.iTransactions = args.iTransactions;
    }
    if (args.iDate !== undefined) {
      this.iDate = args.iDate;
    }
    if (args.iStatus !== undefined) {
      this.iStatus = args.iStatus;
    }
  }
};
BalanceAndTransactions.prototype = {};
BalanceAndTransactions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.iBalance = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.iTransactions = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Transaction();
          elem6.read(input);
          this.iTransactions.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.iDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.iStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BalanceAndTransactions.prototype.write = function(output) {
  output.writeStructBegin('BalanceAndTransactions');
  if (this.iBalance) {
    output.writeFieldBegin('iBalance', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.iBalance);
    output.writeFieldEnd();
  }
  if (this.iTransactions) {
    output.writeFieldBegin('iTransactions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.iTransactions.length);
    for (var iter7 in this.iTransactions)
    {
      if (this.iTransactions.hasOwnProperty(iter7))
      {
        iter7 = this.iTransactions[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.iDate) {
    output.writeFieldBegin('iDate', Thrift.Type.STRING, 3);
    output.writeString(this.iDate);
    output.writeFieldEnd();
  }
  if (this.iStatus) {
    output.writeFieldBegin('iStatus', Thrift.Type.I32, 4);
    output.writeI32(this.iStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardStatistics = function(args) {
  this.iTotalPaymentsLastMonth = null;
  this.iTotalPaymentsLastThreeMonths = null;
  if (args) {
    if (args.iTotalPaymentsLastMonth !== undefined) {
      this.iTotalPaymentsLastMonth = args.iTotalPaymentsLastMonth;
    }
    if (args.iTotalPaymentsLastThreeMonths !== undefined) {
      this.iTotalPaymentsLastThreeMonths = args.iTotalPaymentsLastThreeMonths;
    }
  }
};
CardStatistics.prototype = {};
CardStatistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.iTotalPaymentsLastMonth = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.iTotalPaymentsLastThreeMonths = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardStatistics.prototype.write = function(output) {
  output.writeStructBegin('CardStatistics');
  if (this.iTotalPaymentsLastMonth) {
    output.writeFieldBegin('iTotalPaymentsLastMonth', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.iTotalPaymentsLastMonth);
    output.writeFieldEnd();
  }
  if (this.iTotalPaymentsLastThreeMonths) {
    output.writeFieldBegin('iTotalPaymentsLastThreeMonths', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.iTotalPaymentsLastThreeMonths);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CardLoadingWithEbankingInfo = function(args) {
  this.iPaidTo = null;
  this.iAccountNumber = null;
  this.iReferenceNumber = null;
  if (args) {
    if (args.iPaidTo !== undefined) {
      this.iPaidTo = args.iPaidTo;
    }
    if (args.iAccountNumber !== undefined) {
      this.iAccountNumber = args.iAccountNumber;
    }
    if (args.iReferenceNumber !== undefined) {
      this.iReferenceNumber = args.iReferenceNumber;
    }
  }
};
CardLoadingWithEbankingInfo.prototype = {};
CardLoadingWithEbankingInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.iPaidTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.iAccountNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.iReferenceNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardLoadingWithEbankingInfo.prototype.write = function(output) {
  output.writeStructBegin('CardLoadingWithEbankingInfo');
  if (this.iPaidTo) {
    output.writeFieldBegin('iPaidTo', Thrift.Type.STRING, 1);
    output.writeString(this.iPaidTo);
    output.writeFieldEnd();
  }
  if (this.iAccountNumber) {
    output.writeFieldBegin('iAccountNumber', Thrift.Type.STRING, 2);
    output.writeString(this.iAccountNumber);
    output.writeFieldEnd();
  }
  if (this.iReferenceNumber) {
    output.writeFieldBegin('iReferenceNumber', Thrift.Type.STRING, 3);
    output.writeString(this.iReferenceNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatsAndLoadingInfo = function(args) {
  this.iCardStatistics = null;
  this.iCardLoadingWithEbankingInfo = null;
  this.iStatus = null;
  if (args) {
    if (args.iCardStatistics !== undefined) {
      this.iCardStatistics = args.iCardStatistics;
    }
    if (args.iCardLoadingWithEbankingInfo !== undefined) {
      this.iCardLoadingWithEbankingInfo = args.iCardLoadingWithEbankingInfo;
    }
    if (args.iStatus !== undefined) {
      this.iStatus = args.iStatus;
    }
  }
};
StatsAndLoadingInfo.prototype = {};
StatsAndLoadingInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iCardStatistics = new CardStatistics();
        this.iCardStatistics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iCardLoadingWithEbankingInfo = new CardLoadingWithEbankingInfo();
        this.iCardLoadingWithEbankingInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.iStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatsAndLoadingInfo.prototype.write = function(output) {
  output.writeStructBegin('StatsAndLoadingInfo');
  if (this.iCardStatistics) {
    output.writeFieldBegin('iCardStatistics', Thrift.Type.STRUCT, 1);
    this.iCardStatistics.write(output);
    output.writeFieldEnd();
  }
  if (this.iCardLoadingWithEbankingInfo) {
    output.writeFieldBegin('iCardLoadingWithEbankingInfo', Thrift.Type.STRUCT, 2);
    this.iCardLoadingWithEbankingInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.iStatus) {
    output.writeFieldBegin('iStatus', Thrift.Type.I32, 3);
    output.writeI32(this.iStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMailResult = function(args) {
  this.iResultText = null;
  this.iStatus = null;
  if (args) {
    if (args.iResultText !== undefined) {
      this.iResultText = args.iResultText;
    }
    if (args.iStatus !== undefined) {
      this.iStatus = args.iStatus;
    }
  }
};
SendMailResult.prototype = {};
SendMailResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.iResultText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.iStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMailResult.prototype.write = function(output) {
  output.writeStructBegin('SendMailResult');
  if (this.iResultText) {
    output.writeFieldBegin('iResultText', Thrift.Type.STRING, 1);
    output.writeString(this.iResultText);
    output.writeFieldEnd();
  }
  if (this.iStatus) {
    output.writeFieldBegin('iStatus', Thrift.Type.I32, 2);
    output.writeI32(this.iStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

