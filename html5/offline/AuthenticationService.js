//
// Autogenerated by Thrift Compiler (0.8.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

AuthenticationService_startRefresh_args = function(args) {
  this.aTequilaSession = null;
  if (args) {
    if (args.aTequilaSession !== undefined) {
      this.aTequilaSession = args.aTequilaSession;
    }
  }
};
AuthenticationService_startRefresh_args.prototype = {};
AuthenticationService_startRefresh_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aTequilaSession = new TequilaSession();
        this.aTequilaSession.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_startRefresh_args.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_startRefresh_args');
  if (this.aTequilaSession) {
    output.writeFieldBegin('aTequilaSession', Thrift.Type.STRUCT, 1);
    this.aTequilaSession.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationService_startRefresh_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AuthenticationService_startRefresh_result.prototype = {};
AuthenticationService_startRefresh_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_startRefresh_result.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_startRefresh_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationService_stopRefresh_args = function(args) {
  this.aTequilaSession = null;
  if (args) {
    if (args.aTequilaSession !== undefined) {
      this.aTequilaSession = args.aTequilaSession;
    }
  }
};
AuthenticationService_stopRefresh_args.prototype = {};
AuthenticationService_stopRefresh_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aTequilaSession = new TequilaSession();
        this.aTequilaSession.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_stopRefresh_args.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_stopRefresh_args');
  if (this.aTequilaSession) {
    output.writeFieldBegin('aTequilaSession', Thrift.Type.STRUCT, 1);
    this.aTequilaSession.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationService_stopRefresh_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AuthenticationService_stopRefresh_result.prototype = {};
AuthenticationService_stopRefresh_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_stopRefresh_result.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_stopRefresh_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationService_getTequilaKeyForService_args = function(args) {
  this.aService = null;
  if (args) {
    if (args.aService !== undefined) {
      this.aService = args.aService;
    }
  }
};
AuthenticationService_getTequilaKeyForService_args.prototype = {};
AuthenticationService_getTequilaKeyForService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.aService = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_getTequilaKeyForService_args.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_getTequilaKeyForService_args');
  if (this.aService) {
    output.writeFieldBegin('aService', Thrift.Type.I32, 1);
    output.writeI32(this.aService);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationService_getTequilaKeyForService_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AuthenticationService_getTequilaKeyForService_result.prototype = {};
AuthenticationService_getTequilaKeyForService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TequilaKey();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_getTequilaKeyForService_result.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_getTequilaKeyForService_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationService_getSessionIdForService_args = function(args) {
  this.aTequilaKey = null;
  if (args) {
    if (args.aTequilaKey !== undefined) {
      this.aTequilaKey = args.aTequilaKey;
    }
  }
};
AuthenticationService_getSessionIdForService_args.prototype = {};
AuthenticationService_getSessionIdForService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aTequilaKey = new TequilaKey();
        this.aTequilaKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_getSessionIdForService_args.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_getSessionIdForService_args');
  if (this.aTequilaKey) {
    output.writeFieldBegin('aTequilaKey', Thrift.Type.STRUCT, 1);
    this.aTequilaKey.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationService_getSessionIdForService_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AuthenticationService_getSessionIdForService_result.prototype = {};
AuthenticationService_getSessionIdForService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SessionId();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_getSessionIdForService_result.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_getSessionIdForService_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationService_logOutSession_args = function(args) {
  this.aSessionId = null;
  if (args) {
    if (args.aSessionId !== undefined) {
      this.aSessionId = args.aSessionId;
    }
  }
};
AuthenticationService_logOutSession_args.prototype = {};
AuthenticationService_logOutSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aSessionId = new SessionId();
        this.aSessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_logOutSession_args.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_logOutSession_args');
  if (this.aSessionId) {
    output.writeFieldBegin('aSessionId', Thrift.Type.STRUCT, 1);
    this.aSessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationService_logOutSession_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AuthenticationService_logOutSession_result.prototype = {};
AuthenticationService_logOutSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationService_logOutSession_result.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationService_logOutSession_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AuthenticationServiceClient.prototype = {};
AuthenticationServiceClient.prototype.startRefresh = function(aTequilaSession, callback) {
  if (callback === undefined) {
    this.send_startRefresh(aTequilaSession);
    return this.recv_startRefresh();
  } else {
    var postData = this.send_startRefresh(aTequilaSession, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_startRefresh);
  }
};

AuthenticationServiceClient.prototype.send_startRefresh = function(aTequilaSession, callback) {
  this.output.writeMessageBegin('startRefresh', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthenticationService_startRefresh_args();
  args.aTequilaSession = aTequilaSession;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AuthenticationServiceClient.prototype.recv_startRefresh = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthenticationService_startRefresh_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'startRefresh failed: unknown result';
};
AuthenticationServiceClient.prototype.stopRefresh = function(aTequilaSession, callback) {
  if (callback === undefined) {
    this.send_stopRefresh(aTequilaSession);
    return this.recv_stopRefresh();
  } else {
    var postData = this.send_stopRefresh(aTequilaSession, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_stopRefresh);
  }
};

AuthenticationServiceClient.prototype.send_stopRefresh = function(aTequilaSession, callback) {
  this.output.writeMessageBegin('stopRefresh', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthenticationService_stopRefresh_args();
  args.aTequilaSession = aTequilaSession;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AuthenticationServiceClient.prototype.recv_stopRefresh = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthenticationService_stopRefresh_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'stopRefresh failed: unknown result';
};
AuthenticationServiceClient.prototype.getTequilaKeyForService = function(aService, callback) {
  if (callback === undefined) {
    this.send_getTequilaKeyForService(aService);
    return this.recv_getTequilaKeyForService();
  } else {
    var postData = this.send_getTequilaKeyForService(aService, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTequilaKeyForService);
  }
};

AuthenticationServiceClient.prototype.send_getTequilaKeyForService = function(aService, callback) {
  this.output.writeMessageBegin('getTequilaKeyForService', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthenticationService_getTequilaKeyForService_args();
  args.aService = aService;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AuthenticationServiceClient.prototype.recv_getTequilaKeyForService = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthenticationService_getTequilaKeyForService_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTequilaKeyForService failed: unknown result';
};
AuthenticationServiceClient.prototype.getSessionIdForService = function(aTequilaKey, callback) {
  if (callback === undefined) {
    this.send_getSessionIdForService(aTequilaKey);
    return this.recv_getSessionIdForService();
  } else {
    var postData = this.send_getSessionIdForService(aTequilaKey, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSessionIdForService);
  }
};

AuthenticationServiceClient.prototype.send_getSessionIdForService = function(aTequilaKey, callback) {
  this.output.writeMessageBegin('getSessionIdForService', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthenticationService_getSessionIdForService_args();
  args.aTequilaKey = aTequilaKey;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AuthenticationServiceClient.prototype.recv_getSessionIdForService = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthenticationService_getSessionIdForService_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSessionIdForService failed: unknown result';
};
AuthenticationServiceClient.prototype.logOutSession = function(aSessionId, callback) {
  if (callback === undefined) {
    this.send_logOutSession(aSessionId);
    return this.recv_logOutSession();
  } else {
    var postData = this.send_logOutSession(aSessionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_logOutSession);
  }
};

AuthenticationServiceClient.prototype.send_logOutSession = function(aSessionId, callback) {
  this.output.writeMessageBegin('logOutSession', Thrift.MessageType.CALL, this.seqid);
  var args = new AuthenticationService_logOutSession_args();
  args.aSessionId = aSessionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AuthenticationServiceClient.prototype.recv_logOutSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AuthenticationService_logOutSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'logOutSession failed: unknown result';
};
