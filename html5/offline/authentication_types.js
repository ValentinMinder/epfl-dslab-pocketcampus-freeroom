//
// Autogenerated by Thrift Compiler (0.8.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

TypeOfService = {
'SERVICE_POCKETCAMPUS' : 0,
'SERVICE_MOODLE' : 1,
'SERVICE_CAMIPRO' : 2,
'SERVICE_ISA' : 3
};
TequilaSession = function(args) {
  this.tequilaCookie = null;
  if (args) {
    if (args.tequilaCookie !== undefined) {
      this.tequilaCookie = args.tequilaCookie;
    }
  }
};
TequilaSession.prototype = {};
TequilaSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tequilaCookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TequilaSession.prototype.write = function(output) {
  output.writeStructBegin('TequilaSession');
  if (this.tequilaCookie) {
    output.writeFieldBegin('tequilaCookie', Thrift.Type.STRING, 1);
    output.writeString(this.tequilaCookie);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TequilaToken = function(args) {
  this.iTequilaKey = null;
  this.loginCookie = null;
  if (args) {
    if (args.iTequilaKey !== undefined) {
      this.iTequilaKey = args.iTequilaKey;
    }
    if (args.loginCookie !== undefined) {
      this.loginCookie = args.loginCookie;
    }
  }
};
TequilaToken.prototype = {};
TequilaToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.iTequilaKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loginCookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TequilaToken.prototype.write = function(output) {
  output.writeStructBegin('TequilaToken');
  if (this.iTequilaKey) {
    output.writeFieldBegin('iTequilaKey', Thrift.Type.STRING, 1);
    output.writeString(this.iTequilaKey);
    output.writeFieldEnd();
  }
  if (this.loginCookie) {
    output.writeFieldBegin('loginCookie', Thrift.Type.STRING, 2);
    output.writeString(this.loginCookie);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TequilaKey = function(args) {
  this.tos = null;
  this.iTequilaKey = null;
  this.loginCookie = null;
  this.iTequilaKeyForPc = null;
  if (args) {
    if (args.tos !== undefined) {
      this.tos = args.tos;
    }
    if (args.iTequilaKey !== undefined) {
      this.iTequilaKey = args.iTequilaKey;
    }
    if (args.loginCookie !== undefined) {
      this.loginCookie = args.loginCookie;
    }
    if (args.iTequilaKeyForPc !== undefined) {
      this.iTequilaKeyForPc = args.iTequilaKeyForPc;
    }
  }
};
TequilaKey.prototype = {};
TequilaKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tos = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.iTequilaKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.loginCookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.iTequilaKeyForPc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TequilaKey.prototype.write = function(output) {
  output.writeStructBegin('TequilaKey');
  if (this.tos) {
    output.writeFieldBegin('tos', Thrift.Type.I32, 1);
    output.writeI32(this.tos);
    output.writeFieldEnd();
  }
  if (this.iTequilaKey) {
    output.writeFieldBegin('iTequilaKey', Thrift.Type.STRING, 2);
    output.writeString(this.iTequilaKey);
    output.writeFieldEnd();
  }
  if (this.loginCookie) {
    output.writeFieldBegin('loginCookie', Thrift.Type.STRING, 3);
    output.writeString(this.loginCookie);
    output.writeFieldEnd();
  }
  if (this.iTequilaKeyForPc) {
    output.writeFieldBegin('iTequilaKeyForPc', Thrift.Type.STRING, 4);
    output.writeString(this.iTequilaKeyForPc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionId = function(args) {
  this.tos = null;
  this.pocketCampusSessionId = null;
  this.moodleCookie = null;
  this.camiproCookie = null;
  this.isaCookie = null;
  if (args) {
    if (args.tos !== undefined) {
      this.tos = args.tos;
    }
    if (args.pocketCampusSessionId !== undefined) {
      this.pocketCampusSessionId = args.pocketCampusSessionId;
    }
    if (args.moodleCookie !== undefined) {
      this.moodleCookie = args.moodleCookie;
    }
    if (args.camiproCookie !== undefined) {
      this.camiproCookie = args.camiproCookie;
    }
    if (args.isaCookie !== undefined) {
      this.isaCookie = args.isaCookie;
    }
  }
};
SessionId.prototype = {};
SessionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tos = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pocketCampusSessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.moodleCookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.camiproCookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.isaCookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionId.prototype.write = function(output) {
  output.writeStructBegin('SessionId');
  if (this.tos) {
    output.writeFieldBegin('tos', Thrift.Type.I32, 1);
    output.writeI32(this.tos);
    output.writeFieldEnd();
  }
  if (this.pocketCampusSessionId) {
    output.writeFieldBegin('pocketCampusSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.pocketCampusSessionId);
    output.writeFieldEnd();
  }
  if (this.moodleCookie) {
    output.writeFieldBegin('moodleCookie', Thrift.Type.STRING, 3);
    output.writeString(this.moodleCookie);
    output.writeFieldEnd();
  }
  if (this.camiproCookie) {
    output.writeFieldBegin('camiproCookie', Thrift.Type.STRING, 4);
    output.writeString(this.camiproCookie);
    output.writeFieldEnd();
  }
  if (this.isaCookie) {
    output.writeFieldBegin('isaCookie', Thrift.Type.STRING, 5);
    output.writeString(this.isaCookie);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

