// Android properties
def ANDROID_VERSION_CODE = 38
def ANDROID_VERSION_NAME = '3.1'
def ANDROID_SDK_VERSION = 15

// All dependencies and their versions
ext.libs = [
    // slf4j-simple is required because slf4j < 1.6, which Thrift requires, crashes if no logger is present
    thrift: [ 'org.apache.thrift:libthrift:0.9.2', 'org.slf4j:slf4j-simple:1.5.8' ],
    servlet: 'javax.servlet:javax.servlet-api:3.0.1',
    mail: 'javax.mail:mail:1.4.7',
    jetty_server: 'org.eclipse.jetty:jetty-server:8.0.0.M3',
    jetty_servlet: 'org.eclipse.jetty:jetty-servlet:8.0.0.M3',
    mysql_connector: 'mysql:mysql-connector-java:5.1.15',
    joda_time: 'joda-time:joda-time:2.3',
    commons_lang: 'commons-lang:commons-lang:2.6',
    commons_lang3: 'org.apache.commons:commons-lang3:3.0.1',
    commons_io: 'commons-io:commons-io:2.0.1',
    http_mime: 'org.apache.httpcomponents:httpmime:4.3.5',
    gson: 'com.google.code.gson:gson:1.7.1',
    gcm_server: 'com.ganyo:gcm-server:1.0.2',
    javapns: 'com.github.fernandospr:javapns-jdk16:2.2.1',
    unboundid_ldap: 'com.unboundid:unboundid-ldapsdk:2.3.7',

    android_support: 'com.android.support:support-v4:22.0.0',
    play_services_maps: 'com.google.android.gms:play-services-maps:7.0.0',
    universal_image_loader: 'com.nostra13.universalimageloader:universal-image-loader:1.9.3',

    junit: 'junit:junit:4.11'
]

// For OS detection; might break when upgrading Gradle.
import org.gradle.internal.os.OperatingSystem

// Subproject groups
def sharedProjects = subprojects.findAll{ p -> p.name.endsWith('shared') }
def serverProjects = subprojects.findAll{ p -> p.name.endsWith('server') }
def androidProjects = subprojects.findAll{ p -> p.name.endsWith('android') }

// Workaround for the fact that Gradle's copy task doesn't preserve the encoding
def realCopy(File src, File dst) {
    ant.copy(todir: dst, encoding: 'UTF-8', outputEncoding: 'UTF-8') { fileset(dir: src) }
}

// Replaces all occurences of a string with another string, in a smart way, respecting capitalization
def smartReplace(String name, String toReplace, String replacement) {
    return name.replace(toReplace.capitalize(), replacement.capitalize())
               .replace(toReplace.toUpperCase(), replacement.toUpperCase())
               .replace(toReplace.toLowerCase(), replacement.toLowerCase())
}

// Plugin paths
buildscript {
    repositories {
        mavenCentral() 
        jcenter()
    }

    dependencies {
        if( !Boolean.getBoolean('no_server') ) {
            // "Shadow JAR" plugin for all-inclusive JARs
            classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
        }

        if( !Boolean.getBoolean('no_android') ) {
            // Android plugin
            classpath 'com.android.tools.build:gradle:1.1.3'
        }

        // Thrift plugin
        classpath 'co.tomlee.gradle.plugins:gradle-thrift-plugin:0.0.6'
    }
}

configure(sharedProjects) { project ->
    apply plugin: 'java'
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'org.apache.thrift:libthrift:0.9.2'
    }

    if( project.name.startsWith('plugin') ) {
        apply plugin: 'thrift'

        generateThriftSource {
            executable (
                rootDir.path + '/tool/thrift-' +
                    ( OperatingSystem.current().windows ? 'win.exe'
                    : OperatingSystem.current().macOsX ? 'mac'
                    : 'linux')
            )

            generators {
                java {
                    option 'hashcode'
                    option 'private-members'
                    out file('src/main/java')
                }

                cocoa {
                    option 'validate_required'
                    out file(rootDir.path + "/ios/PocketCampus/Plugins/${project.name.split('-')[1].capitalize()}Plugin/Model/ThriftTypes+Services")
                }
            }
        }

        // Only compile Thrift files when it's explicitly requested, not at every build
        compileJava.taskDependencies.values -= 'generateThriftSource'
    }
}

configure(serverProjects) {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile libs.thrift
        // TODO: This should not be needed here, abstract it away
        compile libs.servlet
        testCompile libs.junit
    }
}

configure(androidProjects) { project ->
    if( project.name == 'android' ) {
        if( new File(projectDir, 'src').exists() ) {
            apply plugin: 'com.android.application'
        } else {
            return
        }
    } else if( project.name.startsWith('platform') ) {
        apply plugin: 'com.android.library'
    } else {
        apply plugin: 'com.android.application'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile libs.thrift
        compile libs.android_support
    }

    // Required to avoid dependency conflicts with Android's built-in libs
    configurations {
        all*.exclude module: 'httpclient'
    }

    android {
        compileSdkVersion ANDROID_SDK_VERSION
        buildToolsVersion '22.0.1'

        compileOptions.encoding = 'UTF-8'

        // Workaround for a bug in the Android Gradle plugin
        packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
        }

        if(project.hasProperty('RELEASE_KEYSTORE_FILE')) {
            signingConfigs {
                release {
                    storeFile file(RELEASE_KEYSTORE_FILE)
                    storePassword RELEASE_KEYSTORE_PASSWORD
                    keyAlias RELEASE_KEYSTORE_ALIAS
                    keyPassword RELEASE_KEYSTORE_PASSWORD
                }
            }
        }

        buildTypes {
            if(project.hasProperty('RELEASE_KEYSTORE_FILE')) {
                release {
                    signingConfig signingConfigs.release
                }
            }
        }

        lintOptions {
            // Workaround for the fact that libthrift references javax.* stuff not in Android,
            // which causes a lint error, for functionality we're not using.
            disable 'InvalidPackage'

            // TODO: Remove the need for this!
            abortOnError false
        }
    }
}

// Special task that creates a new plugin from the 'blank' template.
// Pass the new name with -PpluginName=your_plugin_name
task('createPlugin') << {
    def SOURCE_PLUGIN = 'blank'

    if(!project.hasProperty('pluginName')) {
        throw new GradleException('Please set the new plugin name; in the command line, type -PpluginName=your_plugin_name')
    }

    def pluginDir = new File(rootDir, 'plugin')
    def newPluginDir = new File(pluginDir, pluginName.toLowerCase())

    if(newPluginDir.exists()) {
        throw new GradleException('This plugin already exists.')
    }

    newPluginDir.mkdir()
    realCopy(new File(pluginDir, SOURCE_PLUGIN), newPluginDir)

    // Rename all plugin name occurrences in the files
    fileTree(newPluginDir) {
        exclude '**/*.png'
    }.each { file ->      
        file.write(smartReplace(file.getText('UTF-8'), SOURCE_PLUGIN, pluginName), 'UTF-8')
    }

    // Rename files and folders; this can't be done directly in the closure, as paths will change during the operation
    def children = []
    newPluginDir.eachFileRecurse { child -> children << child }
    children.reverse().each { child ->
        child.renameTo(new File(child.parentFile, smartReplace(child.name, SOURCE_PLUGIN, pluginName)))
    }

    println "Done! Don't forget to add the new plugin to settings.gradle."
}

// Special project that merges all server projects into a JAR
// The project may not exist (if the build is passed -Dno_server=true)
configure( subprojects.findAll { it.path == ':server' } ) {
    apply plugin: 'java'
    apply plugin: "com.github.johnrengelman.shadow"

    // Don't create an additional directory, just pretend it's in the root
    buildDir = '../build'

    dependencies {
        serverProjects.findAll{ p -> p.name != 'server' } // avoid a circular reference
                      .each{ p -> compile project("$p.path") }
    }

    shadowJar {
        manifest {
            attributes 'Main-Class': 'org.pocketcampus.platform.server.launcher.ServerLauncher'
        }
    }
}

// Special project that merges all Android projects into one and compiles it, by copying sources
// The project may not exist (if the build is passed -Dno_android=true)
configure( subprojects.findAll { it.path == ':android' } ) {
    task('merge') << {
	// Delete the output directory if necessary, and re-create it
        projectDir.deleteDir()
        projectDir.mkdir()

        // Copy all subprojects' code into the merged project;
        androidProjects.findAll{ p -> p.path != ':android' && p.path != ':platform-android' }.each{ p -> realCopy(p.projectDir, projectDir) }

        // Fix references to R in all files
        fileTree(dir: 'src/main/java').each{ file ->
            file.write(file.getText('UTF-8').replaceAll('import org\\.pocketcampus\\.plugin\\.[a-z]+\\.R;', 'import org.pocketcampus.R;'), 'UTF-8')
        }

        // Create a build.gradle file containing every build.gradle file in the subprojects;
        // references to other Android projects are removed.
        // It is crucial to avoid using '..' in dependencies, otherwise the merged file will make no sense!
        new File(projectDir, 'build.gradle').withWriter('UTF-8') { writer ->
            androidProjects.findAll{ p -> p.name != 'android' }
                           .collect{ p -> new File(p.projectDir, 'build.gradle').getText('UTF-8') }
                           .collect{ text -> text.replaceAll("compile project\\('.*\\:android'\\)", '') }
                           .each{ text -> writer.writeLine text }
        }

        // Start with a simple Android manifest
        def manifestText = """
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="org.pocketcampus"
          android:versionCode="$ANDROID_VERSION_CODE"
          android:versionName="$ANDROID_VERSION_NAME">
    <uses-sdk android:minSdkVersion="$ANDROID_SDK_VERSION" />
    <application android:label="@string/app_name"
                 android:theme="@style/PocketCampusActionBarTheme"
                 android:icon="@drawable/app_icon"
                 android:name="org.pocketcampus.platform.android.core.GlobalContext" />
</manifest>    
"""
        def androidNs = new groovy.xml.Namespace('http://schemas.android.com/apk/res/android', 'android')
        def manifest = new XmlParser().parseText(manifestText)
        def app = manifest.get('application').get(0)

        // Merge all plugin manifests into it
        androidProjects.findAll{ p -> p.path != ':android' && p.path != ':platform-android' }.each{ p ->
            def pluginManifestFile = new File([p.projectDir, 'src', 'main', 'AndroidManifest.xml'].join(File.separator))
            def pluginManifest = new XmlParser().parse(pluginManifestFile)

            // Add everything related to the permissions
            ['permission', 'uses-permission', 'permission-group'].each{ name ->
                pluginManifest.get(name).each{ manifest.append(it) }
            }

            // Add the application children, with special treatment for the dashboard's activity
            def pluginApp = pluginManifest.get('application').get(0)
            pluginApp.children().each{ node ->
                if( node.name() == 'activity' && p.path != ':plugin-dashboard-android' ) {
                    def toRemove = node.'**'.find{ it.attributes()[androidNs.name] == 'android.intent.category.LAUNCHER' }
                    if( toRemove != null ) { toRemove.parent().remove(toRemove) }
                }
                app.append(node)
            }
        }

        // Write that manifest to the source folder
        new File([projectDir, 'src', 'main', 'AndroidManifest.xml'].join(File.separator)).write(groovy.xml.XmlUtil.serialize(manifest), 'UTF-8')
    }
}
